CREATE TABLE "branches" (
  "branch_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
  "branch_name" CHARACTER VARYING(255) NOT NULL,
  "details" text,
  "disabled" smallint DEFAULT  0  ,
 CONSTRAINT "PK_branches" PRIMARY KEY ("branch_id")
) ;

 CREATE TABLE "contracts" (
  "contract_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "customer_id" integer,
  "firm_id" integer,
  "createdon" date NOT NULL,
  "contract_number" CHARACTER VARYING(64) NOT NULL,
  "disabled" smallint DEFAULT  0 ,
  "details"  text NOT NULL,
  CONSTRAINT "PK_contracts" PRIMARY KEY ("contract_id")
)  ;

CREATE TABLE "custitems" (
  "custitem_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" integer NOT NULL,
  "customer_id" integer NOT NULL,
  "quantity" decimal(10,3) DEFAULT NULL,
  "price" decimal(10,2) NOT NULL DEFAULT 0.00,
  "cust_code" CHARACTER VARYING(255) NOT NULL,
  "comment" CHARACTER VARYING(255)  ,
  "updatedon" date NOT NULL,
  CONSTRAINT "PK_custitems" PRIMARY KEY ("custitem_id") 
  
) ;
CREATE INDEX IF NOT EXISTS "IX_custitems_item_id"
ON "custitems" (
  "item_id"
);


CREATE TABLE "customers" (
  "customer_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "customer_name" CHARACTER VARYING(255) DEFAULT NULL,
  "detail" text NOT NULL,
  "email" CHARACTER VARYING(64)  ,
  "phone" CHARACTER VARYING(64)  ,
  "status" smallint  NOT NULL DEFAULT  0 ,
  "city" CHARACTER VARYING(255)  ,
  "leadstatus" CHARACTER VARYING(255)  ,
  "leadsource" CHARACTER VARYING(255)  ,
  "createdon" date  ,
  "country" CHARACTER VARYING(255)  ,
  "passw" CHARACTER VARYING(255)  ,
  CONSTRAINT "PK_customers"  PRIMARY KEY ("customer_id")
)  ;
CREATE TABLE "docstatelog" (
  "log_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "user_id" integer NOT NULL,
  "document_id" integer NOT NULL,
  "docstate" smallint  NOT NULL,
  "createdon" timestamp NOT NULL,
  "hostname" CHARACTER VARYING(64) NOT NULL,
   CONSTRAINT "PK_docstatelog"  PRIMARY KEY ("log_id") 
   
)  ;
 CREATE INDEX IF NOT EXISTS "IX_docstatelog_document_id"
ON "docstatelog" (
  "document_id"
);
CREATE TABLE "users" (
  "user_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "userlogin" CHARACTER VARYING(32) NOT NULL,
  "userpass" CHARACTER VARYING(255) NOT NULL,
  "createdon" date NOT NULL,
  "email" CHARACTER VARYING(255) DEFAULT NULL,
  "acl" text NOT NULL,
  "disabled" smallint NOT NULL DEFAULT  0 ,
  "options" text,
  "role_id" integer DEFAULT NULL,
  "lastactive" timestamp DEFAULT NULL,
  CONSTRAINT "PK_users"  PRIMARY KEY ("user_id")
  
) ;
CREATE UNIQUE INDEX IF NOT EXISTS "IX_users_userlogin"
ON "users" (
  "userlogin"
);

CREATE TABLE "documents" (
  "document_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "document_number" CHARACTER VARYING(45) NOT NULL,
  "document_date" date NOT NULL,
  "user_id" integer NOT NULL,
  "content" text,
  "amount" decimal(11,2) DEFAULT NULL,
  "meta_id" integer NOT NULL,
  "state" smallint NOT NULL,
  "notes" CHARACTER VARYING(255) NOT NULL,
  "customer_id" integer DEFAULT '0',
  "payamount" decimal(11,2) DEFAULT '0.00',
  "payed" decimal(11,2) DEFAULT '0.00',
  "branch_id" integer DEFAULT '0',
  "parent_id" integer DEFAULT '0',
  "firm_id" integer DEFAULT NULL,
  "priority" smallint DEFAULT '100',
  CONSTRAINT "PK_documents"  PRIMARY KEY ("document_id"),
  CONSTRAINT "documents_ibfk_1" FOREIGN KEY ("user_id") REFERENCES "users" ("user_id")
) ;

CREATE INDEX IF NOT EXISTS "IX_documents_document_date"
ON "documents" (
  "document_date"
);
CREATE INDEX IF NOT EXISTS "IX_documents_customer_id"
ON "documents" (
  "customer_id"
);
CREATE INDEX IF NOT EXISTS "IX_documents_user_id"
ON "documents" (
  "user_id"
);
CREATE INDEX IF NOT EXISTS "IX_documents_branch_id"
ON "documents" (
  "branch_id"
);

 CREATE UNIQUE INDEX IF NOT EXISTS "IX_documents_unuqnumber"
ON "documents" (
  "meta_id","document_number","branch_id"
);


CREATE TABLE "items" (
  "item_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "itemname" CHARACTER VARYING(255) DEFAULT NULL,
  "description" text,
  "detail" text NOT NULL,
  "item_code" CHARACTER VARYING(64) DEFAULT NULL,
  "bar_code" CHARACTER VARYING(64) DEFAULT NULL,
  "cat_id" integer NOT NULL,
  "msr" CHARACTER VARYING(64) DEFAULT NULL,
  "disabled" smallint DEFAULT  0 ,
  "minqty" decimal(11,3) DEFAULT  0.000 ,
  "manufacturer" CHARACTER VARYING(355) DEFAULT NULL,
  "item_type" smallint DEFAULT NULL,
  CONSTRAINT "PK_items"  PRIMARY KEY ("item_id") 
   
)  ;

CREATE INDEX IF NOT EXISTS "IX_items_item_code"
ON "items" (
  "item_code"
);
CREATE INDEX IF NOT EXISTS "IX_items_itemname"
ON "items" (
  "itemname"
);
CREATE INDEX IF NOT EXISTS "IX_items_cat_id"
ON "items" (
  "cat_id"
);

CREATE TABLE "stores" (
  "store_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "storename" CHARACTER VARYING(64) DEFAULT NULL,
  "description" CHARACTER VARYING(255) DEFAULT NULL,
  "branch_id" integer DEFAULT  0 ,
  CONSTRAINT "PK_stores"  PRIMARY KEY ("store_id")
)  ;

CREATE TABLE "store_stock" (
  "stock_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" integer NULL,
  "partion" decimal(11,2) DEFAULT NULL,
  "store_id" integer NOT NULL,
  "qty" decimal(11,3) DEFAULT '0.000',
  "snumber" CHARACTER VARYING(64) DEFAULT NULL,
  "sdate" date DEFAULT NULL,
   CONSTRAINT "PK_store_stock"  PRIMARY KEY ("stock_id"),
 
  CONSTRAINT "store_stock_fk" FOREIGN KEY ("store_id") REFERENCES "stores" ("store_id"),
  CONSTRAINT "store_stock_ibfk_1" FOREIGN KEY ("item_id") REFERENCES "items" ("item_id")
)   ;

CREATE INDEX IF NOT EXISTS "IX_store_stock_item_id"
ON "store_stock" (
  "item_id"
);
CREATE INDEX IF NOT EXISTS "IX_store_stock_store_id"
ON "store_stock" (
  "store_id"
);


CREATE TABLE "empacc" (
  "ea_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "emp_id" integer NOT NULL,
  "document_id" integer DEFAULT NULL,
  "optype" integer DEFAULT NULL,
  "notes" CHARACTER VARYING(255) DEFAULT NULL,
  "amount" decimal(10,2) NOT NULL,
  CONSTRAINT "PK_empacc"  PRIMARY KEY ("ea_id") 
 
)  ;

CREATE INDEX IF NOT EXISTS "IX_empacc_emp_id"
ON "empacc" (
  "emp_id"
);

CREATE INDEX IF NOT EXISTS "IX_empacc_document_id"
ON "empacc" (
  "document_id"
);


CREATE TABLE "employees" (
  "employee_id"   integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "login" CHARACTER VARYING(64) DEFAULT NULL,
  "detail" text,
  "disabled" smallint DEFAULT  0 ,
  "emp_name" CHARACTER VARYING(64) NOT NULL,
  "branch_id" integer DEFAULT  0 ,
  CONSTRAINT "PK_employees"  PRIMARY KEY ("employee_id")
)  ;

CREATE TABLE "entrylist" (
  "entry_id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "document_id" integer NOT NULL,
  "quantity" decimal(11,3) DEFAULT '0.000',
  "stock_id" integer DEFAULT NULL,
  "service_id" integer DEFAULT NULL,
  "outprice" decimal(10,2) DEFAULT NULL,
  "tag" integer DEFAULT  0 ,
   CONSTRAINT "PK_entrylist"  PRIMARY KEY ("entry_id"),
   CONSTRAINT "entrylist_ibfk_1" FOREIGN KEY ("document_id") REFERENCES "documents" ("document_id"),
  CONSTRAINT "entrylist_ibfk_2" FOREIGN KEY ("stock_id") REFERENCES "store_stock" ("stock_id")
)  ;
CREATE INDEX IF NOT EXISTS "IX_entrylist_document_id"
ON "entrylist" (
  "document_id"
);
 
 
CREATE OR REPLACE FUNCTION tr() RETURNS TRIGGER AS $$
    BEGIN
 
        IF (TG_OP = 'DELETE') THEN
             IF old.stock_id >0 then
             
              update store_stock set qty=(select  coalesce(sum(quantity),0) from entrylist where stock_id=old.stock_id) where store_stock.stock_id = old.stock_id;

             END IF;            
        RETURN OLD;
 
        ELSIF (TG_OP = 'INSERT') THEN
             IF new.stock_id >0 then
             
              update store_stock set qty=(select  coalesce(sum(quantity),0) from entrylist where stock_id=new.stock_id) where store_stock.stock_id = new.stock_id;

             END IF;            
 
            RETURN NEW;
        END IF;
        RETURN NULL; 
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER  tr
AFTER INSERT   OR DELETE ON entrylist FOR EACH ROW EXECUTE PROCEDURE tr();



CREATE TABLE "equipments" (
  "eq_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "eq_name" CHARACTER VARYING(255) DEFAULT NULL,
  "detail" text,
  "disabled" smallint DEFAULT '0',
  "description" text,
  CONSTRAINT "PK_equipments" PRIMARY KEY ("eq_id")
)   ;


CREATE TABLE "eventlist" (
  "user_id" integer NOT NULL,
  "eventdate" timestamp NOT NULL,
  "title" CHARACTER VARYING(255) NOT NULL,
  "description" text NOT NULL,
  "event_id" integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY ,
  "customer_id" integer NOT NULL,
  "isdone" smallint NOT NULL DEFAULT '0',
  CONSTRAINT "PK_eventlist"  PRIMARY KEY ("event_id") 
  
) ;

CREATE INDEX IF NOT EXISTS "IX_eventlist_user_id"
ON "eventlist" (
  "user_id"
);

CREATE INDEX IF NOT EXISTS "IX_eventlist_customer_id"
ON "eventlist" (
  "customer_id"
);


CREATE TABLE "files" (
  "file_id" integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY ,
  "item_id" integer DEFAULT NULL,
  "filename" CHARACTER VARYING(255) DEFAULT NULL,
  "description" CHARACTER VARYING(255) DEFAULT NULL,
  "item_type" integer NOT NULL,
  "mime" CHARACTER VARYING(16) DEFAULT NULL,
 CONSTRAINT "PK_files"  PRIMARY KEY ("file_id") 
   
)  ;
 
CREATE INDEX IF NOT EXISTS "IX_files_item_id"
ON "files" (
  "item_id"
);

CREATE TABLE "filesdata" (
  "file_id" integer DEFAULT NULL,
  "filedata" bytea
  
) ;

CREATE UNIQUE INDEX IF NOT EXISTS "IX_filesdata_file_id"
ON "filesdata" (
  "file_id"
);

CREATE TABLE "firms" (
  "firm_id" integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "firm_name" CHARACTER VARYING(255) NOT NULL,
  "details" text NOT NULL,
  "disabled" smallint NOT NULL DEFAULT  0 ,
 CONSTRAINT "PK_firms"  PRIMARY KEY ("firm_id")
) ;

CREATE TABLE "images" (
  "image_id" integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "content" bytea  ,
  "mime" CHARACTER VARYING(16) DEFAULT NULL,
  "thumb" bytea,
 CONSTRAINT "PK_images"  PRIMARY KEY ("image_id")
)  ;



CREATE TABLE "iostate" (
  "id" integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "document_id" integer NOT NULL,
  "iotype" smallint  NOT NULL,
  "amount" decimal(10,2) NOT NULL,
 CONSTRAINT "PK_iostate"  PRIMARY KEY ("id")
   
)    ;
CREATE INDEX IF NOT EXISTS "IX_iostate_document_id"
ON "iostate" (
  "document_id"
);

CREATE TABLE "issue_history" (
  "hist_id" bigint NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "issue_id" int  NOT NULL,
  "createdon" date NOT NULL,
  "user_id" int  NOT NULL,
  "description" CHARACTER VARYING(255) NOT NULL,
  CONSTRAINT "PK_issue_history"  PRIMARY KEY ("hist_id")
  
)  ;

CREATE INDEX IF NOT EXISTS "IX_issue_history_issue_id"
ON "issue_history" (
  "issue_id"
);

CREATE TABLE "issue_issuelist" (
  "issue_id" int  NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "issue_name" CHARACTER VARYING(255) NOT NULL,
  "details" text NOT NULL,
  "status" smallint  NOT NULL,
  "priority" smallint  NOT NULL,
  "user_id" int  NULL,
  "lastupdate" timestamp DEFAULT NULL,
  "project_id" int  NOT NULL,
   CONSTRAINT "PK_issue_issuelist"  PRIMARY KEY ("issue_id") 
  
)   ;

CREATE INDEX IF NOT EXISTS "IX_issue_issuelist_project_id"
ON "issue_issuelist" (
  "project_id"
);
CREATE INDEX IF NOT EXISTS "IX_issue_issuelist_user_id"
ON "issue_issuelist" (
  "user_id"
);

CREATE TABLE "issue_projectacc" (
  "id" int  NOT NULL  GENERATED BY DEFAULT AS IDENTITY,
  "project_id" int  NOT NULL,
  "user_id" int  NOT NULL,
   CONSTRAINT "PK_issue_projectacc"  PRIMARY KEY ("id")
) ;

CREATE TABLE "issue_projectlist" (
  "project_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "project_name" CHARACTER VARYING(255) NOT NULL,
  "details" text NOT NULL,
  "customer_id" int  DEFAULT NULL,
  "status" smallint  DEFAULT NULL,
  CONSTRAINT "PK_issue_projectlist"  PRIMARY KEY ("project_id")
) ;

CREATE TABLE "issue_time" (
  "id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "issue_id" int  NOT NULL,
  "createdon" timestamp NOT NULL,
  "user_id" int NOT NULL,
  "duration" decimal(10,2) DEFAULT NULL,
  "notes" CHARACTER VARYING(255) DEFAULT NULL,
 CONSTRAINT "PK_issue_time"   PRIMARY KEY ("id")
  
)  ;
CREATE INDEX IF NOT EXISTS "IX_issue_time_issue_id"
ON "issue_time" (
  "issue_id"
);

CREATE TABLE "item_cat" (
  "cat_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "cat_name" CHARACTER VARYING(255) NOT NULL,
  "detail" text,
  "parent_id" int  DEFAULT  0 ,
 CONSTRAINT "PK_item_cat"   PRIMARY KEY ("cat_id")
)  ;

CREATE TABLE "item_set" (
  "set_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" int DEFAULT 0,
  "pitem_id" int  DEFAULT  0 ,
  "qty" decimal(11,3) DEFAULT  0.000 ,
 CONSTRAINT "PK_item_set"  PRIMARY KEY ("set_id")
)   ;

CREATE TABLE "messages" (
  "message_id" bigint    NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "user_id" int  DEFAULT NULL,
  "created" timestamp DEFAULT NULL,
  "message" text,
  "item_id" int NOT NULL,
  "item_type" int DEFAULT NULL,
  CONSTRAINT "PK_messages" PRIMARY KEY ("message_id")
  
)  ;


CREATE INDEX IF NOT EXISTS "IX_messages_item_id"
ON "messages" (
  "item_id"
);

CREATE TABLE "metadata" (
  "meta_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "meta_type" smallint NOT NULL,
  "description" CHARACTER VARYING(255) DEFAULT NULL,
  "meta_name" CHARACTER VARYING(255) NOT NULL,
  "menugroup" CHARACTER VARYING(255) DEFAULT NULL,
  "disabled" smallint NOT NULL,
 CONSTRAINT "PK_metadata"  PRIMARY KEY ("meta_id")
) ;


CREATE TABLE "mfund" (
  "mf_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "mf_name" CHARACTER VARYING(255) NOT NULL,
  "description" CHARACTER VARYING(255) DEFAULT NULL,
  "branch_id" int  DEFAULT  0 ,
  "detail" text,
 CONSTRAINT "PK_mfund"  PRIMARY KEY ("mf_id")
) ;


CREATE TABLE "note_fav" (
  "fav_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "topic_id" int  NOT NULL,
  "user_id" int  NOT NULL,
  CONSTRAINT "PK_note_fav"  PRIMARY KEY ("fav_id")
) ;

CREATE TABLE "note_nodes" (
  "node_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "pid" int  NOT NULL,
  "title" CHARACTER VARYING(50) NOT NULL,
  "mpath" CHARACTER VARYING(255)   NOT NULL,
  "user_id" int  DEFAULT NULL,
  "ispublic" smallint DEFAULT  0 ,
 CONSTRAINT "PK_note_nodes" PRIMARY KEY ("node_id") 
  
)  ;

CREATE INDEX IF NOT EXISTS "IX_note_nodes_user_id"
ON "note_nodes" (
  "user_id"
);


CREATE TABLE "note_tags" (
  "tag_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "topic_id" int  NOT NULL,
  "tagvalue" CHARACTER VARYING(255) NOT NULL,
  CONSTRAINT "PK_note_tags"  PRIMARY KEY ("tag_id")
  
)  ;
CREATE INDEX IF NOT EXISTS "IX_note_tags_topic_id"
ON "note_tags" (
  "topic_id"
);


CREATE TABLE "note_topicnode" (
  "topic_id" int  NOT NULL  ,
  "node_id" int  NOT NULL,
  "tn_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
 CONSTRAINT "PK_note_topicnode" PRIMARY KEY ("tn_id")
) ;
CREATE INDEX IF NOT EXISTS "IX_note_topicnode_topic_id"
ON "note_topicnode" (
  "topic_id"
);
CREATE INDEX IF NOT EXISTS "IX_note_topicnode_node_id"
ON "note_topicnode" (
  "node_id"
);


CREATE TABLE "note_topics" (
  "topic_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "title" CHARACTER VARYING(255) NOT NULL,
  "content" text NOT NULL,
  "acctype" smallint  DEFAULT  0 ,
  "user_id" int  NOT NULL,
 CONSTRAINT "PK_note_topics" PRIMARY KEY ("topic_id")
) ;

CREATE TABLE "notifies" (
  "notify_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "user_id" int  NULL,
  "dateshow" timestamp NOT NULL,
  "checked" smallint NOT NULL DEFAULT  0 ,
  "message" text,
  "sender_id" int  DEFAULT NULL,
  CONSTRAINT "PK_notifies" PRIMARY KEY ("notify_id")
  
) ;

CREATE INDEX IF NOT EXISTS "IX_notifies_user_id"
ON "notifies" (
  "user_id"
);

CREATE TABLE "options" (
  "optname" CHARACTER VARYING(64) NOT NULL,
  "optvalue" text NOT NULL
  
)  ;

CREATE UNIQUE INDEX IF NOT EXISTS "IX_options_optname"
ON "options" (
  "optname"
);

CREATE TABLE "parealist" (
  "pa_id" int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "pa_name" CHARACTER VARYING(255) NOT NULL,
   CONSTRAINT "PK_parealist"  PRIMARY KEY ("pa_id")
) ;


CREATE TABLE "paylist" (
  "pl_id" bigint  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "document_id" int  NOT NULL,
  "amount" decimal(11,2) NOT NULL,
  "mf_id" int  DEFAULT NULL,
  "notes" CHARACTER VARYING(255) DEFAULT NULL,
  "paydate" timestamp DEFAULT NULL,
  "user_id" int  NOT NULL,
  "paytype" smallint  NOT NULL,
  "detail" text,
  "bonus" int  DEFAULT NULL,
  "opertype" CHARACTER VARYING(255) DEFAULT NULL,
   CONSTRAINT "PK_paylist"   PRIMARY KEY ("pl_id"),
    CONSTRAINT "paylist_ibfk_1" FOREIGN KEY ("document_id") REFERENCES "documents" ("document_id")
) ;


CREATE   INDEX IF NOT EXISTS "IX_paylist_document_id"
ON "paylist" (
  "document_id"
);

CREATE TABLE "poslist" (
  "pos_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "pos_name" CHARACTER VARYING(255) NOT NULL,
  "details" text NOT NULL,
  "branch_id" int DEFAULT  0 ,
   CONSTRAINT "PK_poslist"    PRIMARY KEY ("pos_id")
) ;

CREATE TABLE "ppo_zformrep" (
  "id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "createdon" date NOT NULL,
  "fnpos" CHARACTER VARYING(255) NOT NULL,
  "fndoc" CHARACTER VARYING(255) NOT NULL,
  "amount" decimal(10,2) NOT NULL,
  "cnt" smallint  NOT NULL,
  "ramount" decimal(10,2) NOT NULL,
  "rcnt" smallint  NOT NULL,
  "sentxml" text NOT NULL,
  "taxanswer" bytea NOT NULL,
    CONSTRAINT "PK_ppo_zformrep"   PRIMARY KEY ("id")
)  ;

CREATE TABLE "ppo_zformstat" (
  "zf_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "pos_id" int NOT NULL,
  "checktype" int NOT NULL,
  "createdon" timestamp NOT NULL,
  "amount0" decimal(10,2) NOT NULL,
  "amount1" decimal(10,2) NOT NULL,
  "amount2" decimal(10,2) NOT NULL,
  "amount3" decimal(10,2) NOT NULL,
  "tag" int DEFAULT  0 ,
  "document_number" CHARACTER VARYING(255) DEFAULT NULL,
    CONSTRAINT "PK_ppo_zformstat"   PRIMARY KEY ("zf_id")
) ;


CREATE TABLE "prodproc" (
  "pp_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "procname" CHARACTER VARYING(255) NOT NULL,
  "basedoc" CHARACTER VARYING(255) DEFAULT NULL,
  "snumber" CHARACTER VARYING(255) DEFAULT NULL,
  "state" smallint  DEFAULT  0 ,
  "detail" text,
    CONSTRAINT "PK_prodproc"   PRIMARY KEY ("pp_id")
) ;

CREATE TABLE "prodstage" (
  "st_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "pp_id" int NOT NULL,
  "pa_id" int NOT NULL,
  "state" smallint  NOT NULL,
  "stagename" CHARACTER VARYING(255) NOT NULL,
  "detail" text,
   CONSTRAINT "PK_prodstage"    PRIMARY KEY ("st_id")
  
) ;
CREATE   INDEX IF NOT EXISTS "IX_prodstage_pp_id"
ON "prodstage" (
  "pp_id"
);
CREATE TABLE "prodstageagenda" (
  "sta_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "st_id" int NOT NULL,
  "startdate" timestamptz  NOT NULL,
  "enddate" timestamptz  NOT NULL,
    CONSTRAINT "PK_prodstageagenda"   PRIMARY KEY ("sta_id")
  
) ;

CREATE   INDEX IF NOT EXISTS "IX_prodstageagenda_st_id"
ON "prodstageagenda" (
  "st_id"
);


CREATE TABLE "roles" (
  "role_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "rolename" CHARACTER VARYING(255) DEFAULT NULL,
  "acl" text,
    CONSTRAINT "PK_roles"   PRIMARY KEY ("role_id")
) ;

CREATE TABLE "saltypes" (
  "st_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "salcode" int NOT NULL,
  "salname" CHARACTER VARYING(255) NOT NULL,
  "salshortname" CHARACTER VARYING(255) DEFAULT NULL,
  "disabled"  smallint NOT NULL DEFAULT  0 ,
    CONSTRAINT "PK_saltypes"   PRIMARY KEY ("st_id")
)  ;

CREATE TABLE "services" (
  "service_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "service_name" CHARACTER VARYING(255) NOT NULL,
  "detail" text,
  "disabled" smallint DEFAULT '0',
  "category" CHARACTER VARYING(255) DEFAULT NULL,
    CONSTRAINT "PK_services"   PRIMARY KEY ("service_id")
) ;



CREATE TABLE "shop_attributes" (
  "attribute_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "attributename" CHARACTER VARYING(64) NOT NULL,
  "cat_id" int NOT NULL,
  "attributetype" smallint NOT NULL,
  "valueslist" text,
  CONSTRAINT "PK_shop_attributes"   PRIMARY KEY ("attribute_id")
) ;

CREATE TABLE "shop_attributes_order" (
  "order_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "attr_id" int NOT NULL,
  "pg_id" int NOT NULL,
  "ordern" int NOT NULL,
  CONSTRAINT "PK_shop_attributes_order"   PRIMARY KEY ("order_id")
) ;

CREATE TABLE "shop_attributevalues" (
  "attributevalue_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "attribute_id" int NOT NULL,
  "item_id" int NOT NULL,
  "attributevalue" CHARACTER VARYING(255) NOT NULL,
  CONSTRAINT "PK_shop_attributevalues"   PRIMARY KEY ("attributevalue_id")
  
) ;
CREATE   INDEX IF NOT EXISTS "IX_shop_attributevalues_attribute_id"
ON "shop_attributevalues" (
  "attribute_id"
);

CREATE TABLE "shop_prod_comments" (
  "comment_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" int NOT NULL,
  "author" CHARACTER VARYING(64) NOT NULL,
  "comment" text NOT NULL,
  "created" timestamp NOT NULL  ,
  "rating" smallint NOT NULL DEFAULT '0',
  "moderated" smallint NOT NULL DEFAULT '0',
  CONSTRAINT "PK_shop_prod_comments"   PRIMARY KEY ("comment_id")
  
) ;
CREATE   INDEX IF NOT EXISTS "IX_shop_prod_comments_item_id"
ON "shop_prod_comments" (
  "item_id"
);

CREATE TABLE "shop_varitems" (
  "varitem_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "var_id" int NOT NULL,
  "item_id" int NOT NULL,
 CONSTRAINT "PK_shop_varitems"    PRIMARY KEY ("varitem_id")
  
  
);
CREATE   INDEX IF NOT EXISTS "IX_shop_varitems_item_id"
ON "shop_varitems" (
  "item_id"
);
CREATE   INDEX IF NOT EXISTS "IX_shop_varitems_var_id"
ON "shop_varitems" (
  "var_id"
);

CREATE TABLE "shop_vars" (
  "var_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "attr_id" int NOT NULL,
  "varname" CHARACTER VARYING(255) DEFAULT NULL,
  CONSTRAINT "PK_shop_vars"   PRIMARY KEY ("var_id")
)  ;

 


CREATE TABLE "store_stock" (
  "stock_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" int NOT NULL,
  "partion" decimal(11,2) DEFAULT NULL,
  "store_id" int NOT NULL,
  "qty" decimal(11,3) DEFAULT  0.000 ,
  "snumber" CHARACTER VARYING(64) DEFAULT NULL,
  "sdate" date DEFAULT NULL,
 CONSTRAINT "PK_store_stock"   PRIMARY KEY ("stock_id"),
  CONSTRAINT "store_stock_fk" FOREIGN KEY ("store_id") REFERENCES "stores" ("store_id"),
  CONSTRAINT "store_stock_ibfk_1" FOREIGN KEY ("item_id") REFERENCES "items" ("item_id")
)
CREATE   INDEX IF NOT EXISTS "IX_store_stock_item_id"
ON "store_stock" (
  "item_id"
);
CREATE   INDEX IF NOT EXISTS "IX_store_stock_store_id"
ON "store_stock" (
  "store_id"
);

 
 




CREATE TABLE "subscribes" (
  "sub_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "sub_type" int DEFAULT NULL,
  "reciever_type" int DEFAULT NULL,
  "msg_type" int DEFAULT NULL,
  "msgtext" text,
  "detail" text,
  "disabled" int  DEFAULT  0 ,
CONSTRAINT "PK_subscribes"    PRIMARY KEY ("sub_id")
)   ;

CREATE TABLE "supitems" (
  "supitem_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "item_id" int NOT NULL,
  "sup_id" int NOT NULL,
  "quantity" decimal(10,3) NOT NULL,
  "price" decimal(10,2) NOT NULL,
  "sup_code" CHARACTER VARYING(255) DEFAULT NULL,
  "comment" CHARACTER VARYING(255) DEFAULT NULL,
 CONSTRAINT "PK_supitems"   PRIMARY KEY ("supitem_id")
)   ;
CREATE TABLE "timesheet" (
  "time_id" int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "emp_id" int NOT NULL,
  "description" CHARACTER VARYING(255) DEFAULT NULL,
  "t_start" timestamp DEFAULT NULL,
  "t_end" timestamp DEFAULT NULL,
  "t_type" int DEFAULT  0 ,
  "t_break" smallint  DEFAULT  0 ,
  "branch_id" int DEFAULT NULL,
  CONSTRAINT "PK_timesheet"   PRIMARY KEY ("time_id") 
   
)   ;

CREATE   INDEX IF NOT EXISTS "IX_timesheet_emp_id"
ON "timesheet" (
  "emp_id"
);

 

CREATE 
  
VIEW users_view
AS
    SELECT
      "users"."user_id" AS "user_id",
      "users"."userlogin" AS "userlogin",
      "users"."userpass" AS "userpass",
      "users"."createdon" AS "createdon",
      "users"."email" AS "email",
      "users"."acl" AS "acl",
      "users"."options" AS "options",
      "users"."disabled" AS "disabled",
      "users"."lastactive" AS "lastactive",
      "roles"."rolename" AS "rolename",
      "users"."role_id" AS "role_id",
      "roles"."acl" AS "roleacl",
      COALESCE("employees"."employee_id", 0) AS "employee_id",
      (CASE WHEN   "employees"."emp_name" is null THEN "users"."userlogin" ELSE "employees"."emp_name" END) AS "username"
    FROM (("users"
      LEFT JOIN "employees"
        ON ((("users"."userlogin" = "employees"."login")
        AND ("employees"."disabled" <> 1))))
      LEFT JOIN "roles"
        ON (("users"."role_id" = "roles"."role_id")));
        
        
CREATE 
  
VIEW documents_view
AS
    SELECT
      "d"."document_id" AS "document_id",
      "d"."document_number" AS "document_number",
      "d"."document_date" AS "document_date",
      "d"."user_id" AS "user_id",
      "d"."content" AS "content",
      "d"."amount" AS "amount",
      "d"."meta_id" AS "meta_id",
      "u"."username" AS "username",
      "c"."customer_id" AS "customer_id",
      "c"."customer_name" AS "customer_name",
      "d"."state" AS "state",
      "d"."notes" AS "notes",
      "d"."payamount" AS "payamount",
      "d"."payed" AS "payed",
      "d"."parent_id" AS "parent_id",
      "d"."branch_id" AS "branch_id",
      "b"."branch_name" AS "branch_name",
      "d"."firm_id" AS "firm_id",
      "d"."priority" AS "priority",
      "f"."firm_name" AS "firm_name",
      "metadata"."meta_name" AS "meta_name",
      "metadata"."description" AS "meta_desc"
    FROM ((((("documents" "d"
      LEFT JOIN "users_view" "u"
        ON (("d"."user_id" = "u"."user_id")))
      LEFT JOIN "customers" "c"
        ON (("d"."customer_id" = "c"."customer_id")))
      JOIN "metadata"
        ON (("metadata"."meta_id" = "d"."meta_id")))
      LEFT JOIN "branches" "b"
        ON (("d"."branch_id" = "b"."branch_id")))
      LEFT JOIN "firms" "f"
        ON (("d"."firm_id" = "f"."firm_id")));
        
        
CREATE VIEW contracts_view
AS
    SELECT
      "co"."contract_id" AS "contract_id",
      "co"."customer_id" AS "customer_id",
      "co"."firm_id" AS "firm_id",
      "co"."createdon" AS "createdon",
      "co"."contract_number" AS "contract_number",
      "co"."disabled" AS "disabled",
      "co"."details" AS "details",
      "cu"."customer_name" AS "customer_name",
      "f"."firm_name" AS "firm_name"
    FROM (("contracts" "co"
      JOIN "customers" "cu"
        ON (("co"."customer_id" = "cu"."customer_id")))
      LEFT JOIN "firms" "f"
        ON (("co"."firm_id" = "f"."firm_id")));
 
 CREATE VIEW   custitems_view
AS
    SELECT
      "s"."custitem_id" AS "custitem_id",
      "s"."item_id" AS "item_id",
      "s"."customer_id" AS "customer_id",
      "s"."quantity" AS "quantity",
      "s"."price" AS "price",
      "s"."updatedon" AS "updatedon",
      "s"."cust_code" AS "cust_code",
      "s"."comment" AS "comment",
      "i"."itemname" AS "itemname",
      "i"."cat_id" AS "cat_id",
      "i"."item_code" AS "item_code",
      "i"."detail" AS "detail",
      "c"."customer_name" AS "customer_name"
    FROM (("custitems" "s"
      JOIN "items" "i"
        ON (("s"."item_id" = "i"."item_id")))
      JOIN "customers" "c"
        ON (("s"."customer_id" = "c"."customer_id")))
    WHERE (("i"."disabled" <> 1)
    AND ("c"."status" <> 1));
    
 CREATE VIEW customers_view
AS
    SELECT
      "customers"."customer_id" AS "customer_id",
      "customers"."customer_name" AS "customer_name",
      "customers"."detail" AS "detail",
      "customers"."email" AS "email",
      "customers"."phone" AS "phone",
      "customers"."status" AS "status",
      "customers"."city" AS "city",
      "customers"."leadsource" AS "leadsource",
      "customers"."leadstatus" AS "leadstatus",
      "customers"."country" AS "country",
      "customers"."passw" AS "passw",
      (SELECT
          COUNT(0)
        FROM "messages" "m"
        WHERE (("m"."item_id" = "customers"."customer_id")
        AND ("m"."item_type" = 2))) AS "mcnt",
      (SELECT
          COUNT(0)
        FROM "files" "f"
        WHERE (("f"."item_id" = "customers"."customer_id")
        AND ("f"."item_type" = 2))) AS "fcnt",
      (SELECT
          COUNT(0)
        FROM "eventlist" "e"
        WHERE (("e"."customer_id" = "customers"."customer_id")
        AND ("e"."eventdate" >= NOW()))) AS "ecnt"
    FROM "customers";
    
    
CREATE 
  
VIEW docstatelog_view
AS
    SELECT
      "dl"."log_id" AS "log_id",
      "dl"."user_id" AS "user_id",
      "dl"."document_id" AS "document_id",
      "dl"."docstate" AS "docstate",
      "dl"."createdon" AS "createdon",
      "dl"."hostname" AS "hostname",
      "u"."username" AS "username",
      "d"."document_number" AS "document_number",
      "d"."meta_desc" AS "meta_desc",
      "d"."meta_name" AS "meta_name"
    FROM (("docstatelog" "dl"
      JOIN "users_view" "u"
        ON (("dl"."user_id" = "u"."user_id")))
      JOIN "documents_view" "d"
        ON (("d"."document_id" = "dl"."document_id")));


        
CREATE 
  
VIEW empacc_view
AS
    SELECT
      "e"."ea_id" AS "ea_id",
      "e"."emp_id" AS "emp_id",
      "e"."document_id" AS "document_id",
      "e"."optype" AS "optype",
      "e"."notes" AS "notes",
      "e"."amount" AS "amount",
      "d"."document_date" AS "document_date",
      "d"."document_number" AS "document_number",
      "em"."emp_name" AS "emp_name"
    FROM (("empacc" "e"
      JOIN "documents" "d"
        ON (("d"."document_id" = "e"."document_id")))
      JOIN "employees" "em"
        ON (("em"."employee_id" = "e"."emp_id")));
        
CREATE 
  
VIEW entrylist_view
AS
    SELECT
      "entrylist"."entry_id" AS "entry_id",
      "entrylist"."document_id" AS "document_id",
      "entrylist"."quantity" AS "quantity",
      "documents"."customer_id" AS "customer_id",
      "entrylist"."stock_id" AS "stock_id",
      "entrylist"."service_id" AS "service_id",
      "entrylist"."tag" AS "tag",
      "store_stock"."item_id" AS "item_id",
      "store_stock"."partion" AS "partion",
      "documents"."document_date" AS "document_date",
      "entrylist"."outprice" AS "outprice"
    FROM (("entrylist"
      LEFT JOIN "store_stock"
        ON (("entrylist"."stock_id" = "store_stock"."stock_id")))
      JOIN "documents"
        ON (("entrylist"."document_id" = "documents"."document_id")));
        
 CREATE 
  
VIEW eventlist_view
AS
    SELECT
      "e"."user_id" AS "user_id",
      "e"."eventdate" AS "eventdate",
      "e"."title" AS "title",
      "e"."description" AS "description",
      "e"."event_id" AS "event_id",
      "e"."customer_id" AS "customer_id",
      "e"."isdone" AS "isdone",
      "c"."customer_name" AS "customer_name"
    FROM ("eventlist" "e"
      LEFT JOIN "customers" "c"
        ON (("e"."customer_id" = "c"."customer_id")));                               

        
CREATE 
  
VIEW iostate_view
AS
    SELECT
      "s"."id" AS "id",
      "s"."document_id" AS "document_id",
      "s"."iotype" AS "iotype",
      "s"."amount" AS "amount",
      "d"."document_date" AS "document_date",
      "d"."branch_id" AS "branch_id"
    FROM ("iostate" "s"
      JOIN "documents" "d"
        ON (("s"."document_id" = "d"."document_id")));        

CREATE 
  
VIEW issue_issuelist_view
AS
    SELECT
      "i"."issue_id" AS "issue_id",
      "i"."issue_name" AS "issue_name",
      "i"."details" AS "details",
      "i"."status" AS "status",
      "i"."priority" AS "priority",
      "i"."user_id" AS "user_id",
      "i"."lastupdate" AS "lastupdate",
      "i"."project_id" AS "project_id",
      "u"."username" AS "username",
      "p"."project_name" AS "project_name"
    FROM (("issue_issuelist" "i"
      LEFT JOIN "users_view" "u"
        ON (("i"."user_id" = "u"."user_id")))
      JOIN "issue_projectlist" "p"
        ON (("i"."project_id" = "p"."project_id")));        
        
CREATE 
  
VIEW issue_time_view
AS
    SELECT
      "t"."id" AS "id",
      "t"."issue_id" AS "issue_id",
      "t"."createdon" AS "createdon",
      "t"."user_id" AS "user_id",
      "t"."duration" AS "duration",
      "t"."notes" AS "notes",
      "u"."username" AS "username",
      "i"."issue_name" AS "issue_name",
      "i"."project_id" AS "project_id",
      "i"."project_name" AS "project_name"
    FROM (("issue_time" "t"
      JOIN "users_view" "u"
        ON (("t"."user_id" = "u"."user_id")))
      JOIN "issue_issuelist_view" "i"
        ON (("t"."issue_id" = "i"."issue_id")));
        
        
        
CREATE 
 
VIEW  issue_projectlist_view
AS
    SELECT
      "p"."project_id" AS "project_id",
      "p"."project_name" AS "project_name",
      "p"."details" AS "details",
      "p"."customer_id" AS "customer_id",
      "p"."status" AS "status",
      "c"."customer_name" AS "customer_name",
      (SELECT
          COALESCE(SUM((CASE WHEN ("i"."status" = 0) THEN 1 ELSE 0 END)), 0)
        FROM "issue_issuelist" "i"
        WHERE ("i"."project_id" = "p"."project_id")) AS "inew",
      (SELECT
          COALESCE(SUM((CASE WHEN ("i"."status" > 1) THEN 1 ELSE 0 END)), 0)
        FROM "issue_issuelist" "i"
        WHERE ("i"."project_id" = "p"."project_id")) AS "iproc",
      (SELECT
          COALESCE(SUM((CASE WHEN ("i"."status" = 1) THEN 1 ELSE 0 END)), 0)
        FROM "issue_issuelist" "i"
        WHERE ("i"."project_id" = "p"."project_id")) AS "iclose"
    FROM ("issue_projectlist" "p"
      LEFT JOIN "customers" "c"
        ON (("p"."customer_id" = "c"."customer_id")));        
        
        
CREATE 
  
VIEW items_view
AS
    SELECT
      "items"."item_id" AS "item_id",
      "items"."itemname" AS "itemname",
      "items"."description" AS "description",
      "items"."detail" AS "detail",
      "items"."item_code" AS "item_code",
      "items"."bar_code" AS "bar_code",
      "items"."cat_id" AS "cat_id",
      "items"."msr" AS "msr",
      "items"."disabled" AS "disabled",
      "items"."minqty" AS "minqty",
      "items"."item_type" AS "item_type",
      "items"."manufacturer" AS "manufacturer",
      "item_cat"."cat_name" AS "cat_name"
    FROM ("items"
      LEFT JOIN "item_cat"
        ON (("items"."cat_id" = "item_cat"."cat_id")));                

        CREATE 
  
VIEW item_set_view
AS
    SELECT
      "item_set"."set_id" AS "set_id",
      "item_set"."item_id" AS "item_id",
      "item_set"."pitem_id" AS "pitem_id",
      "item_set"."qty" AS "qty",
      "items"."itemname" AS "itemname",
      "items"."item_code" AS "item_code"
    FROM ("item_set"
      JOIN "items"
        ON (("item_set"."item_id" = "items"."item_id")));
        
CREATE 
  
VIEW messages_view
AS
    SELECT
      "messages"."message_id" AS "message_id",
      "messages"."user_id" AS "user_id",
      "messages"."created" AS "created",
      "messages"."message" AS "message",
      "messages"."item_id" AS "item_id",
      "messages"."item_type" AS "item_type",
      "users_view"."username" AS "username"
    FROM ("messages"
      JOIN "users_view"
        ON (("messages"."user_id" = "users_view"."user_id")));
                        
CREATE 
  
VIEW note_nodesview
AS
    SELECT
      "note_nodes"."node_id" AS "node_id",
      "note_nodes"."pid" AS "pid",
      "note_nodes"."title" AS "title",
      "note_nodes"."mpath" AS "mpath",
      "note_nodes"."user_id" AS "user_id",
      "note_nodes"."ispublic" AS "ispublic",
      (SELECT
          COUNT("note_topicnode"."topic_id") AS "Count(topic_id)"
        FROM "note_topicnode"
        WHERE ("note_topicnode"."node_id" = "note_nodes"."node_id")) AS "tcnt"
    FROM "note_nodes";
    
 CREATE 
  
VIEW note_topicnodeview
AS
    SELECT
      "note_topicnode"."topic_id" AS "topic_id",
      "note_topicnode"."node_id" AS "node_id",
      "note_topicnode"."tn_id" AS "tn_id",
      "note_topics"."title" AS "title",
      "note_nodes"."user_id" AS "user_id",
      "note_topics"."content" AS "content"
    FROM (("note_topics"
      JOIN "note_topicnode"
        ON (("note_topics"."topic_id" = "note_topicnode"."topic_id")))
      JOIN "note_nodes"
        ON (("note_nodes"."node_id" = "note_topicnode"."node_id")));
        
CREATE 
  
VIEW note_topicsview
AS
    SELECT
      "t"."topic_id" AS "topic_id",
      "t"."title" AS "title",
      "t"."content" AS "content",
      "t"."acctype" AS "acctype",
      "t"."user_id" AS "user_id"
    FROM "note_topics" "t";
    
CREATE 
  
VIEW paylist_view
AS
    SELECT
      "pl"."pl_id" AS "pl_id",
      "pl"."document_id" AS "document_id",
      "pl"."amount" AS "amount",
      "pl"."mf_id" AS "mf_id",
      "pl"."notes" AS "notes",
      "pl"."user_id" AS "user_id",
      "pl"."paydate" AS "paydate",
      "pl"."paytype" AS "paytype",
      "pl"."bonus" AS "bonus",
      "d"."document_number" AS "document_number",
      "u"."username" AS "username",
      "m"."mf_name" AS "mf_name",
      "d"."customer_id" AS "customer_id",
      "d"."customer_name" AS "customer_name"
    FROM ((("paylist" "pl"
      JOIN "documents_view" "d"
        ON (("pl"."document_id" = "d"."document_id")))
      JOIN "users_view" "u"
        ON (("pl"."user_id" = "u"."user_id")))
      LEFT JOIN "mfund" "m"
        ON (("pl"."mf_id" = "m"."mf_id")));


CREATE    or replace
  
VIEW prodstageagenda_view
AS
    SELECT
      "a"."sta_id" AS "sta_id",
      "a"."st_id" AS "st_id",
      "a"."startdate" AS "startdate",
      "a"."enddate" AS "enddate",
      "pv"."stagename" AS "stagename",
     ( date_part('minute', "a"."startdate"::timezone, "a"."enddate"::timezone)   / 60) AS "hours",
      "pv"."pa_id" AS "pa_id",
      "pv"."pp_id" AS "pp_id"
    FROM ("prodstageagenda" "a"
      JOIN "prodstage" "pv"
        ON (("a"."st_id" = "pv"."st_id")));
        
   
   
CREATE 
  
VIEW prodstage_view
AS
    SELECT
      "ps"."st_id" AS "st_id",
      "ps"."pp_id" AS "pp_id",
      "ps"."pa_id" AS "pa_id",
      "ps"."state" AS "state",
      "ps"."stagename" AS "stagename",
      COALESCE((SELECT
          MIN("pag"."startdate")
        FROM "prodstageagenda" "pag"
        WHERE ("pag"."st_id" = "ps"."st_id")), NULL) AS "startdate",
      COALESCE((SELECT
          MAX("pag"."enddate")
        FROM "prodstageagenda" "pag"
        WHERE ("pag"."st_id" = "ps"."st_id")), NULL) AS "enddate",
      COALESCE((SELECT
          MAX("pag"."hours")
        FROM "prodstageagenda_view" "pag"
        WHERE ("pag"."st_id" = "ps"."st_id")), NULL) AS "hours",
      "ps"."detail" AS "detail",
      "pr"."procname" AS "procname",
      "pr"."snumber" AS "snumber",
      "pr"."state" AS "procstate",
      "pa"."pa_name" AS "pa_name"
    FROM (("prodstage" "ps"
      JOIN "prodproc" "pr"
        ON (("pr"."pp_id" = "ps"."pp_id")))
      JOIN "parealist" "pa"
        ON (("pa"."pa_id" = "ps"."pa_id")));   
        
CREATE 
  
VIEW prodproc_view
AS
    SELECT
      "p"."pp_id" AS "pp_id",
      "p"."procname" AS "procname",
      "p"."basedoc" AS "basedoc",
      "p"."snumber" AS "snumber",
      "p"."state" AS "state",
      COALESCE((SELECT
          MIN("ps"."startdate")
        FROM "prodstage_view" "ps"
        WHERE ("ps"."pp_id" = "p"."pp_id")), NULL) AS "startdate",
      COALESCE((SELECT
          MAX("ps"."enddate")
        FROM "prodstage_view" "ps"
        WHERE ("ps"."pp_id" = "p"."pp_id")), NULL) AS "enddate",
      COALESCE((SELECT
          COUNT(0)
        FROM "prodstage" "ps"
        WHERE ("ps"."pp_id" = "p"."pp_id")), NULL) AS "stagecnt",
      "p"."detail" AS "detail"
    FROM "prodproc" "p";
    

        
CREATE 
  
VIEW roles_view
AS
    SELECT
      "roles"."role_id" AS "role_id",
      "roles"."rolename" AS "rolename",
      "roles"."acl" AS "acl",
      (SELECT
          COALESCE(COUNT(0), 0)
        FROM "users"
        WHERE ("users"."role_id" = "roles"."role_id")) AS "cnt"
    FROM "roles";
    
CREATE 
  
VIEW shop_attributes_view
AS
    SELECT
      "shop_attributes"."attribute_id" AS "attribute_id",
      "shop_attributes"."attributename" AS "attributename",
      "shop_attributes"."cat_id" AS "cat_id",
      "shop_attributes"."attributetype" AS "attributetype",
      "shop_attributes"."valueslist" AS "valueslist",
      "shop_attributes_order"."ordern" AS "ordern"
    FROM ("shop_attributes"
      JOIN "shop_attributes_order"
        ON ((("shop_attributes"."attribute_id" = "shop_attributes_order"."attr_id")
        AND ("shop_attributes"."cat_id" = "shop_attributes_order"."pg_id"))))
    ORDER BY "shop_attributes_order"."ordern";
    
CREATE 
  
VIEW shop_products_view
AS
    SELECT
      "i"."item_id" AS "item_id",
      "i"."itemname" AS "itemname",
      "i"."description" AS "description",
      "i"."detail" AS "detail",
      "i"."item_code" AS "item_code",
      "i"."bar_code" AS "bar_code",
      "i"."cat_id" AS "cat_id",
      "i"."msr" AS "msr",
      "i"."disabled" AS "disabled",
      "i"."minqty" AS "minqty",
      "i"."item_type" AS "item_type",
      "i"."manufacturer" AS "manufacturer",
      "i"."cat_name" AS "cat_name",
      COALESCE((SELECT
          SUM("store_stock"."qty")
        FROM "store_stock"
        WHERE ("store_stock"."item_id" = "i"."item_id")), 0) AS "qty",
      COALESCE((SELECT
          COUNT(0)
        FROM "shop_prod_comments" "c"
        WHERE ("c"."item_id" = "i"."item_id")), 0) AS "comments",
      COALESCE((SELECT
          SUM("c"."rating")
        FROM "shop_prod_comments" "c"
        WHERE ("c"."item_id" = "i"."item_id")), 0) AS "ratings"
    FROM "items_view" "i";
    
CREATE 
  
VIEW shop_varitems_view
AS
    SELECT
      "shop_varitems"."varitem_id" AS "varitem_id",
      "shop_varitems"."var_id" AS "var_id",
      "shop_varitems"."item_id" AS "item_id",
      "sv"."attr_id" AS "attr_id",
      "sa"."attributevalue" AS "attributevalue",
      "it"."itemname" AS "itemname",
      "it"."item_code" AS "item_code"
    FROM ((("shop_varitems"
      JOIN "shop_vars" "sv"
        ON (("shop_varitems"."var_id" = "sv"."var_id")))
      JOIN "shop_attributevalues" "sa"
        ON ((("sa"."item_id" = "shop_varitems"."item_id")
        AND ("sv"."attr_id" = "sa"."attribute_id"))))
      JOIN "items" "it"
        ON (("shop_varitems"."item_id" = "it"."item_id")));
        
CREATE 
  
VIEW shop_vars_view
AS
    SELECT
      "shop_vars"."var_id" AS "var_id",
      "shop_vars"."attr_id" AS "attr_id",
      "shop_vars"."varname" AS "varname",
      "shop_attributes"."attributename" AS "attributename",
      "shop_attributes"."cat_id" AS "cat_id",
      (SELECT
          COUNT(0)
        FROM "shop_varitems"
        WHERE ("shop_varitems"."var_id" = "shop_vars"."var_id")) AS "cnt"
    FROM (("shop_vars"
      JOIN "shop_attributes"
        ON (("shop_vars"."attr_id" = "shop_attributes"."attribute_id")))
      JOIN "item_cat"
        ON (("shop_attributes"."cat_id" = "item_cat"."cat_id")));
        
CREATE 
  
VIEW store_stock_view
AS
    SELECT
      "st"."stock_id" AS "stock_id",
      "st"."item_id" AS "item_id",
      "st"."partion" AS "partion",
      "st"."store_id" AS "store_id",
      "i"."itemname" AS "itemname",
      "i"."item_code" AS "item_code",
      "i"."cat_id" AS "cat_id",
      "i"."msr" AS "msr",
      "i"."item_type" AS "item_type",
      "i"."bar_code" AS "bar_code",
      "i"."cat_name" AS "cat_name",
      "i"."disabled" AS "itemdisabled",
      "stores"."storename" AS "storename",
      "st"."qty" AS "qty",
      "st"."snumber" AS "snumber",
      "st"."sdate" AS "sdate"
    FROM (("store_stock" "st"
      JOIN "items_view" "i"
        ON ((("i"."item_id" = "st"."item_id")
        AND ("i"."disabled" <> 1))))
      JOIN "stores"
        ON (("stores"."store_id" = "st"."store_id")));
        
CREATE 
  
VIEW timesheet_view
AS
    SELECT
      "t"."time_id" AS "time_id",
      "t"."emp_id" AS "emp_id",
      "t"."description" AS "description",
      "t"."t_start" AS "t_start",
      "t"."t_end" AS "t_end",
      "t"."t_type" AS "t_type",
      "t"."t_break" AS "t_break",
      "e"."emp_name" AS "emp_name",
      "b"."branch_name" AS "branch_name",
      "e"."disabled" AS "disabled",
      "t"."branch_id" AS "branch_id"
    FROM (("timesheet" "t"
      JOIN "employees" "e"
        ON (("t"."emp_id" = "e"."employee_id")))
      LEFT JOIN "branches" "b"
        ON (("t"."branch_id" = "b"."branch_id")));
        
                                                                                                               