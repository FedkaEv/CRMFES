<?php
  
namespace App\Modules\Paperless;

use App\System;

class Helper
{

    public  static function  connect(){
                $modules = System::getOptions("modules");
                $code ="";
      
                $post="response_type=code&agentCheck=true&client_id={$modules['plclientid']}";
                $url= "https://paperless.com.ua/PplsService/oauth/authorize";        
                $ch = curl_init();
                       
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded','Accept: application/json'));
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE)  ;                              
                if (curl_errno($ch) > 0) {
                    $msg = curl_error($ch);
                    return  array('error',$msg) ;
                }                
                if (strlen($result) == 0) {
                    return  array('error','Empty  answer') ;
                }                
                if ($httpcode != 200) {
                    return  array('error','http '.$httpcode) ;
                }                
                curl_close($ch);       
                $ret = @json_decode($result,true) ;
                if(is_array($ret)){
                  if($ret['state'] =='ok'){
                    $code = $ret['code'] ;
                      
                  }
                  if($ret['state'] =='err'){
                    return  array('error',$ret['desc']) ;
                      
                  }
                    
                }
                
                $client_secret = hash("sha512", $modules['plclientid']. $modules['plsecret'] .$code) ;
           
                $post = "grant_type=authorization_code&client_id={$modules['plclientid']}";
                $post .= "&client_secret={$client_secret}&code={$code}";
                
                $url= "https://paperless.com.ua/PplsService/oauth/token";        
                $ch = curl_init();
                       
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded','Accept: application/json'));
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE)  ;                              
                if (curl_errno($ch) > 0) {
                    $msg = curl_error($ch);
                    return  array('error',$msg) ;
                }                
                if (strlen($result) == 0) {
                    return  array('error','Empty  answer') ;
                }                
                if ($httpcode != 200) {
                    return  array('error','http '.$httpcode) ;
                }                
                curl_close($ch);       
                
                $ret = @json_decode($result,true) ;
                if(is_array($ret)){
         
                    return  array('ok',$ret['access_token']) ;
                      
                  
                    
                }
    
        
    }
    
    public  static  function send($token,$docdata,$docname,$email="") {
                $modules = System::getOptions("modules");
                $url= "https://paperless.com.ua/api2/checked/upload";        
                $boundary = str_replace('-','', \App\Util::guid() );
               
              //  $doc = file_get_contents("c:/Users/leonm/Downloads/test.pdf") ;
                $docdata = base64_encode($docdata) ;
                $eol = "\r\n";
      
                
                $post="--{$boundary}".$eol;
                $post.="Content-Disposition: form-data; name=\"file\"; filename=\"{$docname}\"".$eol;
                $post.="Content-Type: application/octet-stream;".$eol;
                $post.="Content-Transfer-Encoding: binary".$eol.$eol;

                        
                $post .=  $docdata.$eol;        
                $post .=  "--{$boundary}--".$eol;        
                        
                $size = strlen($post);
             


            
               
                $ch = curl_init();
                       
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                                 "Accept: application/json",
                                 "Cookie: sessionId=\"Bearer {$token}, Id {$modules['plclientid']}\""
                                 ,"Content-Type: multipart/form-data; boundary={$boundary}; charset=UTF-8",
                                 "Content-Length: {$size}"
                                 ));
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE)  ; 

                if (curl_errno($ch) > 0) {
                    $msg = curl_error($ch);
                    return  array('error',$msg) ;
                }                
                curl_close($ch) ;
                $res = @json_decode($result,true)  ;                          
                if (!is_array($res)  || $res['state'] != 'ok' ) {
                    $msg = "Invalid answer ".$res;
                    return  array('error',$msg) ;
                }      
                $id = $res['resourceDTO'][0]['id'] ;
                if(strlen($email)==0) {
                    return  array('ok') ;  
                }
                $url= "https://paperless.com.ua/api2/checked/share/".$id;        
                $post  = "{\"requestList\":[{\"email\":\"{$email}\",\"comment\":\"\",\"mode\":0}]}"  ;
                $a = json_decode($post) ;
                $ch = curl_init();
                       
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                                 "Accept: application/json",
                                 "Cookie: sessionId=\"Bearer {$token}, Id {$modules['plclientid']}\""
                                ,"Content-Type: application/json"
                ));
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE)  ;                  
                if (curl_errno($ch) > 0) {
                    $msg = curl_error($ch);
                    return  array('error',$msg) ;
                }              curl_close($ch) ;
                if($httpcode ==200) {
                    return  array('ok') ;                    
                }  else {
                   return  array('error',"http code ".$httpcode) ;                                        
                }
                
                
    }
}


 /*
 
 ////////////////////////////////////////////////////////////////
//** Работа с выгрузкой XML по документам
Перем СтруктураТиповДанных; //хранит структуру с именем и типом даных XML
Перем ТЗXML_НН, ТЗXML_П2; //таблица документов для выгрузки в XML
Перем ТЗ_ТЧДок_НН, ТЗ_ТЧДок_П2; //таблица содержит ТЧ документа
Перем СтрокаОбщегоФормата; //хранит строку описания общего формата
Перем ТабНомераСтрок; //техническая таблица для заполнения ТЗ по струтктуре XML
//** Работа с выгрузкой XML по документам
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//**Обмен Приват24
Перем Прокси; //параметры прокси для отправки/получения данных
//**Обмен Приват24
Перем тзСписокКарт;
////////////////////////////////////////////////////////////////

// Функция возвращает сведения о внешней обработке для запуска ее из доп. внешних обработок
//
// Параметры:
//
// Возвращаемое значение:
//   -  Структура - 
Функция СведенияОВнешнейОбработке() Экспорт

    ПараметрыРегистрации = Новый Структура;
    //ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
    ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
    ////ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта());
    ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'Модуль обмена Приват24 - Работа через справочник внешних обработок НЕ ПОДДЕРЖИВАЕТСЯ';uk = 'Модуль обміну Приват24 - Робота через довідник зовнішніх обробок НЕ ПІДТРИМУЄТЬСЯ'"));
    ПараметрыРегистрации.Вставить("Версия", ТекВерсия);
    
    //ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    мНазначенияДокументы = Новый Массив;
    мНазначенияДокументы.Добавить("Документ.НалоговаяНакладная");
    мНазначенияДокументы.Добавить("Документ.ЗаказПоставщику");
    мНазначенияДокументы.Добавить("Документ.РеализацияТоваровУслуг");
    мНазначенияДокументы.Добавить("Документ.СчетНаОплатуПокупателю");
    ПараметрыРегистрации.Вставить("Назначение", мНазначенияДокументы);

    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
    ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'Импорт и отправка платежей, выписка банка, налоговые документы, электронный документооборот, зарплатный проект, курсы валют и т.д.';uk = 'Імпорт та відправка платежів, банківська виписка, податкові документи, електронний документообіг, зарплатний проект, курси валют і т.д.'"));
    ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.5");

    РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;

    ТаблицаКоманд = Новый ТаблицаЗначений;
    ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
    ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
    ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
    ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
    //ТаблицаКоманд.Колонки.Добавить("Скрыть", РеквизитыТабличнойЧасти.Скрыть.Тип);

    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    //ДобавитьКоманду(ТаблицаКоманд, НСтр("ru = 'Открыть модуль обмена Приват24';uk = 'Відкрити модуль обміну Приват24'"), "PB24", "ОткрытиеФормы",
    //    Истина, Неопределено);
    ДобавитьКоманду(ТаблицаКоманд,
        НСтр("ru = 'Отправить в Приват24';uk = 'Відправити у Приват24'"), // Представление команды в пользовательском интерфейсе
        "PB24", // Уникальный идентификатор команды
        "ВызовКлиентскогоМетода",//"ОткрытиеФормы", // Использование команды //ОткрытиеФормы
        Истина, // Показывать оповещение.
        Неопределено); // Дополнительный модификатор команды.
    
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    //ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);
    Возврат ПараметрыРегистрации;

КонецФункции // СведенияОВнешнейОбработке()

// Функция возвращает таблицу команд
//    
Функция ПолучитьТаблицуКоманд()

    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;

КонецФункции // ПолучитьТаблицуКоманд()

// Процедура добавляет команду в таблицу команд
//
// Параметры:
//  ТаблицаКоманд - ТаблицаЗначений - таблица команд.
//  Представление - Строка - представление команды.
//  Идентификатор - Строка - идентификатор команды.
//  Использование - Строка - использование команды.
//  ПоказыватьОповещение - Булево - признак отображения оповещения.
//  Модификатор - Строка - модификатор команды.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование,
        ПоказыватьОповещение = Ложь, Модификатор = "")

    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры // ДобавитьКоманду()

// Интерфейс для запуска логики обработки.
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
    
    ПараметрыСтрока = "";
    Если ПараметрыВыполненияКоманды <> Неопределено И ПараметрыВыполненияКоманды.Количество() > 0 Тогда
        Для Индекс = 0 По ПараметрыВыполненияКоманды.ВГраница() Цикл 
            ПараметрыСтрока = ПараметрыСтрока + "ПараметрыВыполненияКоманды[" + Индекс + "],";
        КонецЦикла;
        ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
    КонецЕсли;
    
    Выполнить ИдентификаторКоманды + "(" + ПараметрыСтрока + ")";
    
КонецПроцедуры

////////////////////////////////////////////////////////////////
//** Работа с выгрузкой XML по налоговым документам

// Функция возвращает полный путь к каталогу выгрузки
//
// Параметры:
//    ИмяКаталога - Строка - Имя каталога в который нужно добавить к корневому каталогу
//
Функция ПолучитьКаталогВыгрузки(Знач ИмяКаталога)Экспорт
    
    Перем КаталогДляВыгрузки;
    
    ИмяКаталога = ЗаменитьЗапрещенныеСимволы(ИмяКаталога, "");

    КаталогДляВыгрузки = КаталогВыгрузки;
    
    Если Прав(КаталогДляВыгрузки, 1) = "\" Тогда
        КаталогДляВыгрузки = Лев(КаталогДляВыгрузки, СтрДлина(КаталогДляВыгрузки)-1);
    Иначе
        КаталогДляВыгрузки = КаталогВыгрузки;
    КонецЕсли;
    
    КаталогДляВыгрузки = КаталогДляВыгрузки + "\" + ИмяКаталога;
    
    СоздатьКаталог(КаталогДляВыгрузки);
    
    Возврат КаталогДляВыгрузки;
    
КонецФункции

//Функция заменяет символы, которые запрещены в имени фалов и папок символом СимволЗамены
//
//Параметры:
//    Строка - Строка - Исходная строка в которой происходит замена
//    СимволЗамены - Строка - Этим символом будет заменены все запрещенные символы в имени файла или папки
//
Функция ЗаменитьЗапрещенныеСимволы(Строка, СимволЗамены = "_")
    
    ЗапрещенныеСимволы = "~!@/\#$%^&*=|`""";
    
    Для ИЦикла = 0 По СтрДлина(ЗапрещенныеСимволы) Цикл
        Строка = СтрЗаменить(Строка, Сред(ЗапрещенныеСимволы, ИЦикла, 1), СимволЗамены);
    КонецЦикла;
    
    Возврат Строка;
    
КонецФункции

// Процедура заполняет таблицу налоговых накладных
//
// Параметры:
//  Отборы         - Структура - содержит поля для отбора
//  НачПериода     - Дата - начало периода
//  КонПериода     - Дата - конец периода
//
Процедура ЗаполнитьСписок(Отборы, НачПериода, КонПериода)Экспорт
    
    СписокДокументов.Очистить();
    
    СписокДокументов.Загрузить(ВыполнитьЗаполнениеНД(НачПериода, КонПериода, Отборы));
        
КонецПроцедуры

// Процедура формирует отбор построителя отчета в зависимости от закладки
//
// Параметры:
//  ТекНастройки - НастройкиКомпоновкиДанных - настройки СКД 
//  НачПериода     - Дата     - начало периода
//  КонПериода     - Дата     - конец периода
//  Отборы         - Структура - содержит поля для отбора 
//
Процедура ЗаполнитьОтбор(ТекНастройки , НачПериода, КонПериода, Отборы)
    
    Если ЗначениеЗаполнено(Организация) Тогда
        // Отбор по Организации
        Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        ПолеКомпановки = Новый ПолеКомпоновкиДанных("Организация");
        Отбор.Использование = Истина;
        Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
        Отбор.ЛевоеЗначение = ПолеКомпановки;
        Отбор.ПравоеЗначение = Организация;
    КонецЕсли;
    
    
    //отбор по контрагенту
    Если ЗначениеЗаполнено(Контрагент) Тогда
        Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        ПолеКомпановки = Новый ПолеКомпоновкиДанных("Контрагент");
        Отбор.Использование = Истина;
        Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
        Отбор.ЛевоеЗначение = ПолеКомпановки;
        Отбор.ПравоеЗначение = Контрагент;
    КонецЕсли;    
    
    // Отбор по периоду
    Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеКомпановки = Новый ПолеКомпоновкиДанных("Дата");
    Отбор.Использование  = Истина;
    Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    Отбор.ЛевоеЗначение  = ПолеКомпановки;
    Отбор.ПравоеЗначение = НачПериода;
    
    Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    
    Отбор.Использование  = Истина;
    Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
    Отбор.ЛевоеЗначение  = ПолеКомпановки;
    Отбор.ПравоеЗначение = КонПериода;
    
    // Отбор по состоянию ЕРНН
    Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеКомпановки = Новый ПолеКомпоновкиДанных("ВключенаВЕдиныйРеестрНалоговыхНакладных");
    Отбор.Использование = Истина;
    Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
    Отбор.ЛевоеЗначение = ПолеКомпановки;
    
    Если Отборы.ОтборПоЖурналу = "К выгрузке" Тогда
        Отбор.ПравоеЗначение = Ложь;
    ИначеЕсли Отборы.ОтборПоЖурналу = "Выгруженные" Тогда
        Отбор.ПравоеЗначение = Истина;
    Иначе
        Отбор.Использование = Ложь;
    КонецЕсли;
    
    // Отбор по типу документа
    Отбор = ТекНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеКомпановки = Новый ПолеКомпоновкиДанных("ВидДокумента");
    Отбор.Использование = Истина;
    Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
    Отбор.ЛевоеЗначение = ПолеКомпановки;
    
    Если Отборы.ОтборПоВидуДок = "Налоговые накладные" Тогда
        Отбор.ПравоеЗначение = "Налоговая накладная";
    ИначеЕсли Отборы.ОтборПоВидуДок = "Приложения 2 к НН" Тогда
        Отбор.ПравоеЗначение = "Приложение 2 к налоговой накладной";
    Иначе
        Отбор.Использование = Ложь;
    КонецЕсли;


КонецПроцедуры

// Процедура заполняет глобальную переменную модуля. Создает структуру по типам данных XML
//
Процедура ЗаполнитьСтруктуруТиповДанных()
    
    СтруктураТиповДанных = Новый Структура;
    
    СтруктураТиповДанных.Вставить("DECLAR", "DeclarContent");
    СтруктураТиповДанных.Вставить("DECLARHEAD", "DHead");
    СтруктураТиповДанных.Вставить("DECLARBODY", "DBody");
    СтруктураТиповДанных.Вставить("TIN", "DGLong");
    СтруктураТиповДанных.Вставить("C_DOC", "xs:string"); //12
    СтруктураТиповДанных.Вставить("C_DOC_SUB","xs:string"); //010
    СтруктураТиповДанных.Вставить("C_DOC_VER", "xs:string");//6
    СтруктураТиповДанных.Вставить("C_DOC_TYPE", "xs:nonNegativeInteger");
    СтруктураТиповДанных.Вставить("C_DOC_CNT", "xs:nonNegativeInteger");
    СтруктураТиповДанных.Вставить("C_REG", "DGsti");
    СтруктураТиповДанных.Вставить("C_RAJ", "DGsti");
    СтруктураТиповДанных.Вставить("PERIOD_MONTH", "DGMonth");
    СтруктураТиповДанных.Вставить("PERIOD_TYPE", "DGPType");
    СтруктураТиповДанных.Вставить("PERIOD_YEAR", "DGYear");
    СтруктураТиповДанных.Вставить("C_STI_ORIG", "DGc_dpi");
    СтруктураТиповДанных.Вставить("C_DOC_STAN", "DGSTAN");
    //СтруктураТиповДанных.Вставить("C_DOC", "DGC_DOC");
    //СтруктураТиповДанных.Вставить("C_DOC_SUB","DGC_DOC_SUB");
    //СтруктураТиповДанных.Вставить("C_DOC_VER", "DGC_DOC_VER");
    СтруктураТиповДанных.Вставить("C_DOC_STAN", "DGSTAN");
    СтруктураТиповДанных.Вставить("FILENAME","DGFilename");
    СтруктураТиповДанных.Вставить("NUM","xs:nonNegativeInteger");
    СтруктураТиповДанных.Вставить("TYPE","DGTypeLinkDoc");
    СтруктураТиповДанных.Вставить("D_FILL","DGDate");
    СтруктураТиповДанных.Вставить("SOFTWARE", "xs:string");
    //СтруктураТиповДанных.Вставить("HORIG", "DGchk");
    //СтруктураТиповДанных.Вставить("HCOPY", "DGchk");
    //СтруктураТиповДанных.Вставить("HEL", "DGchk");
    СтруктураТиповДанных.Вставить("HERPN", "DGchk");
    СтруктураТиповДанных.Вставить("HERPN0", "DGchk");
    СтруктураТиповДанных.Вставить("HORIG1", "DGchk");
    СтруктураТиповДанных.Вставить("HTYPR","DGPNtypr");
    СтруктураТиповДанных.Вставить("HFILL", "DGDate");
    СтруктураТиповДанных.Вставить("HNUM", "DGI7nom");
    СтруктураТиповДанных.Вставить("HNUM1", "DGspecNom");
    СтруктураТиповДанных.Вставить("HNUM2", "DGI4nom");
    СтруктураТиповДанных.Вставить("HNAMESEL", "DGHNAME");
    СтруктураТиповДанных.Вставить("HNAMEBUY", "DGHNAME");
    СтруктураТиповДанных.Вставить("HKSEL", "DGHIPN0");
    СтруктураТиповДанных.Вставить("HTINSEL", "DGLong");
    СтруктураТиповДанных.Вставить("HKS", "DGI1inom");
    СтруктураТиповДанных.Вставить("HKB", "DGI1inom");
    СтруктураТиповДанных.Вставить("HTINBUY", "DGLong");
    СтруктураТиповДанных.Вставить("HKBUY","DGHIPN0");
    СтруктураТиповДанных.Вставить("HLOCSEL", "DGHLOC");
    СтруктураТиповДанных.Вставить("HLOCBUY", "DGHLOC");
    СтруктураТиповДанных.Вставить("HTELSEL", "DGHTEL");
    СтруктураТиповДанных.Вставить("HTELBUY", "DGHTEL");
    СтруктураТиповДанных.Вставить("H01G1S", "xs:string");
    СтруктураТиповДанных.Вставить("H01G2D", "DGDate");
    СтруктураТиповДанных.Вставить("H01G3S", "xs:string");
    СтруктураТиповДанных.Вставить("H02G1S", "xs:string");
    СтруктураТиповДанных.Вставить("RXXXXG2D","DateColumn");
    СтруктураТиповДанных.Вставить("RXXXXG3S", "StrColumn");
    СтруктураТиповДанных.Вставить("RXXXXG4", "UKTZEDColumn");
    
    //новая схема с 16.03.2017
    СтруктураТиповДанных.Вставить("RXXXXG32", "ChkColumn");
    СтруктураТиповДанных.Вставить("RXXXXG33", "DKPPColumn");
    СтруктураТиповДанных.Вставить("RXXXXG011", "DGI3nomColumn");
    //
    
    СтруктураТиповДанных.Вставить("RXXXXG4S", "StrColumn");
    СтруктураТиповДанных.Вставить("RXXXXG5", "Decimal6Column_R");
    СтруктураТиповДанных.Вставить("RXXXXG6", "Decimal12Column_R");
    СтруктураТиповДанных.Вставить("RXXXXG7", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG109", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG8", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG9", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG10", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG111", "Decimal2Column");
    СтруктураТиповДанных.Вставить("RXXXXG11", "Decimal2Column");
    СтруктураТиповДанных.Вставить("R01G7","DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G109","DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G8", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G9","DGdecimal2");
    СтруктураТиповДанных.Вставить("R02G9","DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G111","DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G10", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G11", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R02G11", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R02G111", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R03G7", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R03G109", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R03G14", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R01G14", "DGdecimal2");    
    СтруктураТиповДанных.Вставить("R03G8", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R03G9", "DGdecimalZero");
    СтруктураТиповДанных.Вставить("R03G10S", "xs:string");
    СтруктураТиповДанных.Вставить("R03G11","DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G7", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G109", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G8", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G9", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G10", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R04G11", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R001G03", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R007G03", "DGdecimal2");
    СтруктураТиповДанных.Вставить("R003G10S", "xs:string");
    СтруктураТиповДанных.Вставить("RXXXXG008", "DGI3nomColumn");
    СтруктураТиповДанных.Вставить("LINKED_DOCS", "LINKED_DOCS");
    СтруктураТиповДанных.Вставить("RXXXXG010", "DGdecimal2");
    СтруктураТиповДанных.Вставить("RXXXXG11_10", "Decimal6Column_R");
    СтруктураТиповДанных.Вставить("H10G1S","xs:string");
    СтруктураТиповДанных.Вставить("RXXXXG105_2S", "DGI4lzColumn");
    СтруктураТиповДанных.Вставить("HBOS", "DGHBOS");
    СтруктураТиповДанных.Вставить("HKBOS", "DGLong");
    СтруктураТиповДанных.Вставить("HPODFILL", "DGDate");
    СтруктураТиповДанных.Вставить("HPODNUM", "DGI7nom");
    СтруктураТиповДанных.Вставить("RXXXXG001", "DGI4nomColumn");
    //СтруктураТиповДанных.Вставить("RXXXXG2S", "StrColumn");
    СтруктураТиповДанных.Вставить("RXXXXG21", "DGI3nomColumn");
    СтруктураТиповДанных.Вставить("RXXXXG22", "DGI4nomColumn");

    СтруктураТиповДанных.Вставить("R01G1", "DGI1inom");
    
КонецПроцедуры

// Процедура выполняет преобразование типа значения в тип XML
//
// Параметры:
//  Значение         - Произвольный тип - Значение для преобразования
//  Тип                 - Строка - Тип XML
//  Результат         - Произвольный тип     - преобразованное значение
//  ОписаниеОшибки     - Строка - текст ошибки 
// Возвращаемое значение:
//   - Булево - признак успешной конвертации типа
//
Функция ПреобразоватьТипXMLОбщий(Значение,Тип,Результат,ОписаниеОшибки = "")
    
    фОбработано = 1;
                          
    Если    (ВРег(Тип) = ВРег("DGkzep0")) //!--Загальний тип "код послуги згідно з Класифікацією зовнішньоекономічних послуг" КЗЕП, або 0 -->
        ИЛИ (ВРег(Тип) = ВРег("DGkzep0Column"))Тогда
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СокрЛП(Значение);
        Иначе
            Результат = СокрЛП(Значение);
        КонецЕсли;            
        
        Попытка
            Если (Результат = "0") Тогда
                // это допустимо
            Иначе
                Симв1 = Сред(Результат, 1, 1);Симв1 = ?(Найти("0123456789",Симв1) > 0,"Ц", ?(Найти("abcd",Симв1) > 0,"Б", ?(Симв1 = "." ,"Т", ?(Симв1 = "" ,"", 1/0))));
                Симв2 = Сред(Результат, 2, 1);Симв2 = ?(Найти("0123456789",Симв2) > 0,"Ц", ?(Найти("abcd",Симв2) > 0,"Б", ?(Симв2 = "." ,"Т", ?(Симв2 = "" ,"", 1/0))));
                Симв3 = Сред(Результат, 3, 1);Симв3 = ?(Найти("0123456789",Симв3) > 0,"Ц", ?(Найти("abcd",Симв3) > 0,"Б", ?(Симв3 = "." ,"Т", ?(Симв3 = "" ,"", 1/0))));
                Симв4 = Сред(Результат, 4, 1);Симв4 = ?(Найти("0123456789",Симв4) > 0,"Ц", ?(Найти("abcd",Симв4) > 0,"Б", ?(Симв4 = "." ,"Т", ?(Симв4 = "" ,"", 1/0))));
                Симв5 = Сред(Результат, 5, 1);Симв5 = ?(Найти("0123456789",Симв5) > 0,"Ц", ?(Найти("abcd",Симв5) > 0,"Б", ?(Симв5 = "." ,"Т", ?(Симв5 = "" ,"", 1/0))));
                Симв6 = Сред(Результат, 6, 1);Симв6 = ?(Найти("0123456789",Симв6) > 0,"Ц", ?(Найти("abcd",Симв6) > 0,"Б", ?(Симв6 = "." ,"Т", ?(Симв6 = "" ,"", 1/0))));
                Симв7 = Сред(Результат, 7, 1);Симв7 = ?(Найти("0123456789",Симв7) > 0,"Ц", ?(Найти("abcd",Симв7) > 0,"Б", ?(Симв7 = "." ,"Т", ?(Симв7 = "" ,"", 1/0))));
                Симв8 = Сред(Результат, 8, 1);Симв8 = ?(Найти("0123456789",Симв8) > 0,"Ц", ?(Найти("abcd",Симв8) > 0,"Б", ?(Симв8 = "." ,"Т", ?(Симв8 = "" ,"", 1/0))));
                Симв9 = Сред(Результат, 9, 1);Симв9 = ?(Найти("0123456789",Симв9) > 0,"Ц", ?(Найти("abcd",Симв9) > 0,"Б", ?(Симв9 = "." ,"Т", ?(Симв9 = "" ,"", 1/0))));
                Симв10= Сред(Результат, 10,1);Симв10 = ?(Найти("0123456789",Симв10) > 0,"Ц", ?(Найти("abcd",Симв10) > 0,"Б", ?(Симв10 = "." ,"Т", ?(Симв10 = "" ,"", 1/0))));
                
                Если (Симв1 <> "Ц") ИЛИ (Симв2 <> "Ц") ИЛИ (Симв3 = "Т") ИЛИ (Симв4 <> "Ц") ИЛИ (Симв5 <> "Ц") Тогда
                    ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";                    
                Иначе
                    Если Симв6 = "Б" Тогда
                        Если Симв7 = "" Тогда
                            //это допустимо
                        Иначе
                            Если (Симв7 <> "Т") ИЛИ (Симв8 <> "Ц") ИЛИ (Симв9 = "Ц") Тогда
                                ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";                                            
                            ИначеЕсли (Симв10 <> "Б") ИЛИ (Симв10 <> "") Тогда
                                ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";
                            КонецЕсли;
                        КонецЕсли;
                    ИначеЕсли Симв6 = "" Тогда
                        // это допустимо
                    Иначе
                        Если (Симв6 <> "Т") ИЛИ (Симв7 <> "Ц") ИЛИ (Симв8 = "Ц") Тогда
                            ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";                                            
                        ИначеЕсли (Симв9 <> "Б") ИЛИ (Симв9 <> "") Тогда
                            ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";
                        КонецЕсли;
                    КонецЕсли;
                КонецЕсли;
                
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является кодом услуг КЗЕП или нулем";
        КонецПопытки;        
    ИначеЕсли   (ВРег(Тип) = ВРег("DGKod")) //!-- тип "Код контрольованої операції  3 знаки число з ведучими нулями -->
        ИЛИ (ВРег(Тип) = ВРег("KodColumn")) 
        ИЛИ (ВРег(Тип) = ВРег("Kod0Column")) 
        ИЛИ (ВРег(Тип) = ВРег("DGKod0")) 
        ИЛИ (ВРег(Тип) = ВРег("DKPP0Column")) Тогда
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СокрЛП(Значение);
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=3; ЧДЦ=0; ЧВН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Значение);
        КонецЕсли;            
        
        Попытка
            Контроль = Число(Результат);
            Если  (ВРег(Тип) = ВРег("DGKod0")) И (Результат = "0") Тогда
                // это допустимо
            ИначеЕсли  (ВРег(Тип) = ВРег("Kod0Column")) И (Результат = "0") Тогда
                // это допустимо
            ИначеЕсли СтрДлина(Результат) <> 3 Тогда
                Если (ВРег(Тип) = ВРег("DGKod0")) ИЛИ  (ВРег(Тип) = ВРег("DKPP0Column"))  Тогда
                    ОписаниеОшибки = "Значение не является числом от 000 до 999 с ведущими нулями или нулем";
                Иначе    
                    ОписаниеОшибки = "Значение не является числом от 000 до 999 с ведущими нулями";
                КонецЕсли;
                
            КонецЕсли;
        Исключение
            Если (ВРег(Тип) = ВРег("DGKod0")) Тогда
                ОписаниеОшибки = "Значение не является числом от 000 до 999 с ведущими нулями или нулем";
            Иначе    
                ОписаниеОшибки = "Значение не является числом от 000 до 999 с ведущими нулями";
            КонецЕсли;
        КонецПопытки;        
    ИначеЕсли   (ВРег(Тип) = ВРег("DGStatus")) //!--тип "статус особи - сторони контрольованої операції залежно від країни реєстрації: "резидент" - позначка "Р", "нерезидент" - позначка "Н""-->
            ИЛИ (ВРег(Тип) = ВРег("StatusColumn")) Тогда
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = ВРЕГ(СокрЛП(Значение));
        Иначе
            Результат = ВРЕГ(СокрЛП(Значение));
        КонецЕсли;            
        
        Попытка
            Если (Результат = "Р") ИЛИ  (Результат = "Н") Тогда
                // это допустимо
            ИначеЕсли СтрДлина(Результат) <> 3 Тогда
                ОписаниеОшибки = "Значением может быть только символ ""Н"" или ""Р""";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значением может быть только символ ""Н"" или ""Р""";
        КонецПопытки;            
    ИначеЕсли  (ВРег(Тип) = ВРег("DGKontrOp"))
           ИЛИ (ВРег(Тип) = ВРег("KodOpColumn")) Тогда //!--Загальний тип колонки таблиці контрольованої операції 1,2 ,3-->
           
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = ВРЕГ(СокрЛП(Значение));
        Иначе
            Результат = ВРЕГ(СокрЛП(Значение));
        КонецЕсли;            
        
        Попытка
            Если (Результат = "0") ИЛИ  (Результат = "1") ИЛИ  (Результат = "3") Тогда
                // это допустимо
            ИначеЕсли СтрДлина(Результат) <> 3 Тогда
                ОписаниеОшибки = "Значением может быть только символ ""1"" или ""2"" или ""3""";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значением может быть только символ ""1"" или ""2"" или ""3""";
        КонецПопытки;        
    ИначеЕсли ВРег(Тип) = ВРег("DGMonth") 
     ИЛИ ВРег(Тип) = ВРег("MonthColumn")
     ИЛИ ВРег(Тип) = ВРег("DGMonth0") Тогда
     
         //<!--Загальний тип "Місяць"-->
        //<!--Загальний тип "Місяць в колонці"-->
        Если НЕ ЗначениеЗаполнено(Значение)
            ИЛИ Значение = "0" Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СокрЛП(Значение);
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
            Результат = Месяц(Значение);
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;            
        
        Попытка
            Контроль = Число(Результат);
            Если ВРег(Тип) = ВРег("DGMonth0") Тогда
                МинЗнач = 0;
            Иначе
                МинЗнач = 1;
            КонецЕсли;
            
            Если    Найти(Результат, ".") > 0
                ИЛИ    Контроль < МинЗнач 
                ИЛИ Контроль > 12
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от "+МинЗнач+" до 12 (номер месяца)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от "+МинЗнач+" до 12 (номер месяца)";
        КонецПопытки;
    ИначеЕсли ВРег(Тип) = ВРег("DG0Month") Тогда
     
        //<!-- Загальний тип "Місяц з нолем на початку"
        Если НЕ ЗначениеЗаполнено(Значение)
            ИЛИ Значение = "0" Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СокрЛП(Значение);
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
            Результат = Формат(Месяц(Значение), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;            
        
        Попытка
            Контроль = Число(Результат);
            МинЗнач = 1;
            
            Если    Найти(Результат, ".") > 0
                ИЛИ    Контроль < МинЗнач 
                ИЛИ Контроль > 12
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от "+МинЗнач+" до 12 (номер месяца)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от "+МинЗнач+" до 12 (номер месяца)";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGPType") Тогда
        
        // тип периода, значение от 1 до 5
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 5
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 5 (код периода)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 5 (код периода)";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGSTAN") 
        ИЛИ ВРег(Тип) = ВРег("TOColumn") Тогда
        
        //<!--Загальний тип "Код Стан документа (1, 2, 3) (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 3
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 3 (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 3 (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGsti") Тогда
        //<!--Загальний тип "Код ДПІ, використовується для обмеження коду області"-->
        // число, от 1 до 99
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0"));

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 99
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 99 (код ГНИ)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 99 (код ГНИ)";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGreg")
          ИЛИ ВРег(Тип) = ВРег("RegColumn") Тогда
        //<!--Загальний тип "Код номера області"--> (1...29)
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0"));
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 29
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 29 (код номера области)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 29 (код номера области)";
        КонецПопытки;
        
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHKOPFG")  Тогда
        //<!--Загальний тип "Код ОПФГ"--> (100...995)
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=3; ЧДЦ=0"));
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 100 
                ИЛИ Контроль > 995
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 100 до 995 (код ОПФГ)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 100 до 995 (код ОПФГ)";
        КонецПопытки;
        
        
    ИначеЕсли (ВРег(Тип) = ВРег("I8Column")) 
          ИЛИ (ВРег(Тип) = ВРег("DGI8")) Тогда
        
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 10000000 
                ИЛИ Контроль > 99999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 10000000 до 99999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 10000000 до 99999999";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGI7nomColumn")) 
          ИЛИ (ВРег(Тип) = ВРег("DGI7nom")) Тогда
        
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 9999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 9999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 9999999";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGInomColumn")) 
          ИЛИ (ВРег(Тип) = ВРег("DGInom")) Тогда
        
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("IntColumn") Тогда
        //<!--Загальний тип "Цілі дані"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом";
        КонецПопытки;
        
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGLong12")) 
          ИЛИ (ВРег(Тип) = ВРег("DGLong12Column")) 
          ИЛИ (ВРег(Тип) = ВРег("DGHNPDV")) 
          ИЛИ (ВРег(Тип) = ВРег("DGHIPN")) 
          ИЛИ (ВРег(Тип) = ВРег("IndTaxNumColumn")) Тогда
          
        //<!--Загальний тип "Індивідуальний податковий номер "-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1000 
                ИЛИ Контроль > 999999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1000 до 999999999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1000 до 999999999999";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGI2i")) Тогда
        
        //<!--Загальний тип "Число від 0 до 99"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 99
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 0 до 99";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 0 до 99";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGI3i")) Тогда
        
        //<!--Загальний тип "Число від 0 до 999"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 0 до 999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 0 до 999";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGI3nom")) 
          ИЛИ (ВРег(Тип) = ВРег("DGI3nomColumn"))  Тогда
        
        //<!--Загальний тип "Число від 1 до 999"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 999";
        КонецПопытки;
        
    ИначеЕсли  (ВРег(Тип) = ВРег("DGI4nomColumn")) 
           ИЛИ (ВРег(Тип) = ВРег("DGI4nom")) Тогда
        
        //<!--Загальний тип колонки таблиці "Число від 1 до ... 9999" [номер філії, кількість, №рядка]-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            //Результат = "&НеЗаписывать";
            Результат = "&ПустоеЗначение";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 9999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 9999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 9999";
        КонецПопытки;
        
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGI5i")) Тогда
        
        //<!--Загальний тип "Число від 1000 до 99999"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1000 
                ИЛИ Контроль > 99999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1000 до 99999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1000 до 99999";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGDate")    
        ИЛИ ВРег(Тип) = ВРег("DGHDDGVSD")
        ИЛИ ВРег(Тип) = ВРег("DGHDDGVUM")
        ИЛИ ВРег(Тип) = ВРег("DateColumn") Тогда
        //<!--Загальний тип "Дата у форматі ддммрррр"--> 
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
            Результат = Формат(Значение,"ДФ=ddMMyyyy");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Дата("" + Сред(Результат,5,4) + Сред(Результат,3,2) + Сред(Результат,1,2));
            Если    СтрДлина(Результат) <> 8 
                ИЛИ Контроль < '19000101' Тогда
                ОписаниеОшибки = "Значение не является датой (после 1900 года)";    
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является датой";
        КонецПопытки;            
        
    ИначеЕсли ВРег(Тип) = ВРег("DGMonthYear")    
        ИЛИ ВРег(Тип) = ВРег("DGMonthYearColumn") Тогда
        //<!--Загальний тип "Місяц і рік"-->
        //<xs:length value="6"/>
        //<xs:pattern value="(((0[1-9])|(1[0-2]))(20)\d{2})"/>
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
            Результат = Формат(Значение,"ДФ=MMyyyy");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Дата("" + Сред(Результат,3,4) + Сред(Результат,1,2) + "01");
            Если СтрДлина(Результат) <> 8 Тогда
                ОписаниеОшибки = "Значение не является месяцем и годом (в формате ММГГГГ)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является месяцем и годом (в формате ММГГГГ)";
        КонецПопытки;            
        
    ИначеЕсли ВРег(Тип) = ВРег("DGDateEndKv") Тогда
        //<!--Загальний тип Дата кінець квартала у форматі ддммрррр"
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
            Результат = Формат(Значение,"ДФ=ddMMyyyy");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Дата("" + Сред(Результат,5,4) + Сред(Результат,3,2) + Сред(Результат,1,2));
            Если КонецДня(Контроль) <> КонецКвартала(Контроль) Тогда
                ОписаниеОшибки = "Дата не является концом квартала";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является датой";
        КонецПопытки;            
        
    ИначеЕсли ВРег(Тип) = ВРег("DGchk") 
          ИЛИ ВРег(Тип) = ВРег("ChkColumn") Тогда
        //чекбокс
        //<!--Загальний тип "Ознака"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
            Если Значение Тогда
                Результат = 1;
            Иначе
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецЕсли;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Если Значение = 1 Тогда
                Результат = 1;
            Иначе
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецЕсли;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = 1;
        Иначе
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGint2") Тогда
        //<!--Загальний тип "2 значне ціле додатне число"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",2,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 99
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым двузначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым двузначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGint3") Тогда
        //<!--Загальний тип "3 значне ціле додатне число"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",3,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым трехзначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым трехзначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGint5") Тогда
        //<!--Загальний тип "5 значне ціле додатне число"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",5,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 99999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым пятизначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым пятизначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKOATUU") 
         ИЛИ ВРег(Тип) = ВРег("KOATUUColumn") 
        Тогда
        //<!--Загальний тип "Код КОАТУУ (9-10 знаків)"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",10,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 9999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является 9-и или 10-и значным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является 9-и или 10-и значным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGDKPP")
          ИЛИ ВРег(Тип) = ВРег("DKPPColumn") Тогда
          
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "";
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение," ","");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=5; ЧДЦ=2; ЧРД=.; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СОКРЛП(Результат);
    
        ОписаниеОшибки = "Значение не является Кодом ДКПП в формате XX.XX.XX-XX.XX";
        
    ИначеЕсли (ВРег(Тип) = ВРег("xs:string"))
          ИЛИ (ВРег(Тип) = ВРег("DGHNDGVUM"))
          ИЛИ (ВРег(Тип) = ВРег("StrColumn"))
          ИЛИ (ВРег(Тип) = ВРег("DGdkpp0"))Тогда
          
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
          
    ИначеЕсли (ВРег(Тип) = ВРег("DGHNAME"))
          ИЛИ (ВРег(Тип) = ВРег("DGHLOC"))
          ИЛИ (ВРег(Тип) = ВРег("DGLOC"))
          ИЛИ (ВРег(Тип) = ВРег("DGHSTI")) Тогда
          
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе
            Результат = СокрП(Строка(Значение));
        КонецЕсли;
        
        Контроль = СтрДлина(Результат);
        Если Контроль = 0 Тогда
        
            ОписаниеОшибки = "Значение должно содержать хотя бы один символ";    
        
        КонецЕсли;
        
        
    ИначеЕсли (ВРег(Тип) = ВРег("xs:decimal"))  
          ИЛИ (ВРег(Тип) = ВРег("DecimalColumn")) Тогда
        // десятичная дробь
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
        Исключение
            ОписаниеОшибки = "Значение не является числом";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("xs:int"))
          ИЛИ (ВРег(Тип) = ВРег("xs:integer")) Тогда
        
        //это показатели, имеющие целый тип, и значение лежащее в определенном диапазоне,
        //но сам показатель может не заполняться. 
        //Проблема: невозможно опеределить показатель равен нулю или "не заполнялся" если он числового типа. 
        //Поэтому, делаем такое предположение:
        //если в обработку передан показатель типа "Число" - он будет записан в выходной файл.
        //если тип = "Строка", показатель будет преобразован к числу и записан только если он не пуст.
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Если ПустаяСтрока(Значение) Тогда
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецЕсли;
            Попытка
                Результат = Формат(Число(Значение),"ЧДЦ=0; ЧГ=0");
            Исключение
                ОписаниеОшибки = "Значение не является целым числом";
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецПопытки
        Иначе
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");    
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если  Найти(Результат, ".") > 0
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом";
        КонецПопытки;            
        
    ИначеЕсли ВРег(Тип) = ВРег("xs:nonNegativeInteger")
          ИЛИ ВРег(Тип) = ВРег("IntNegativeColumn")Тогда
        // целое, больше равно(?) нулю
        
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Если ПустаяСтрока(Значение) Тогда
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецЕсли;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение, "ЧДЦ=0; ЧН=0; ЧГ=0");                
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым, неотрицательным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым, неотрицательным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("xs:unsignedInt") Тогда
        // целое, больше равно(?) нулю
        
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Если ПустаяСтрока(Значение) Тогда
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецЕсли;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение, "ЧДЦ=0; ЧН=0; ЧГ=0");                
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым, неотрицательным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым, неотрицательным числом";
        КонецПопытки;
        
        
        
    ИначеЕсли ВРег(Тип) = ВРег("DGOdoh")
         ИЛИ  ВРег(Тип) = ВРег("OdohColumn")
         ИЛИ  ВРег(Тип) = ВРег("DGOsp")
         ИЛИ  ВРег(Тип) = ВРег("OspColumn")
         ИЛИ  ВРег(Тип) = ВРег("DGOzn12")
         ИЛИ  ВРег(Тип) = ВРег("Ozn2Column")
         ИЛИ  ВРег(Тип) = ВРег("DGI2inom")
         ИЛИ  ВРег(Тип) = ВРег("I2inomColumn")
         Тогда    
        //DGOdoh  Загальний тип "Ознака доходу від 1 до 66 для ДРФО"-->
        //DGOsp   Загальний тип "Код від 1 до 4 знаків ДРФО, ознака типу документа для Реєстра накладних"--> 
        //DGOzn12 Загальний тип "Код 1/2 для ДРФО"-->
         
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если      ВРег(Тип) = ВРег("DGOdoh")
                 ИЛИ  ВРег(Тип) = ВРег("OdohColumn") Тогда
                МаксЗнач = 66;
            ИначеЕсли  ВРег(Тип) = ВРег("DGOsp")
                  ИЛИ  ВРег(Тип) = ВРег("OspColumn") Тогда
                МаксЗнач = 4;                 
            ИначеЕсли ВРег(Тип) = ВРег("DGOzn12")
                  ИЛИ  ВРег(Тип) = ВРег("Ozn2Column") Тогда
                МаксЗнач = 2;  
            ИначеЕсли ВРег(Тип) = ВРЕГ("I2inomColumn")
                ИЛИ  ВРег(Тип) = ВРег("DGI2inom") Тогда
                МаксЗнач = 99;      
            КонецЕсли;
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > МаксЗнач
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до "+МаксЗнач;
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом!";
        КонецПопытки;

    ИначеЕсли ВРег(Тип) = ВРег("DGOzn")
          ИЛИ ВРег(Тип) = ВРег("OznColumn") Тогда
        //<!--Загальний тип "Код 0/1 для ДРФО"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 1
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 0 до 1";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом!";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGCodPilg") 
          ИЛИ ВРег(Тип) = ВРег("CodPilgColumn") Тогда
        //<!--Загальний тип "Код пільги (8 знаків)"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=8; ЧДЦ=0; ЧРД=.; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",8,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 99999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым восьмизначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым восьмизначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGmfo")
        ИЛИ  ВРег(Тип) = ВРег("MfoColumn") Тогда
        //<!--Загальний тип "Код МФО (6 знаків)"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=6; ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",6,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым шестизначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым шестизначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGTn-Zed")
          ИЛИ ВРег(Тип) = ВРег("Tn-ZedColumn") Тогда
        //<!--Загальний тип "Код транспортного засобу (10 знаків)" с 11/12/2008-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",10,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 9999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым десятизначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым десятизначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGUKTZED")
          ИЛИ ВРег(Тип) = ВРег("UKTZEDColumn") Тогда
        //<!--Загальний тип "Код зовнішньоекономічної діяльності"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение," ","");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СОКРЛП(Результат);
        
        Длина = СтрДлина(Результат);
        Если  Длина <> 4
            И Длина <> 6 
            И Длина <> 10 
            И Результат <> "0" Тогда
            
            ОписаниеОшибки = "Значение не является набором цифр (4, 6 или 10-и значным) или нулем";
            
        Иначе
            
            Для Сч = 1  По Длина Цикл
                Если Найти("0123456789", Сред(Результат, Сч, 1)) = 0 Тогда
                    // есть не цифра
                    ОписаниеОшибки = "Значение не является набором цифр (4, 6 или 10-и значным) или нулем";
                    Прервать;
                КонецЕсли;
            КонецЦикла;
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGkved") 
          ИЛИ ВРег(Тип) = ВРег("DGkvedColumn") Тогда
          
        //<!--Загальний тип "КВЕД"-->   в формате xx.xx.x или xx.xx или xx.x
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = Значение;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=5; ЧДЦ=0; ЧГ=0");
            Результат = Сред(Результат,1,2) + "." + Сред(Результат, 3,2) + "." + Сред(Результат,5);
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;    
        
        Результат = СокрЛП(Результат);
        Если Прав(Результат ,1) = "." Тогда
            Результат = Сред(Результат, 1, СтрДлина(Результат) - 1);
        КонецЕсли;
        Результат = СокрЛП(Результат);        
        
        Цифры = "0123456789";
        Контроль = 1;
        Если СтрДлина(Результат) = 7 Тогда
            Если     Найти(Цифры, Сред(Результат, 1, 1)) = 0
                 ИЛИ Найти(Цифры, Сред(Результат, 2, 1)) = 0
                 ИЛИ "." <>       Сред(Результат, 3, 1)
                 ИЛИ Найти(Цифры, Сред(Результат, 4, 1)) = 0
                 ИЛИ Найти(Цифры, Сред(Результат, 5, 1)) = 0
                 ИЛИ "." <>       Сред(Результат, 6, 1)
                 ИЛИ Найти(Цифры, Сред(Результат, 7, 1)) = 0 Тогда
                Контроль = 0;
            КонецЕсли;     
        ИначеЕсли СтрДлина(Результат) = 5 Тогда
            Если     Найти(Цифры, Сред(Результат, 1, 1)) = 0
                 ИЛИ Найти(Цифры, Сред(Результат, 2, 1)) = 0
                 ИЛИ "." <>       Сред(Результат, 3, 1)
                 ИЛИ Найти(Цифры, Сред(Результат, 4, 1)) = 0
                 ИЛИ Найти(Цифры, Сред(Результат, 5, 1)) = 0 Тогда
                Контроль = 0;
            КонецЕсли;     
        ИначеЕсли СтрДлина(Результат) = 4 Тогда
            Если     Найти(Цифры, Сред(Результат, 1, 1)) = 0
                 ИЛИ Найти(Цифры, Сред(Результат, 2, 1)) = 0
                 ИЛИ "." <>       Сред(Результат, 3, 1)
                 ИЛИ Найти(Цифры, Сред(Результат, 4, 1)) = 0 Тогда
                Контроль = 0;
            КонецЕсли;     
        Иначе    
            Контроль = 0;
        КонецЕсли;
        Если Контроль = 0 Тогда
            ОписаниеОшибки = "Значение не является кодом КВЕД (в формате: xx.xx.x или xx.xx или xx.x)"
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKv") Тогда
        //<!--Загальний тип "Квартал"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 4
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 4";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 4";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGNYear")
           ИЛИ  ВРег(Тип) = ВРег("YearNColumn") Тогда
        //<!--Загальний тип "Рік народження"-->
        Если НЕ ЗначениеЗаполнено(Значение) 
            ИЛИ Значение = "0" Тогда 
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1900 
                ИЛИ Контроль > 2099
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1900 до 2099";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1900 до 2099";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGYear") 
          ИЛИ ВРег(Тип) = ВРег("YearColumn") Тогда
        //<!--Загальний тип "Рік"-->
        Если НЕ ЗначениеЗаполнено(Значение) 
            ИЛИ Значение = "0" Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1991 
                ИЛИ Контроль > 2099
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1991 до 2099";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1991 до 2099";
        КонецПопытки;
        
    ИначеЕсли   ВРег(Тип) = ВРег("DGHZIP") 
             ИЛИ ВРег(Тип) = ВРег("ZipColumn") Тогда
        //<!--Загальний тип "Код міста"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение," ","");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        Результат = ДополнитьСтрокуСимволами(Результат,"0",5,1);
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 99999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым пятизначным числом";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым пятизначным числом";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHEMAIL") Тогда
        //<!--Загальний тип "Електронна пошта"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Контроль = 1;
        ПозицияСобачки = Найти(Результат, "@");
        Если ПозицияСобачки = 0 Тогда
            Контроль = 0;
        Иначе
            
            Если Найти(Сред(Результат, ПозицияСобачки + 1), "@") > 0 Тогда
                Контроль = 0;    
            КонецЕсли;
            
        КонецЕсли;
        
        Если Контроль = 0 Тогда
            ОписаниеОшибки = "Значение не адресом электронной почты (в формате <текст>@<текст>)";
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHTEL")
          ИЛИ ВРег(Тип) = ВРег("DGHFAX") Тогда
        //<!--Загальний тип "Номер телефона"-->
        //<!--Загальний тип "Номер факса"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Контроль = 1;
        ДопустимыСимволы = "0 1 2 3 4 5 6 7 8 9 .,+-;()";
        Для Сч = 1 По СтрДлина(Результат) Цикл
            Если Найти(ДопустимыСимволы, Сред(Результат,Сч,1)) = 0 Тогда
                Контроль = 0;
                Прервать;
            КонецЕсли;    
        КонецЦикла;            
        
        Если Контроль = 0 Тогда
            ОписаниеОшибки = "Можно использовать только следующие символы: " + ДопустимыСимволы + "
                             |Длина должна быть более 4-х символов";
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal0")
          ИЛИ ВРег(Тип) = ВРег("Decimal0Column")Тогда
        //<!--Загальний тип "Числові дані 0 знаки після коми"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        
        Попытка
            Контроль = Число(Результат);
            Если (Найти(Результат, ".") > 0 И (Найти(Результат, ".") < СтрДлина(Результат)-2))
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом до 9000000000";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом до 9000000000";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal1")
          ИЛИ ВРег(Тип) = ВРег("Decimal1Column")
          ИЛИ ВРег(Тип) = ВРег("DGKODR") Тогда
        //<!--Загальний тип "Числові дані 1 знак після коми"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=1; ЧРД=.; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);

        Попытка
            Контроль = Число(Результат);
            Если   (Найти(Результат, ".") = 0 ИЛИ (Найти(Результат, ".") < СтрДлина(Результат)-2)) 
                //в схеме разрешено иметь два значащих знака после запятой...
                ИЛИ Цел(Контроль*10) <> Контроль*10 Тогда
                ОписаниеОшибки = "Значение не является числом c одним знаком после запятой";
            КонецЕсли;
            
            Если ВРег(Тип) = ВРег("DGKODR")
                И (Контроль > 99.9) Тогда
                ОписаниеОшибки = "Значение не является двузначным числом c одним знаком после запятой";    
            КонецЕсли;
            
        Исключение
            ОписаниеОшибки = "Значение не является числом c одним знаком после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal2")
          ИЛИ ВРег(Тип) = ВРег("Decimal2Column")
          ИЛИ ВРег(Тип) = ВРег("DGdecimal2_P")
          ИЛИ ВРег(Тип) = ВРег("Decimal2Column_P")
          Тогда
        //<!--Загальний тип "Числові дані 2 знак після коми"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);

        Попытка
            Контроль = Число(Результат);
            Если    (Найти(Результат, ".") = 0 ИЛИ (Найти(Результат, ".") < СтрДлина(Результат)-2)) 
                ИЛИ Цел(Контроль*100) <> Контроль*100 Тогда
                ОписаниеОшибки = "Значение не является числом c двумя знаком после запятой";
            КонецЕсли;
            Если ВРег(Тип) = ВРег("DGdecimal2_P") ИЛИ ВРег(Тип) = ВРег("Decimal2Column_P") Тогда
                Если Контроль < 0 Тогда
                    ОписаниеОшибки = "Значение не является неотрицательным числом c двумя знаком после запятой";
                КонецЕсли;
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c двумя знаком после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGpercentAlloc") Тогда
        
        //<!--Загальний тип "проценти розподілу, питома вага, числові дані, можливо з 2 знаками після коми, від 0 до 100 включно"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);

        Попытка
            Контроль = Число(Результат);
            Если   (Найти(Результат, ".") < СтрДлина(Результат)-2) 
                ИЛИ Цел(Контроль*100) <> Контроль*100 
                ИЛИ Контроль >100 Тогда
                ОписаниеОшибки = "Значение не является числом c двумя знаком после запятой меньшее 9000000000";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c двумя знаком после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal3")
          ИЛИ ВРег(Тип) = ВРег("Decimal3Column")Тогда
        //Загальний тип "Числові дані 3 знаки після коми
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=3; ЧРД=.; ЧГ=0");    
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        Попытка
            Контроль = Число(Результат);
            Если    (Найти(Результат, ".") = 0 ИЛИ (Найти(Результат, ".") < СтрДлина(Результат) - 3))  
                ИЛИ Цел(Контроль*1000) <> Контроль*1000 Тогда
                ОписаниеОшибки = "Значение не является числом c тремя знаками после запятой";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c тремя знаками после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal4")
          ИЛИ ВРег(Тип) = ВРег("Decimal4Column") Тогда
        //Загальний тип "Числові дані 4 знаки після коми
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=4; ЧРД=.; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        Попытка
            Контроль = Число(Результат);
            Если   Найти(Результат, ".") <> СтрДлина(Результат) - 4  
                ИЛИ Цел(Контроль*10000) <> Контроль*10000 Тогда
                ОписаниеОшибки = "Значение не является числом c четырьмя знаками после запятой";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c четырьмя знаками после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal5")
          ИЛИ ВРег(Тип) = ВРег("Decimal5Column") Тогда
        //Загальний тип "Числові дані 5 знаки після коми
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=5; ЧРД=.; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        Попытка
            Контроль = Число(Результат);
            Если   Найти(Результат, ".") <> СтрДлина(Результат) - 5  
                ИЛИ Цел(Контроль*100000) <> Контроль*100000 Тогда
                ОписаниеОшибки = "Значение не является числом c пятью знаками после запятой";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c пятью знаками после запятой";
        КонецПопытки;
            
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimal6")
          ИЛИ ВРег(Тип) = ВРег("Decimal6Column")
          ИЛИ ВРег(Тип) = ВРег("Decimal6Column_R")
          ИЛИ ВРег(Тип) = ВРег("DGdecimal6_R")
          Тогда
        //Загальний тип "Числові дані 6 знаки після коми
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=6; ЧРД=.; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        Попытка
            Контроль = Число(Результат);
            Если   Найти(Результат, ".") <> СтрДлина(Результат) - 6  
                ИЛИ Цел(Контроль*1000000) <> Контроль*1000000 Тогда
                ОписаниеОшибки = "Значение не является числом c шестью знаками после запятой";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c шестью знаками после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("Decimal12Column_R")
          ИЛИ ВРег(Тип) = ВРег("DGdecimal12_R")
          Тогда
        //Загальний тип "Числові дані 12 знаки після коми
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=12; ЧРД=.; ЧГ=0");
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;
        Результат = СокрЛП(Результат);
        
        Попытка
            Контроль = Число(Результат);
            Если   Найти(Результат, ".") <> СтрДлина(Результат) - 12  
                ИЛИ Цел(Контроль*1000000000000) <> Контроль*1000000000000 Тогда
                ОписаниеОшибки = "Значение не является числом c 12 знаками после запятой";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом c 12 знаками после запятой";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGDrfo") //<!--Загальний тип "Код ДРФО фізичної особи допускається числовий код, або № паспорта"-->
        ИЛИ ВРег(Тип) = ВРег("DGLong")   //<!--Загальний тип "Код ЄДРПОУ (ДРФО підприємця: числа, або № паспорта)"-->
        ИЛИ ВРег(Тип) = ВРег("DGHTINF")  //<!--Загальний тип "Код HTINF (Ідентифікаційний номер платника згідно з ДРФО)"-->
        ИЛИ ВРег(Тип) = ВРег("DGHTINSD") //<!--Загальний тип "Код HTINSD (Реєстраційний (обліковий) номер платника )"--> 
        ИЛИ ВРег(Тип) = ВРег("TinColumn")//<!--Загальний тип "Код ЕДРПОУ(ДРФО) в колонці"-->
        ИЛИ ВРег(Тип) = ВРег("DGHKBOS")  //<!--Загальний тип "Код ДРФО директора"-->
        ИЛИ ВРег(Тип) = ВРег("DGHKBUH")  //<!--Загальний тип "Код ДРФО бухгалтера"-->
        ИЛИ ВРег(Тип) = ВРег("DGDrfo_pfu")
        ИЛИ ВРег(Тип) = ВРег("DGLong_pfu")
        ИЛИ ВРег(Тип) = ВРег("DGHTINF_pfu")
        ИЛИ ВРег(Тип) = ВРег("DGHKBOS_pfu") 
        ИЛИ ВРег(Тип) = ВРег("DGHKBUH_pfu")
        ИЛИ ВРег(Тип) = ВРег("DRFO_10Column")
        ИЛИ ВРег(Тип) = ВРег("DGDRFO_10")
        Тогда 
        //<xs:pattern value="([0-9]{5,10}|[АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ]{2}[0-9]{6})"/>
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = Значение;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        КонецЕсли;
        Результат = СокрЛП(Значение);
        
        Контроль = 1;
        Если Найти("0123456789", Лев(Результат,1)) > 0 Тогда
            // начинается с цифр - значит от 5 до 10
            Если    СтрДлина(Результат) < 5
                ИЛИ СтрДлина(Результат) > 10 Тогда
                Контроль = 0;    
            Иначе
                // Дополним нулями до 10 знаков только для явных кодов ДРФО: чтобы TIN (тип DGLONG) 
                // для юр.лиц не был десятизначным. С точки зрения XML это нормально, но есть некоторые внешние нестыковки
                Если (ВРег(Тип) <> ВРег("DGLong"))//<!--Загальний тип "Код ЄДРПОУ (ДРФО підприємця: числа, або № паспорта)"-->
                  И  (ВРег(Тип) <> ВРег("TinColumn"))
                  И  (ВРег(Тип) <> ВРег("DGHTINSD")) Тогда
                    Результат = ДополнитьСтрокуСимволами(Результат,"0",10,1);
                КонецЕсли;                
                Для Сч = 1 По СтрДлина(Результат) Цикл
                    Если Найти("0123456789", Сред(Результат,Сч,1)) = 0 Тогда
                        Контроль = 0;
                        Прервать;
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
        Иначе
            Если    ВРег(Тип) = ВРег("DGDrfo_pfu") 
                ИЛИ ВРег(Тип) = ВРег("DGLong_pfu") 
                ИЛИ ВРег(Тип) = ВРег("DGHTINF_pfu") 
                ИЛИ ВРег(Тип) = ВРег("DGHKBOS_pfu")
                ИЛИ ВРег(Тип) = ВРег("DGHKBUH_pfu") Тогда
                // должен быть номер паспорта
                Если    СтрДлина(Результат) <> 10
                    ИЛИ Сред(Результат,1,2) <> "БК"
                    ИЛИ    Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,3,1)) = 0
                    ИЛИ Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,4,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,5,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,6,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,7,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,8,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,9,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,10,1)) = 0 Тогда
                    ОписаниеОшибки = "Неправильно указан ИНН (код по ДРФО) либо Серия и номер паспорта для физ. лица, у которого нет кода.
                                     |Паспорт указывается в формате БКССНННННН (""БК"" - фиксированные символы (""без кода"") СС - серия, НННННН - номер паспорта)"
                КонецЕсли;
            Иначе
                // должен быть номер паспорта
                Если    СтрДлина(Результат) <> 8
                    ИЛИ    Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,1,1)) = 0
                    ИЛИ Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,2,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,3,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,4,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,5,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,6,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,7,1)) = 0 
                    ИЛИ Найти("0123456789",Сред(Результат,8,1)) = 0 Тогда
                    Контроль = 0;                               
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
        
        Если Контроль = 0 Тогда
        
            ОписаниеОшибки = "Неправильно указан ИНН (код по ДРФО) либо Серия и номер паспорта для физ. лица, у которого нет кода.
                             |Паспорт указывается в формате ССНННННН (СС - серия, НННННН - номер паспорта)"
        
        КонецЕсли;
        
        
    ИначеЕсли ВРег(Тип) = ВРег("DGPass") //<!--Загальний тип "№ паспорта" (HPASS)-->
        Тогда 
        //<xs:pattern value="[АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ]{2}[0-9]{6}"/>
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = Значение;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        КонецЕсли;
        Результат = СокрЛП(Значение);
        
        Контроль = 1;
        // должен быть номер паспорта
        Если    СтрДлина(Результат) <> 8
            ИЛИ    Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,1,1)) = 0
            ИЛИ Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ",Сред(Результат,2,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,3,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,4,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,5,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,6,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,7,1)) = 0 
            ИЛИ Найти("0123456789",Сред(Результат,8,1)) = 0 Тогда
            Контроль = 0;                               
        КонецЕсли;
        
        Если Контроль = 0 Тогда
        
            ОписаниеОшибки = "Неправильно Серия и номер паспорта для физ. лица, у которого нет кода.
                             |Паспорт указывается в формате ССНННННН (СС - серия, НННННН - номер паспорта)"
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGNLong") //<!--Загальний тип "Код ЄДРПОУ (тiльки числа)"-->
        ИЛИ ВРег(Тип) = ВРег("EDRPOUColumn")//<!--Загальний тип "Код ЕДРПОУ в колонці"-->
        ИЛИ ВРег(Тип) = ВРег("DGHTINJ") //<!--Загальний тип " Код HTINJ (Ідентифікаційний код платника згідно з ЄДРПОУ)"-->
        ИЛИ ВРег(Тип) = ВРег("DGHTINNR")//<!--Загальний тип "Код HTINNR (Ідентифікаційний код представництвa нерезидента, що не має статусу юридичної особи)"--> 
        Тогда 
        //<xs:restriction base="xs:string">
        //<xs:pattern value="([0-9]{5,10})"/>
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = Значение;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        КонецЕсли;
        Результат = СокрЛП(Значение);
        // начинается с цифр - значить от 5 до 10
        Результат = ДополнитьСтрокуСимволами(Результат,"0",8,1);
        
        Контроль = 1;
        Если    СтрДлина(Результат) < 5
            ИЛИ СтрДлина(Результат) > 10 Тогда
            Контроль = 0;    
        Иначе
            Для Сч = 1 По СтрДлина(Результат) Цикл
                Если Найти("0123456789", Сред(Результат,Сч,1)) = 0 Тогда
                    Контроль = 0;
                    Прервать;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    
        Если Контроль = 0 Тогда
        
            ОписаниеОшибки = "Неправильно указан код по ЕДРПОУ (допускаются только цифры от 5 до 10 символов)"
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHNDGVSD") Тогда
        //<!--Загальний тип "Код HNDGVSD (№ договору про спільну (сумісну) діяльність)"-->
        Если Не ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Строка(Значение));
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHNSPDV") Тогда
        //<!--Загальний тип "Код HNSPDV (номер свідоцтва про реєстрацію платника ПДВ)"-->
        //<!-- 30.12.2010 Внесено можливість вносити 0 відповідно до п.8 наказу ДПАУ від 21.12.2010 N969
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение," ","");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 9999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 0 до 9999999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 0 до 9999999999";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHTINUM") Тогда
        //<!--Загальний тип "Код HTINUM (податковий номер платника, що проводить управління майном)"-->
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение," ","");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 9999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 9999999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 9999999999";
        КонецПопытки;
        
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHBOS")  //<!--Загальний тип "ПІБ директора"-->
          ИЛИ ВРег(Тип) = ВРег("DGHBUH")  //<!--Загальний тип "ПІБ бухгалтера"-->
          ИЛИ ВРег(Тип) = ВРег("DGHFO")   //<!--Загальний тип "ПІБ фізичної особи"-->
          Тогда
        
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Строка(Значение));
        
        Если СтрДлина(Результат) = 0 Тогда
            ОписаниеОшибки = "Длина реквизита должна быть не менее одного символа";    
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("rowInt") Тогда
        //<!--Загальний тип атрибуту ROWNUM для вказання номеру строки в табличних даних-->
        Если ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
            ПозицияТочки = Найти(Результат, ".");
            Если ПозицияТочки > 0 Тогда
                Результат = Лев(Результат, СтрДлина(Результат) - ПозицияТочки - 1);
            КонецЕсли;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = Строка(Значение);
        КонецЕсли;    
        
        
    ИначеЕсли ВРег(Тип) = ВРег("DG5-10-15nmg") Тогда
        //<!--Загальний тип "5-10-15 неоподатковуваних мінімумів "-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе    
            Результат = СокрЛП(Строка(Результат));        
        КонецЕсли;
        
        Если  Результат <> "5"
            И Результат <> "10"
            И Результат <> "15" Тогда
        
            ОписаниеОшибки = "Значением может быть либо 5 либо 10 либо 15"    
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGHNUM_N") Тогда
        //<!--Загальний тип "Номер для накладної - число, слеш і літери зц"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        ЕстьОшибка = Ложь;
        Контроль = Результат;
        Если Найти("0123456789", Лев(Контроль,1)) = 0 Тогда
            ЕстьОшибка = Истина;
        КонецЕсли;
        
        Если Найти(Контроль, "//") > 0 Тогда
            ЕстьОшибка = Истина;
        КонецЕсли;
        
        Если Не ЕстьОшибка Тогда
            Контроль = СтрЗаменить(Контроль, "/ЗЦ","");    
            Контроль = СтрЗаменить(Контроль, "/","");    
            Контроль = СтрЗаменить(Контроль, "0","");    
            Контроль = СтрЗаменить(Контроль, "1","");    
            Контроль = СтрЗаменить(Контроль, "2","");    
            Контроль = СтрЗаменить(Контроль, "3","");    
            Контроль = СтрЗаменить(Контроль, "4","");    
            Контроль = СтрЗаменить(Контроль, "5","");    
            Контроль = СтрЗаменить(Контроль, "6","");    
            Контроль = СтрЗаменить(Контроль, "7","");    
            Контроль = СтрЗаменить(Контроль, "8","");    
            Контроль = СтрЗаменить(Контроль, "9","");    
            Если СтрДлина(Контроль) > 0 Тогда
                ЕстьОшибка = Истина;
            КонецЕсли;
        КонецЕсли;
        
        Если ЕстьОшибка Тогда
        
            ОписаниеОшибки = "Номер накладной должен быть в виде числа, или в виде ""число/число"" или ""число/ЗЦ"" или ""число/число/ЗЦ"" и т. п.";            
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD3_1") 
          ИЛИ ВРег(Тип) = ВРег("KodDocROVPD3_1Column") Тогда
          
        //<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 3 розділ 1
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  Результат <> "ПН"   И Результат <> "ПЗ"    И Результат <> "ЧКУ"
            И Результат <> "РК"   И Результат <> "ПО"    И Результат <> "ТКУ"
            И Результат <> "ВМД"  И Результат <> "ЗП"    И Результат <> "ГРУ" 
            И Результат <> "ЧК"   И Результат <> "ПНУ"   И Результат <> "ПЗУ"
            И Результат <> "ТК"   И Результат <> "РКУ"   И Результат <> "ПОУ" 
            И Результат <> "ГР"   И Результат <> "ВМДУ"  И Результат <> "ЗПУ" Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ";    
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD3_2") 
          ИЛИ ВРег(Тип) = ВРег("KodDocROVPD3_2Column") Тогда
          
        //<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 3 розділ 2
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  Результат <> "ПН"   И Результат <> "ПНУ" 
            И Результат <> "РК"   И Результат <> "РКУ" 
            И Результат <> "ВМД"  И Результат <> "ВМДУ"
            И Результат <> "ПП"   И Результат <> "ППУ"
            И Результат <> "ЗЦ"   И Результат <> "ЗЦУ" Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПН, РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ";    
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD5_2") 
          ИЛИ ВРег(Тип) = ВРег("DGKodDocROVPD5_2Column") Тогда
          
        //<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 5 розділ 1
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  Результат <> "ПН"   И Результат <> "ПЗ"    И Результат <> "ЧКУ"
            И Результат <> "РК"   И Результат <> "ПО"    И Результат <> "ТКУ"
            И Результат <> "ВМД"  И Результат <> "ЗП"    И Результат <> "ГРУ" 
            И Результат <> "ЧК"   И Результат <> "ПНУ"   И Результат <> "ПЗУ"
            И Результат <> "ТК"   И Результат <> "РКУ"   И Результат <> "ПОУ" 
            И Результат <> "ГР"   И Результат <> "ВМДУ"  И Результат <> "ЗПУ" 
            И Результат <> "НП"   И Результат <> "НПУ"
            И Результат <> "ПНР"   И Результат <> "ПЗР"    И Результат <> "ЧКРУ"
            И Результат <> "РКР"   И Результат <> "ПОР"    И Результат <> "ТКРУ"
            И Результат <> "ВМДР"  И Результат <> "ЗПР"    И Результат <> "ГРРУ" 
            И Результат <> "ЧКР"   И Результат <> "ПНРУ"   И Результат <> "ПЗРУ"
            И Результат <> "ТКР"   И Результат <> "РКРУ"   И Результат <> "ПОРУ" 
            И Результат <> "ГРР"   И Результат <> "ВМДРУ"  И Результат <> "ЗПРУ" 
            И Результат <> "НПР"   И Результат <> "НПРУ"            
            И Результат <> "БО"   И Результат <> "БОРУ"  И Результат <> "БОР" И Результат <> "БОУ"
            Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ,
            |ПНР, РКР, ВМДР, ЧКР, ТКР, ГРР, ПЗР, ПОР, ЗПР, ПНРУ, РКРУ, ВМДРУ, ЧКРУ, ТКРУ, ГРРУ, ПЗРУ, ПОРУ, ЗПРУ, БОРУ,БО,БОР,БОУ";
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD5_1") 
          ИЛИ ВРег(Тип) = ВРег("DGKodDocROVPD5_1Column") Тогда
          
        //<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія  розділ 2
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  ЛЕВ(Результат,2) <> "ПН"
            И Результат <> "РК"   И Результат <> "РКУ" 
            И Результат <> "ВМД"  И Результат <> "ВМДУ"
            И Результат <> "БО"   И Результат <> "БОУ" Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПН[01...14][У], РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ";    
            
        ИначеЕсли ЛЕВ(Результат,2) = "ПН" Тогда
            
            Серединка = Сред(Результат, 3);
            
            Если Прав(Серединка, 1) = "У" Тогда
                Серединка = Сред(Серединка, 1, СтрДлина(Серединка) - 1);
            КонецЕсли;
            
            Если Серединка = "" Тогда
            ИначеЕсли СтрДлина(Серединка) <> 2
                ИЛИ Найти("01", Лев(Серединка, 1))            = 0
                ИЛИ Найти("0123456789", Прав(Серединка, 1)) = 0 
                ИЛИ (Лев(Серединка, 1) = "1" И Найти("01234", Прав(Серединка, 1)) = 0) Тогда
            
                    ОписаниеОшибки = "Значением может быть только одно из следующих: ПН[01...14][У], РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ";        
                
            КонецЕсли;
            
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGDM") Тогда
        //<!--Загальний тип "День місяця"-->
        Если НЕ ЗначениеЗаполнено(Значение) 
            ИЛИ Значение = "0" Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 1 
                ИЛИ Контроль > 31
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 1 до 31";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 1 до 31";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodTypeDoc6_1")
          ИЛИ ВРег(Тип) = ВРег("DGKodTypeDoc6_1Column") Тогда
          
        //<!--"Вид(код) документа "Розділ I. Видані податкові накладні" -->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  Результат <> "ПНП"  И Результат <> "ПНЕ" 
            И Результат <> "РКП"  И Результат <> "РКЕ" 
            И Результат <> "МДП"  И Результат <> "МДЕ"
            И Результат <> "БО"    Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО";    
            
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD6_2") 
          ИЛИ ВРег(Тип) = ВРег("DGKodDocROVPD6_2Column")Тогда
          
        //<!--Загальний тип "вид(код) документа "Розділ IІ. Отримані податкові накладні" версія документа 6--
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = ВРЕГ(СокрЛП(Строка(Результат)));        
        КонецЕсли;
        
        Если  Результат <> "ПНП"  И Результат <> "ПНЕ" 
            И Результат <> "РКП"  И Результат <> "РКЕ" 
            И Результат <> "МДП"  И Результат <> "МДЕ"
            И Результат <> "БО"  
            И Результат <> "ЧК"  И Результат <> "ТК"
            И Результат <> "ГР"  И Результат <> "ПЗ"
            И Результат <> "ПО"  И Результат <> "ЗП"
            И Результат <> "НП"
            И Результат <> "БОПНП"  И Результат <> "БОПНЕ" 
            И Результат <> "БОРКП"  И Результат <> "БОРКЕ" 
            И Результат <> "БОМДП"  И Результат <> "БОМДЕ"            
            И Результат <> "БОЧК"  И Результат <> "БОТК"
            И Результат <> "БОГР"  И Результат <> "БОПЗ"
            И Результат <> "БОПО" 
            
            Тогда
        
            ОписаниеОшибки = "Значением может быть только одно из следующих: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО, ЧК, ТК, ГР, ПЗ, ПО, ЗП, НП, БОПНП, БОПНЕ, БОРКП, БОРКЕ, БОМДП, БОМДЕ, БОЧК, БОТК, БОГР, БОПЗ, БОПО";    
            
        КонецЕсли;

    ИначеЕсли ВРег(Тип) = ВРег("DGKodСausesOperation6") 
          ИЛИ ВРег(Тип) = ВРег("DGKodСausesOperation6Column") Тогда
        //<!--Причини, складання податкової накладної за окремими операціями версія реєстру 6-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
        Иначе    
            Результат = Строка(Результат);        
        КонецЕсли;
        
        Результат = СокрЛП(Результат);
        
        Если    (СтрДлина(Результат) <> 2)
            ИЛИ (Найти("01",  Лев(Результат, 1)) = 0)
            ИЛИ (Найти("0123456789", Прав(Результат, 1)) = 0)
            ИЛИ (Число(Результат) > 15) Тогда
        
            ОписаниеОшибки = "Значением может быть число от 01 до 15 включительно, с лидирующим нулем"    
        
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGKodRectification6") 
         ИЛИ  ВРег(Тип) = ВРег("DGKodRectification6Column") Тогда
        //<!--Признак, що дані документа включаються до уточнюючих розрахунків за звітний (податковий) період „У
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = Строка(Результат);        
        КонецЕсли;
        Результат = СокрЛП(ВРег(Результат));
        
        Если НЕ (Результат = "" ИЛИ Результат = "У")   Тогда
        
            ОписаниеОшибки = "Значением может быть только символ ""У"""    
        
        КонецЕсли;

    ИначеЕсли ВРег(Тип) = ВРег("DGKodAssignment6") 
         ИЛИ  ВРег(Тип) = ВРег("DGKodAssignment6Column") Тогда        
        
        //<!--Признак, - проведено розподіл суми податкового кредиту додається літера „Р” -->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        Иначе    
            Результат = Строка(Результат);        
        КонецЕсли;
        Результат = СокрЛП(ВРег(Результат));
        
        Если НЕ (Результат = "" ИЛИ Результат = "Р")   Тогда
        
            ОписаниеОшибки = "Значением может быть только символ ""Р"""    
        
        КонецЕсли;

    ИначеЕсли ВРег(Тип) = ВРег("DGc_dpi") Тогда
        //<!--Загальний тип "Код ДПІ, використовується для обмеження коду області"-->
        // число, от 100 до 2799
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=4; ЧДЦ=0; ЧГ="));

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 100 
                ИЛИ Контроль > 2899
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 100 до 2899 (код ГНИ)";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 100 до 2899 (код ГНИ)";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGspecNom") 
          ИЛИ ВРег(Тип) = ВРег("DGspecNomColumn") Тогда
        //<!--Признак спеціальної податкової накладної"-->
        // строка, значение 2,3 или 4 + или 7
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));

        Если  Результат<> "2"
            И Результат<> "3" 
            И Результат<> "4"
            И Результат<> "5"
            И Результат<> "7"Тогда
            ОписаниеОшибки = "Значение не является одним из значений: 2,3,4,5 или 7";
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGJ13001TypeDocColumn") Тогда
        //<!--Можливі варіанти Виду документа в запиті:
        //    ПН - податкова накладна;
        //    РК - розрахунок коригування до податкової накладної (додаток 2 до податкової накладної));"-->
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = ВРЕГ(СОКРЛП(Результат));
        
        Если  Результат<> "ПН"
            И Результат<> "РК" Тогда
            ОписаниеОшибки = "Значение не является одним из значений:ПН или РК";
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGPNtypr") Тогда
        
        //<!--Можливі значення значення 01, 02, ..., 14-->
        // строка
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН="));

        Если Результат = "" Тогда
        ИначеЕсли СтрДлина(Результат) <> 2
            ИЛИ Найти("01", Лев(Результат, 1))             = 0
            ИЛИ Найти("0123456789", Прав(Результат, 1)) = 0 
            ИЛИ (Лев(Результат, 1) = "1" И Найти("01234567", Прав(Результат, 1)) = 0) Тогда
        
                ОписаниеОшибки = "Значением может быть только одно из 01...17";        
            
        КонецЕсли;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGdecimalZero") Тогда
        //<!--Загальний тип "Числовий 0" 0, 0.0, або 0.00-->
        // строка
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СокрЛП(Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧВН="));

        Если Результат = "" Тогда
        ИначеЕсли Результат <> "0"
                И Результат <> "0.0"
                И Результат <> "0.00" Тогда
                ОписаниеОшибки = "Значением может быть только ноль";        
        КонецЕсли;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGHIPN0"))
          ИЛИ (ВРег(Тип) = ВРег("HIPNColumn0"))
        Тогда
        
        //<!--Загальний тип "ІІндивідуальний податковий номер платника з можливістю внесення 0(нуля) "-->
        
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 0 
                ИЛИ Контроль > 999999999999
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 0 до 999999999999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 0 до 999999999999";
        КонецПопытки;

    ИначеЕсли (ВРег(Тип) = ВРег("Odoh1DFColumn"))
          ИЛИ (ВРег(Тип) = ВРег("DGOdoh1DF"))
        Тогда
        
        //<!--Загальний тип "Ознака доходу 1-ДФ з 01.01.2011"-->
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Контроль = Число(Результат);
            Если    Найти(Результат, ".") > 0
                ИЛИ Контроль < 101 
                ИЛИ Контроль > 185
                ИЛИ Цел(Контроль) <> Контроль Тогда
                ОписаниеОшибки = "Значение не является целым числом от 101 до 185";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является целым числом от 101 до 185";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("Oplg1DFColumn"))
          ИЛИ (ВРег(Тип) = ВРег("DGOplg1DF"))
        Тогда
        
        //<!--Загальний тип "Ознака пільги 1-ДФ з 01.01.2011"-->
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;

        Попытка
            Если  НЕ Результат =  ""
                И НЕ Результат =  "01"
                И НЕ Результат =  "02"
                И НЕ Результат =  "03"
                И НЕ Результат =  "04"  Тогда
                ОписаниеОшибки = "Значение не является кодом от 01 до 04";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является кодом от 01 до 04";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGKodControlledOperationTB08"))
          ИЛИ (ВРег(Тип) = ВРег("DGKodControlledOperationTB08Column"))
        Тогда
        
        //<!--Загальний тип "Ознака -  вид документа, яким підтверджується здійснення контрольованої операції з постачання „КО” под.накл.8 -->
        Результат = СокрЛП(Строка(Значение));
        
        Если НЕ ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;

        Попытка
            Если  Результат <> "КО"  Тогда
                ОписаниеОшибки = "Значение не является код ""КО""";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является код ""КО"""
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGNPNColumn"))
          ИЛИ (ВРег(Тип) = ВРег("DGNPN")) Тогда
        
        //////№ податкової накладної формат:
        ////// nnnnnnN/nnnnn    де:
        ////// - n необовязкове значення
        ////// - N обовязкове значення
        ////// (приклади значень: 125, 125/2, 125/012, 125/2012)
        Если ТипЗнч(Значение)=Тип("Строка") Тогда
            Результат = СтрЗаменить(Значение, " ", "");
            Результат = СтрЗаменить(Результат, ",", ".");
        ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
        Иначе
            Результат = СокрЛП(Строка(Значение));
        КонецЕсли;
        
        Если НЕ ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;

        Попытка
            
            ПозицияСлэш = Найти(Результат,"/");
            Если ПозицияСлэш = 0 Тогда
            
                НомерНН = Результат;
                НомерПодрСпецРеж = "";    
            Иначе
                
                НомерНН = Лев(Результат, ПозицияСлэш - 1);
                НомерПодрСпецРеж = Сред(Результат, ПозицияСлэш + 1);
                
            КонецЕсли;
            
            // длина номера до 7 символов, только цифры, без ведущих нулей
            Если СтрДлина(НомерНН) > 7 Тогда
                ВызватьИсключение("");
            КонецЕсли;
            Для Инд = 1 По СтрДлина(НомерНН) Цикл
                Если (Инд = 1) И Найти("123456789", Сред(НомерНН, Инд, 1)) = 0 Тогда 
                    ВызватьИсключение("");
                ИначеЕсли Найти("0123456789", Сред(НомерНН, Инд, 1)) = 0 Тогда
                    ВызватьИсключение("");
                КонецЕсли;
            КонецЦикла;
            
            Если СтрДлина(НомерПодрСпецРеж) = 1 Тогда
                
                // только код спец режима = 2 или 3 или 4
                Если НЕ НомерПодрСпецРеж = "2" И
                     НЕ НомерПодрСпецРеж = "3" И
                     НЕ НомерПодрСпецРеж = "4" Тогда
                    ВызватьИсключение("");                
                КонецЕсли;
                
            ИначеЕсли СтрДлина(НомерПодрСпецРеж) = 3 Тогда
                
                // только цифровой код подразделения
                Для Инд = 1 По 3 Цикл
                    Если Найти("0123456789", Сред(НомерПодрСпецРеж, Инд, 1)) = 0 Тогда
                        ВызватьИсключение("");
                    КонецЕсли;
                КонецЦикла;
                
            ИначеЕсли СтрДлина(НомерПодрСпецРеж) = 4 Тогда
                // код спец режима = 2 или 3 или 4
                СпецРежим = Лев(НомерПодрСпецРеж,1);
                Если НЕ СпецРежим = "2" И
                     НЕ СпецРежим = "3" И
                     НЕ СпецРежим = "4" Тогда
                    ВызватьИсключение("");                
                КонецЕсли;
                
                // цифровой код подразделения
                Для Инд = 2 По 4 Цикл
                    Если Найти("0123456789", Сред(СпецРежим, Инд, 1)) = 0 Тогда
                        ВызватьИсключение("");
                    КонецЕсли;
                КонецЦикла;
                
            КонецЕсли;
            
        Исключение
            ОписаниеОшибки = "Значение не корректным номером налогового документа: nnnnnnN/nnnnn, где n-необяз. значение, N - Обязательное; n и N - цифры.";
        КонецПопытки;

    ИначеЕсли (ВРег(Тип) = ВРег("DGI4lz"))
          ИЛИ (ВРег(Тип) = ВРег("DGI4lzColumn"))
        Тогда
        
        //<!--Число 4 знаки з початковими нулями від 0000 до 9999 використовується для: * код умовного позначення одиниць виміру ПН
        Результат = СокрЛП(Строка(Значение));
        
        Если НЕ ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Результат = СтрЗаменить(Результат, " ","");

        Попытка
            Если    СтрДлина(Результат) <> 4
                ИЛИ Найти("0123456789", Сред(Результат, 1,1)) = 0
                ИЛИ Найти("0123456789", Сред(Результат, 2,1)) = 0
                ИЛИ Найти("0123456789", Сред(Результат, 3,1)) = 0
                ИЛИ Найти("0123456789", Сред(Результат, 4,1)) = 0 Тогда
                ОписаниеОшибки = "Значение не является числом с ведущими нулями от 0000 до 9999";
            КонецЕсли;
        Исключение
            ОписаниеОшибки = "Значение не является числом с ведущими нулями от 0000 до 9999";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind3"))
        Тогда
        
        //<!--розділ Декларації (А,Б,В,Г,Ґ,Д)
        Результат = СокрЛП(Строка(Значение));
        
        Если НЕ ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Попытка
            Если    СтрДлина(Результат) <> 1
                ИЛИ Найти("АБВГҐД", Сред(Результат, 1,1)) = 0 Тогда
                ОписаниеОшибки = "Значение не является одной из букв А,Б,В,Г,Ґ,Д";
            КонецЕсли;
        Исключение
            ОписаниеОшибки =  "Значение не является одной из букв А,Б,В,Г,Ґ,Д";
        КонецПопытки;
        
    ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind4"))
        Тогда
        
        //<!--код операції розділу в Декларації акцизного податку  для розширення попереднього типу DGJ02095Ind2 для наступної версії документа
        Результат = СокрЛП(Строка(Значение));
        
        Если НЕ ЗначениеЗаполнено(Результат) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        КонецЕсли;
        
        Попытка
            Если    Результат <> "Ґ1" Тогда
                ОписаниеОшибки = "Возможно, указан не верный код операции Декларации по Акцизному налогу";
            КонецЕсли;
        Исключение
            ОписаниеОшибки =  "Возможно, указан не верный код операции Декларации по Акцизному налогу";
        КонецПопытки;
        
    ИначеЕсли ВРег(Тип) = ВРег("DGData")  или  ВРег(Тип) = ВРег("DDBODY") Тогда
    ИначеЕсли (ВРег(Тип) = ВРег("SimpleString")) Тогда
        Результат = Значение;
    ИначеЕсли ВРег(Тип) = ВРег("DGVYDZbora") Тогда
        //считаем, что пользователь должен заполнять правильно
    ИначеЕсли ВРег(Тип) = ВРег("DGSummaVKopejkah") Тогда
        // сумма в копейках
        Если ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение*100,"ЧДЦ=0; ЧН=0; ЧГ=0");
        КонецЕсли;
    ИначеЕсли ВРег(Тип) = ВРег("DGLCTRL") Тогда
        Если ТипЗнч(Значение)=Тип("Число") Тогда
            Результат = Формат(Значение,"ЧДЦ=2; ЧРД=,; ЧГ=0")
        КонецЕсли;    
    ИначеЕсли (ВРег(Тип) = ВРег("DGLongCSTRAX")) Тогда
        Если НЕ ЗначениеЗаполнено(Значение) Тогда
            Результат = "&НеЗаписывать";
            Возврат 1;
        ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
            Попытка
                Результат = Формат(Число(Значение),"ЧЦ=12; ЧВН=; ЧГ=0");
            Исключение
                Результат = "&НеЗаписывать";
                Возврат 1;
            КонецПопытки
        КонецЕсли;
        
    ИначеЕсли (ВРег(Тип) = ВРег("LINKED_DOCS")) Тогда    
        Результат = Значение;
        Возврат 1;
    
    Иначе
        Если РежимОтладки Тогда
            СообщениеПользователю(НСтр("ru='Не поддерживаемый XML-тип ';uk='Не підтримуваний XML-Тип '") + Тип + НСтр("ru='Значение ';uk='Значення '") + Значение);
            ОписаниеОшибки = НСтр("ru='Тип значения (';uk='Тип значення ('") + Тип + НСтр("ru=') не может быть преобразован!';uk=') не може бути перетворений!'") ;
            ТекстСообщения = ?(ЗначениеЗаполнено(ТекстСообщения), "", НСтр("ru='Тип значения пустой.';uk='Тип значення порожній.'")) + " " + ОписаниеОшибки;
            СообщениеПользователю(ТекстСообщения)
        КонецЕсли;
        
        фОбработано = 0;
        
    КонецЕсли;
    
    Возврат фОбработано;
    
КонецФункции

// Создает запрос и заполняет начальные установки построителя отбора.
//
// Параметры:
//     НачПериода     - Дата - начало периода
//  КонПериода     - Дата - конец периода
//  Отборы         - Структура - содержит поля для отбора
//
Функция ВыполнитьЗаполнениеНД(НачПериода, КонПериода, Отборы) Экспорт 
    
    ПроводятсяП2 = Метаданные.Документы.Приложение2КНалоговойНакладной.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
    
    // Запрос для отбора
    ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                   |    ЛОЖЬ КАК Флажок," + 
                   ?(ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP"," ВЫБОР КОГДА НалоговаяНакладная.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, ","    НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,") + 
                   "    ВЫБОР
                   |        КОГДА НалоговаяНакладная.Проведен
                   |            ТОГДА 0
                   |        КОГДА НалоговаяНакладная.ПометкаУдаления
                   |            ТОГДА 1
                   |        ИНАЧЕ 2
                   |    КОНЕЦ КАК ИдентификаторКартинки,
                   |    НалоговаяНакладная.Дата КАК Дата,
                   |    НалоговаяНакладная.Номер КАК Номер,
                   |    НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента,
                   |    НалоговаяНакладная.ВидОперации КАК ВидОперации,
                   |    НалоговаяНакладная.Контрагент КАК Контрагент,
                   |    НалоговаяНакладная.Организация КАК Организация,
                   |    НалоговаяНакладная.Комментарий КАК Комментарий,
                   |    НалоговаяНакладная.Ссылка КАК СсылкаНаДокумент,
                   |    НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК Ответственный,
                   |    РАЗНОСТЬДАТ(НалоговаяНакладная.Дата, &ТекущаяДата, ДЕНЬ) КАК ПросроченоДней,
                   |    ""Налоговая накладная"" КАК ВидДокумента,
                   |    0 КАК КартинкаОшибки,
                   |    1 КАК КодВидаДокумента
                   |ИЗ
                   |    Документ.НалоговаяНакладная КАК НалоговаяНакладная
                   |ГДЕ 
                   |    НалоговаяНакладная.Проведен
                   |ОБЪЕДИНИТЬ ВСЕ
                   |
                   |ВЫБРАТЬ
                   |    ЛОЖЬ," + 
                   ?(ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP"," ВЫБОР КОГДА Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, ","    Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,") + 
                   " ВЫБОР
                   |        КОГДА Приложение2КНалоговойНакладной.ПометкаУдаления
                   |            ТОГДА 1
                   |        КОГДА Приложение2КНалоговойНакладной.Проведен " + ?(ПроводятсяП2,"", " ИЛИ ИСТИНА") + "
                   |            ТОГДА 0
                   |        ИНАЧЕ 2
                   |    КОНЕЦ,
                   |    Приложение2КНалоговойНакладной.Дата,
                   |    Приложение2КНалоговойНакладной.Номер,
                   |    Приложение2КНалоговойНакладной.СуммаДокумента,
                   |    Приложение2КНалоговойНакладной.ВидОперации,
                   |    Приложение2КНалоговойНакладной.Контрагент,
                   |    Приложение2КНалоговойНакладной.Организация,
                   |    Приложение2КНалоговойНакладной.Комментарий,
                   |    Приложение2КНалоговойНакладной.Ссылка,
                   |    Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК Ответственный,
                   |    РАЗНОСТЬДАТ(Приложение2КНалоговойНакладной.Дата, &ТекущаяДата, ДЕНЬ),
                   |    ""Приложение 2 к налоговой накладной"",
                   //|    ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(Приложение2КНалоговойНакладной.Ссылка)),
                   |    0,
                   |    1
                   |ИЗ
                   |    Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
                   //|ГДЕ 
                   //|    Приложение2КНалоговойНакладной.Проведен
                   |УПОРЯДОЧИТЬ ПО
                   |    Дата";
    
                   
    СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
    
    Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();             
    Источник.Имя = "Источник";
    Источник.ТипИсточникаДанных = "local";
    
    Набор = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    Набор.Запрос = ТекстЗапроса;
    Набор.АвтоЗаполнениеДоступныхПолей = Истина;
    Набор.ИсточникДанных = Источник.Имя;
    Набор.Имя = Источник.Имя;
    
    ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
    Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(ИсточникНастроек);
    
    ТекНастройки = Компоновщик.Настройки;
    
    // Выбранные поля
    Для Каждого Элемент из ТекНастройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
        Если Не Элемент.Папка Тогда
            Поле = ТекНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
            Поле.Использование = Истина;
            Поле.Поле = Элемент.Поле;
        КонецЕсли;
    КонецЦикла;
    Группа = ТекНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

    ПараметрСКД = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение = ТекущаяДата();
    
    ЗаполнитьОтбор(ТекНастройки, НачПериода, КонПериода, Отборы);

    // Выводим
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ТекНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    Процессор = Новый ПроцессорКомпоновкиДанных;
    Процессор.Инициализировать(Макет);
    Вывод  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    Результат = Новый ТаблицаЗначений;
    Вывод.УстановитьОбъект(Результат); 
    Вывод.Вывести(Процессор);
    
    Возврат Результат;
    
КонецФункции // ВыполнитьЗаполнениеНД()

//-----------------------------------
//Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//справа или слева в зависимости от значения переменной Режим  (1-слева, 2-справа)
Функция ДополнитьСтрокуСимволами(Стр, Чем, Длина, Режим=1) Экспорт

    Добавить = Длина - СтрДлина(Стр);
    Если Добавить > 0  Тогда
        Добавок = "";
        Для Сч = 1 По Добавить Цикл
            Добавок = Добавок + Чем;
        КонецЦикла;
        Возврат ?(Режим = 1,Добавок + Стр,Стр + Добавок);
    ИначеЕсли Добавить < 0 Тогда
        Возврат Прав(Стр, Длина);
    Иначе
        Возврат    Стр;
    КонецЕсли;

КонецФункции

// Функция по выгрузке налоговых документов в XML
//
// Параметры:
//  КонПериода         - Дата - конец периода 
//  ОтправкаНаСервис - Булево - содержит признак необходимости отправки в сервис Приват24
//  GUID_Формы         - Уникальный идентификатор - идентификатор формы с которой связан вызов процедуры, необходим для сохранения файла в Веб-клиенте
// Возвращаемое значение:
//   - Булево - признак завершения работы функции
//
Функция СформироватьXML_Налоговые(КонПериода, ОтправкаНаСервис = Ложь, Знач GUID_Формы = Неопределено) Экспорт
    
    //Проверим существование каталога для выгрузки.
    
    Если ОтправкаНаСервис И СохрнКаталогВыгрузки = "" Тогда
        СохрнКаталогВыгрузки = КаталогВыгрузки;
        КаталогВыгрузки = КаталогВременныхФайлов();
    КонецЕсли;    

    СформироватьТаблицуПоСтруктуреXML_НН();    //Заполнение таблицы для НН    
    СформироватьТаблицуПоСтруктуреXML_П2(); //Заполнение таблицы для П2
    
    Для каждого СтрокаТЧ из СписокДокументов Цикл //цикл прерывается каждый раз, и начинается заново для оставшихся строк
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        СтрокаТЧ.КартинкаОшибки = 0;
        СтрокаТЧ.ТекстОшибки = "";
        
        ЕстьОтмеченные = Истина;
        
        СтрокаТЧ.Флажок = Ложь;
        
        Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Ответственный) Тогда
            ТекстСообщения = НСтр("ru = 'Внимание! В строке №%НомерСтроки% не заполнен ответственный за выписку налогового документа. Документ пропущен'; uk = 'Увага! У рядку №%НомерСтроки% не заповнений відповідальний за виписку податкового документа. Документ пропущений'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            ЕстьОшибки = Истина;
            СтрокаТЧ.КартинкаОшибки = 2;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            Продолжить;
        КонецЕсли;
        
        Если ТипЗнч(СтрокаТЧ.СсылкаНаДокумент) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
            ДействиеАналитики = "ННВыгрузка";
        Иначе
            ДействиеАналитики = "ННП2Выгрузка";
        КонецЕсли;
        
        ВыгрузитьДокументТЗXML(СтрокаТЧ.СсылкаНаДокумент, СтрокаТЧ.НомерСтроки);
        
        ДействиеАналитики = "ННВыгрузка";
        ФайлСохранен = СформироватьФайлыXML_Налоговые(ЕстьОшибки, ТЗXML_НН, ОтправкаНаСервис, GUID_Формы);    
        
        Если ФайлСохранен И НЕ ОтправкаНаСервис Тогда
            Возврат Истина;    
        КонецЕсли;    
        
        ДействиеАналитики = "ННП2Выгрузка";
        ФайлСохранен = СформироватьФайлыXML_Налоговые(ЕстьОшибки, ТЗXML_П2, ОтправкаНаСервис, GUID_Формы);    
        
        Если ФайлСохранен И НЕ ОтправкаНаСервис Тогда
            Возврат Истина;        
        КонецЕсли;    
        
        Если ОтправкаНаСервис Тогда
            
            ДействиеАналитики = "ННВыгрузка";
            ОтправитьДокументыНаРегистрацию(ТЗXML_НН, СписокДокументов, ЕстьОшибки, КодировкаТекста.ANSI);
            ДействиеАналитики = "ННП2Выгрузка";
            ОтправитьДокументыНаРегистрацию(ТЗXML_П2, СписокДокументов, ЕстьОшибки, КодировкаТекста.ANSI);
            
            Если ПодписыватьФинансовыеДокументыПриОтравке И РаботаВМоделиСервисаПБ Тогда
                ПодписатьФинДок(СтрокаТЧ, ТекВидОперации);
            КонецЕсли;
            
        КонецЕсли;
        
        Возврат Истина;
        
    КонецЦикла;    
    
    Если НЕ ЕстьОтмеченные Тогда
         СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для выгрузки!'; uk = 'Немає відмічених документів для вигрузки!'"), Ложь);
         Возврат Ложь;
    КонецЕсли;
    
    Если ЕстьОшибки Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при выгрузке документов! Все проблемные строки отмечены в списке.'; uk = 'Помилка при вивантаженні документів! Всі проблемні рядки відзначені в списку.' ");
        СообщениеПользователю(ТекстСообщения);
    Иначе
        ТекстСообщения = НСтр("ru = 'Все отмеченные документы успешно выгружены.'; uk = 'Всі відзначені документи успішно вивантажені.' ");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(СохрнКаталогВыгрузки) Тогда
        КаталогВыгрузки = СохрнКаталогВыгрузки;
        СохрнКаталогВыгрузки = "";
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    ЕстьОшибки = Ложь;
    СессияДок = "";
    XML = "";
    
    Возврат Ложь;
    
КонецФункции

//Процедура формирует таблицу значений согласно структуры XML формата налоговой
//
Процедура СформироватьТаблицуПоСтруктуреXML_НН()
    
    Если ТекущаяДата() >= Дата('20160401') ИЛИ ИСТИНА Тогда
        СформироватьТаблицуПоСтруктуреXML_НН_1201008();    
    КонецЕсли;
    
КонецПроцедуры

Процедура СформироватьТаблицуПоСтруктуреXML_НН_1201008()
    
    // Подготовка струткуры ТЗ "в лоб". Такой подход нужен для быстрого переноса функционала на 7.7 
    ТЗXML_НН = Новый ТаблицаЗначений;
    ТЗXML_НН.Колонки.Добавить("НомерСтрокиТЧ");//
    ТЗXML_НН.Колонки.Добавить("ИмяДокумента");//
    ТЗXML_НН.Колонки.Добавить("НомерДокумента");//
    ТЗXML_НН.Колонки.Добавить("ДатаДокумента");// в формате "DD.MM.YYYY" 

    ТЗXML_НН.Колонки.Добавить("ИмяСхемы"); // имя схемы
    ТЗXML_НН.Колонки.Добавить("TIN"); // КодЕДРПОУ Организации
    ТЗXML_НН.Колонки.Добавить("C_DOC"); // Сред(ИмяСхемы,1,3)
    ТЗXML_НН.Колонки.Добавить("C_DOC_SUB"); // Сред(ИмяСхемы,4,3)
    ТЗXML_НН.Колонки.Добавить("C_DOC_VER"); // Число(Сред(ИмяСхемы,7,2))
    ТЗXML_НН.Колонки.Добавить("C_DOC_TYPE"); // номер исправленного документа
    ТЗXML_НН.Колонки.Добавить("C_DOC_CNT"); // номер документа в периоде
    ТЗXML_НН.Колонки.Добавить("C_REG"); // Код области инспекции
    ТЗXML_НН.Колонки.Добавить("C_RAJ"); // Код административного района инспекции
    ТЗXML_НН.Колонки.Добавить("PERIOD_MONTH"); // Месяц отчета
    ТЗXML_НН.Колонки.Добавить("PERIOD_TYPE"); // Месяц        
    ТЗXML_НН.Колонки.Добавить("PERIOD_YEAR"); // Год отчета    
    ТЗXML_НН.Колонки.Добавить("C_STI_ORIG"); // Код  инспекции     
    ТЗXML_НН.Колонки.Добавить("C_DOC_STAN"); // состояние документа, 1 - отчетный документ    
    ТЗXML_НН.Колонки.Добавить("LINKED_DOCS"); // связанные документы    
    ТЗXML_НН.Колонки.Добавить("D_FILL"); // дата формирования
    ТЗXML_НН.Колонки.Добавить("SOFTWARE"); // используемое ПО
    
    ТЗXML_НН.Колонки.Добавить("R01G1"); // сводная налоговая
    ТЗXML_НН.Колонки.Добавить("R03G10S"); // составлена для операций освобожденных от налогообложения
    ТЗXML_НН.Колонки.Добавить("HORIG1"); // ОстаетсяУПродавца
    ТЗXML_НН.Колонки.Добавить("HTYPR"); // ТипПричиныНевыдачиПокупателю - число
    ТЗXML_НН.Колонки.Добавить("HFILL"); // дата выписки документа
    ТЗXML_НН.Колонки.Добавить("HNUM"); // порядковый номер (номер документа)
    ТЗXML_НН.Колонки.Добавить("HNUM1"); // номер филиала Лев(ТекНомерФилиал, 1))
    ТЗXML_НН.Колонки.Добавить("HNAMESEL"); // название Организации
    ТЗXML_НН.Колонки.Добавить("HNAMEBUY"); // название Контрагента
    ТЗXML_НН.Колонки.Добавить("HKSEL"); // ИНН Организации 
    ТЗXML_НН.Колонки.Добавить("HNUM2"); // Сред(ТекНомерФилиал, 2,3)
    ТЗXML_НН.Колонки.Добавить("HTINSEL"); // ЕДРПОУ Организации
    ТЗXML_НН.Колонки.Добавить("HKS");
    ТЗXML_НН.Колонки.Добавить("HKBUY"); // ИНН Контрагента
    
    ТЗXML_НН.Колонки.Добавить("HFBUY");
    ТЗXML_НН.Колонки.Добавить("HTINBUY"); // ЕДРПОУ Контрагента
    ТЗXML_НН.Колонки.Добавить("HKB");
    
    ТЗXML_НН.Колонки.Добавить("R04G11"); // ИтогНДС + ВсегоСумма + СуммаВозвратнойТары
    ТЗXML_НН.Колонки.Добавить("R03G11"); // ИтогНДС
    ТЗXML_НН.Колонки.Добавить("R03G7"); // СуммаНДС, ставка 20
    ТЗXML_НН.Колонки.Добавить("R03G109"); // СуммаНДС, ставка 7
    ТЗXML_НН.Колонки.Добавить("R03G14"); // СуммаНДС, ставка 14

    ТЗXML_НН.Колонки.Добавить("R01G7"); // Сумма, ставка 20
    ТЗXML_НН.Колонки.Добавить("R01G109"); // Сумма, ставка 7
    ТЗXML_НН.Колонки.Добавить("R01G14"); // Сумма, ставка 14

    ТЗXML_НН.Колонки.Добавить("R01G9"); // Сумма, ставка 0 экспорт
    ТЗXML_НН.Колонки.Добавить("R01G8"); // Сумма, ставка 0 Укр
    ТЗXML_НН.Колонки.Добавить("R01G10"); // Сумма, ставка БезНДС
    ТЗXML_НН.Колонки.Добавить("R02G11"); // СуммаВозвратнойТары
    
    ТЗXML_НН.Колонки.Добавить("ТЗ_ТЧДок", Новый ОписаниеТипов("ТаблицаЗначений"));
    ТЗ_ТЧДок_НН = Новый ТаблицаЗначений;
    
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG3S"); // номенклатура
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG4"); // код товара УКТВЕД
    
    //новая схема с 16.03.2017
    Если ТекущаяДата() >= Дата('20170316') Тогда
        ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG32"); //ознака імпортованого товару
        ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG33"); //послуги згідно з ДКПП
    КонецЕсли;
    //
    
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG4S"); // единица измерения
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG105_2S"); // код ед. изм.
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG5"); // количество
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG6"); // цена
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG008"); // КодСтавки НДС
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG009"); // КодЛьготы 
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG010"); // сумма 
    ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG11_10"); // сумма НДС
    
    //новая схема с 16.03.2017
    Если ТекущаяДата() >= Дата('20170316') Тогда
        ТЗ_ТЧДок_НН.Колонки.Добавить("RXXXXG011"); //Код виду діяльності сільсько-господарського товаро-виробника
    КонецЕсли;    
    //

    ТЗXML_НН.Колонки.Добавить("HBOS"); //кто выписал
    ТЗXML_НН.Колонки.Добавить("HKBOS"); // ИНН того кто выписал
    ТЗXML_НН.Колонки.Добавить("R003G10S"); // ПечЛьготаНДС
    
КонецПроцедуры

//Процедура формирует таблицу значений согласно структуры XML формата налоговой
//
Процедура СформироватьТаблицуПоСтруктуреXML_П2()
    
    Если ТекущаяДата() >= Дата('20160401') ИЛИ ИСТИНА Тогда
        СформироватьТаблицуПоСтруктуреXML_П2_1201208();    
    КонецЕсли;
    
КонецПроцедуры
          
Процедура СформироватьТаблицуПоСтруктуреXML_П2_1201208()
    
    //Подготовка струткуры ТЗ "в лоб". Такой подход нужен для быстрого переноса функционала на 7.7 
    
    ТЗXML_П2 = Новый ТаблицаЗначений;
    ТЗXML_П2.Колонки.Добавить("НомерСтрокиТЧ");//
    ТЗXML_П2.Колонки.Добавить("ИмяДокумента");
    ТЗXML_П2.Колонки.Добавить("НомерДокумента");
    ТЗXML_П2.Колонки.Добавить("ДатаДокумента");// в формате "DD.MM.YYYY" 
        
    ТЗXML_П2.Колонки.Добавить("ИмяСхемы"); // имя схемы
    ТЗXML_П2.Колонки.Добавить("TIN"); //КодЕДРПОУ Организации
    ТЗXML_П2.Колонки.Добавить("C_DOC"); //Сред(ИмяСхемы,1,3)
    ТЗXML_П2.Колонки.Добавить("C_DOC_SUB"); //Сред(ИмяСхемы,4,3)
    ТЗXML_П2.Колонки.Добавить("C_DOC_VER"); //Число(Сред(ИмяСхемы,7,2))
    ТЗXML_П2.Колонки.Добавить("C_DOC_TYPE"); ////номер исправленного документа
    ТЗXML_П2.Колонки.Добавить("C_DOC_CNT"); //номер документа в периоде
    ТЗXML_П2.Колонки.Добавить("C_REG"); //Код области инспекции
    ТЗXML_П2.Колонки.Добавить("C_RAJ"); //Код административного района инспекции
    ТЗXML_П2.Колонки.Добавить("PERIOD_MONTH"); //Месяц отчета
    ТЗXML_П2.Колонки.Добавить("PERIOD_TYPE"); //Месяц        
    ТЗXML_П2.Колонки.Добавить("PERIOD_YEAR"); //Год отчета    
    ТЗXML_П2.Колонки.Добавить("C_STI_ORIG"); //Код  инспекции     
    ТЗXML_П2.Колонки.Добавить("C_DOC_STAN"); //состояние документа, 1 - отчетный документ    
    ТЗXML_П2.Колонки.Добавить("LINKED_DOCS"); //связанные документы    
    ТЗXML_П2.Колонки.Добавить("D_FILL"); //дата формирования
    ТЗXML_П2.Колонки.Добавить("SOFTWARE"); //используемое ПО
    
    ТЗXML_П2.Колонки.Добавить("HERPN0"); //РегистрируетсяВЕРННПродавцом
    ТЗXML_П2.Колонки.Добавить("HERPN"); //РегистрируетсяВЕРННПокупателем
    ТЗXML_П2.Колонки.Добавить("R01G1"); //Сводная
    ТЗXML_П2.Колонки.Добавить("R03G10S"); //Освобожденная
    ТЗXML_П2.Колонки.Добавить("HORIG1"); //ОстаетсяУПродавца
    ТЗXML_П2.Колонки.Добавить("HTYPR"); //ТипПричиныНевыдачиПокупателю - число
    ТЗXML_П2.Колонки.Добавить("HFILL"); // дата выписки документа    
    ТЗXML_П2.Колонки.Добавить("HNUM"); //порядковый номер (номер документа)
    ТЗXML_П2.Колонки.Добавить("HNUM1"); //номер филиала Лев(ТекНомерФилиал, 1))
    ТЗXML_П2.Колонки.Добавить("HPODFILL"); //дата НН
    ТЗXML_П2.Колонки.Добавить("HPODNUM"); //Прав(ТекНомерНалоговой,7))
    ТЗXML_П2.Колонки.Добавить("HPODNUM1"); //Лев(ТекНомерФилиал, 1)
    ТЗXML_П2.Колонки.Добавить("HPODNUM2"); //Сред(ТекНомерФилиал, 2)
    ТЗXML_П2.Колонки.Добавить("HNAMESEL"); //название Организации
    ТЗXML_П2.Колонки.Добавить("HNAMEBUY"); //название Контрагента
    ТЗXML_П2.Колонки.Добавить("HKSEL"); //ИНН Организации 
    ТЗXML_П2.Колонки.Добавить("HNUM2"); //Сред(ТекНомерФилиал, 2,3)
    ТЗXML_П2.Колонки.Добавить("HTINSEL"); // ЕДРПОУ Организации
    ТЗXML_П2.Колонки.Добавить("HKS");    
    ТЗXML_П2.Колонки.Добавить("HKBUY"); //ИНН Контрагента
    
    ТЗXML_П2.Колонки.Добавить("HFBUY"); //ФилиалПокупателя
    ТЗXML_П2.Колонки.Добавить("HTINBUY"); // ЕДРПОУ Контрагента
    ТЗXML_П2.Колонки.Добавить("HKB");
    
    ТЗXML_П2.Колонки.Добавить("R001G03"); //ИтогНДС
    ТЗXML_П2.Колонки.Добавить("R02G9"); //ИзменениеСуммыНДС, ставка 20
    ТЗXML_П2.Колонки.Добавить("R02G111"); //ИзменениеСуммыНДС, ставка 7
    ТЗXML_П2.Колонки.Добавить("R03G14"); //ИзменениеСуммыНДС, ставка 14
    ТЗXML_П2.Колонки.Добавить("R01G9"); //ИзменениеСуммыБезНДС, ставка 20
    ТЗXML_П2.Колонки.Добавить("R01G111"); //ИзменениеСуммыБезНДС, ставка 7
    ТЗXML_П2.Колонки.Добавить("R01G14"); //ИзменениеСуммыБезНДС, ставка 14
    ТЗXML_П2.Колонки.Добавить("R006G03"); //ИзменениеСуммыБезНДС, ставка 0Эксп (901)
    ТЗXML_П2.Колонки.Добавить("R007G03"); //ИзменениеСуммыБезНДС, ставка 0Укр (902) 
    ТЗXML_П2.Колонки.Добавить("R01G11"); //ИзменениеСуммыБезНДС, ставка БезНДС
        
        
    ТЗXML_П2.Колонки.Добавить("ТЗ_ТЧДок", Новый ОписаниеТипов("ТаблицаЗначений"));
    ТЗ_ТЧДок_П2 = Новый ТаблицаЗначений;
    
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG001"); //номер строки НН
    //ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG2S"); //причина корректировки
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG21"); //причина корректировки
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG22"); //причина корректировки

    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG3S"); //номенклатура
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG4"); //код товара УКТВЕД
    //новая схема с 16.03.2017
    Если ТекущаяДата() >= Дата('20170316') Тогда
        ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG32"); //ознака імпортованого товару
        ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG33"); //послуги згідно з ДКПП
    КонецЕсли;    
    //
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG4S"); //единица измерения
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG105_2S"); //код ед. изм.
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG5"); //изменение количества
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG6"); //цена без НДС (которая была)
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG7"); //изменение цены
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG8"); //кол-во товара
    
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG008"); //КодСтавки
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG009"); //КодЛьготы 
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG010"); //ИзменениеСуммыБезНДС
    ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG11_10"); //ИзменениеСуммыНДС
    //новая схема с 16.03.2017
    Если ТекущаяДата() >= Дата('20170316') Тогда
        ТЗ_ТЧДок_П2.Колонки.Добавить("RXXXXG011");//Код виду діяльності сільсько-господарського товаро-виробника
    КонецЕсли;    
    //
    ТЗXML_П2.Колонки.Добавить("HBOS"); //КтоВыписалНалоговуюНакладную
    ТЗXML_П2.Колонки.Добавить("HKBOS"); //ИННКтоВыписалНН
    ТЗXML_П2.Колонки.Добавить("R003G10S"); //ЛьготаНДС

КонецПроцедуры

Функция ЗаполнитьСтруктуруСведенийОбОрганизации(Организация, КонПериода)    
    
    СтруктураСведений = Новый Структура;
    СтруктураСведений.Вставить("КодПоЕДРПОУ", "");
    СтруктураСведений.Вставить("ИНН", "");
    СтруктураСведений.Вставить("НомерСвидетельства", "");
    
    Если НЕ ЗначениеЗаполнено(Организация) Тогда
        Возврат СтруктураСведений;
    КонецЕсли;
    
    //сначала все постоянные сведения из справочника "Организации"
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если ЗначениеЗаполнено(Организация.НаименованиеСокращенное) Тогда
            НаименованиеОрганизации = Организация.НаименованиеСокращенное;
        Иначе
            НаименованиеОрганизации = Организация.НаименованиеПолное;
        КонецЕсли;
    Иначе
        НаименованиеОрганизации = Организация.НаименованиеПолное;
    КонецЕсли;    
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        СведенияОбОрганизации = "";
        мЮридическийАдресОрганизации = "";
        ТекТелефоныОрг = "";
        ТелефонОрг = "";
        
        СтруктураСведений.Вставить("КодПоЕДРПОУ", СокрЛП(Организация.КодПоЕДРПОУ));
        СтруктураСведений.Вставить("ИНН", СокрЛП(Организация.ИНН));
        СтруктураСведений.Вставить("НомерСвидетельства", СокрЛП(Организация.НомерСвидетельства));
        
        //Руководитель = "";
        //Попытка
        //    Выполнить("Руководитель = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, КонецДня(КонПериода)).Руководитель");
        //Исключение
        //КонецПопытки;
        //СтруктураСведений.Вставить("ФИОРук", Руководитель);
        Попытка
            Выполнить("СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Организация, КонецДня(КонПериода), Истина, Неопределено, ТекущийЯзык().КодЯзыка)");
        Исключение
            Попытка
                Выполнить("СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ТекущийЯзык().КодЯзыка, Организация, КонецДня(КонПериода))");
            Исключение
                // BSB
                Выполнить("СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Организация, КонецДня(КонПериода), Истина, Неопределено, ТекущийЯзык().КодЯзыка)")
            КонецПопытки
        КонецПопытки;

        Попытка
            Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации,  ""ЮридическийАдрес,"",  Ложь))");
        Исключение
            // BSB
            Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации,  ""ЮридическийАдрес,"",  Ложь))")
        КонецПопытки;

        Попытка
            Выполнить("ТекТелефоныОрг = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, ""Телефоны,"", Ложь)");
        Исключение
            // BSB
            Выполнить("ТекТелефоныОрг = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, ""Телефоны,"", Ложь)")
        КонецПопытки;

        Выполнить("СтруктураСведений.Вставить(""ТелефонОрганизации"",УправлениеНебольшойФирмойСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрг))");
        
        Попытка
            мНалоговаяИнспекция = Организация.НалоговаяИнспекция;
            
            //налоговая инспекция из справочника налоговых инспекций
            Если ЗначениеЗаполнено(мНалоговаяИнспекция) Тогда 
                
                КодНал = мНалоговаяИнспекция.Код;
                КодОблНал = Лев(КодНал,2);
                КодАдмРайона = Прав(КодНал,2);
                
                НалоговаяИнспекция = мНалоговаяИнспекция;
                
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        Если Не ЗначениеЗаполнено(КодНал) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание для текущей конфигурации необходимо вручную заполнить данные по налоговой инспекции.';uk='Увага для даної конфігурації необхідно вручну заповнити дані по податковій інспекції.'") 
                + Символы.ПС + НСтр("ru = 'Сделать это можно в карточке организации или на закладке параметров';uk='Зробити це можна в картці організації або на закладці параметрів'"), Ложь);//,,"РеквизитыНалоговой","Объект");
        КонецЕсли;
    ИначеЕсли ИдКонф = "OSMD" Тогда
        
        СведенияОбОрганизации = "";
            
        СтруктураСведений.Вставить("КодПоЕДРПОУ", СокрЛП(Организация.КодПоЕДРПОУ));
        СтруктураСведений.Вставить("ИНН", СокрЛП(Организация.ИНН));
        СтруктураСведений.Вставить("НомерСвидетельства", СокрЛП(Организация.НомерСвидетельства));
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        мЮридическийАдресОрганизации = "";
        
        СписокПоказателей = Новый СписокЗначений;
        //СписокПоказателей.Добавить("","ФИОРук");
        СписокПоказателей.Добавить("","КодПоЕДРПОУ");
        СписокПоказателей.Добавить("","ИНН");
        СписокПоказателей.Добавить("","НомерСвидетельства");
        СписокПоказателей.Добавить("","НалоговаяИнспекция");
        
        Если ИдКонф = "ERP" Тогда
            Выполнить("СтруктураСведений = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, КонецДня(КонПериода), СписокПоказателей)");
        Иначе
            Выполнить("СтруктураСведений = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецДня(КонПериода), СписокПоказателей)");
        КонецЕсли;
        
        мНалоговаяИнспекция   = СтруктураСведений.НалоговаяИнспекция;

        //налоговая инспекция из справочника налоговых инспекций
        Если ЗначениеЗаполнено(мНалоговаяИнспекция) Тогда 
            
            КодНал = мНалоговаяИнспекция.Код;
            КодОблНал = Лев(КодНал,2);
            КодАдмРайона = Прав(КодНал,2);
            
            НалоговаяИнспекция = мНалоговаяИнспекция;

        КонецЕсли;

        СведенияОПродавце = "";
        Выполнить("СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, КонецДня(КонПериода))");
        Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"",ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, ""ЮридическийАдрес,"", Ложь))");
        Выполнить("СтруктураСведений.Вставить(""ТелефонОрганизации"", ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, ""Телефоны,"",Ложь)))");
        
    ИначеЕсли ИдКонф = "KUBU" Тогда
        
        СведенияОбОрганизации = "";
        мЮридическийАдресОрганизации = "";
        ТекТелефоныОрг = "";
        ТелефонОрг = "";
        
        Данные = Новый Структура("Организация",Организация); 
        КодыОрганизации = РегистрыСведений.КодыОрганизаций.СрезПоследних(ТекущаяДата(), Данные);
        Если КодыОрганизации.Количество()> 0 Тогда
            мНалоговаяИнспекция = КодыОрганизации[0].НалоговаяИнспекция.Ссылка;
            
            КодНал = мНалоговаяИнспекция.Код;
            КодОблНал = Лев(КодНал,2);
            КодАдмРайона = Прав(КодНал,2);
            
            НалоговаяИнспекция = мНалоговаяИнспекция;
            
            СтруктураСведений.Вставить("ИНН", СокрЛП(КодыОрганизации[0].ИНН));
            СтруктураСведений.Вставить("НомерСвидетельства", СокрЛП(КодыОрганизации[0].НомерСвидетельства));
        КонецЕсли;
        
        
        СтруктураСведений.Вставить("КодПоЕДРПОУ", СокрЛП(КодыОрганизации[0].КодЕДРПОУ));
        
        Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации))");
        
        Выполнить("СтруктураСведений.Вставить(""ТелефонОрганизации"", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации))");
        
        Если Не ЗначениеЗаполнено(КодНал) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание для текущей конфигурации необходимо вручную заполнить данные по налоговой инспекции.';uk='Увага для даної конфігурації необхідно вручну заповнити дані по податковій інспекції.'") 
                + Символы.ПС + НСтр("ru = 'Сделать это можно на закладке параметров';uk='Зробити це можна на закладці параметрів'"), Ложь);//,,"РеквизитыНалоговой","Объект");
        КонецЕсли;
        
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
        СведенияОбОрганизации = "";
        мЮридическийАдресОрганизации = "";
        ТекТелефоныОрг = "";
        ТелефонОрг = "";
        
        Данные = Новый Структура("Организация",Организация); 
        КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ТекущаяДата(), Данные);
        Если КодыОрганизации.Количество()> 0 Тогда
            мНалоговаяИнспекция = КодыОрганизации[0].НалоговаяИнспекция.Ссылка;
            
            КодНал = мНалоговаяИнспекция.Код;
            КодОблНал = Лев(КодНал,2);
            КодАдмРайона = Прав(КодНал,2);
            
            НалоговаяИнспекция = мНалоговаяИнспекция;
            
            СтруктураСведений.Вставить("ИНН", СокрЛП(КодыОрганизации[0].ИНН));
            СтруктураСведений.Вставить("НомерСвидетельства", СокрЛП(КодыОрганизации[0].НомерСвидетельства));
        КонецЕсли;
        
        
        СтруктураСведений.Вставить("КодПоЕДРПОУ", СокрЛП(Организация.КодПоЕДРПОУ));
        
        
        //Руководитель = "";
        //Попытка
        //    Выполнить("Руководитель = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, КонецДня(КонПериода)).Руководитель");
        //Исключение
        //КонецПопытки;
        //СтруктураСведений.Вставить("ФИОРук", Руководитель);

        
        Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"", БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Организация, ""Юридический""))");
        
        Выполнить("СтруктураСведений.Вставить(""ТелефонОрганизации"", БухгалтерскийУчетПереопределяемый.ПолучитьТелефонИзКонтактнойИнформации(Организация))");
        
        Если Не ЗначениеЗаполнено(КодНал) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание для текущей конфигурации необходимо вручную заполнить данные по налоговой инспекции.';uk='Увага для даної конфігурації необхідно вручну заповнити дані по податковій інспекції.'") 
                + Символы.ПС + НСтр("ru = 'Сделать это можно на закладке параметров';uk='Зробити це можна на закладці параметрів'"), Ложь);//,,"РеквизитыНалоговой","Объект");
        КонецЕсли;
    Иначе    
        
        СписокПоказателей = Новый СписокЗначений;
        //СписокПоказателей.Добавить("","ФИОРук");
        СписокПоказателей.Добавить("","КодПоЕДРПОУ");
        СписокПоказателей.Добавить("","ИНН");
        СписокПоказателей.Добавить("","НомерСвидетельства");
        СписокПоказателей.Добавить("","НалоговаяИнспекция");

        Выполнить("СтруктураСведений = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецДня(КонПериода), СписокПоказателей)");
        
        мНалоговаяИнспекция   = СтруктураСведений.НалоговаяИнспекция;

        //налоговая инспекция из справочника налоговых инспекций
        Если ЗначениеЗаполнено(мНалоговаяИнспекция) Тогда 
            
            КодНал = мНалоговаяИнспекция.Код;
            КодОблНал = Лев(КодНал,2);
            КодАдмРайона = Прав(КодНал,2);
            
            НалоговаяИнспекция = мНалоговаяИнспекция;
        Иначе
            
            ТекстСообщения = НСтр("ru = 'Внимание! Необходимо вручную заполнить данные по налоговой инспекции. Сделать это можно на закладке ""Параметры отправки""';uk=' Увага! Необхідно вручну заповнити дані по податковій інспекції. Зробити це можна на закладці ""Параметри відправки"" '");
            СообщениеПользователю(ТекстСообщения, Ложь);
            
        КонецЕсли;
        
        Выполнить("СтруктураСведений.Вставить(""ЮридическийАдресОрганизации"",УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,""Юридический""))");
        Выполнить("СтруктураСведений.Вставить(""ТелефонОрганизации"", УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация))");
                
    КонецЕсли;
    
    Возврат СтруктураСведений;

КонецФункции    

// Процедура заполняет сведения о выбранной организации
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, КонПериода) Экспорт
    
    Если НЕ ЗначениеЗаполнено(КонПериода) Тогда
        КонПериода = ТекущаяДата();
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Организация) Тогда
        Попытка
            //ЗаполнитьОрганизациюПоУлолчанию();
        Исключение
        КонецПопытки;    
    КонецЕсли;
    
    КодПоЕДРПОУ = "";
    ИНН = "";
    НомерСвидетельства = "";
    ЮридическийАдресОрганизации = "";
    ТелефонОрганизации = "";
    
    Попытка
        
        СтруктураСведений = ЗаполнитьСтруктуруСведенийОбОрганизации(Организация, КонПериода);        
        
        Если ЗначениеЗаполнено(СтруктураСведений.КодПоЕДРПОУ) Тогда
            КодПоЕДРПОУ = СтруктураСведений.КодПоЕДРПОУ;
        КонецЕсли;
        
        Если СтрДлина(КодПоЕДРПОУ) > 10 Тогда
            ТекстСообщения = НСтр("ru='Внимание! Код ЕДРПОУ фирмы  больше 10 символов!';uk='Увага! Код ЄДРПОУ фірми більше 10 символів!'");
            СообщениеПользователю(ТекстСообщения, Ложь);    
        КонецЕсли;
        
        Если ЗначениеЗаполнено(СтруктураСведений.ИНН) Тогда
            ИНН = СтруктураСведений.ИНН;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(СтруктураСведений.НомерСвидетельства) Тогда
            НомерСвидетельства = СтруктураСведений.НомерСвидетельства;
        КонецЕсли;    
        
        Если ЗначениеЗаполнено(СтруктураСведений.ЮридическийАдресОрганизации) Тогда
            ЮридическийАдресОрганизации = СтруктураСведений.ЮридическийАдресОрганизации;
        КонецЕсли;    
        
        Если ЗначениеЗаполнено(СтруктураСведений.ТелефонОрганизации) Тогда
            ТелефонОрганизации = СтруктураСведений.ТелефонОрганизации;
        КонецЕсли;    
        
        Если Не ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
            ТекстСообщения = НСтр("ru='Внимание! Не удалось заполнить поле Код ЕДРПОУ фирмы';uk='Увага! Не вдалося заповнити поле Код ЄДРПОУ фірми'");
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(ИНН) Тогда
            ТекстСообщения = НСтр("ru='Внимание! Не удалось заполнить поле Код ИНН фирмы';uk='Увага! Не вдалося заповнити поле Код ІПН фірми'");
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЕсли;
        
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки(), Ложь);
        КонецЕсли;
    КонецПопытки;
    
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

//Функция возвращает код оргаизации по которому идет поиск при работе
//
// Возвращаемое значение:
//    - Строка - код организации (ИНН или ЕДРПОУ)
//
Функция ПолучитьКодОрганизации()
    
    Код = "";
    
    Если ЗначениеЗаполнено(Организация) И ЭтоЮрЛицо(Организация) Тогда
        Код = СокрЛП(КодПоЕДРПОУ);
    Иначе
        Код = СокрЛП(КодПоЕДРПОУ); //СокрЛП(ИНН);
        Если НЕ ЗначениеЗаполнено(Код) Тогда
            Код = СокрЛП(ИНН);//СокрЛП(КодПоЕДРПОУ);
        КонецЕсли;        
    КонецЕсли;
    
    Если Код = "" Тогда
        ТекстСообщения = НСтр("ru='Внимание! Не заполнен код %ВидКода% организации!';uk='Увага! Не заповнений код %ВидКода% організації!'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидКода%", ?(ЭтоЮрЛицо(Организация), НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'"),НСтр("ru='ИНН';uk='ІПН'")));
        СообщениеПользователю(ТекстСообщения, Ложь);        
    КонецЕсли;    
    
    Возврат Код;
    
КонецФункции

// Функция - Заполнить коды по ед измерения
//
// Параметры:
//  НаимЕд     - Строка - название ед. измерения
// Возвращаемое значение:
//   - Строка - код ед. измерения
//
Функция ЗаполнитьКодыПоЕдИзмерения(НаимЕд)
    
    Струк_Кодов = Новый Соответствие;
    
    Струк_Кодов.Вставить("шт.", "2009");
    Струк_Кодов.Вставить("шт", "2009");
    Струк_Кодов.Вставить("штук", "2009");
    Струк_Кодов.Вставить("штука", "2009"); 
    
    Струк_Кодов.Вставить("кг.", "0301");
    Струк_Кодов.Вставить("кг", "0301"); 
    Струк_Кодов.Вставить("килограмм", "0301"); 
    Струк_Кодов.Вставить("кілограм", "0301");
    
    Струк_Кодов.Вставить("г", "0303"); 
    Струк_Кодов.Вставить("г.", "0303");
    Струк_Кодов.Вставить("грамм", "0303"); 
    Струк_Кодов.Вставить("грам", "0303");
    
    Струк_Кодов.Вставить("л", "0138");
    Струк_Кодов.Вставить("л.", "0138"); 
    Струк_Кодов.Вставить("літр", "0138"); 
    Струк_Кодов.Вставить("литр", "0138");
    
    Струк_Кодов.Вставить("метр", "0101");
    Струк_Кодов.Вставить("м.", "0101");
    Струк_Кодов.Вставить("м", "0101");
    Струк_Кодов.Вставить("метров", "0101"); 
    Струк_Кодов.Вставить("метрів", "0101");
    
    Струк_Кодов.Вставить("см", "0104");
    Струк_Кодов.Вставить("см.", "0104"); 
    Струк_Кодов.Вставить("сантиметр", "0104");
    Струк_Кодов.Вставить("сантиметрів","0104"); 
    Струк_Кодов.Вставить("сантиметров", "0104");
    
    Струк_Кодов.Вставить("мм", "0105");
    Струк_Кодов.Вставить("мм.", "0105");
    Струк_Кодов.Вставить("міліметр", "0105");
    Струк_Кодов.Вставить("милиметр", "0105");
    Струк_Кодов.Вставить("милиметров", "0105"); 
    Струк_Кодов.Вставить("милиметрів", "0105");
    
    Струк_Кодов.Вставить("м2", "0123");
    Струк_Кодов.Вставить("м.кв.", "0123");
    Струк_Кодов.Вставить("квадратний метр", "0123");
    Струк_Кодов.Вставить("квадратних метрів", "0123");
    Струк_Кодов.Вставить("квадратный метр", "0123");
    Струк_Кодов.Вставить("квадратных метров", "0123");
    
    Струк_Кодов.Вставить("м.куб.", "0134");
    Струк_Кодов.Вставить("м3", "0134");
    
    Струк_Кодов.Вставить("рулон", "2116");
    Струк_Кодов.Вставить("рул", "2116"); 
    Струк_Кодов.Вставить("рул.", "2116");
    
    Струк_Кодов.Вставить("уп.", "2110");
    Струк_Кодов.Вставить("уп", "2110");
    Струк_Кодов.Вставить("упак","2110");
    Струк_Кодов.Вставить("упак.","2110");
    Струк_Кодов.Вставить("упаковка", "2110");
    Струк_Кодов.Вставить("пак", "2110");
    Струк_Кодов.Вставить("пак.", "2110");
    Струк_Кодов.Вставить("пакунок", "2110");
    
    Струк_Кодов.Вставить("ящ.", "2075"); 
    Струк_Кодов.Вставить("ящ", "2075");
    Струк_Кодов.Вставить("ящик", "2075");
    
    Струк_Кодов.Вставить("грн", "2454");
    Струк_Кодов.Вставить("грн.", "2454");
    
    Струк_Кодов.Вставить("пачка", "2112");
    Струк_Кодов.Вставить("пач.", "2112");
    Струк_Кодов.Вставить("пач", "2112");

    Струк_Кодов.Вставить("послуга", ""); 
    Струк_Кодов.Вставить("услуга", "");
    Струк_Кодов.Вставить("посл", "");
    Струк_Кодов.Вставить("посл.", "");
    
    Код = Струк_Кодов.Получить(НРег(НаимЕд));
    
    Если Код = Неопределено Тогда
        ТекстСообщения = НСтр("ru='Ошибка! Невозможно определить код для единицы измерения '; uk='Помилка! Неможливо визначити код для одиниці виміру '") + НаимЕд;
        СообщениеПользователю(ТекстСообщения);
        
        Код = "2009"; //напишем штуки    
    КонецЕсли;    
    
    Возврат Код;
    
КонецФункции

// Процедура устанавливает реквизит "Организация" в значение по умолчанию
//
Процедура ЗаполнитьОрганизациюПоУлолчанию()
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Выполнить("Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация)");
    ИначеЕсли ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        ЗначениеНастройки = "";
        Выполнить("ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнаяОрганизация"")");
        Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
            Если Организация <> ЗначениеНастройки Тогда
                Организация = ЗначениеНастройки;
            КонецЕсли;
        Иначе
            Выполнить("Организация = ПолучитьПредопределеннуюОрганизацию()");
        КонецЕсли;
    ИначеЕсли ИдКонф = "OSMD" Тогда
        Выполнить("Организация = ОСМДПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнаяОрганизация"")");
    Иначе
        Попытка
            Выполнить("Организация = глЗначениеПеременной(""ОсновнаяОрганизация"")");
        Исключение
            Выполнить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"")");
        КонецПопытки;
    КонецЕсли;
    
КонецПроцедуры

// Функция проверяет наличие каталога обмена
//
// Параметры:
//  ИмяКаталога                             - Строка - адрес каталога
//  ПроверятьЧтоНайденныйФайлЭтоКаталог     - Булево - признак необходимости проверки на каталог 
// Возвращаемое значение:
//   - Булево - признак существования каталога
//
Функция ПроверитьНаличиеКаталога(Знач ИмяКаталога, Знач ПроверятьЧтоНайденныйФайлЭтоКаталог = Ложь) Экспорт
    
    // ищем нужный нам каталог, если его нет - то пытаемся создать
    Если ПустаяСтрока(ИмяКаталога) Тогда 
        ТекстСообщения = НСтр("ru='Не задан каталог для выгрузки XML';uk='Не заданий каталог для вивантаження XML'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;
    
    ВыбФайл = Новый Файл(ИмяКаталога);
    Если Не ВыбФайл.Существует() Тогда
        ТекстСообщения = НСтр("ru='Не найден каталог для выгрузки XML: ';uk='Не знайдений каталог для вивантаження XML: '") + КаталогВыгрузки;
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;
    
    Если ПроверятьЧтоНайденныйФайлЭтоКаталог Тогда
        // проверка что это точно каталог
        Если ВыбФайл.ЭтоКаталог() Тогда
            Возврат Истина;
        Иначе    
            ТекстСообщения = НСтр("ru='Выбранный путь не является каталогом: ';uk='Обраний шлях не є каталогом: '") + КаталогВыгрузки;
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат Ложь;
        КонецЕсли;    
    Иначе
        // если без разницы каталог это или нет
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

//Функция выгружает налоговую накладную в XML и возвращает Истина если не было ошибок, или Ложь если были.
//
//Параметры:
//    ДокументВыгрузки - ДокументСсылка - "Налоговая накладная" или "Приложение 2 к налоговой накладной" для выгрузки
//
Функция ВыгрузитьДокументТЗXML(ДокументВыгрузки, НомерСтрокиТЧ)
    
    Если ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
        НоваяСтрока = ТЗXML_НН.Добавить();
    Иначе
        НоваяСтрока = ТЗXML_П2.Добавить();
    КонецЕсли;    
    
    НоваяСтрока.НомерСтрокиТЧ = НомерСтрокиТЧ;
    
    НоваяСтрока.ИмяДокумента = СформироватьИмяДокумента(ДокументВыгрузки,НоваяСтрока); //часть колонок заполняется здесь
    
    НоваяСтрока.НомерДокумента = ДокументВыгрузки.Номер;
    НоваяСтрока.ДатаДокумента = Формат(ДокументВыгрузки.Дата, "ДФ=дд.ММ.гггг");
    
    НоваяСтрока.C_REG = СокрЛП(КодОблНал); //Код области инспекции
    НоваяСтрока.C_RAJ = КодАдмРайона; //Код административного района инспекции
    //НоваяСтрока.C_STI_ORIG = КодНал; //Код  инспекции     
    
    НоваяСтрока.LINKED_DOCS = "&ПустоеЗначение"; //связанные документы    
    
    НоваяСтрока.D_FILL = Формат(ДокументВыгрузки.Дата, "ДФ=ддММгггг"); //дата формирования
    НоваяСтрока.SOFTWARE = "Privat24to8"; //используемое ПО
    
    Если ТекущаяДата() >=  Дата('20160401') ИЛИ ИСТИНА Тогда
        ВыгрузитьДокументТЗXML_08(НоваяСтрока, ДокументВыгрузки, НомерСтрокиТЧ);
    КонецЕсли;
    
    Возврат ЕстьОшибки;
    
КонецФункции    

Процедура ВыгрузитьДокументТЗXML_08(НоваяСтрока, ДокументВыгрузки, НомерСтрокиТЧ)    
    
    Попытка
        Попытка
            Если ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
                НоваяСтрока.R01G1 = ?(ДокументВыгрузки.НалоговаяНакладная.Сводная = Истина, ДокументВыгрузки.НалоговаяНакладная.КодПризнакаСводнойНакладной, "");
            Иначе
                НоваяСтрока.R01G1 = ?(ДокументВыгрузки.Сводная = Истина, ДокументВыгрузки.КодПризнакаСводнойНакладной, "");    
            КонецЕсли;
        Исключение
        КонецПопытки;    
    Исключение
        Попытка
            Если ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
                НоваяСтрока.R01G1 = ?(ДокументВыгрузки.НалоговаяНакладная.Сводная = Истина, "1", "");
            Иначе
                НоваяСтрока.R01G1 = ?(ДокументВыгрузки.Сводная = Истина, "1", "");    
            КонецЕсли;
        Исключение
        КонецПопытки;    
    КонецПопытки;

    НоваяСтрока.HORIG1 = 0;
     //ОстаетсяУПродавца
    Если ДокументВыгрузки.ТипПричиныНевыдачиПокупателю = 0 ИЛИ ДокументВыгрузки.ТипПричиныНевыдачиПокупателю = 1 Тогда
    //    НоваяСтрока.HORIG = 1; //копия/оригинал, 1 - оригинал , выдается покупателю        
    Иначе
        НоваяСтрока.HORIG1 = 1;            
    КонецЕсли;
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        Попытка
            Если ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
                НоваяСтрока.R03G10S = "Без ПДВ";
            КонецЕсли;
        Исключение    
        КонецПопытки;    
        
    Иначе
        // BSB, BASC, ...
        Попытка
            Если ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации 
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат 
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
                ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
                НоваяСтрока.R03G10S = "Без ПДВ";
            КонецЕсли;
        Исключение    
        КонецПопытки;
    КонецЕсли;

    НоваяСтрока.HTYPR = ДокументВыгрузки.ТипПричиныНевыдачиПокупателю; //ТипПричиныНевыдачиПокупателю - число
    НоваяСтрока.HFILL = Формат(ДокументВыгрузки.Дата,"ДФ=ддММгггг"); // дата выписки документа
    НомерФилиала = "";
    // филиал/спецрежим
    ТекНомерФилиал = "";

    Если ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
        
        Попытка    
            
            Если ДокументВыгрузки.РегистрируетсяВЕРННПокупателем Тогда
                НоваяСтрока.HERPN = "Х";    
            Иначе
                НоваяСтрока.HERPN0 = "Х";    
            КонецЕсли;
            
        Исключение
            
            НоваяСтрока.HERPN0 = "Х";
            НоваяСтрока.HERPN = "";
            
        КонецПопытки;    
        
        НоваяСтрока.HPODFILL = Формат(ДокументВыгрузки.НалоговаяНакладная.Дата,"ДФ=ддММгггг"); 
        
        КодСпецРежима = ?(ЗначениеЗаполнено(ДокументВыгрузки.НалоговаяНакладная.СпецРежимНалогообложения), "" + ДокументВыгрузки.НалоговаяНакладная.СпецРежимНалогообложения, " "); //или пробел или одна цифра
        
        Попытка
            НомерФилиала  = ?(ЗначениеЗаполнено(ДокументВыгрузки.НалоговаяНакладная.ОбособленноеПодразделение.Префикс), Прав("0000" + СокрЛП(ДокументВыгрузки.НалоговаяНакладная.ОбособленноеПодразделение.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
        Исключение
            НомерФилиала = "";
        КонецПопытки;    
        
        Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
            ТекНомерФилиал    = ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
        КонецЕсли;
        
        НомерВПериоде = ДополнитьСтрокуСимволами(Формат(ПолучитьЧисловойНомер(ДокументВыгрузки.НалоговаяНакладная.Номер), "ЧГ="),"0",7 ,1);

        Попытка
            НоваяСтрока.HPODNUM = Число(НомерВПериоде); //порядковый номер (номер документа)
        Исключение
            НоваяСтрока.HPODNUM = НомерВПериоде; //порядковый номер (номер документа)
        КонецПопытки;    
        
        Если НЕ ЗначениеЗаполнено(ТекНомерФилиал) Тогда
            НоваяСтрока.HPODNUM1 = Лев(ТекНомерФилиал, 1);
            НоваяСтрока.HPODNUM2 = Сред(ТекНомерФилиал, 2);
        Иначе
            НоваяСтрока.HPODNUM1 = "&ПустоеЗначение";
            НоваяСтрока.HPODNUM2 = "&ПустоеЗначение";
        КонецЕсли;
        
        Попытка    
            НоваяСтрока.R003G10S = ДокументВыгрузки.НалоговаяНакладная.ЛьготаНДС; //льгота НДС
        Исключение
            
            Если РежимОтладки Тогда
                ТекстСообщения = НСтр("ru='Ошибка при заполнении льготы НДС.';uk='Помилка при заповненні пільги ПДВ.'");
                СообщениеПользователю(ТекстСообщения, Ложь);
                СообщениеПользователю(ОписаниеОшибки());
            КонецЕсли;    
            
        КонецПопытки;
        
    Иначе
        
        Попытка    
            НоваяСтрока.R003G10S = ДокументВыгрузки.ЛьготаНДС; //льгота НДС
        Исключение
            
            Если РежимОтладки Тогда
                ТекстСообщения = НСтр("ru='Ошибка при заполнении льготы НДС.';uk='Помилка при заповненні пільги ПДВ.'");
                СообщениеПользователю(ТекстСообщения, Ложь);
                СообщениеПользователю(ОписаниеОшибки());
            КонецЕсли;    
            
        КонецПопытки;
        
    КонецЕсли;
    
    // филиал/спецрежим
    КодСпецРежима    = ?(ЗначениеЗаполнено(ДокументВыгрузки.СпецРежимНалогообложения), "" + ДокументВыгрузки.СпецРежимНалогообложения, " "); //или пробел или одна цифра
    
    Попытка
        Если ДокументВыгрузки.СоглашениеОРазделеПродукции = Истина Тогда
            КодСпецРежима = "5";
        КонецЕсли;
    Исключение
    КонецПопытки;    
    
    Попытка
        ФилиалПродавца = ?(ЗначениеЗаполнено(ДокументВыгрузки.ОбособленноеПодразделение.Префикс), Прав("    " + Формат(Число(ДокументВыгрузки.ОбособленноеПодразделение.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
    Исключение
        ФилиалПродавца = "";
    КонецПопытки;    
    
    ФилиалПокупателя = "";
    
    Попытка
        Если ЗначениеЗаполнено(ДокументВыгрузки.Контрагент.КодФилиала) Тогда
            ПозицияСобачки = Найти(ДокументВыгрузки.Контрагент.КодФилиала, "@");
            Если ПозицияСобачки > 0 Тогда
                ФилиалПокупателя = Сред(ДокументВыгрузки.Контрагент.КодФилиала, 1, ПозицияСобачки - 1);
            Иначе
                ФилиалПокупателя = ДокументВыгрузки.Контрагент.КодФилиала;
            КонецЕсли;
            ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
        КонецЕсли;
    Исключение
    КонецПопытки;    
    
    Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
        ТекНомерФилиал    = ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
    КонецЕсли;
    
    НоваяСтрока.HNUM = НоваяСтрока.C_DOC_CNT; //порядковый номер (номер документа)
    
    НоваяСтрока.HNUM1 = КодСпецРежима;
        
    ////////////////////////////////////////////
    // Продавец
    
    //костыли для УТ3
    НерезидентИзУТ3 = Ложь;
    Попытка
        Если (ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" ) И ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
            НерезидентИзУТ3 = Истина;
        КонецЕсли;    
    Исключение
    КонецПопытки;    
    //костыли для УТ3
    
    // ИНН, Номер свидетельства, Наименование, Адрес
    Если 
        ((ИдКонф <> "UT_3" И ИдКонф <> "ERP") И (ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента ИЛИ ДокументВыгрузки.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка))
        ИЛИ НерезидентИзУТ3 Тогда
        // налоговые реквизиты не указыватюся
                                                                                                             
        ИННОрганизации        = "500000000000";
        НазваниеОрганизации    = ДокументВыгрузки.Контрагент.НаименованиеПолное;
        
        Если НЕ ЗначениеЗаполнено(НазваниеОрганизации) Тогда
            НазваниеОрганизации    = ДокументВыгрузки.Контрагент.Наименование;                
        КонецЕсли;    
        
        Страна = "";
        
        Если ИдКонф = "BP" Тогда
            //страна нерезидента
            
            Выполнить("Страна = БухгалтерскийУчетПереопределяемый.ПолучитьСтрануИзКонтактнойИнформации(ДокументВыгрузки.Контрагент, ""Юридический"")");            
            
            Если НЕ ЗначениеЗаполнено(Страна) Тогда
                СообщениеПользователю("" + ДокументВыгрузки.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"), Ложь);
            КонецЕсли;
        Иначе
            
            СообщениеПользователю("" + ДокументВыгрузки.Контрагент + ": " + НСтр("ru='Проверьте наименование контрагента. Для правильного заполнения документа в названии контрагента должна быть указана страна нерезидента.';uk='Перевірте найменування контрагента. Для правильного заповнення документа в назві контрагента повинна бути вказана країна нерезидента.'"), Ложь);
            
        КонецЕсли;
        
        НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;        
        
        // данные по филиалам меняются местами
        ФилиалПокупателя = ФилиалПродавца;
        ФилиалПродавца     = "";
        
    Иначе    
        
        ИННОрганизации = ИНН;
        
        ДополнениеКНаименованиюОрганизации = "";
        
        Попытка
            Если ЗначениеЗаполнено(ДокументВыгрузки.Организация.ГоловнаяОрганизация) И ДокументВыгрузки.Организация.ГоловнаяОрганизация <> ДокументВыгрузки.Организация Тогда
                ДополнениеКНаименованиюОрганизации = ДокументВыгрузки.Организация.ГоловнаяОрганизация.НаименованиеПолное ;
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        НазваниеОрганизации    = ДополнениеКНаименованиюОрганизации + ?(ЗначениеЗаполнено(Организация.НаименованиеПолное), Организация.НаименованиеПолное, Организация.Наименование);
        
        Попытка
            Если ЗначениеЗаполнено(ДокументВыгрузки.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов) Тогда
                НазваниеОрганизации = НазваниеОрганизации + " " + ДокументВыгрузки.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов;    
            КонецЕсли;
        Исключение
        КонецПопытки;
        
    КонецЕсли;
    
    ИННОрганизации = Прав("            " + ИННОрганизации, 12);
    
    НоваяСтрока.HNUM2 = ФилиалПродавца;
    НоваяСтрока.HFBUY = ФилиалПокупателя;

    НоваяСтрока.HNAMESEL = НазваниеОрганизации; //название Организации
    
    НоваяСтрока.HKSEL = ИННОрганизации; //ИНН Организации 
    НоваяСтрока.HTINSEL = КодПоЕДРПОУ;
    НоваяСтрока.HKS = HKS; 
    НоваяСтрока.HKB = HKB;
    
    СтрукДанныеКонтрагента = ПолучитьДанныеПоКонтрагенту_08(ДокументВыгрузки);
    
    НоваяСтрока.HNAMEBUY = СтрукДанныеКонтрагента.Наименование; //название Контрагента
    НоваяСтрока.HKBUY = СтрукДанныеКонтрагента.ИНН; 
    
    Если Найти(НоваяСтрока.HKBUY, "00000000000") = 0 Тогда
        Попытка
            НоваяСтрока.HTINBUY = ДокументВыгрузки.Контрагент.КодПоЕДРПОУ;
        Исключение
            СообщениеПользователю(ОписаниеОшибки());    
        КонецПопытки;
    КонецЕсли;
    
    Попытка
        НоваяСтрока.HBOS = ПреобразоватьФИО(ДокументВыгрузки.КтоВыписалНалоговуюНакладную, ДокументВыгрузки.Дата); //кто выписал
    Исключение
        
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки());
        КонецЕсли;    
        
    КонецПопытки;
    
    Если НЕ ЗначениеЗаполнено(НоваяСтрока.HBOS) Тогда
        НоваяСтрока.HBOS = "&ПустоеЗначение";
        ТекстСообщения = НСтр("ru='Ошибка при заполнении ответственного за выписку документа.';uk='Помилка при заповненні відповідального за виписку документа.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    Попытка
        НоваяСтрока.HKBOS = СокрЛП(ДокументВыгрузки.КтоВыписалНалоговуюНакладную.КодПоДРФО);
    Исключение
        
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки());
        КонецЕсли;    
        
    КонецПопытки;
    
    Если НЕ ЗначениеЗаполнено(НоваяСтрока.HKBOS) Тогда
        НоваяСтрока.HKBOS = "&ПустоеЗначение";
        ТекстСообщения = НСтр("ru='Ошибка при заполнении кода ИНН ответственного за выписку документа.';uk='Помилка при заповненні коду ІПН відповідального за виписку документа.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    Если ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
                
        //////////////////
        ЗаполнитьДанныеПоТЧДокумента_НН_08(НоваяСтрока, ДокументВыгрузки);
        /////////////////
        
    Иначе //П2
            
        //////////////////
        ЗаполнитьДанныеПоТЧДокумента_П2_08(НоваяСтрока, ДокументВыгрузки);
        /////////////////
        
    КонецЕсли;
    
КонецПроцедуры

// Функция возвращает значение ФИО физ. лица
//
// Параметры:
//  ФизЛицо     - СправочникСсылка.ФизЛица - ссылка на физ. лицо
//  Период     - Дата - дата среза 
// Возвращаемое значение:
//   - Строка - ФИО в формате И.О.Ф.
//
Функция ПреобразоватьФИО(ФизЛицо, Период)
    
    Попытка
        
        Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            
            ТекстФизЛицо = "";
            Выполнить("ТекстФизЛицо = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Строка(ФизЛицо),,,,Истина)");    
            Если ЗначениеЗаполнено(ТекстФизЛицо) Тогда
                Возврат ТекстФизЛицо;
            Иначе
                Возврат Строка(ФизЛицо)    
            КонецЕсли;    
            
        Иначе
            //    BSB, ...
            Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |    ФИОФизЛицСрезПоследних.Фамилия,
            |    ФИОФизЛицСрезПоследних.Имя,
            |    ФИОФизЛицСрезПоследних.Отчество
            |ИЗ
            |    РегистрСведений." + ?(ИдКонф = "BP" Или ИдКонф = "BASC", "ФИОФизическихЛиц", "ФИОФизЛиц") + ".СрезПоследних(&Период, ) КАК ФИОФизЛицСрезПоследних
            |ГДЕ
            |    ФИОФизЛицСрезПоследних." + ?(ИдКонф = "BP" Или ИдКонф = "BASC", "ФизическоеЛицо = &ФизЛицо", "ФизЛицо = &ФизЛицо");
            
            Запрос.УстановитьПараметр("Период", Период);
            Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
            
            РезультатЗапроса = Запрос.Выполнить();
            
            ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
            
            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
                Возврат Лев(ВыборкаДетальныеЗаписи.Имя,1) + ". " + Лев(ВыборкаДетальныеЗаписи.Отчество,1) + ". " + ВыборкаДетальныеЗаписи.Фамилия;
            КонецЦикла;
        КонецЕсли;
    Исключение
        Возврат Строка(ФизЛицо);
    КонецПопытки;
    
КонецФункции

// Функция создает запись XML и заполняет начальными данными
//
// Параметры:
//  ИмяСхемы     - Строка - Имя схемы налоговой
// Возвращаемое значение:
//   - ЗаписьXML
Функция СоздатьИЗаполнитьШапкуXML(ИмяСхемы)
    
    ДокЭкспорт = Новый ЗаписьXML();
    
    //ДокЭкспорт.УстановитьСтроку(Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина));
    ДокЭкспорт.УстановитьСтроку(Новый ПараметрыЗаписиXML("windows-1251", "1.0", Истина));
    ДокЭкспорт.ЗаписатьОбъявлениеXML();
    ДокЭкспорт.ЗаписатьНачалоЭлемента("DECLAR");
    ДокЭкспорт.ЗаписатьНачалоАтрибута("xmlns:xsi");
    ДокЭкспорт.ЗаписатьТекст("http://www.w3.org/2001/XMLSchema-instance");
    ДокЭкспорт.ЗаписатьКонецАтрибута();
    ДокЭкспорт.ЗаписатьНачалоАтрибута("xsi:noNamespaceSchemaLocation");
    ДокЭкспорт.ЗаписатьТекст(ИмяСхемы+".xsd");
    ДокЭкспорт.ЗаписатьКонецАтрибута();
    ДокЭкспорт.ЗаписатьНачалоЭлемента("DECLARHEAD");
    
    Возврат ДокЭкспорт;
    
КонецФункции

// Функция формирует файлы XML
//
// Параметры:
//  ЕстьОшибки         - Булево - хранит признак наличия ошибок
//  ТЗВыгрузки         - ТаблицаЗначений - таблица из которой происходит выгрузка, структура таблицы формируется в функции СформироватьТаблицуПоСтруктуреXML
//  ОтправкаНаСервис - Булево - содержит признак необходимости отправки в сервис Приват24
//  GUID_Формы         - Уникальный идентификатор - идентификатор формы с которой связан вызов процедуры, необходим для сохранения файла в Веб-клиенте
// Возвращаемое значение:
//   - Булево - признак успешного завершения работы функции
//
Функция СформироватьФайлыXML_Налоговые(ЕстьОшибки, ТЗВыгрузки, ОтправкаНаСервис = Ложь, GUID_Формы)    
    
    Если ТЗВыгрузки.Количество() = 0 Тогда
        Возврат Ложь; //признак окончания обарботки данных
    КонецЕсли;
    
    ЗаполнитьСтруктуруТиповДанных();
    
    Для Каждого СтрокаХМЛ Из ТЗВыгрузки Цикл //здесь всегда одна строка    
        
        ИмяСхемы = СтрокаХМЛ.ИмяСхемы;
        ИмяФайла = СтрокаХМЛ.ИмяДокумента;
        
        Если НЕ ОтправкаНаСервис Тогда
            СообщениеПользователю(НСтр("ru='Начало выгрузки в файл ';uk='Початок вивантаження у файл '") + ИмяФайла, Ложь);
        КонецЕсли;    
        
        ДокЭкспорт = СоздатьИЗаполнитьШапкуXML(ИмяСхемы);
        
        НашлиTIN = Ложь;
        Для Каждого КолонкаТЗ из ТЗВыгрузки.Колонки Цикл
            
            Если КолонкаТЗ.Имя = "TIN" Тогда
                НашлиTIN = Истина;                
            КонецЕсли;
            
            Если НЕ НашлиTIN Тогда
                Продолжить;
            КонецЕсли;
            
            ОписаниеОшибки = "";
            Значение = СтрокаХМЛ[КолонкаТЗ.Имя];
            ПреобразоватьТипXMLОбщий(Значение,ПолучитьИзСтруктуры(КолонкаТЗ.Имя, СтруктураТиповДанных), Значение,ОписаниеОшибки);
            ЗаполнитьПоляРазделаВыгрузкиXML(ДокЭкспорт, КолонкаТЗ.Имя, Значение);  
            
            Если КолонкаТЗ.Имя = "SOFTWARE" Тогда 
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
        ДокЭкспорт.ЗаписатьКонецЭлемента();
        ДокЭкспорт.ЗаписатьНачалоЭлемента("DECLARBODY");
        
        НашлиКолТелаТабл = Ложь;
        
        Для Каждого КолонкаТЗ из ТЗВыгрузки.Колонки Цикл
            
            Если КолонкаТЗ.Имя = "H01" ИЛИ КолонкаТЗ.Имя = "R01G1" ИЛИ КолонкаТЗ.Имя = "HERPN0" ИЛИ КолонкаТЗ.Имя = "HERPN" Тогда 
                НашлиКолТелаТабл = Истина;
            КонецЕсли;
            
            Если НЕ НашлиКолТелаТабл Тогда
                Продолжить;
            КонецЕсли;    
            
            ОписаниеОшибки = "";
            Если ТипЗнч(СтрокаХМЛ[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда
                
                Для Каждого КолонкаТЗ_ТЧ из СтрокаХМЛ[КолонкаТЗ.Имя].Колонки Цикл
                    НомерСтр = 0;
                    Для Каждого СтрокаТЗ_ТЧ Из СтрокаХМЛ[КолонкаТЗ.Имя] Цикл
                        НомерСтр = НомерСтр + 1;                    
                        
                        Значение = СтрокаТЗ_ТЧ[КолонкаТЗ_ТЧ.Имя];
                        
                        Если НЕ ЗначениеЗаполнено(Значение) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        ПреобразоватьТипXMLОбщий(Значение,ПолучитьИзСтруктуры(КолонкаТЗ_ТЧ.Имя, СтруктураТиповДанных), Значение,ОписаниеОшибки);
                        
                        ЗаполнитьПоляРазделаВыгрузкиXML(ДокЭкспорт, КолонкаТЗ_ТЧ.Имя, Значение, Новый Структура("ROWNUM",НомерСтр));  
                        
                    КонецЦикла;    
                КонецЦикла;    
                
            Иначе
                
                Значение = СтрокаХМЛ[КолонкаТЗ.Имя];
                Если НЕ ЗначениеЗаполнено(Значение) Тогда
                    Продолжить;
                КонецЕсли;
                ПреобразоватьТипXMLОбщий(Значение,ПолучитьИзСтруктуры(КолонкаТЗ.Имя, СтруктураТиповДанных), Значение,ОписаниеОшибки);
                
                ЗаполнитьПоляРазделаВыгрузкиXML(ДокЭкспорт, КолонкаТЗ.Имя, Значение);  
                
            КонецЕсли;    
            
        КонецЦикла;
        
        ДокЭкспорт.ЗаписатьКонецЭлемента(); //DECLARBODY
        ДокЭкспорт.ЗаписатьКонецЭлемента(); //DECLAR
        
        СтруктФайла = Новый Структура;
        СтруктФайла.Вставить("Текст", ДокЭкспорт.Закрыть());
        СтруктФайла.Вставить("ИмяФайла", ИмяФайла);
        
        Если ОтправкаНаСервис Тогда
            ФайлСохранен = СохранитьФайлВыгрузки(СтруктФайла);    
            
            Если ФайлСохранен Тогда
                //СообщениеПользователю(НСтр("ru='Документ выгружен в файл успешно!';uk='Документ вивантажений у файл успішно!'"), Ложь);
            Иначе
                СообщениеПользователю(НСтр("ru='Документ не выгружен в файл!';uk='Документ не вивантажений у файл!'"));    
            КонецЕсли;
        Иначе
            
            ФайлСохранен = СохранитьФайлВыгрузки(СтруктФайла, GUID_Формы);
            
            Если ФайлСохранен Тогда
                НоваяСтрока = СписокФайлов.Добавить();
                НоваяСтрока.АдресФайла = GUID_Формы;
                НоваяСтрока.ИмяФайла = ИмяФайла; 
            КонецЕсли;    
            
            //СтруктФайла.Вставить("Текст", АдресФайла);
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ФайлСохранен;
    
КонецФункции

Процедура ПроверитьСостояниеРегистрацииНалоговыхПоСтроке(СтрокаТЧ, ТипДок)
    
    СтрокаТЧ.Флажок = Ложь;
    
    СтрокаТЧ.КартинкаСтатуса = 0; //снимаем картинку
    //СтрокаТЧ.КартинкаСтатуса = 10; //снимаем картинку - в будущем когда изменю картинки
    
    СтрокаТЧ.СтатусДокумента = ""; //очищаем текст статуса
    СтрокаТЧ.КартинкаОшибки = 0;
    
    ЕстьОтмеченные = Истина;
    
    ЕстьОшибки = Ложь;
    
    ИмяДок = СформироватьИмяДокумента(СтрокаТЧ.СсылкаНаДокумент, Неопределено);
    НачПериода = Формат(НачалоМесяца(СтрокаТЧ.Дата), "ДФ=yyyy-MM-dd");
    КонПериода = Формат(КонецМесяца(СтрокаТЧ.Дата), "ДФ=yyyy-MM-dd");
    
    РесурсНаСервере = "/outbox"; //журнал исходящие
    
    ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, НачПериода, СессияДок, ЕстьОшибки, ТипДок, Истина ,КонПериода); 
    
    Если ЕстьОшибки Тогда
        
        ТекстСообщения = НСтр("ru = 'Ошибка при получении статуса документа отмеченного в строке №%НомерСтроки%. Документ пропущен.'; uk = 'Помилка при отриманні статусу документу зазначеного у рядку №%НомерСтроки%. Документ пропущений.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        СообщениеПользователю(ТекстСообщения);
        СтрокаТЧ.КартинкаОшибки = 2;
        СтрокаТЧ.ТекстОшибки = ТекстСообщения;            
        Возврат;
        
    КонецЕсли;
    
    ПолученСтатус = ПрочитатьСтатусНалоговогоДокумента(ЖурналОтвет, ИмяДок, СтрокаТЧ);
    
    Если НЕ ПолученСтатус Тогда
        
        РесурсНаСервере = "/in-process"; //журнал в работе
        
        ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, НачПериода, СессияДок, ЕстьОшибки, ТипДок, Истина, КонПериода); 
        
        ПрочитатьСтатусНалоговогоДокумента(ЖурналОтвет, ИмяДок, СтрокаТЧ);
        
        Если ЕстьОшибки Тогда
            
            ТекстСообщения = НСтр("ru = 'Ошибка при получении статуса документа отмеченного в строке №%НомерСтроки%. Документ пропущен.'; uk = 'Помилка при отриманні статусу документу зазначеного у рядку №%НомерСтроки%. Документ пропущений.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            СтрокаТЧ.КартинкаОшибки = 2;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;            
            Возврат;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры    
    
Функция ПроверитьСостояниеРегистрации(ТипДок) Экспорт
    
    ДействиеАналитики = "ННПроверкаСтатусов";

    Для Каждого СтрокаТЧ Из СписокДокументов Цикл //цикл каждый раз прерывается
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;
        
        ПроверитьСостояниеРегистрацииНалоговыхПоСтроке(СтрокаТЧ, ТипДок);
    
        Возврат Истина; //признак что будет продолжать выполняться в цикле
        
    КонецЦикла;
    
    XML = "";
    СессияДок = "";
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для проверки статуса!'; uk = 'Немає відмічених документів для перевірки статусу!'"), Ложь);
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    
    Возврат Ложь; //обработка списка завершена
    
КонецФункции

Функция ПрочитатьЖурналДокументов(РесурсНаСервере, ДатаДок, СессияДок, ЕстьОшибки, ТипДок, ПараметрДатаДокумента = Истина, КонПериода = "")

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат Ложь;
    КонецЕсли;
            
    ИнтернетАдрес = АдресАК + "/api/proxy/edoc/journal";
    
    КодТипДок = ПолучитьКодТипаДокумента(ТипДок);
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";

    Если ЗначениеЗаполнено(ИдАК) Тогда
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "id";
        НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    КонецЕсли;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "token";
    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;

    Если НЕ ЗначениеЗаполнено(КонПериода) Тогда
        КонПериода = ДатаДок;
    КонецЕсли;
    
    ТелоЗапроса = "{""dateBegin"": """ + ДатаДок + ""","
                + """dateEnd"": """ + КонПериода + ""","
                + """limit"": ""5000""," 
                + """okpo"": [""" + ПолучитьКодОрганизации() + """],"
                + """docType"": [" + КодТипДок + "]";
                
    Если ПараметрДатаДокумента Тогда
        ТелоЗапроса = ТелоЗапроса + ", ""dateSource"": ""document""";
    КонецЕсли;    
    
    ТелоЗапроса = ТелоЗапроса + "}";

    ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(ТелоЗапроса);

    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "",
        Заголовки ,,, Истина,,,, ТелоЗапросаКурл);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        
        ЕстьОшибки = Истина;
        
        Возврат "";
        
    Иначе
        Статус = стРезультат.Статус;
        СессияДок = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка документов за ';uk='Помилка відправки запиту на отримання списку документів за '") + ДатаДок;
        СообщениеПользователю(ТекстСообщения);
        
        ЕстьОшибки = Истина;

        Возврат "";
        
    КонецЕсли;
    
    Возврат ТелоОтвета;
    
КонецФункции

Функция ПолучитьКодТипаДокумента(ТипДок)
    
    КодТипаДок = "";
    
    СоотвКодовИТиповДок = Новый Соответствие;
    СоотвКодовИТиповДок.Вставить("Налоговые", """2653"",""2658""");
    СоотвКодовИТиповДок.Вставить("Запрос к ЕРНН", "2800");
    СоотвКодовИТиповДок.Вставить("ПриходнаяНакладная", "2655");//2524
    СоотвКодовИТиповДок.Вставить("Акты", """2655""");
    СоотвКодовИТиповДок.Вставить("Счета", """2654""");
    СоотвКодовИТиповДок.Вставить("РегистрацияВходящейНН", """2653"",""2658""");
    СоотвКодовИТиповДок.Вставить("Заказы", """2657""");
    СоотвКодовИТиповДок.Вставить("Расходные", """2702""");
    СоотвКодовИТиповДок.Вставить("PDFДокументы", """2900""");
    
    КодТипаДок = СоотвКодовИТиповДок.Получить(ТипДок);
    Если КодТипаДок = Неопределено Тогда
        Для каждого ЭлементСоответствия Из СоотвКодовИТиповДок Цикл
            Если Лев(ЭлементСоответствия.Ключ, 4) = Лев(ТипДок, 4) Тогда
                КодТипаДок = ЭлементСоответствия.Значение;
                Прервать
            КонецЕсли
        КонецЦикла
    КонецЕсли;

    Если КодТипаДок = Неопределено Тогда
        
        КодТипаДок = "";
        
        ТекстСообщения = НСтр("ru='Ошибка при получении кода типа документа.';uk='Помилка при отриманні коду типу документа'");
        СообщениеПользователю(ТекстСообщения);
        
    КонецЕсли;
    
    Возврат КодТипаДок;
    
КонецФункции

Функция ПрочитатьСтатусНалоговогоДокумента(Ответ, ИмяДок, СтрокаТЧ) 
    
    //возможные статусы
    //START=0//when main document created, but file isn't stored to db
    //LOADED=1//when fili is stored to db
    //VALIDATED=2//when doc is fully validated - > xsd ans so on
    //SENDER_SIGNING=3//cxpStatus when sender sign document
    //RECIPIENT_SIGNING=4
    //BOTH_SIDE_SIGNING=5
    //PREPARED_FOR_SENDING_TO_TAX=6
    //SENT_TO_TAX=7
    //REGISTERED_IN_TAX=8
    //REJECTED_IN_TAX=9
    //RECEIVED_IN_TAX=10
    //RECIPIENT_DISAGREEMENT=11
    //RECIPIENT_APPROVEMENT=12
    //FINISH=13
    //RECIPIENT_PREVIEW=14
    //APPROVED_BY_RECIPIENT(15),
    //DELETED(16),
    //UPLOADED_AS_ENCRYPTED(18),
    //DECRYPTED_TAX_TECHNICAL_DOC(19);
    
    ТабВхНН = ПрочитатьТабВхНН(Ответ, Ложь);    
    
    СтруктураПоиска = Новый Структура;
    
    СтруктураПоиска.Вставить("ИмяДокумента", ИмяДок);
    
    МассивДок = ТабВхНН.НайтиСтроки(СтруктураПоиска);
    
    Если МассивДок.Количество() = 0 Тогда //документа нет в журнале
                 
        СтрокаТЧ.КартинкаСтатуса = 1;    
        СтрокаТЧ.СтатусДокумента =  НСтр("ru='Не выгружался';uk='Не вивантажувався'");//нужно отправить
        
        Возврат Ложь;
    КонецЕсли;
        
    СтатусДок = МассивДок[0].Статус;
    
    ДатаНайденногоДокумента = МассивДок[0].Дата;
    
    Если СтатусДок = "1" ИЛИ СтатусДок = "2" ИЛИ СтатусДок = "3" Тогда //тега статус вообще нет, а следов. документ еще "в работе"
        Если СтатусДок = "1" Тогда
            СтрокаТЧ.КартинкаСтатуса = 5;    
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Черновик';uk='Черновик'");
            СтрокаТЧ.ИдДокумента = спцПрочитатьУзел("ID", Ответ);
        ИначеЕсли СтатусДок = "3" Тогда
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Проверен и сохранен (в работе)';uk='Перевірений та збережений (в роботі)'");
            СтрокаТЧ.ИдДокумента = спцПрочитатьУзел("ID", Ответ);
        Иначе//Если СтатусДок = "2" Тогда
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='В работе';uk='В роботі'");//нужно подписать и отправить
            СтрокаТЧ.ИдДокумента = спцПрочитатьУзел("ID", Ответ);
        КонецЕсли

    Иначе
        
        //Если СтатусДок = "4" ИЛИ СтатусДок = "7" ИЛИ СтатусДок = "14" Тогда
        Если СтатусДок = "4" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;//3;
            //СтрокаТЧ.СтатусДокумента = НСтр("ru='Отправлен';uk='Відправлений'");
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Подписан и отправлен';uk='Підписаний та відправлений'")
            
        //ИначеЕсли СтатусДок = "5" ИЛИ СтатусДок = "12" Тогда //есть подпись двух сторон
        ИначеЕсли СтатусДок = "5" Тогда
            СтрокаТЧ.КартинкаСтатуса = 0;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Принят контрагентом';uk = 'Прийнято контрагентом'");//все ок
            
        ИначеЕсли СтатусДок = "6" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 3;//2;
            //СтрокаТЧ.СтатусДокумента = НСтр("ru='Идет отправка';uk='Надсилання'");    
            СтрокаТЧ.СтатусДокумента = НСтр("ru='В очереди на отправку в налоговую';uk='У черзі на відправку до податкової'")

        ИначеЕсли СтатусДок = "7" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 2;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Отправлен в налоговую';uk='Відправлений до податкової'")

        ИначеЕсли СтатусДок = "8" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 2;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Доставлен в налоговую';uk='Доставлений в податкову'")

        ИначеЕсли СтатусДок = "9" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 5;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Отклонен в налоговой';uk='Відхилено у податковій'")

        ИначеЕсли СтатусДок = "10" Тогда 
            
            СтрокаТЧ.КартинкаСтатуса = 0;//4;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Принят в налоговой';uk='Прийнято в податковій'");//НСтр("ru='Зарегистрирован';uk='Зареєстрований'");
            
            Если НЕ СтрокаТЧ.ВключенаВЕдиныйРеестрНалоговыхНакладных Тогда //обновим статус
                
                Док = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();
                Док.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина;
                
                Попытка
                    Док.Записать();
                Исключение
                    ТекстСообщения = НСтр("ru='Ошибка при обновлении признака ""Включен в реестр НН"" для документа в строке №';uk='Помилка при оновленні ознаки ""Включено до реєстру ПН"" для документа в рядку №'") + СтрокаТЧ.НомерСтроки;
                    СообщениеПользователю(ТекстСообщения);
                КонецПопытки;    
        
            КонецЕсли;
        ИначеЕсли СтатусДок = "11" Тогда // получатель отказался
            
            СтрокаТЧ.КартинкаСтатуса = 1;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отклонен контрагентом';uk = 'Вiдхилен контрагентом'");//получатель не согласен
            
        //ИначеЕсли СтатусДок = "9" Тогда 
        //    СтрокаТЧ.КартинкаСтатуса = 1;
        //    СтрокаТЧ.СтатусДокумента =  НСтр("ru='Отклонен';uk='Відхилено'");
            
        //ИначеЕсли СтатусДок = "8" Тогда 
        //    СтрокаТЧ.КартинкаСтатуса = 3;
        //    СтрокаТЧ.СтатусДокумента =  НСтр("ru='Ожидает проверки в налоговой';uk='Чекає перевірки в податковій'");

        ИначеЕсли СтатусДок = "12" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 0;
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Подписан получателем';uk = 'Підписаний отримувачем'")    

        ИначеЕсли СтатусДок = "14" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 2;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Отправлен без подписи';uk='Відправлений без підпису'")    

        ИначеЕсли СтатусДок = "15" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 3;
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Утвержден получателем';uk='Затверджено одержувачем'");    
            
        ИначеЕсли СтатусДок = "16" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 1;
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Удален';uk='Видалений'");

        ИначеЕсли СтатусДок = "17" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 3;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Подготовлен к отправке в налоговую';uk='Підготовлено до відправки в податкову'")

        ИначеЕсли СтатусДок = "18" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 1;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Ожидает расшифровки';uk='Очікує розшифровки'")

        ИначеЕсли СтатусДок = "19" Тогда 
            СтрокаТЧ.КартинкаСтатуса = 1;
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Расшифрован';uk='Розшифрований'")

        Иначе
            
            СтрокаТЧ.КартинкаСтатуса = 1;
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Неизвестный статус';uk='Невідомий статус'");
            
        КонецЕсли;
    
    КонецЕсли;    
    
    Если ЗначениеЗаполнено(ДатаНайденногоДокумента) И ДатаНайденногоДокумента <> Формат(СтрокаТЧ.Дата, "ДФ=yyyy-MM-dd") Тогда
        
        ТекстСообщения = НСтр("ru='Внимание! Документ отмеченный в строке №%НомерСтроки% был загружен ранее с датой %ДатаДокумента%'; uk='Увага! Документ позначений в рядку №%НомерСтроки% був завантажений раніше з датою %ДатаДокумента%'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаДокумента%", ДатаНайденногоДокумента);    
        СообщениеПользователю(ТекстСообщения, Ложь);
        
    КонецЕсли;
    
    Возврат Истина;
    
КонецФункции    

Функция СохранитьФайлВыгрузки(ТекСтр, АдресФайла = Неопределено)
    
    Текст = Новый ТекстовыйДокумент;
    Текст.УстановитьТекст(ТекСтр.Текст);
    
    ИмяКонечногоФайла     = ТекСтр.ИмяФайла;
    //КодировкаТекстаВыгрузки = "UTF-8";
    КодировкаТекстаВыгрузки = "WINDOWS-1251";
    
    Попытка
        
        ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + ИмяКонечногоФайла;
        Текст.Записать(ПолноеИмяКонечногоФайла, КодировкаТекстаВыгрузки);
        
        Если АдресФайла <> Неопределено Тогда
            АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяКонечногоФайла), АдресФайла);
        КонецЕсли; 
        
        Возврат Истина;
        
    Исключение
        
        ТекстСообщения = НСтр("ru='Не удалось записать файл! Возможно, недостаточно места на диске или диск защищен от записи.';
        |;uk='Не вдалося записати файл! Можливо, недостатньо місця на диску або диск захищений від запису'");
        
        ТекстСообщения = ТекстСообщения + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.';uk='Також, можливо, не підключено розширення для роботи з файлами.'");
        
        СообщениеПользователю(ТекстСообщения);
        СообщениеПользователю(ОписаниеОшибки());
        Возврат Ложь;
        
    КонецПопытки;
    
КонецФункции

//-----------------------------------
Функция ПолучитьИзСтруктуры(Представление, Структура) Экспорт
    
    Перем Значение;
    
    Найдено = Структура.Свойство(Представление,Значение);
    
    Если Найдено Тогда    
        Возврат Значение;
    Иначе
        Возврат "";
    КонецЕсли;
    
КонецФункции

//Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонкку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьТипСтавки(СтавкаНДС=Неопределено, Документ)
    
    Попытка
        ВалютаДокумента= Документ.ВалютаДокумента;    
    Исключение
        ВалютаДокумента= Документ.Валюта;    
    КонецПопытки;
    
    Если ИдКонф <> "UNF" И ИдКонф <> "BSB" Тогда
        // BASC, ...
        Попытка
            Если СтавкаНДС = Перечисления.СтавкиНДС.НДС14 Тогда
                Возврат "14";
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
            Если ВалютаДокумента.Код = "980" Тогда
                Возврат "902";
            Иначе
                Возврат "901";
            КонецЕсли;
        ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
            Возврат "903";
        ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
            Возврат "7";    
        Иначе
            Возврат "20";    
        КонецЕсли;
    Иначе
        //    BSB, ...
        Если СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%") Тогда
            Если ВалютаДокумента.Код = "980" Тогда
                Возврат "902";
            Иначе
                Возврат "901";
            КонецЕсли;
        ИначеЕсли  СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС") ИЛИ СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не НДС") Тогда
            Возврат "903";
        ИначеЕсли  СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
            Возврат "14";
        ИначеЕсли  СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") Тогда
            Возврат "7";    
        Иначе 
            Возврат "20";    
        КонецЕсли;
    КонецЕсли;
    
КонецФункции

Функция ПолучитьСтрануКонтрагента(Контрагент)
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "UNF" ИЛИ ИдКонф = "ERP" Или ИдКонф = "BSB" Или ИдКонф = "BASC" Тогда
        
        СтранаНерезидента = "";
        
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
        Запрос.УстановитьПараметр("Ссылка", Контрагент);
        
        Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    КонтактнаяИнформация.Страна КАК СтранаНерезидента
        |ИЗ
        |    Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |    КонтактнаяИнформация.Ссылка = &Ссылка
        |    И КонтактнаяИнформация.Вид = &Вид";
        
        ВыборкаСтрана = Запрос.Выполнить().Выбрать();
        Если ВыборкаСтрана.Следующий() Тогда
            СтранаНерезидента = "(" + СокрЛП(СтранаНерезидента)+") ";
        КонецЕсли;
        
    Иначе
        
        // вместо адреса - просто страна нерезидента
        АдресОрганизации = "";
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
        Запрос.УстановитьПараметр("Объект", Контрагент);
        Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
        
        Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |    КонтактнаяИнформация.Поле1,
        |    КонтактнаяИнформация.Поле10
        |ИЗ
        |    РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |    КонтактнаяИнформация.Объект = &Объект
        |    И КонтактнаяИнформация.Тип = &Тип
        |    И КонтактнаяИнформация.Вид = &Вид";
        РезультатЗапроса = Запрос.Выполнить();
        Если НЕ РезультатЗапроса.Пустой() Тогда
            Поле1  = РезультатЗапроса.Выгрузить()[0].Поле1;
            Поле10 = РезультатЗапроса.Выгрузить()[0].Поле10;
            Если  ЗначениеЗаполнено(Поле1)
                И Найти("0123456789", Лев(СокрЛ(Поле1), 1)) > 0 Тогда
                // в Поле1 находится индекс
                АдресОрганизации = Поле10;
            Иначе
                АдресОрганизации = Поле1;
            КонецЕсли;
            СтранаНерезидента = СокрЛП(АдресОрганизации);
        КонецЕсли;
        
    КонецЕсли;        
    
    Возврат СтранаНерезидента;
    
КонецФункции

//Функция возвращает структуру данных по контрагенту
//
Функция ПолучитьДанныеПоКонтрагенту_08(Документ)
    
    мКонтрагент = Документ.Контрагент;
    ВидОперации = Документ.ВидОперации;
    
    Сводная = Ложь;
    Попытка
        Если ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
            Сводная = Документ.НалоговаяНакладная.Сводная;
        Иначе
            Сводная = Документ.Сводная;
        КонецЕсли;
    Исключение
    КонецПопытки;
    
    ////////////////////////////////////////////
    // покупатель
    
    // Название, адрес, номер свидетельства, ИНН
    КонтрагнетЭтоОрганизация = Ложь;
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        Попытка
            Если  ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
                ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
                КонтрагнетЭтоОрганизация = Истина;    
            КонецЕсли;    
        Исключение
        КонецПопытки;
        
    Иначе
        //    BSB, BASC, ...
        Попытка
            Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
                ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
                ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента 
                ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат
                ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
                КонтрагнетЭтоОрганизация = Истина;    
            КонецЕсли;    
        Исключение
        КонецПопытки;
    КонецЕсли;

    // в этом случае контрагентом выступает организация
    Если КонтрагнетЭтоОрганизация Тогда    
        ДополнениеКНаименованиюОрганизации = "";
        
        Попытка
            Если ЗначениеЗаполнено(Документ.Организация.ГоловнаяОрганизация) И Документ.Организация.ГоловнаяОрганизация <> Документ.Организация Тогда
                ДополнениеКНаименованиюОрганизации = Документ.Организация.ГоловнаяОрганизация.НаименованиеПолное;
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        НазваниеКонтрагента    = ДополнениеКНаименованиюОрганизации + Организация.НаименованиеПолное;
        
        Попытка
            Если ЗначениеЗаполнено(Документ.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов) Тогда
                НазваниеКонтрагента = НазваниеКонтрагента + " " + Документ.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов;    
            КонецЕсли;
        Исключение
        КонецПопытки;

        Попытка
            УсловиеННП2 = ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка
        Исключение
            // ERP2
            УсловиеННП2 = ВидОперации <> Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента
        КонецПопытки;

        //Если ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
        Если УсловиеННП2 Тогда
            
            Попытка
                Если Сводная = Истина Тогда
                    ИННКонтрагента      = "600000000000";
                Иначе    
                    ИННКонтрагента      = "400000000000";    
                КонецЕсли;
            Исключение
                ИННКонтрагента      = "400000000000";    
            КонецПопытки;
        
            ФилиалПокупателя = "";
            
        КонецЕсли;
        
    Иначе
        
        НазваниеКонтрагента = мКонтрагент.НаименованиеПолное;
        
        Если НЕ ЗначениеЗаполнено(НазваниеКонтрагента) Тогда
            НазваниеКонтрагента = мКонтрагент.Наименование;                
        КонецЕсли;
        
        Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            ИННКонтрагента = Документ.Контрагент.ИННПлательщикаНДС; //ИНН Контрагента
        Иначе
            //    BSB, ...
            ИННКонтрагента = Документ.Контрагент.ИНН; //ИНН Контрагента
        КонецЕсли;
        
        Попытка
            Если мКонтрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
                НазваниеКонтрагента = мКонтрагент.ГоловнойКонтрагент.ПолноеНаименование
                + ", " + НазваниеКонтрагента;
            КонецЕсли;
        Исключение
        КонецПопытки;    
        
        Если Документ.ТипПричиныНевыдачиПокупателю = 1 Тогда
            
            ИННКонтрагента = "100000000000";
            НазваниеКонтрагента = "Неплатник";
            
        ИначеЕсли  Документ.ТипПричиныНевыдачиПокупателю = 12 Тогда
            
            ИННКонтрагента = "200000000000";
            
        ИначеЕсли Документ.ТипПричиныНевыдачиПокупателю = 7 Тогда
            
            // поставка на экспорт
            ИННКонтрагента = "300000000000";
            
            // вместо адреса - просто страна нерезидента
            Страна = "";
            
            Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
                //страна нерезидента
                
                Выполнить("Страна = БухгалтерскийУчетПереопределяемый.ПолучитьСтрануИзКонтактнойИнформации(мКонтрагент, ""Юридический"")");            
                
                Если НЕ ЗначениеЗаполнено(Страна) Тогда
                    СообщениеПользователю("" + мКонтрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"), Ложь);
                КонецЕсли;
            Иначе
                //    BSB, ...
                СообщениеПользователю("" + мКонтрагент + ": " + НСтр("ru='Проверьте наименование контрагента. Для правильного заполнения документа в названии контрагента должна быть указана страна нерезидента.';uk='Перевірте найменування контрагента. Для правильного заповнення документа в назві контрагента повинна бути вказана країна нерезидента.'"), Ложь);
                
            КонецЕсли;
            
            НазваниеОрганизации = НазваниеКонтрагента + ", " + Страна;
            
        ИначеЕсли НЕ ЗначениеЗаполнено(ИННКонтрагента)
                 ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
            ИННКонтрагента = "100000000000";
            НазваниеКонтрагента = "Неплатник";
            
        КонецЕсли;
        
    КонецЕсли;
    
    ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
    СтруктураСведений = Новый Структура;
    СтруктураСведений.Вставить("Наименование",НазваниеКонтрагента); 
    СтруктураСведений.Вставить("ИНН", ИННКонтрагента);

    Возврат СтруктураСведений;
    
КонецФункции    

//Функция формирует строку-имя документа
//
Функция СформироватьИмяДокумента(Документ, СтрокаТЗ)
    
    КодНалоговой = ДополнитьСтрокуСимволами(СокрЛП(Формат(КодНал,"ЧЦ=4;ЧГ=0")),"0",4 ,1); // дополним нулями слева
    
    КодФирмы = ДополнитьСтрокуСимволами(СокрЛП(КодПоЕДРПОУ),"0",10,1); // ЕДРПОУ
    
    МесяцПериода = ДополнитьСтрокуСимволами(Месяц(Документ.Дата),"0",2 ,1);
    
    ГодПериода = Формат(Год(Документ.Дата), "ЧЦ=4;ЧГ=;");
    
    //СостояниеОтчета = ДополнитьСтрокуСимволами(C_DOC_STAN,"0",1 ,1);
    СостояниеОтчета = "1";
    
    ТипОтчета = ДополнитьСтрокуСимволами(0,"0",2 ,1);
    
    //КодНалоговойОриг = ДополнитьСтрокуСимволами(СокрЛП(Формат(КодНал,"ЧЦ=4;ЧГ=0")),"0",4 ,1);
    
    текНомерДок = Прав(СокрЛП(Документ.Номер), 7);
    
    НомерВПериоде = ДополнитьСтрокуСимволами(Формат(ПолучитьЧисловойНомер(текНомерДок), "ЧГ="),"0",7 ,1);
    
    ТипПериода = "1";
    
    Если ЭтоЮрЛицо(Организация) Тогда
        Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
            //ИмяСхемы = "J1201012";     
            ИмяСхемы = "J1201013"
        Иначе    
            //ИмяСхемы = "J1201212"; 
            ИмяСхемы = "J1201213"
        КонецЕсли;    
    Иначе    
        Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
            //ИмяСхемы = "F1201012"; 
            ИмяСхемы = "F1201013"
        Иначе
            //ИмяСхемы = "F1201212"; 
            ИмяСхемы = "F1201213"
        КонецЕсли;
    Конецесли;
    
    Если СтрокаТЗ <> Неопределено Тогда
        
        СтрокаТЗ.TIN = КодПоЕДРПОУ;
        СтрокаТЗ.PERIOD_MONTH = Месяц(Документ.Дата);
        СтрокаТЗ.ИмяСхемы = ИмяСхемы;
        СтрокаТЗ.C_DOC = Сред(ИмяСхемы,1,3);
        СтрокаТЗ.C_DOC_SUB = Сред(ИмяСхемы,4,3);
        СтрокаТЗ.C_DOC_VER = Число(Сред(ИмяСхемы,7,2));
        СтрокаТЗ.PERIOD_YEAR = ГодПериода;
        СтрокаТЗ.C_DOC_STAN = 1;
        СтрокаТЗ.C_DOC_TYPE = 0;
        
        Попытка
            СтрокаТЗ.C_STI_ORIG = Формат(Число(КодНал), "ЧРГ=' '; ЧГ=0");    
        Исключение
            СтрокаТЗ.C_STI_ORIG = СокрЛП(КодНал);
        КонецПопытки;
        
        Попытка
            СтрокаТЗ.C_DOC_CNT = Число(НомерВПериоде);
        Исключение
            СтрокаТЗ.C_DOC_CNT = НомерВПериоде;
        КонецПопытки;    
        
        СтрокаТЗ.PERIOD_TYPE = 1;
        
    КонецЕсли;
    
    // новый порядок формирования имени файла
    ИмяФайла = КодНалоговой + КодФирмы + ИмяСхемы + СостояниеОтчета + ТипОтчета + НомерВПериоде + ТипПериода + МесяцПериода + ГодПериода + КодНалоговой + ".xml";
    
    Возврат ИмяФайла;
    
КонецФункции    

Функция ПолучитьТелефонДляНалоговойНакладной(Телефоны) Экспорт
    
    Результат = СокрЛП(Телефоны);
    // может быть несколько телефонов, через запятую, возьмем до первой запятой
    Поз = Найти(Результат, ",");
    Если Поз > 0 Тогда
        Результат = Лев(Результат, Поз - 1);
    КонецЕсли; 
    
    Поз = Найти(Результат, ";");
    Если Поз > 0 Тогда
        Результат = Лев(Результат, Поз - 1);
    КонецЕсли; 
    
    РезультатТолькоЦифры = "";
    ДлинаСтрокиТелефонов = СтрДлина(Результат);
    
    // удалим все не цифры
    Для НомерСимвола = 1 По ДлинаСтрокиТелефонов Цикл
        ТекСимвол = Сред(Результат, НомерСимвола, 1);
        Если Найти("0123456789", ТекСимвол) = 0 Тогда
            Продолжить;
        Иначе
            РезультатТолькоЦифры = РезультатТолькоЦифры + ТекСимвол;
        КонецЕсли;
    КонецЦикла;     
    //для выравнивания по правому краю дополним слева пробелами
    РезультатТолькоЦифры = "          " + РезультатТолькоЦифры;
    
    // возьмем 10 правых 
    РезультатТолькоЦифры = Прав(РезультатТолькоЦифры, 10);
    
    Возврат РезультатТолькоЦифры;

КонецФункции // ПолучитьТелефонДляНалоговойНакладной()

//Функция возвращаяет числовой номер документа без 0
//
Функция ПолучитьЧисловойНомер(Номер)
    
    СтрокаНомера = "";
    БылНе0 = Ложь;
    Для к = 1 По СтрДлина(Номер) Цикл
        
        СимволНом = Сред(Номер,к,1);
        
        КодСим = КодСимвола(СимволНом);
        
        Если КодСим > 48 и КодСим < 58 Тогда
            БылНе0 = Истина;
        КонецЕсли;
        
        Если КодСим > 47 и КодСим < 58 И БылНе0 Тогда
            СтрокаНомера = СтрокаНомера + СимволНом;
        КонецЕсли;
        
    КонецЦикла;
    
    Попытка
        НомерЧисло = Число(СтрокаНомера);
    Исключение    
        НомерЧисло = 1;
    КонецПопытки;    
    
    Возврат НомерЧисло;
    
КонецФункции

Процедура ЗаполнитьПоляРазделаВыгрузкиXML(ТекстОтчета, Имя, Значение, СтруктураАттрибутов = Неопределено);
    
    СтрокаОбщегоФормата = "ЧРД=.; ЧН=0.00; ЧГ=0; ЧО=1; ДФ=ddMMyyyy; ДП=; БЛ=0; БИ=1";
    
    Значение = Строка(Значение);
    
    Если Имя = "LINKED_DOCS" Тогда
        
        Если Значение = "&ПустоеЗначение" Тогда
                    
            ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);    
            ТекстОтчета.ЗаписатьНачалоАтрибута("xsi:nil");
            ТекстОтчета.ЗаписатьТекст("true"); 
            ТекстОтчета.ЗаписатьКонецАтрибута();
            ТекстОтчета.ЗаписатьКонецЭлемента();
            
        Иначе
            
            // загружаем готовый фрагмент
            ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);    
            ТекстОтчета.ЗаписатьТекст(Значение);
            ТекстОтчета.ЗаписатьКонецЭлемента();
            
        КонецЕсли;
        
        Возврат;
        
    КонецЕсли;
    
    Если Значение <> "&НеЗаписывать" Тогда        
        
        ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);
        
        Если ТипЗнч(СтруктураАттрибутов) = Тип("Структура") Тогда
            Для Каждого Аттрибут Из СтруктураАттрибутов Цикл
                
                ТекстОтчета.ЗаписатьНачалоАтрибута(Аттрибут.Ключ);
                
                Если ВРЕГ(Аттрибут.Ключ) = "ROWNUM" Тогда
                    ТекстОтчета.ЗаписатьТекст(Формат(Аттрибут.Значение, "ЧГ="));
                ИначеЕсли ВРЕГ(Аттрибут.Ключ) = "QDATE" Тогда    
                    ТекстОтчета.ЗаписатьТекст(Формат(Аттрибут.Значение, "ЧГ=; ДФ=ddMMyyyy"));
                ИначеЕсли ВРЕГ(Аттрибут.Ключ) = "QNUM" ИЛИ ВРЕГ(Аттрибут.Ключ) = "RNUM" Тогда    
                    ТекстОтчета.ЗаписатьТекст(СокрЛП(Аттрибут.Значение));
                Иначе
                    ТекстОтчета.ЗаписатьТекст(Формат(Аттрибут.Значение,СтрокаОбщегоФормата));
                КонецЕсли;
                
                ТекстОтчета.ЗаписатьКонецАтрибута();
                
            КонецЦикла;
    
        ИначеЕсли НЕ СтруктураАттрибутов = Неопределено Тогда
            ТекстСообщения = НСтр("ru='Неверный список аттрибутов записываемого элемента.';uk='Невірний список аттрибутов записуваного елемента.'");
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецЕсли;
        
        Если Значение <> "&ПустоеЗначение" Тогда
            ТекстОтчета.ЗаписатьТекст(Значение);
        Иначе
            ТекстОтчета.ЗаписатьНачалоАтрибута("xsi:nil");
            ТекстОтчета.ЗаписатьТекст("true"); 
            ТекстОтчета.ЗаписатьКонецАтрибута();
        КонецЕсли;
        ТекстОтчета.ЗаписатьКонецЭлемента();
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаполнитьКодНоменклатурыДляНалоговой(СтрокаТаблиы, КодНН)
    
    Попытка
        
        Если КодНН.Вид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
            СтрокаТаблиы.RXXXXG33 = СокрЛП(КодНН);
        Иначе
            СтрокаТаблиы.RXXXXG4 = СокрЛП(СтрЗаменить(КодНН,".",""));    
        КонецЕсли;
        
        Если КодНН.Вид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда     
            СтрокаТаблиы.RXXXXG32 = 1;    
        КонецЕсли;
        
        Попытка
            Если ЗначениеЗаполнено(КодНН.КодСХДеятельности) Тогда
                СтрокаТаблиы.RXXXXG011 = КодНН.КодСХДеятельности;
            КонецЕсли;    
        Исключение    
        КонецПопытки;
        
    Исключение
        
        Если Найти(КодНН.Код, "-") = 0 И Найти(КодНН.Код, ".") = 0 Тогда 
            СтрокаТаблиы.RXXXXG4 = СокрЛП(СтрЗаменить(КодНН,".",""));
        Иначе
            СтрокаТаблиы.RXXXXG33 = СокрЛП(КодНН);
        КонецЕсли;
        
    КонецПопытки;    
    
КонецПроцедуры

//Процедура заполняет данные по всем ТЧ.
// сложность в разном названии ТЧ и их реквизитов
Процедура ЗаполнитьДанныеПоТЧДокумента_НН_08(СтрокаТЗ, Документ)
    
    ТЗ_ТЧ_Лок = ТЗ_ТЧДок_НН.Скопировать();
    
    СтрокаТЗ.ТЗ_ТЧДок = ТЗ_ТЧ_Лок;
    
    ИтСуммаG7 = 0; //сумма по основой ставке НДС 20%
    ИтСуммаG8 = 0; //сумма по ставке НДС 0% по Украине
    ИтСуммаG9 = 0; //сумма по ставке НДС 0% Экспорт
    ИтСуммаG10 = 0; //сумма по ставке НДС "Без  НДС"
    ИтСуммаG109 = 0; //сумма по ставке НДС 7%
    ИтСуммаG14 = 0;//сумма по ставке НДС 14%
    
    ИтСуммаНДС = 0;
    ИтСуммаНДС7 = 0;
    ИтСуммаНДС14 = 0;
    СтрокаТЗ.R02G11 = 0;
    
    Для Каждого ТЧ Из Документ.Метаданные().ТабличныеЧасти Цикл
        
        Для Каждого СтрокаТЧ Из Документ[ТЧ.Имя] Цикл
            
            Если Найти(ТЧ.Имя,"Тара") > 0 Тогда //по возвратой таре отдельная колонка
                СтрокаТЗ.R02G11    = Документ[ТЧ.Имя].Итог("Сумма"); 
                Прервать;
            КонецЕсли;
            
            НоваяСтрока = ТЗ_ТЧ_Лок.Добавить();
            
            Попытка // расчет на то что первая колонка ТЧ будет содержать название ТМЦ, Услуги, ОС, НМА и т.д...
                НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].НаименованиеПолное;
                Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG3S) Тогда
                    НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].Наименование;    
                КонецЕсли;
            Исключение
                Попытка
                    НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].Наименование;
                Исключение
                    
                    Попытка
                        НоваяСтрока.RXXXXG3S = СтрокаТЧ.Номенклатура.Наименование;
                    Исключение
                        ТекстСообщения = НСтр("ru='Ошибка при заполнении названия ТМЦ.';uk='Помилка при заповненні назви ТМЦ.'");
                        СообщениеПользователю(ТекстСообщения);
                        СообщениеПользователю(ОписаниеОшибки());
                    КонецПопытки;
                КонецПопытки;    
            КонецПопытки;    
            
            Попытка
                
                //Если ИдКонф = "UT_3" Тогда
                //    НоваяСтрока.RXXXXG4 = СтрЗаменить(СтрокаТЧ.НомерГТД.КодУКТВЭД, " ", "");    
                //Иначе    
                //    НоваяСтрока.RXXXXG4 = СтрЗаменить(СтрокаТЧ.КодУКТВЭД, " ", "");
                //КонецЕсли;
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    ЗаполнитьКодНоменклатурыДляНалоговой(НоваяСтрока, СтрокаТЧ.НомерГТД.КодУКТВЭД);
                Иначе    
                    ЗаполнитьКодНоменклатурыДляНалоговой(НоваяСтрока, СтрокаТЧ.КодУКТВЭД);
                КонецЕсли;
                
            Исключение
            КонецПопытки;    
            
            Попытка //пытаемся заполнить единицу измерения
                НоваяСтрока.RXXXXG4S = СтрокаТЧ.ЕдиницаИзмерения;
                
                Попытка
                    НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код; 
                Исключение
                    НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.Код; 
                КонецПопытки;
            Исключение
                Попытка
                    НоваяСтрока.RXXXXG4S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].БазоваяЕдиницаИзмерения.Наименование;
                    НоваяСтрока.RXXXXG105_2S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].БазоваяЕдиницаИзмерения.Код;
                Исключение
                    Попытка
                        НоваяСтрока.RXXXXG4S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].ЕдиницаИзмерения.Наименование;
                        НоваяСтрока.RXXXXG105_2S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].ЕдиницаИзмерения.Код;
                    Исключение
                        НоваяСтрока.RXXXXG4S = "шт.";
                        НоваяСтрока.RXXXXG105_2S = "2009"; 
                    КонецПопытки;    
                КонецПопытки;    
            КонецПопытки;    
            
            Попытка
                НоваяСтрока.RXXXXG009 = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].КодЛьготы;    
            Исключение
            КонецПопытки;
            
            НоваяСтрока.RXXXXG105_2S = СокрЛП(НоваяСтрока.RXXXXG105_2S);
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG4S) Тогда
                НоваяСтрока.RXXXXG4S = "шт.";
                НоваяСтрока.RXXXXG105_2S = "2009"; 
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG105_2S) ИЛИ СтрДлина(НоваяСтрока.RXXXXG105_2S) <> 4 Тогда
                НоваяСтрока.RXXXXG105_2S = ЗаполнитьКодыПоЕдИзмерения(НоваяСтрока.RXXXXG4S);
            КонецЕсли;
            
            Попытка
                НоваяСтрока.RXXXXG5 = СтрокаТЧ.Количество; //количество
            Исключение
                НоваяСтрока.RXXXXG5 = 1;    
            КонецПопытки;    
            
            Попытка
                СуммаВключаетНДС = Документ.СуммаВключаетНДС;
            Исключение
                СуммаВключаетНДС = Ложь;
            КонецПопытки;    
            
            Попытка //пытаемся заполнить цену
                Если СуммаВключаетНДС Тогда
                    Попытка
                        НоваяСтрока.RXXXXG6 = Окр((СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС) / СтрокаТЧ.Количество, 12); //было 2
                    Исключение
                        НоваяСтрока.RXXXXG6 = Окр(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, 12); //типа кол-во =1
                    КонецПопытки;    
                Иначе    
                    НоваяСтрока.RXXXXG6 = Окр((СтрокаТЧ.Сумма) / СтрокаТЧ.Количество, 12);
                КонецЕсли;    
            Исключение
                Попытка
                    Если СтрокаТЧ.Цена = 0 Тогда
                        НоваяСтрока.RXXXXG6 = СтрокаТЧ.Сумма;
                    Иначе
                        НоваяСтрока.RXXXXG6 = СтрокаТЧ.Цена;
                    КонецЕсли;    
                Исключение
                    НоваяСтрока.RXXXXG6 = СтрокаТЧ.Сумма;
                КонецПопытки;    
            КонецПопытки;    
            
            Попытка
                ТипСтавки = ОпределитьТипСтавки(СтрокаТЧ.СтавкаНДС, Документ);
            Исключение
                ТипСтавки = "20";
            КонецПопытки;    
            
            RXXXXG7 = 0;
            RXXXXG8 = 0;
            RXXXXG9 = 0;
            RXXXXG10 = 0;
            RXXXXG109 = 0;
            RXXXXG14 = 0;
            Если ТипСтавки = "20" Тогда
                
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG7 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG7 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG7 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG7 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки;
                
                ИтСуммаG7 = ИтСуммаG7 + RXXXXG7;
                
                ИтСуммаНДС = ИтСуммаНДС + СтрокаТЧ.СуммаНДС;
                
            ИначеЕсли ТипСтавки = "902" Тогда
                
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG8 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG8 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG8 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG8 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки;
                
                ИтСуммаG8 = ИтСуммаG8 + RXXXXG8;

            ИначеЕсли ТипСтавки = "901" Тогда
                
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG9 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG9 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG9 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG9 = СтрокаТЧ.Сумма; //возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки;
                
                ИтСуммаG9 = ИтСуммаG9 + RXXXXG9;

            ИначеЕсли ТипСтавки = "903" Тогда
                
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG10 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG10 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG10 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG10 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки;
                
                ИтСуммаG10 = ИтСуммаG10 + RXXXXG10;
                
            ИначеЕсли ТипСтавки = "7" Тогда
                            
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG109 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG109 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG109 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG109 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки; 
                
                ИтСуммаG109 = ИтСуммаG109 + RXXXXG109;
                
                ИтСуммаНДС7 = ИтСуммаНДС7 + СтрокаТЧ.СуммаНДС;

            ИначеЕсли ТипСтавки = "14" Тогда
                            
                Попытка
                    Если СуммаВключаетНДС Тогда
                        RXXXXG14 = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
                    Иначе    
                        RXXXXG14 = СтрокаТЧ.Сумма;
                    КонецЕсли;    
                Исключение
                    Попытка
                        RXXXXG14 = СтрокаТЧ.СуммаБезНДС;
                    Исключение
                        RXXXXG14 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                    КонецПопытки;    
                КонецПопытки; 
                
                ИтСуммаG14 = ИтСуммаG14 + RXXXXG14;
                
                ИтСуммаНДС14 = ИтСуммаНДС14 + СтрокаТЧ.СуммаНДС;
                
            КонецЕсли;
            
            НоваяСтрока.RXXXXG008 = ТипСтавки;
            
            НоваяСтрока.RXXXXG010 = RXXXXG7 + RXXXXG8 + RXXXXG9 + RXXXXG10 + RXXXXG109;    
            
            НоваяСтрока.RXXXXG11_10 = 0;
            
            Попытка
                РасчСуммаНДС6Зн = Окр(РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СуммаНДС, СуммаВключаетНДС, ПолучитьЗначениеСтавкиНДС(СтроковоеПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС))), 6);
                НоваяСтрока.RXXXXG11_10 = РасчСуммаНДС6Зн;
            Исключение
            КонецПопытки;
        
            Если НоваяСтрока.RXXXXG11_10 = 0 Тогда 
                Попытка
                    НоваяСтрока.RXXXXG11_10 = СтрокаТЧ.СуммаНДС;
                Исключение
                КонецПопытки;
            Конецесли;
        
            Если ((ИдКонф <> "UT_3" И ИдКонф <> "ERP") И (Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации))
                    ИЛИ 
                    ((ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP") И (Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)) Тогда
                // BASC, ...
                Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG009) Тогда
                    НоваяСтрока.RXXXXG009 = "99999999";
                КонецЕсли;
                
            Иначе
                
                НоваяСтрока.RXXXXG009 = "";    
                
            КонецЕсли;
            
            СоглашениеОРазделеПродукции = Ложь;
            
            Попытка
                СоглашениеОРазделеПродукции = Документ.ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции.СоглашениеОРазделеПродукции;
            Исключение
                
            КонецПопытки;    
            
            Попытка
                СоглашениеОРазделеПродукции = Документ.Договор.МногостороннееСоглашениеОРазделеПродукции.СоглашениеОРазделеПродукции;
            Исключение
                
            КонецПопытки;    
            
            Сводная = Ложь;
            
            Попытка
                Сводная = Документ.Сводная;    
            Исключение
            КонецПопытки;    
            
            ЭтоУсловнаяПродажаУТ3 = Ложь;
            
            Попытка
                Если ((ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP") И (Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)) Тогда
                    ЭтоУсловнаяПродажаУТ3 = Истина;
                КонецЕсли;
            Исключение
            КонецПопытки;
            
            Если СоглашениеОРазделеПродукции = Истина Тогда
                
                НоваяСтрока.RXXXXG4S = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
                НоваяСтрока.RXXXXG4 = "";
                НоваяСтрока.RXXXXG4S = "";
                НоваяСтрока.RXXXXG105_2S = "";
                НоваяСтрока.RXXXXG6 = 0;
                НоваяСтрока.RXXXXG008 = "";
                НоваяСтрока.RXXXXG009 = "";
                НоваяСтрока.RXXXXG010 = 0;
                НоваяСтрока.RXXXXG11_10 = 0;
                
            ИначеЕсли Сводная = Истина И 
                    ((ИдКонф <> "UT_3" И ИдКонф <> "ERP") И (Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС))
                    ИЛИ ЭтоУсловнаяПродажаУТ3 Тогда
                // BASC, ...
                НоваяСтрока.RXXXXG4 = "";
                НоваяСтрока.RXXXXG6 = 0;
                НоваяСтрока.RXXXXG008 = "";
                НоваяСтрока.RXXXXG009 = "";
                
            КонецЕсли;
            
        КонецЦикла;
    КонецЦикла;
    
    СтрокаТЗ.R01G7 = ИтСуммаG7; //итог сумма по основой ставке НДС 20% 
    СтрокаТЗ.R01G109 = ИтСуммаG109; //итог сумма по ставке НДС 7%
    СтрокаТЗ.R01G14 = ИтСуммаG14; //итог сумма по ставке НДС 14%
    СтрокаТЗ.R01G8 = ИтСуммаG8; //итог сумма по ставке НДС 0% по Украине
    СтрокаТЗ.R01G9 = ИтСуммаG9; //итог сумма по ставке НДС 0% Экспорт
    СтрокаТЗ.R01G10 = ИтСуммаG10; //итог сумма по ставке НДС "Без  НДС"
    СтрокаТЗ.R03G7 = ИтСуммаНДС; //итог сумма НДС по основой ставке НДС 20% 
    СтрокаТЗ.R03G109 = ИтСуммаНДС7; //итог сумма НДС по основой ставке НДС 7% по Украине
    СтрокаТЗ.R03G14 = ИтСуммаНДС14; //итог сумма НДС по основой ставке НДС 14% по Украине
    СтрокаТЗ.R03G11 = ИтСуммаНДС + ИтСуммаНДС7; //итогая сумма НДС
    СтрокаТЗ.R04G11 = ИтСуммаG7 + ИтСуммаG109 + ИтСуммаG8 + ИтСуммаG9 + ИтСуммаG10 + ИтСуммаНДС + ИтСуммаНДС7 + СтрокаТЗ.R02G11; //сумма итого с НДС 
    
КонецПроцедуры    

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, СуммаНДС_ТЧ, СуммаВключаетНДС, СтавкаНДС) Экспорт

    Если СуммаВключаетНДС Тогда
        СуммаБезНДС = Сумма - СуммаНДС_ТЧ; //изменение алгоритма расчета суммы НДС после обращения клиента 15.10.2020        
        //СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС); //изменение алгоритма расчета суммы НДС после обращения клиента 15.10.2020
        //СуммаНДС = Сумма - СуммаБезНДС; //изменение алгоритма расчета суммы НДС после обращения клиента 15.10.2020
    Иначе
        СуммаБезНДС = Сумма;
    КонецЕсли;

    //Если НЕ СуммаВключаетНДС Тогда //изменение алгоритма расчета суммы НДС после обращения клиента 15.10.2020 
        СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
    //КонецЕсли; //изменение алгоритма расчета суммы НДС после обращения клиента 15.10.2020
    
    Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДСПредставление) Экспорт

    Если Найти(СтавкаНДСПредставление, "20") > 0 Тогда
        Возврат 20;
    КонецЕсли;

    Если Найти(СтавкаНДСПредставление, "7") > 0 Тогда
        Возврат 7;
    КонецЕсли;
    
    Возврат 0;

КонецФункции

//Процедура заполняет данные по всем ТЧ.
// сложность в разном названии ТЧ и их реквизитов
Процедура ЗаполнитьДанныеПоТЧДокумента_П2_08(СтрокаТЗ, Документ)
    
    ТЗ_ТЧ_Лок = ТЗ_ТЧДок_П2.Скопировать();
    
    СтрокаТЗ.ТЗ_ТЧДок = ТЗ_ТЧ_Лок;
    
    ИтСуммаG9 = 0; //сумма по основой ставке НДС 20%
    ИтСуммаG111 = 0; //сумма по основой ставке НДС 7%
    ИтСуммаG14 = 0; //сумма по основой ставке НДС 14%
    
    ИтСуммаG10 = 0; //сумма по ставке НДС 0%
    ИтСуммаG11 = 0; //сумма по ставке БЕЗ НДС

    ИтСуммаНДС = 0;
    ИтСуммаНДС7 = 0;
    ИтСуммаНДС14 = 0;
    
    СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура");
    
    Для Каждого ТЧ Из Документ.Метаданные().ТабличныеЧасти Цикл
        
        лНомерСтрокиНН = 0;
        
        Для Каждого СтрокаТЧ Из Документ[ТЧ.Имя] Цикл
            
            Если Найти(ТЧ.Имя,"Тара") > 0 Тогда //по возвратой таре в П2 нет ничего - странно
                Прервать;
            КонецЕсли;
            
            лНомерСтрокиНН = лНомерСтрокиНН + 1;
            
            НоваяСтрока = ТЗ_ТЧ_Лок.Добавить();
            
            НомерСтрокиНН = 0;
            // определеним номер строки исходной НН
            Попытка
                НомерСтрокиНН = СтрокаТЧ.НомерСтрокиНН;    
            Исключение
            КонецПопытки;
            
            Попытка
                
                Если НЕ ЗначениеЗаполнено(НомерСтрокиНН) Тогда
                    ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННСокращенная, СтрокаТЧ);
                    НайденныеСтроки = Документ.НалоговаяНакладная[ТЧ.Имя].НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
                    Если НайденныеСтроки.Количество() > 0 Тогда
                        НомерСтрокиНН = Документ.НалоговаяНакладная[ТЧ.Имя].Индекс(НайденныеСтроки[0]) + 1;
                    КонецЕсли;
                КонецЕсли;
                
            Исключение
            КонецПопытки;
            
            Если НомерСтрокиНН = 0 Тогда
                НомерСтрокиНН = лНомерСтрокиНН;    
            КонецЕсли;                
            
            НоваяСтрока.RXXXXG001 = НомерСтрокиНН;
            
            //Попытка
            //    НоваяСтрока.RXXXXG2S = СтрокаТЧ.Причина; // причина корректировки             
            //Исключение    
            //    НоваяСтрока.RXXXXG2S = ""; 
            //КонецПопытки;    
            //
            //Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG2S) Тогда
            //    НоваяСтрока.RXXXXG2S = "Повернення";
            //КонецЕсли;
            
            
            Попытка
                НоваяСтрока.RXXXXG21 = СтрокаТЧ.КодПричины; // причина корректировки             
            Исключение    
                НоваяСтрока.RXXXXG21 = ""; 
            КонецПопытки;    
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG21) Тогда
                НоваяСтрока.RXXXXG21 = 101;
            КонецЕсли;

            Попытка
                НоваяСтрока.RXXXXG22 = СтрокаТЧ.НомерГруппы; // причина корректировки             
            Исключение    
                НоваяСтрока.RXXXXG22 = ""; 
            КонецПопытки;    
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG22) Тогда
                НоваяСтрока.RXXXXG22 = 101;
            КонецЕсли;    
            
            Попытка // расчет на то что первая колонка ТЧ будет содержать название ТМЦ, Услуги, ОС, НМА и т.д...
                НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].НаименованиеПолное;
                
                Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG3S) Тогда
                    НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].Наименование;    
                КонецЕсли;
                
            Исключение
                Попытка
                    НоваяСтрока.RXXXXG3S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].Наименование;
                Исключение
                    
                    Попытка
                        НоваяСтрока.RXXXXG3S = СтрокаТЧ.Номенклатура.Наименование;
                    Исключение
                        ТекстСообщения = НСтр("ru='Ошибка при заполнении названия ТМЦ (3-я колонка НН).';uk='Помилка при заповненні назви ТМЦ (третьому колонка НН).'");
                        СообщениеПользователю(ТекстСообщения);
                        СообщениеПользователю(ОписаниеОшибки());
                    КонецПопытки;
                    
                КонецПопытки;    
            КонецПопытки;    
            
            Попытка
                НоваяСтрока.RXXXXG009 = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].КодЛьготы;    
            Исключение
            КонецПопытки;    
            
            Попытка
                
                //Если ИдКонф = "UT_3" Тогда
                //    НоваяСтрока.RXXXXG4 = СтрЗаменить(СтрокаТЧ.НомерГТД.КодУКТВЭД, " ", "");    
                //Иначе    
                //    НоваяСтрока.RXXXXG4 = СтрЗаменить(СтрокаТЧ.КодУКТВЭД, " ", "");
                //КонецЕсли;
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    ЗаполнитьКодНоменклатурыДляНалоговой(НоваяСтрока, СтрокаТЧ.НомерГТД.КодУКТВЭД);
                Иначе    
                    ЗаполнитьКодНоменклатурыДляНалоговой(НоваяСтрока, СтрокаТЧ.КодУКТВЭД);
                КонецЕсли;
                
            Исключение
            КонецПопытки;
            
            Попытка //пытаемся заполнить единицу измерения, напомниание - код исправить на нормальный...
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
                        НоваяСтрока.RXXXXG4S = СтрокаТЧ.Упаковка;    
                    ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
                        НоваяСтрока.RXXXXG4S = СтрокаТЧ.ЕдиницаИзмерения;    
                        
                        Попытка
                            НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код; 
                        Исключение
                            НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.Код; 
                        КонецПопытки;
                        НоваяСтрока.RXXXXG4S = СтрокаТЧ.Номенкалтура.ЕдиницаИзмерения.Наименование;    
                        НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.Номенкалтура.ЕдиницаИзмерения.Код; 
                    КонецЕсли;    
                Иначе    
                    НоваяСтрока.RXXXXG4S = СтрокаТЧ.ЕдиницаИзмерения;
                    
                    Попытка
                        НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код; 
                    Исключение
                        НоваяСтрока.RXXXXG105_2S = СтрокаТЧ.ЕдиницаИзмерения.Код; 
                    КонецПопытки;
                    
                КонецЕсли;    
                
            Исключение
                Попытка
                    НоваяСтрока.RXXXXG4S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].БазоваяЕдиницаИзмерения.Наименование;
                    НоваяСтрока.RXXXXG105_2S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].БазоваяЕдиницаИзмерения.Код;
                Исключение
                    Попытка
                        НоваяСтрока.RXXXXG4S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].ЕдиницаИзмерения.Наименование;
                        НоваяСтрока.RXXXXG105_2S = СтрокаТЧ[Документ.метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты[0].Имя].ЕдиницаИзмерения.Код;
                    Исключение
                        НоваяСтрока.RXXXXG4S = "шт.";
                        НоваяСтрока.RXXXXG105_2S = "2009"; 
                    КонецПопытки;    
                КонецПопытки;    
            КонецПопытки;    
            
            НоваяСтрока.RXXXXG105_2S = СокрЛП(НоваяСтрока.RXXXXG105_2S);
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG4S) Тогда
                НоваяСтрока.RXXXXG4S = "шт.";
                НоваяСтрока.RXXXXG105_2S = "2009"; 
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG105_2S) ИЛИ СтрДлина(НоваяСтрока.RXXXXG105_2S) <> 4 Тогда
                НоваяСтрока.RXXXXG105_2S = ЗаполнитьКодыПоЕдИзмерения(НоваяСтрока.RXXXXG4S);
            КонецЕсли;
            
            Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда //бред по П2 в УТ
                Если СтрокаТЧ.ЭтоКорректировкаКоличества Тогда
                    
                    Если ЗначениеЗаполнено(СтрокаТЧ.КоличествоУпаковок) Тогда
                        НоваяСтрока.RXXXXG5 = СтрокаТЧ.КоличествоУпаковок; 
                    Иначе    
                        НоваяСтрока.RXXXXG5 = СтрокаТЧ.Количество;
                    КонецЕсли;
                    
                КонецЕсли;    
            Иначе        
                Попытка
                    НоваяСтрока.RXXXXG5 = СтрокаТЧ.ИзменениеКоличества; //количество
                Исключение
                    НоваяСтрока.RXXXXG5 = 0;
                КонецПопытки;    
            КонецЕсли;
            
            Попытка
                СуммаВключаетНДС = Документ.СуммаВключаетНДС;
            Исключение
                СуммаВключаетНДС = Ложь;
            КонецПопытки;    
            
            Если НоваяСтрока.RXXXXG5 = 0 Тогда
                НоваяСтрока.RXXXXG6 = 0;
            Иначе    
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда //бред по П2 в УТ
                    Если СтрокаТЧ.ЭтоКорректировкаКоличества Тогда
                        НоваяСтрока.RXXXXG6 = СтрокаТЧ.ЦенаРегл;
                    КонецЕсли;    
                Иначе    
                    Попытка //пытаемся заполнить цену
                        Если СуммаВключаетНДС Тогда
                            Попытка
                                НоваяСтрока.RXXXXG6 = Окр((СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС) / СтрокаТЧ.Количество, 2); //было 12
                            Исключение
                                НоваяСтрока.RXXXXG6 = Окр(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, 2); //типа кол-во =1
                            КонецПопытки;    
                        Иначе    
                            НоваяСтрока.RXXXXG6 = Окр((СтрокаТЧ.Сумма) / СтрокаТЧ.Количество, 2);
                        КонецЕсли;    
                    Исключение
                        Попытка
                            Если СтрокаТЧ.Цена = 0 Тогда
                                НоваяСтрока.RXXXXG6 = СтрокаТЧ.Сумма;
                            Иначе
                                НоваяСтрока.RXXXXG6 = СтрокаТЧ.Цена;
                            КонецЕсли;    
                        Исключение
                            НоваяСтрока.RXXXXG6 = СтрокаТЧ.Сумма;
                        КонецПопытки;    
                    КонецПопытки;    
                КонецЕсли;
            КонецЕсли;
        
            Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                Если НЕ СтрокаТЧ.ЭтоКорректировкаКоличества Тогда
                    НоваяСтрока.RXXXXG7 = СтрокаТЧ.ЦенаРегл;
                КонецЕсли;    
            Иначе    
                Если НоваяСтрока.RXXXXG5 <> 0 Тогда 
                    НоваяСтрока.RXXXXG7 = 0;
                Иначе
                    Попытка //пытаемся заполнить изменение цены
                        Если СуммаВключаетНДС Тогда
                            Попытка
                                НоваяСтрока.RXXXXG7 = Окр((СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС) / СтрокаТЧ.Количество, 2);
                            Исключение
                                НоваяСтрока.RXXXXG7 = Окр(СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС, 2); //типа кол-во =1
                            КонецПопытки;    
                        Иначе    
                            НоваяСтрока.RXXXXG7 = СтрокаТЧ.ИзменениеЦены;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            Если СтрокаТЧ.ИзменениеЦены = 0 Тогда
                                НоваяСтрока.RXXXXG7 = СтрокаТЧ.ИзменениеСуммы;
                            Иначе
                                НоваяСтрока.RXXXXG7 = СтрокаТЧ.ИзменениеЦены;
                            КонецЕсли;    
                        Исключение
                            НоваяСтрока.RXXXXG6 = СтрокаТЧ.ИзменениеСуммы;
                        КонецПопытки;    
                    КонецПопытки;
                КонецЕсли;    
            КонецЕсли;
            
            Если НоваяСтрока.RXXXXG7 = 0 Тогда
                НоваяСтрока.RXXXXG8 = 0;
            Иначе
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    Если НЕ СтрокаТЧ.ЭтоКорректировкаКоличества Тогда
                        Если ЗначениеЗаполнено(СтрокаТЧ.КоличествоУпаковок) Тогда
                            НоваяСтрока.RXXXXG8 = СтрокаТЧ.КоличествоУпаковок; 
                        Иначе    
                            НоваяСтрока.RXXXXG8 = СтрокаТЧ.Количество;
                        КонецЕсли;
                    КонецЕсли;    
                Иначе    
                    Попытка
                        НоваяСтрока.RXXXXG8 = СтрокаТЧ.Количество; //количество
                    Исключение
                        НоваяСтрока.RXXXXG8 = 0;    
                    КонецПопытки;
                КонецЕсли;
            КонецЕсли;
            
            Попытка
                ТипСтавки = ОпределитьТипСтавки(СтрокаТЧ.СтавкаНДС, Документ);
            Исключение
                ТипСтавки = "20";
            КонецПопытки;    
            
            RXXXXG111 = 0;
            RXXXXG14 = 0;
            RXXXXG9 = 0;
            R006G03 = 0;
            RXXXXG10 = 0;
            RXXXXG11 = 0;
            
            Если ТипСтавки = "20" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    RXXXXG9 = СтрокаТЧ.СуммаБезНДС;
                    ИтСуммаНДС = ИтСуммаНДС + СтрокаТЧ.СуммаНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            RXXXXG9 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            RXXXXG9 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            RXXXXG9 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            RXXXXG9 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки;
                    
                    ИтСуммаНДС = ИтСуммаНДС + СтрокаТЧ.ИзменениеСуммыНДС;
                КонецЕсли;
                
                ИтСуммаG9 = ИтСуммаG9 + RXXXXG9;
                
            ИначеЕсли ТипСтавки = "901" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    R006G03 = СтрокаТЧ.СуммаБезНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            R006G03 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            R006G03 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            R006G03 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            R006G03 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки;
                КонецЕсли;
                ИтСуммаR006G03 = ИтСуммаR006G03 + R006G03;
                
            ИначеЕсли ТипСтавки = "902" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    RXXXXG10 = СтрокаТЧ.СуммаБезНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            RXXXXG10 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            RXXXXG10 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            RXXXXG10 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            RXXXXG10 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки;
                КонецЕсли;
                ИтСуммаG10 = ИтСуммаG10 + RXXXXG10;
            
            ИначеЕсли ТипСтавки = "903" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    RXXXXG11 = СтрокаТЧ.СуммаБезНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            RXXXXG11 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            RXXXXG11 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            RXXXXG11 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            RXXXXG11 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки;
                КонецЕсли;
                ИтСуммаG11 = ИтСуммаG11 + RXXXXG11;
                
            ИначеЕсли ТипСтавки = "7" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    RXXXXG111 = СтрокаТЧ.СуммаБезНДС;
                    ИтСуммаНДС7 = ИтСуммаНДС7 + СтрокаТЧ.СуммаНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            RXXXXG111 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            RXXXXG111 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            RXXXXG111 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            RXXXXG111 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки; 
                    ИтСуммаНДС7 = ИтСуммаНДС7 + СтрокаТЧ.ИзменениеСуммыНДС;
                КонецЕсли;
                
                ИтСуммаG111 = ИтСуммаG111 + RXXXXG111;
                
            ИначеЕсли ТипСтавки = "14" Тогда
                
                Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                    RXXXXG14 = СтрокаТЧ.СуммаБезНДС;
                    ИтСуммаНДС14 = ИтСуммаНДС14 + СтрокаТЧ.СуммаНДС;
                Иначе
                    Попытка
                        Если СуммаВключаетНДС Тогда
                            RXXXXG14 = СтрокаТЧ.ИзменениеСуммы - СтрокаТЧ.ИзменениеСуммыНДС;
                        Иначе    
                            RXXXXG14 = СтрокаТЧ.ИзменениеСуммы;
                        КонецЕсли;    
                    Исключение
                        Попытка
                            RXXXXG14 = СтрокаТЧ.СуммаБезНДС;
                        Исключение
                            RXXXXG14 = СтрокаТЧ.Сумма;//возможно др. название колонки, пока так.
                        КонецПопытки;    
                    КонецПопытки; 
                    ИтСуммаНДС14 = ИтСуммаНДС14 + СтрокаТЧ.ИзменениеСуммыНДС;
                КонецЕсли;
                
                ИтСуммаG114 = ИтСуммаG114 + RXXXXG14;    
                
            КонецЕсли;
            
            НоваяСтрока.RXXXXG008 = ТипСтавки;
            
            НоваяСтрока.RXXXXG010 = RXXXXG9 + RXXXXG10 + RXXXXG11 + RXXXXG111 + R006G03;
            
            Попытка
                РасчСуммаНДС6Зн = Окр(РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СуммаНДС, СуммаВключаетНДС, СтроковоеПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС)), 6);
                НоваяСтрока.RXXXXG11_10 = РасчСуммаНДС6Зн;
            Исключение
            КонецПопытки;
        
            Если НоваяСтрока.RXXXXG11_10 = 0 Тогда 
                Попытка
                    НоваяСтрока.RXXXXG11_10 = СтрокаТЧ.СуммаНДС;
                Исключение
                КонецПопытки;
            Конецесли;
            
            Если ((ИдКонф <> "UT_3" И ИдКонф <> "ERP") И(
                    Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат))
                    ИЛИ
                    
                    ((ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP") И(Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
                       ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
                    ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации))
                    
                    Тогда

                Если НЕ ЗначениеЗаполнено(НоваяСтрока.RXXXXG009) Тогда
                    НоваяСтрока.RXXXXG009 = "99999999";
                КонецЕсли;
                
            Иначе
                
                НоваяСтрока.RXXXXG009 = "";    
                
            КонецЕсли;
            
            СоглашениеОРазделеПродукции = Ложь;
            
            Попытка
                СоглашениеОРазделеПродукции = Документ.ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции.СоглашениеОРазделеПродукции;
            Исключение
                
            КонецПопытки;    
            
            Попытка
                СоглашениеОРазделеПродукции = Документ.Договор.МногостороннееСоглашениеОРазделеПродукции.СоглашениеОРазделеПродукции;
            Исключение
                
            КонецПопытки;    
            
            Сводная = Ложь;
            
            Попытка
                //Если ИдКонф = "UT_3" Тогда
                Сводная = Документ.НалоговаяНакладная.Сводная;
                //Иначе
                //    Сводная = Документ.Сводная;
                //КонецЕсли;
            Исключение
            КонецПопытки;    
            
            Если СоглашениеОРазделеПродукции = Истина Тогда
                
                НоваяСтрока.RXXXXG4S = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
                НоваяСтрока.RXXXXG4 = "";
                НоваяСтрока.RXXXXG4S = "";
                НоваяСтрока.RXXXXG105_2S = "";
                НоваяСтрока.RXXXXG6 = 0;
                НоваяСтрока.RXXXXG008 = "";
                НоваяСтрока.RXXXXG009 = "";
                НоваяСтрока.RXXXXG010 = 0;
                НоваяСтрока.RXXXXG11_10 = 0;
                
            ИначеЕсли Сводная = Истина И (((ИдКонф <> "UT_3" И ИдКонф <> "ERP") И Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат) ИЛИ ((ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP") И Документ.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)) Тогда
                                                                                 
                НоваяСтрока.RXXXXG4 = "";
                
                НоваяСтрока.RXXXXG6 = 0;
                НоваяСтрока.RXXXXG008 = "";
                НоваяСтрока.RXXXXG009 = "";
                
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    СтрокаТЗ.R001G03 = ИтСуммаНДС +  ИтСуммаНДС7;
    СтрокаТЗ.R02G9 = ИтСуммаНДС; //итог сумма НДС по основой ставке НДС 20% 
    СтрокаТЗ.R01G9 = ИтСуммаG9;
    СтрокаТЗ.R02G111 = ИтСуммаНДС7; //итог сумма НДС по основой ставке НДС 7%
    СтрокаТЗ.R03G14 = ИтСуммаНДС14; //итог сумма НДС по основой ставке НДС 14%
    
    СтрокаТЗ.R006G03 = ИтСуммаR006G03; 
    СтрокаТЗ.R007G03 = ИтСуммаG10;
    СтрокаТЗ.R01G111 = ИтСуммаG111;
    СтрокаТЗ.R01G14 = ИтСуммаG14;
     
    СтрокаТЗ.R01G11 = ИтСуммаG11; //итог сумма по ставке НДС "Без  НДС"
    
КонецПроцедуры    

//Процедура выполняет отправку XML файлов на сервер ПБ.
//
//Параметры:
// ТЗДокументов - таблица значений колонки коды ЕДРПОУ организации и контрагента, номер, дату и сумму документа, имя файла XML
//
Процедура ОтправитьДокументыНаРегистрацию(ТЗДокументов, ТЧВыгрузки, ЕстьОшибки, КодировкаФайла = Неопределено, ЭтоВыгрузкаPDF = Ложь)
    
    Если КодировкаФайла = Неопределено Тогда
        КодировкаФайла = КодировкаТекста.UTF8;
    КонецЕсли;
    
    Если ТЗДокументов.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;    
    
    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат;
    КонецЕсли;

    КоличествоДокументов = 0;
    
    Для Каждого СтрокаТЗ Из ТЗДокументов Цикл

        Файл = Новый Файл(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЗ.ИмяДокумента);
        
        ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].КартинкаОшибки = 0; //изначально считаем что нет ошибки 
        ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки = ""; //изначально считаем что нет ошибки  
        
        Если НЕ Файл.Существует() Тогда
            ТекстСообщения = НСтр("ru='Внимание! Файл не найден';uk='Увага! Файл не знайдено'") +  СтрокаТЗ.ИмяДокумента + ". Документ №" + СтрокаТЗ.НомерДокумента + НСтр("ru=' не выгружен';uk=' не вивантажений'");
            СообщениеПользователю(ТекстСообщения);
            
            ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].КартинкаОшибки = 1;
            ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки = ТекстСообщения;
            
            Продолжить;
        КонецЕсли;
        
        //получим адрес для отправки
        ИнтернетАдрес = АдресАК + "/api/proxy/edoc/loader";

        Если ЭтоВыгрузкаPDF Тогда
            РесурсНаСервере = "/upload-pdf-b64";
        Иначе
            РесурсНаСервере = "/upload";
        КонецЕсли;                        
                
        Если ЭтоВыгрузкаPDF Тогда
            
            ПутьКПДФ = КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЗ.ИмяДокумента;
            
            СтрокаЗапроса = "&uploadedFileB64=" + EncodeURL(СтрЗаменить(СтрЗаменить(Base64Строка(Новый ДвоичныеДанные(ПутьКПДФ)), Символы.ВК, ""),Символы.ПС , ""))
                + "&uploadedFileName=" + EncodeURL(СтрокаТЗ.ИмяДокумента)
                + "&okpo=" + КодПоЕДРПОУ
                + "&recipientOkpo=" + СтрокаТЗ.ОКПО
                + "&recipientName=" + СтрокаТЗ.НаименованиеКонтрагента
                + "&documentDate=" + Формат(СтрокаТЗ.Дата, "ДФ=yyyy-MM-dd")
                + "&amount=" + Формат(СтрокаТЗ.СуммаДокумента, "ЧГ=0;ЧДЦ=2;ЧРД=.")
                + "&documentNum=" + (СтрокаТЗ.Номер);            
                                    
            UserAgentHeaders = ОпределитьUserAgentHeaders();
                        
            Заголовки = Новый ТаблицаЗначений;
            Заголовки.Колонки.Добавить("Заголовок");
            Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
            
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Content-Type";
            НоваяСтрока.ЗначениеЗаголовка = "application/x-www-form-urlencoded";

            Если ЗначениеЗаполнено(ИдАК) Тогда
                НоваяСтрока = Заголовки.Добавить();
                НоваяСтрока.Заголовок = "id";
                НоваяСтрока.ЗначениеЗаголовка = ИдАК;
            КонецЕсли;

            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "token";
            НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
            
            стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "", Заголовки);
            
            Ответ = "";
            
            Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
                
                ЕстьОшибки = Истина;
                Возврат;
                
            Иначе
                Статус = стРезультат.Статус;
                СессияДок = стРезультат.Cookie;
                Ответ = стРезультат.ТелоОтвета;
            КонецЕсли;
            
            // если не успешно сообщим ошибку
            Если Статус <> 200 Тогда
                
                ТекстСообщения = НСтр("ru='Ошибка отправки документа отмеченного в строке №'; uk='Помилка відправки документа зазначеного у рядку №'") + СтрокаТЗ.НомерСтрокиТЧ;
                СообщениеПользователю(ТекстСообщения);
                ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].КартинкаОшибки = 1;
                ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки = ТекстСообщения;
                
                ЕстьОшибки = Истина;
                
                Возврат;
                
            КонецЕсли;            
            
            Попытка
                
                СтруктураОтвета = jsonПрочитатьИнициализация(Ответ);
                
                Если Найти(СтруктураОтвета.STATUS, "SUCCESS") > 0 Тогда //все прошло успешно. 
                    ИдДок = СтруктураОтвета.id;
                    ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ИдДокумента = ИдДок;
                    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);    
                Иначе
                    
                    ЕстьОшибки = Истина;
                КонецЕсли;
            Исключение
                ЕстьОшибки = Истина;
            КонецПопытки;
            
            Если ЕстьОшибки Тогда
                ТекстСообщения = НСтр("ru='Ошибка отправки документа отмеченного в строке №'; uk='Помилка відправки документа зазначеного у рядку №'") + СтрокаТЗ.НомерСтрокиТЧ;
                СообщениеПользователю(ТекстСообщения);
                ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].КартинкаОшибки = 1;
                ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки = ТекстСообщения;    
            КонецЕсли;
            
            Возврат;
            
        КонецЕсли;
        
        ДанныеЗапроса = Новый Структура;
        ФайлДляПередачи = Новый ТекстовыйДокумент;
        ФайлДляПередачи.Прочитать(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЗ.ИмяДокумента, КодировкаФайла);

        Если ПоддерживаетсяTLS12 И Не ФлажокИспользоватьКурлВсегда Тогда
            ДанныеЗапроса.Вставить("ИмяФайла", EncodeURL(СтрокаТЗ.ИмяДокумента));
        Иначе    
            ДанныеЗапроса.Вставить("ИмяФайла", (СтрокаТЗ.ИмяДокумента));
        КонецЕсли;
                        
        ДанныеЗапроса.Вставить("Текст", ФайлДляПередачи.ПолучитьТекст());
        ДанныеЗапроса.Вставить("ОКПО", ПолучитьКодОрганизации());

        
        Ответ = ОтправитьДокументНаСайт(ИнтернетАдрес, РесурсНаСервере, ДанныеЗапроса, СессияДок, КодировкаФайла);        
                
        Если Ответ <> Неопределено Тогда
            //парсим ответ
            ОбработатьОтветОтправкиДокументаНаСайт(ТЧВыгрузки, Ответ, ДанныеЗапроса, СтрокаТЗ.НомерСтрокиТЧ, СессияДок, ИнтернетАдрес, РесурсНаСервере, КодировкаФайла);
            КоличествоДокументов = КоличествоДокументов + 1;
        Иначе    
            
            ТекстСообщения = НСтр("ru='Ошибка отправки документа отмеченного в строке №'; uk='Помилка відправки документа зазначеного у рядку №'") + СтрокаТЗ.НомерСтрокиТЧ;
            СообщениеПользователю(ТекстСообщения);
            ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].КартинкаОшибки = 1;
            ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки = ТекстСообщения;
            
        КонецЕсли;
        
        Если ЗначениеЗаполнено(ТЧВыгрузки[СтрокаТЗ.НомерСтрокиТЧ-1].ТекстОшибки) Тогда
            ЕстьОшибки = Истина;
        КонецЕсли;
        
    КонецЦикла;
    
    Если НЕ ЕстьОшибки Тогда
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики,,,"КоличествоПлатежей", Формат(КоличествоДокументов, "ЧГ=0"));
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработатьОтветОтправкиДокументаНаСайт(ТЧВыгрузки, ТекстОтвета, ДанныеЗапроса, НомерСтроки, СессияДок, ИнтернетАдрес, РесурсНаСервере, КодировкаФайла)
    
    СтруктураОтвета = jsonПрочитатьИнициализация(ТекстОтвета);
    ЕстьОшибки = Ложь;
    СтатусОшибки = "";
    Попытка
        СтатусОшибки = СтруктураОтвета.code;
    Исключение
    КонецПопытки;
    
    Если Найти(СтруктураОтвета.status, "SUCCESS") > 0 Тогда //все прошло успешно.
        
        ТЧВыгрузки[НомерСтроки-1].КартинкаСтатуса = 2;    
        ТЧВыгрузки[НомерСтроки-1].СтатусДокумента = НСтр("ru = 'В работе';uk = 'В роботі'");//нужно подписать и отправить
        ТЧВыгрузки[НомерСтроки-1].ИдДокумента = "";
        Возврат;
        
    ИначеЕсли СтатусОшибки = "VE002" ИЛИ СтатусОшибки = "DE001" Тогда // такой документ уже есть на сайте
        
        Если ПерезаписыватьОтправленныеДокументы Тогда
            Попытка
                ИдДок = СтруктураОтвета.details.arguments[0];
                ЕстьОшибки = УдалитьДокументНаСайте(ТЧВыгрузки, ДанныеЗапроса, ИдДок, СессияДок, НомерСтроки);
            Исключение
                ЕстьОшибки = Истина;
            КонецПопытки;            
                        
            Если ЕстьОшибки Тогда
                
                ТекстСообщения = НСтр("ru='Внимание! Не удалось повторно отправить документ отмеченный в строке №%НомерСтроки%.'; uk='Увага! Не вдалося повторно відправити документ зазначений у рядку №%НомерСтроки%.'");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтроки);
                
                Если Не ЗначениеЗаполнено(ТЧВыгрузки[НомерСтроки-1].ТекстОшибки) Тогда
                    ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
                    ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
                КонецЕсли;    
            
                СообщениеПользователю(ТекстСообщения);
                
            Иначе
                
                Ответ = ОтправитьДокументНаСайт(ИнтернетАдрес, РесурсНаСервере, ДанныеЗапроса, СессияДок, КодировкаФайла);
                
                Если Ответ <> Неопределено Тогда
                    //парсим ответ
                    ОбработатьОтветОтправкиДокументаНаСайт(ТЧВыгрузки, Ответ, ДанныеЗапроса, НомерСтроки, СессияДок, ИнтернетАдрес, РесурсНаСервере, КодировкаФайла);
                Иначе    
                    
                    ТекстСообщения = НСтр("ru='Ошибка повторной отправки документа отмеченного в строке №'; uk='Помилка повторної відправки документа зазначеного у рядку №'") + НомерСтроки;
                    СообщениеПользователю(ТекстСообщения);
                    ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
                    ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
            
                КонецЕсли;
                
            КонецЕсли;
        Иначе    
            
            ТекстСообщения = НСтр("ru='Внимание! Документ отмеченный в строке №%НомерСтроки% был отправлен ранее. Документ пропущен.'; uk='Увага! Документ зазначений у рядку №%НомерСтроки% був відправлений раніше. Документ пропущений.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтроки);
            
            ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 2;
            ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
            
            СообщениеПользователю(ТекстСообщения, Ложь);
            
        КонецЕсли;
        
    ИначеЕсли СтатусОшибки = "VE001" ИЛИ СтатусОшибки = "VE007" Тогда //документ уже был отправлен - сделать ничего не можем
        
        ТекстСообщения = НСтр("ru='Внимание! Документ отмеченный в строке №%НомерСтроки% уже отправлен. Повторная выгрузка невозможна.'; uk='Увага! Документ зазначений у рядку №%НомерСтроки% уже відправлений. Повторне вивантаження неможливо'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтроки);
        
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 2;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
        СообщениеПользователю(ТекстСообщения, Ложь);
        
    ИначеЕсли СтатусОшибки = "VE003" Тогда
        
        ТекстСообщения = НСтр("ru='Неподдерживаемый тип документа в строке №'; uk='Непідтримуваний тип документа '") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
    ИначеЕсли СтатусОшибки = "VE004" Тогда
        
        ТекстСообщения = НСтр("ru='Документ не найден '; uk='Документ не знайдено '");
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
    ИначеЕсли СтатусОшибки = "VE005" Тогда
        
        ТекстСообщения = НСтр("ru='Неверные параметры запроса '; uk='Неправильні запиту '");
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
    ИначеЕсли СтатусОшибки = "VE006" Тогда
        
        ТекстСообщения = НСтр("ru='Неверный формат документа. Строка №'; uk='Невірний формат документа. Рядок №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
    ИначеЕсли СтатусОшибки = "VE008" Тогда
        
        ТекстСообщения = НСтр("ru='Записываемый документ не содержит данных. Строка № '; uk='Записуваний документ не містить даних. Рядок №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;    
        
    ИначеЕсли СтатусОшибки = "VE009" Тогда
        
        ТекстСообщения = НСтр("ru='Отсутствует ожидаемое содержание. Строка № '; uk='Відсутній очікуваний зміст. Рядок №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
    ИначеЕсли СтатусОшибки = "VE0010" Тогда
        
        ТекстСообщения = НСтр("ru='Ошибка при сохренении документа в строке №'; uk='Відсутній очікуваний зміст у рядку №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;    
        
    ИначеЕсли СтатусОшибки = "VE0011" Тогда
        
        ТекстСообщения = НСтр("ru='Ошибка при сохранении документа. Такой документ уже существует. Строка №'; uk='Помилка при збереженні документа. Такий документ вже існує. Рядок №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;    
        
    ИначеЕсли СтатусОшибки = "SE001" Тогда
        
        ТекстСообщения = НСтр("ru='Нет доступа к компании.'; uk='Немає доступу до компанії.'");
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;    
        
    Иначе
        
        ТекстСообщения = НСтр("ru='Ошибка отправки документа отмеченного в строке №'; uk='Помилка відправки документа зазначеного у рядку №'") + НомерСтроки;
        СообщениеПользователю(ТекстСообщения);
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 1;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;    
        
    КонецЕсли;    
        
КонецПроцедуры    

Функция УдалитьДокументНаСайте(ТЧВыгрузки, ДанныеЗапроса, ИдДок, СессияДок, НомерСтроки)
        
    ИнтернетАдрес = АдресАК + "/api/proxy/edoc/journal";
    
    РесурсНаСервере = "/delete/" + ИдДок + "?okpo=" + ДанныеЗапроса.ОКПО;

    СтрокаЗапроса = "";

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Accept";
    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/plain, ";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Accept-Language";
    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";

    Если ЗначениеЗаполнено(ИдАК) Тогда
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "id";
        НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    КонецЕсли;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "token";
    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
            
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", СессияАК, Заголовки ,,,Истина);
        
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат Истина;
    Иначе
        Статус = стРезультат.Статус;
        СессияДок = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на удаление документа!';uk='Помилка надсилання запиту на видалення документа!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Истина;
    КонецЕсли;

    Если Найти(ТелоОтвета, "SUCCESS") > 0 Тогда
        Возврат Ложь; //все ок, ошибок нет
    ИначеЕсли Найти(ТелоОтвета, "DA0002") > 0 ИЛИ Найти(ТелоОтвета, "VE0012") > 0 Тогда
        
        ТекстСообщения = НСтр("ru='Внимание! Не удалось повторно отправить документ отмеченный в строке №%НомерСтроки%. Документ уже отправлен в налоговую.'; uk='Увага! Не вдалося повторно відправити документ зазначений у рядку №%НомерСтроки%. Документ уже відправлений у податкову'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтроки);
        
        ТЧВыгрузки[НомерСтроки-1].КартинкаОшибки = 2;
        ТЧВыгрузки[НомерСтроки-1].ТекстОшибки = ТекстСообщения;
        
        СообщениеПользователю(ТекстСообщения);
        Возврат Истина; //вернем статус что есть ошибка
    Иначе
        Возврат Истина;
    КонецЕсли;
    
    Возврат ТелоОтвета;
    
КонецФункции    

Функция ОтправитьДокументНаСайт(АдресСайта, АдресРесурса, ДанныеЗапроса, СессияДок, КодировкаФайла, ДопПараметр = "")
    
    Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
    
    ТекстДляОтправки = "";
    
    Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
        ТекстДляОтправки = "";
        ТелоЗапросаКурл = "--form ""file=@" + СтрЗаменить(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\"), "\", "/")
            + ДанныеЗапроса.ИмяФайла + ";filename=" + EncodeURL(ДанныеЗапроса.ИмяФайла) + """ --form ""okpo=" + ДанныеЗапроса.ОКПО + """ ";
            //+ EncodeURL(ДанныеЗапроса.ИмяФайла) + ";filename=" + EncodeURL(ДанныеЗапроса.ИмяФайла) + """ --form ""okpo=" + ДанныеЗапроса.ОКПО + """ ";
        
        Если ЗначениеЗаполнено(ДопПараметр) Тогда
            ТекстДляОтправки = ТекстДляОтправки + ДопПараметр;     
        КонецЕсли;

    Иначе

        ТелоЗапросаКурл = "";

        ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary) + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""file""; filename=""" + ДанныеЗапроса.ИмяФайла + """") + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("Content-Type: text/xml") + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("") + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + (ДанныеЗапроса.Текст) + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary) + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""okpo""") + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + ("") + Символы.ВК + Символы.ПС;
        ТекстДляОтправки = ТекстДляОтправки + (ДанныеЗапроса.ОКПО) + Символы.ВК + Символы.ПС;
        
        Если ЗначениеЗаполнено(ДопПараметр) Тогда
            Если СтрЧислоВхождений(ДопПараметр, "Content-Disposition") >  1 Тогда
                ДопПараметр = СтрЗаменить(ДопПараметр, "Content-Disposition", ("--" + Boundary) + Символы.ВК + Символы.ПС + "Content-Disposition");
                ТекстДляОтправки = ТекстДляОтправки + ДопПараметр;
            Иначе
                ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary) + Символы.ВК + Символы.ПС;
                ТекстДляОтправки = ТекстДляОтправки + ДопПараметр;
            КонецЕсли;
        КонецЕсли;

        ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary + "--") + Символы.ВК + Символы.ПС;
        
    КонецЕсли;
        
    Заголовки = Новый Соответствие();    
    Заголовки.Вставить("Cookie", СессияДок);
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    Если Не (НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда) Тогда
        //без курл
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Content-Type";
        НоваяСтрока.ЗначениеЗаголовка = "multipart/form-data; boundary=" + Boundary;

        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Content-Lenght";
        НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(ТекстДляОтправки));
        
        КодировкаТекстаФайла = КодировкаФайла;
        УдалитьBOM = Истина
    Иначе
        //с курл
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Content-Type";
        НоваяСтрока.ЗначениеЗаголовка = "multipart/form-data";

        Если Найти(АдресСайта, "api/proxy/edoc/loader") > 0 И Найти(АдресРесурса, "upload") > 0 Тогда
            КодировкаТекстаФайла = КодировкаТекста.ANSI;
            УдалитьBOM = Ложь
        Иначе
            КодировкаТекстаФайла = КодировкаФайла;
            УдалитьBOM = Истина
        КонецЕсли
    КонецЕсли;

    //Если ЗначениеЗаполнено(ИдАК) Тогда
    //    НоваяСтрока = Заголовки.Добавить();
    //    НоваяСтрока.Заголовок = "id";
    //    НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    //КонецЕсли;
    //НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "token";
    //НоваяСтрока.ЗначениеЗаголовка = ТокенАК;

    POST = Истина;
    CUrlEnCode = Истина;

    стРезультат = УстановитьСоединение(АдресСайта, Прокси, АдресРесурса, UserAgentHeaders, ТекстДляОтправки, "", "", Заголовки,
        КодировкаТекстаФайла,, POST, НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда,, УдалитьBOM, ТелоЗапросаКурл, CUrlEnCode); // здесь признак ПоддерживаетсяTLS12 используется как флаг ДвоичныеДанные
    
    ТелоОтвета = "";
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат Неопределено;
    Иначе
        Статус = стРезультат.Статус;
        СессияДок = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 И Статус <> 400 Тогда //400 - обрататывается дальше           
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление документа!';uk='Помилка надсилання запиту на додавання документа!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецЕсли;
    
    Возврат ТелоОтвета;
    
КонецФункции

//** Работа с выгрузкой XML по налоговым документам
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//**Обмен Приват24

Процедура ИнициализироватьНачальныеПараметры() Экспорт
    
    ТекВерсия = "3.2.5.14";
    
    Попытка
        Если ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
            Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
                СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
            КонецЕсли;
        Иначе
            //    BSB, ...
            Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
                СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(СтатьяДДСВходящий) Тогда
                СтатьяДДСВходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(СтатьяДДСИсходящий) Тогда
                СтатьяДДСИсходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(СтатьяДДСПеремещениеДС) Тогда
                СтатьяДДСПеремещениеДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
            КонецЕсли;
        КонецЕсли;    
    Исключение
    КонецПопытки;

    Если НЕ ЗначениеЗаполнено(ГруппаДляНовыхКонтрагентов) И НЕ НеСоздаватьКонтрагентовАвтоматически Тогда
        ЗаполнитьГруппуКонтрагентовПоУмолчанию();
    КонецЕсли;

    ИнициализироватьНачальныеПараметрыАдресов()

КонецПроцедуры    // ИнициализироватьНачальныеПараметры()

Процедура ИнициализироватьНачальныеПараметрыАдресов() Экспорт

    //Если НЕ РаботаВМоделиСервисаПБ Тогда//Или Истина Тогда
        АдресДокументооборота = АдресАК;
        АдресПапка24 = "paperless.com.ua";//"paperless.privatbank.ua";
        АдресРасченыхЛистов = АдресАК;
        АдресДляЗП = АдресАК;
        АдресПодписиSmartID = АдресАК;
        АдресЭО = "eo.privatbank.ua";
    //Иначе
    //    АдресДокументооборота = "docs.test";
    //    АдресПапка24 = "papka24.test";
    //    АдресРасченыхЛистов = "salary.privatbank.test";
    //    АдресДляЗП = "wrm.privatbank.ua/salary_api";
    //    АдресЭО = "eo.privatbank.ua";
    //КонецЕсли;

КонецПроцедуры    // ИнициализироватьНачальныеПараметрыАдресов

Процедура ЗаполнитьГруппуКонтрагентовПоУмолчанию()
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Возврат;    
    КонецЕсли;
    
    НазваниеГруппы = НСтр("ru='Новые (клиент-банк)';uk='Нові (клієнт-банк)'");
    ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоНаименованию(НазваниеГруппы);
    
    Если ГруппаКонтрагентов.Пустая() Тогда
        ГруппаКонтрагентов = Справочники.Контрагенты.СоздатьГруппу();
        ГруппаКонтрагентов.Наименование = НазваниеГруппы;
        Попытка
            ГруппаКонтрагентов.Записать();    
        Исключение
            ТекстСообщения = НСтр("ru='Ошибка при создании группы контрагентов по умолчанию';uk='Помилка при створенні групи контрагентів за замовчуванням'");
            СообщениеПользователю(ОписаниеОшибки())
        КонецПопытки;    
    КонецЕсли;
    
    ГруппаДляНовыхКонтрагентов = ГруппаКонтрагентов.Ссылка;
    
КонецПроцедуры // ЗаполнитьГруппуКонтрагентовПоУмолчанию()

Функция ИмяЯзыкаТекущегоПользователя()

    Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Язык.Имя;

КонецФункции

Функция МетаданныеОсновнойЯзыкКодЯзыка()

    Возврат Метаданные.ОсновнойЯзык.КодЯзыка

КонецФункции

Функция КодЯзыкаТекущегоПользователя()
    
    Попытка
        Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Язык.КодЯзыка;
    Исключение
        Возврат "uk";
    КонецПопытки;    

КонецФункции

Функция ПолучитьКлиент()
    
    #Если ВебКлиент Тогда
        Клиент = "WC";
    #ИначеЕсли ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда     
        Клиент = "TcK";
    #Иначе
        Клиент = "TnK";
    #КонецЕсли
    
    Возврат Клиент;
    
КонецФункции

Функция ОпределитьUserAgentHeaders()

    Если НЕ ЗначениеЗаполнено(UserAgentHeaders) Тогда
        
        Попытка
            ЯзыкПользователя = ИмяЯзыкаТекущегоПользователя();
            ЯзыкПользователяUa = КодЯзыкаТекущегоПользователя()
        Исключение
            ЯзыкПользователя = МетаданныеОсновнойЯзыкИмя();
            ЯзыкПользователяUa = МетаданныеОсновнойЯзыкКодЯзыка()
        КонецПопытки;
        
        Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
            РежимЗапуска = "OP"
        ИначеЕсли ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
            РежимЗапуска = "UP"
        Иначе//Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.Авто Тогда
            РежимЗапуска = "Av"
        КонецЕсли;
        
        //врКаталогПрограммы = КаталогПрограммы();
        СтрСоедИБ = СтрокаСоединенияИнформационнойБазы();
        
        Если Лев(СтрСоедИБ, 4) = "File" Тогда//File=
            РежимИБ = "Файловый";
            РежимИБua = "Fl";
            //КаталогИБ = НСтр(СтрСоедИБ, "File")
        ИначеЕсли Лев(СтрСоедИБ, 4) = "Srvr" Тогда//Srvr=
            РежимИБ = "КлиентСерверный";
            РежимИБua = "CS";
            //КаталогИБ = врКаталогПрограммы//КаталогПрограммы()
        Иначе//ws="http://"
            РежимИБ = "ВЭБСерверный";
            РежимИБua = "WS";
            //КаталогИБ = врКаталогПрограммы//КаталогПрограммы()
        КонецЕсли;
        
        СисИнфо = Новый СистемнаяИнформация;
        ПозицияТочки1 = Найти(СисИнфо.ВерсияПриложения, ".");
        СтрВерсияСПозиции2 = Сред(СисИнфо.ВерсияПриложения, ПозицияТочки1 + 1);
        ПозицияТочки2 = Найти(СтрВерсияСПозиции2, ".");
        ВерсияПриложенияКратко = Лев(СисИнфо.ВерсияПриложения, ПозицияТочки1 + ПозицияТочки2 - 1);
        
        ТекстПлатформы = "";
        
        Если СтарыйВариантАвторизации Тогда
            ТекстПлатформы = "1C+Enterprise";    
        Иначе    
            ТекстПлатформы = "1C+EnterpriseV2";
        КонецЕсли;
        
        UserAgentHeaders = ТекстПлатформы + "|" + ВерсияПриложенияКратко + "|" + ПолучитьКлиент() + "|"
            + EncodeURL(ЗаменитьСС(СокрЛП(ИмяПользователя))) + "|" + ТекВерсия + "|"
            + EncodeURL(ЗаменитьСС(ИдКонф)) + "|" + МетаданныеВерсия() + "|"
            + СисИнфо.ВерсияПриложения + "|" + РежимИБua + "|" + РежимЗапуска + "|"
            + ЯзыкПользователяUa + "|" + СокрЛП(СисИнфо.ВерсияОС) + "|" + СокрЛП(СисИнфо.ТипПлатформы) + "|";
    КонецЕсли;    

    Возврат UserAgentHeaders;
    
КонецФункции

Функция МетаданныеОсновнойЯзыкИмя()

    Возврат Метаданные.ОсновнойЯзык.Имя;

КонецФункции

Функция МетаданныеКраткаяИнформация()

    Возврат Метаданные.КраткаяИнформация;

КонецФункции

Функция МетаданныеВерсия()

    Возврат Метаданные.Версия;

КонецФункции

Функция МетаданныеСиноним()

    Возврат Метаданные.Синоним;

КонецФункции

Функция МетаданныеИмя()

    Возврат Метаданные.Имя;

КонецФункции

Функция ОсновнойРежимЗапуска()

    Возврат Метаданные.ОсновнойРежимЗапуска;

КонецФункции

Функция ПолучитьТекущиеДатуВремя() Экспорт

    Возврат Формат(ТекущаяДата(), "ДФ=дд.ММ.гг ЧЧ:мм:сс")

КонецФункции

Функция УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders,
        ТелоЗапроса, ИмяФайлаРезультата, Сессия, ДопЗаголовки = Неопределено, Кодировка = Неопределено, ПоSSL = Истина,
        POST = Истина, ЭтоДвоичныеДанные = Ложь, МетодDelete = Ложь, УдалитьBOM = Ложь, ТелоЗапросаКурл = Неопределено, CUrlEnCode = Ложь) 
        
    ПодменитьИнтернетАдрес(ИнтернетАдресДляСоединения, ПоSSL);
    
    УстановкаПараметровПрокси();
    
    Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда //работаем через курл

        Если ИнтернетАдресДляСоединения = АдресДляЗП
                Или Найти(ИнтернетАдресДляСоединения, "acp.") > 0
                Тогда

            Если ДопЗаголовки = Неопределено Тогда
                ДопЗаголовки = Новый ТаблицаЗначений;
            КонецЕсли;
            Попытка
                ДопЗаголовки.Колонки.Добавить("Заголовок");
                ДопЗаголовки.Колонки.Добавить("ЗначениеЗаголовка");
            Исключение
            КонецПопытки;

            Если Найти(ИнтернетАдресДляСоединения, "/api/proxy/edoc/journal") = 0 Тогда
                Если ЗначениеЗаполнено(ИдАК) Тогда
                    НоваяСтрокаДопЗаголовки = ДопЗаголовки.Добавить();
                    НоваяСтрокаДопЗаголовки.Заголовок = "id";
                    НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = ИдАК;
                КонецЕсли;
                НоваяСтрокаДопЗаголовки = ДопЗаголовки.Добавить();
                НоваяСтрокаДопЗаголовки.Заголовок = "token";
                НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = ТокенАК;
                Если ДействиеАналитики = "РасчетныйЛистОтправка"    Тогда
                ИначеЕсли Найти(ИнтернетАдресДляСоединения, "api/proxy/edoc/loader") = 0 Или РесурсНаСервере <> "/upload" Тогда
                    НоваяСтрокаДопЗаголовки = ДопЗаголовки.Добавить();
                    НоваяСтрокаДопЗаголовки.Заголовок = "Content-Type";
                    Если (ИнтернетАдресДляСоединения = АдресДляЗП
                            Или Найти(ИнтернетАдресДляСоединения, "acp.") > 0)
                            И Найти("ОтправкаПодписанногоДокументаSmartID", ДействиеАналитики) = 0
                            Тогда
                        НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = "application/json; charset=UTF-8"
                    Иначе
                        НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = "application/x-www-form-urlencoded"
                    КонецЕсли
                КонецЕсли
            КонецЕсли;
            Если ТелоЗапросаКурл = Неопределено Тогда
                ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(ТелоЗапроса);
                Если ЗначениеЗаполнено(ТелоЗапросаКурл) Тогда
                    ТелоЗапросаКурл = """" + ТелоЗапросаКурл + """"
                КонецЕсли;
                Если Найти(ИнтернетАдресДляСоединения, "api/smartid/sign") > 0 Тогда
                    //критично для json api/smartid/sign
                    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ПС, "");
                    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ВК, "")
                КонецЕсли
            КонецЕсли;
            Если Найти("ПолучениеСпискаЗППроектовДляРЛ", ДействиеАналитики) > 0 Тогда
                НоваяСтрокаДопЗаголовки = ДопЗаголовки.Добавить();
                НоваяСтрокаДопЗаголовки.Заголовок = "Accept";
                НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = "application/json"
            КонецЕсли
        КонецЕсли;

        Возврат УстановитьСоединение_cURL(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders,
            ТелоЗапросаКурл, ИмяФайлаРезультата, Сессия, ДопЗаголовки, Кодировка, ПоSSL, POST, ЭтоДвоичныеДанные,
            МетодDelete, УдалитьBOM, CUrlEnCode);
        
    КонецЕсли;
    
    Заголовки = Новый Соответствие();
    Если ЗначениеЗаполнено(Сессия) Тогда
        Заголовки.Вставить("Cookie", Сессия)
    КонецЕсли;

    Если ИнтернетАдресДляСоединения = АдресДляЗП
            Или Найти(ИнтернетАдресДляСоединения, "acp.") > 0
            Тогда
        Если ЗначениеЗаполнено(ИдАК) Тогда
            Заголовки.Вставить("id", ИдАК);
        КонецЕсли;
        Заголовки.Вставить("token", ТокенАК);
        Если Найти("ОтправкаПодписанногоДокументаSmartID", ДействиеАналитики) > 0 Тогда
            Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded")
        Иначе
            Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
        КонецЕсли;
        Если Найти("ПолучениеСпискаЗППроектовДляРЛ", ДействиеАналитики) > 0 Тогда
            Заголовки.Вставить("Accept", "application/json")
        КонецЕсли
    Иначе
        Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded")
    КонецЕсли;
    Заголовки.Вставить("User-Agent", UserAgentHeaders);
    
    Если ДопЗаголовки <> Неопределено Тогда
        Для Каждого СтрокаТЗ Из ДопЗаголовки Цикл
            Заголовки.Вставить(СтрокаТЗ.Заголовок, СтрокаТЗ.ЗначениеЗаголовка);
        КонецЦикла;    
    КонецЕсли;
    
    УстановкаПараметровПрокси();
    
    Если РежимОтладки Тогда

        ОтладочноеТелоЗапроса = СкрытьПароль(ТелоЗапроса);
        //Если Найти(ТелоЗапроса, "UserPass") > 0 Тогда
        //    ОтладочноеТелоЗапроса = СтрЗаменить(ТелоЗапроса, Сред(ТелоЗапроса, Найти(ТелоЗапроса, "UserPass") - 1, 30), "");    
        //КонецЕсли;
        Попытка
            ОтладочноеТелоЗапроса = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ОтладочноеТелоЗапроса);
            //НайтиНедопустимыеСимволыXML(ТекстДляОтправки);
        Исключение
        КонецПопытки;
        Попытка
            СообщениеПользователю(Символы.ПС + ПолучитьТекущиеДатуВремя() + " Запрос: "
                + ИнтернетАдресДляСоединения + РесурсНаСервере + Символы.ПС + "Тело запроса " + ОтладочноеТелоЗапроса, Ложь)
        Исключение
        КонецПопытки;

        Если Прокси <> Неопределено Тогда
            СообщениеПользователю("Прокси адрес = " + Прокси.Сервер() + ", порт = " + Прокси.Порт()
            + ", пользователь = " + Прокси.Пользователь
            + ", НеИспользоватьПроксиДляАдресов = " + Прокси.НеИспользоватьПроксиДляАдресов
            + ", НеИспользоватьПроксиДляЛокальныхАдресов = " + Прокси.НеИспользоватьПроксиДляЛокальныхАдресов, Ложь);
        КонецЕсли;
        ЗаголовкиЗапроса = "";
        Для каждого Заголовок Из Заголовки Цикл
            ЗаголовкиЗапроса = ЗаголовкиЗапроса + Заголовок.Ключ + " = " + Заголовок.Значение + ", "//Символы.ПС
        КонецЦикла;
        СообщениеПользователю("Заголовки запроса " + СкрытьПароль(ЗаголовкиЗапроса), Ложь);
    КонецЕсли;
    
    Попытка
        
        Если ПоSSL Тогда
            ssl = Новый ЗащищенноеСоединениеOpenSSL;
        Иначе
            ssl = Неопределено;
        КонецЕсли;
        
        Соединение = Новый HTTPСоединение(ИнтернетАдресДляСоединения, , , , Прокси, , ssl);
        
    Исключение
        ТекстСообщения = НСтр("ru='Не удалось установить соединение с сервером:';uk='Не вдалося встановити з`єднання з сервером:'")
            + Символы.ПС + ИнформацияОбОшибке().Описание;
         
        СообщениеПользователю(ТекстСообщения);
        
        Возврат "ОшибкаСоединения";
    КонецПопытки;

    Запрос = Новый HTTPЗапрос(РесурсНаСервере, Заголовки);
    
    Если ЭтоДвоичныеДанные Тогда
        Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
    Иначе
        Если Кодировка = Неопределено Тогда 
            Попытка
                Выполнить("Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, ,ИспользованиеByteOrderMark.НеИспользовать)");
            Исключение
                Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
            КонецПопытки;
            
        Иначе
            Попытка
                Выполнить("Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, Кодировка, ИспользованиеByteOrderMark.НеИспользовать)");
            Исключение
                Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, Кодировка);
            КонецПопытки;
        КонецЕсли;

    КонецЕсли;    

    Попытка
        Если МетодDelete Тогда
            HTTPОтвет = Соединение.Удалить(Запрос)
        ИначеЕсли POST Тогда
            HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
        Иначе
            HTTPОтвет = Соединение.Получить(Запрос, ИмяФайлаРезультата);    
        КонецЕсли;
    Исключение
        ТекстСообщения = НСтр("ru='Невозможно установить соединение по причине: ';uk='Неможливо встановити з`єднання з причини: '")
             + ОписаниеОшибки() + " " + Символы.ПС
             + НСтр("ru='Проверьте доступность сети интернет и/или настройки прокси-сервера.';uk='Перевірте доступність мережі інтернет та/або налаштування проксі-сервера.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат    Ложь;
        
    КонецПопытки;

    Статус = HTTPОтвет.КодСостояния;
    // если статус = 401, возможно истекла сессия - пробуем Авторизоваться и отправить запрос еще раз
    Если (ЗначениеЗаполнено(Сессия) ИЛИ ИспользоватьТокены) И Статус = 401 Тогда                             
        ТекстСообщения = НСтр("ru = 'Для работы требуется авторизация';uk='Для роботи потрібна авторизація'");
        СообщениеПользователю(ТекстСообщения, Ложь,"Объект.ИмяПользователя");
        //Если Найти("Папка24Авторизация,Папка24АвторизацияШаг2,Папка24Обмен,Папка24Подпись", ДействиеАналитики) = 0 Тогда
        Если Найти("Папка24Авторизация,Папка24АвторизацияШаг2,Папка24Обмен,Папка24Подпись", ДействиеАналитики) > 0 Тогда
            Авторизовано = Ложь;
        КонецЕсли;
        Возврат Ложь;
    КонецЕсли;
    
    Location = HTTPОтвет.Заголовки["Location"];
    Cookie = HTTPОтвет.Заголовки["Set-Cookie"];
    Если Не ЗначениеЗаполнено(Cookie) Тогда
        Cookie = HTTPОтвет.Заголовки["set-cookie"]
    КонецЕсли;
    
    Cookie = РаспарситьCookie(Cookie);

    Если РежимОтладки Тогда
        СтрокаЗаголовков = "Заголовки ответа: ";
        Для Каждого СтрокаЗаголовка ИЗ HTTPОтвет.Заголовки Цикл
            СтрокаЗаголовков = СтрокаЗаголовков + (СтрокаЗаголовка.Ключ + ": " + СтрокаЗаголовка.Значение) + "; ";
        КонецЦикла;
        СообщениеПользователю(СтрокаЗаголовков, Ложь);
    КонецЕсли;               
    
    Если ИмяФайлаРезультата = "" Тогда
        ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    Иначе
        ТелоОтвета = "";
    КонецЕсли;    
    
    Если РежимОтладки Тогда
        Попытка
            Если ИмяФайлаРезультата = "" Тогда
                СообщениеПользователю("Ответ: " + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку(), Ложь);
            Иначе
                Чтение = Новый ЧтениеТекста;
                Чтение.Открыть(ИмяФайлаРезультата);
                СообщениеПользователю("Ответ: " + Символы.ПС + Чтение.Прочитать(), Ложь);
                Чтение.Закрыть();
                Чтение = Неопределено;
            КонецЕсли;
            СообщениеПользователю("Статус " + Статус, Ложь);
        Исключение
        КонецПопытки;    
        
    КонецЕсли;
    
    стРезультат = Новый Структура;
    стРезультат.Вставить("Статус", Статус);
    стРезультат.Вставить("Location", Location);
    
    Если ЗначениеЗаполнено(Cookie) Тогда
        стРезультат.Вставить("Cookie", Cookie);
    Иначе
        стРезультат.Вставить("Cookie", Сессия);
    КонецЕсли;

    стРезультат.Вставить("ИмяФайлаРезультата", ИмяФайлаРезультата);
    стРезультат.Вставить("ТелоОтвета", ТелоОтвета);
    
    Возврат    стРезультат;

КонецФункции    //    УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, ФайлРезультата, Сессия)

Функция СкрытьПароль(ТелоЗапроса);

    Если ФлажокПоказыватьПароль Тогда
        Возврат ТелоЗапроса
    КонецЕсли;

    //    скрыть пароль
    ПозицияНачалаПароля = Найти(ТелоЗапроса, "&UserPass=") + 10;
    Если ПозицияНачалаПароля > 10 Тогда
        //    без Курл
        ПозицияКонцаПароля = Найти(ТелоЗапроса, "&otp") - 1;
        Если ПозицияКонцаПароля > -1 Тогда
            Пароль = Сред(ТелоЗапроса, ПозицияНачалаПароля, ПозицияКонцаПароля - ПозицияНачалаПароля + 1);
            Результат = СтрЗаменить(ТелоЗапроса, Пароль, "********")
        Иначе
            Результат = ТелоЗапроса
        КонецЕсли
    Иначе
        ПозицияНачалаПароля = Найти(ТелоЗапроса, "UserPass=") + 9;
        Если ПозицияНачалаПароля > 9 Тогда
            //    с Курл
            отнПозицияКонцаПароля = Найти(Сред(ТелоЗапроса, ПозицияНачалаПароля), """") - 1;
            Если ПозицияКонцаПароля > -1 Тогда
                Пароль = Сред(ТелоЗапроса, ПозицияНачалаПароля, отнПозицияКонцаПароля + 1);// + ПозицияНачалаПароля - ПозицияНачалаПароля
                Результат = СтрЗаменить(ТелоЗапроса, Пароль, "********")
            Иначе
                Результат = ТелоЗапроса
            КонецЕсли
        Иначе
            Результат = ТелоЗапроса
        КонецЕсли
    КонецЕсли;

    //    скрыть токен 1 вариант (тело ответа)
    ПозицияНачалаТокена = Найти(Результат, """token"":""") + 9;
    Если ПозицияНачалаТокена > 9 Тогда
        //    без Курл
        отнПозицияКонцаТокена = Найти(Сред(Результат, ПозицияНачалаТокена), """") - 1;
        Если отнПозицияКонцаТокена > -1 Тогда
            Токен = Сред(Результат, ПозицияНачалаТокена, отнПозицияКонцаТокена + 1);// + ПозицияНачалаТокена - ПозицияНачалаТокена
            Результат = СтрЗаменить(Результат, Токен, "********""")
        КонецЕсли
    Иначе
        ПозицияНачалаТокена = Найти(Результат, """token"":""") + 9;
        Если ПозицияНачалаТокена > 9 Тогда
            //    с Курл
            отнПозицияКонцаТокена = Найти(Сред(Результат, ПозицияНачалаТокена), """") - 1;
            Если отнПозицияКонцаТокена > -1 Тогда
                Токен = Сред(Результат, ПозицияНачалаТокена, отнПозицияКонцаТокена + 1);// + ПозицияНачалаТокена - ПозицияНачалаТокена
                Результат = СтрЗаменить(Результат, Токен, "********""")
            КонецЕсли
        КонецЕсли
    КонецЕсли;

    //    скрыть токен 2 вариант (заголовки запроса)
    ПозицияНачалаТокена = Найти(Результат, "token = ") + 8;
    Если ПозицияНачалаТокена > 8 Тогда
        //    без Курл
        отнПозицияКонцаТокена = Найти(Сред(Результат, ПозицияНачалаТокена), ",") - 1;
        Если отнПозицияКонцаТокена > -1 Тогда
            Токен = Сред(Результат, ПозицияНачалаТокена, отнПозицияКонцаТокена  + 1);// + ПозицияНачалаТокена - ПозицияНачалаТокена
            Результат = СтрЗаменить(Результат, Токен, "********,")
        КонецЕсли
    Иначе
        ПозицияНачалаТокена = Найти(Результат, "token: ") + 7;
        Если ПозицияНачалаТокена > 7 Тогда
            //    с Курл
            отнПозицияКонцаТокена = Найти(Сред(Результат, ПозицияНачалаТокена), """") - 1;//Символ(124)
            Если отнПозицияКонцаТокена > -1 Тогда
                Токен = Сред(Результат, ПозицияНачалаТокена, отнПозицияКонцаТокена + 1);// + ПозицияНачалаТокена - ПозицияНачалаТокена
                Результат = СтрЗаменить(Результат, Токен, "********")
            КонецЕсли
        КонецЕсли
    КонецЕсли;

    //    скрыть пароль в прокси курл
    ПозицияНачалаКлюча = Найти(Результат, "--proxy ");
    Если ПозицияНачалаКлюча > 0 Тогда
        ПозицияНачалаПароля = Найти(Сред(Результат, ПозицияНачалаКлюча), ":") + 1;
        ПозицияКонцаПароля = Найти(Результат, "@") - 1;
        стрПароль = Лев(Сред(Результат, ПозицияНачалаКлюча + ПозицияНачалаПароля - 1), ПозицияКонцаПароля - ПозицияНачалаПароля - ПозицияНачалаКлюча + 2);
        Результат = СтрЗаменить(Результат, стрПароль, "********")
    КонецЕсли;

    //    скрыть пароль в подписи
    ПозицияНачалаКлюча = Найти(Результат, """password"":""");
    Если ПозицияНачалаКлюча > 0 Тогда
        ПозицияНачалаПароля = ПозицияНачалаКлюча + 12;
        ПозицияКонцаПароля = Найти(Сред(Результат, 12), """") - 1 + 12;
        стрПароль = Сред(Результат, ПозицияНачалаПароля, ПозицияКонцаПароля - ПозицияНачалаПароля);
        Результат = СтрЗаменить(Результат, стрПароль, "********")
    КонецЕсли;

    //    скрыть secret в ПаперЛесс
    ПозицияНачалаКлюча = Найти(Результат, "client_secret=");
    Если ПозицияНачалаКлюча > 0 Тогда
        ПозицияНачалаПароля = ПозицияНачалаКлюча + 14;
        ПозицияКонцаПароля = Найти(Сред(Результат, 14), "&code=") - 1 + 14;
        стрПароль = Сред(Результат, ПозицияНачалаПароля, ПозицияКонцаПароля - ПозицияНачалаПароля);
        Результат = СтрЗаменить(Результат, стрПароль, "********")
    КонецЕсли;

    Возврат Результат

КонецФункции

Функция РаспарситьCookie(СтрокаКуки) 
    
    ИсходнаяСтрока = " " + СтрокаКуки;
    СтрокаКуки = "";
    ИсходнаяДлиннаСтроки = СтрДлина(ИсходнаяСтрока);
    ЗапаснойСчетчикНаВыход = 0;
    
    Пока (Найти(ИсходнаяСтрока, ";") > 0 ИЛИ Найти(ИсходнаяСтрока, ",") > 0) И ЗапаснойСчетчикНаВыход < ИсходнаяДлиннаСтроки Цикл //пока есть куки (с ";") работает цикл 
        
        ЗапаснойСчетчикНаВыход = ЗапаснойСчетчикНаВыход + 1;
        
        ПозицияНачалаКлючаКуки = Найти(ИсходнаяСтрока, " ");
        
        ПозицияРазделителя = Найти(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 2), "; ");
        
        Если ПозицияРазделителя = 0 Тогда
            ПозицияРазделителя = Найти(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 2), ", ");
        КонецЕсли;
        
        Если ПозицияРазделителя = 0 Тогда // тупой формат куки 
            ПозицияРазделителя = Найти(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 2), ";");
            ПозицияРазделителя = ПозицияРазделителя + 1;
        Иначе
            ПозицияРазделителя = ПозицияРазделителя + 2;
        КонецЕсли;
        
        Если ПозицияРазделителя > ПозицияНачалаКлючаКуки Тогда //если проблел раньше конца куки
            
            времСтрокаКуки = Сред(ИсходнаяСтрока, ПозицияНачалаКлючаКуки, ПозицияРазделителя); //вырезали куки
            ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, времСтрокаКуки, ""); //удалили из исходной строки
            
            //КолВоПробелов = СтрЧислоВхождений(времСтрокаКуки, " "); // если в полученном куки больше одного пробела - обрезаем слева до крайнего правого пробела
            //Пока КолВоПробелов > 1 Цикл
            //    КолВоПробелов = КолВоПробелов - 1;
            //    времСтрокаКуки = Сред(времСтрокаКуки, Найти(времСтрокаКуки, " ") + 1, СтрДлина(времСтрокаКуки)); 
            //КонецЦикла;
            Если Найти(времСтрокаКуки, "=") = 0 Тогда
                Продолжить;
            КонецЕсли;
            
            ПозицияНачалаКлючаКуки = Найти(времСтрокаКуки, " ");
            
            СтрокаКуки = СтрокаКуки + Сред(времСтрокаКуки, ПозицияНачалаКлючаКуки, СтрДлина(времСтрокаКуки));
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Прав(СтрокаКуки, СтрДлина(СтрокаКуки) - 1); //образели первый пробел 
    
КонецФункции

Процедура ПроверкаСертификатаCURL() Экспорт
    
    ДействиеАналитики = "ПроверкаSSLСертификата";

    Если БезПроверкиСертификатаСайта Тогда
        Возврат;    
    КонецЕсли;
    
    //Адрес = "curl.haxx.se/ca/cacert.pem";
    Адрес = "curl.se/ca/cacert.pem";
    сзПараметрыЗапроса = "--time-cond """ + ПутьКурл + "\curl-ca-bundle.crt"" --output """ + ПутьКурл + "\curl-ca-bundle.crt""";
    сзПараметрыЗапроса = СтрЗаменить(сзПараметрыЗапроса, "\", "/");
    
    UserAgent = "";
    Ресурс = "";    
    ПутьКФайлу = "";
    вФлажокИспользоватьКурлВсегда = ФлажокИспользоватьКурлВсегда;
    //стРезультат = УстановитьСоединение(Адрес, Прокси, Ресурс, UserAgent, сзПараметрыЗапроса, ПутьКФайлу, "", ,, Истина);
    стРезультат = УстановитьСоединение(Адрес, Прокси, Ресурс, UserAgent, сзПараметрыЗапроса, ПутьКФайлу, "", ,, Истина,,,,, сзПараметрыЗапроса);
    ФлажокИспользоватьКурлВсегда = вФлажокИспользоватьКурлВсегда;
    
    Статус = 0;
    Если ТипЗнч(стРезультат) = Тип("Структура") Тогда
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 И Статус <> 304 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на проверку SSL сертификата';uk='Помилка відправки запиту на перевірку SSL сертифікату'");
        СообщениеПользователю(ТекстСообщения);
    КонецЕсли;

КонецПроцедуры

Процедура СформироватьКонфигФайл_cURL(СтрокаПараметров, ИмяФайла, Кодировка, УдалитьBOM)
    
    СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "\""", "&$?");
    СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "\r\n", "?$&");
    //Если ДействиеАналитики <> "Папка24Обмен" Тогда
        СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "\", "/");
    //КонецЕсли;
    СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "?$&", "\r\n");
    СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "&$?", "\""");

    Если Кодировка <> Неопределено Тогда
        ТекстовыйФайл = Новый ЗаписьТекста(ИмяФайла, Кодировка)
    Иначе
        ТекстовыйФайл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
    КонецЕсли;

    МассивСтрок = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, " --", Истина, Истина);
    
    ПерваяСтрока = Истина;// URL
    
    Для Каждого СтрокаМассива Из МассивСтрок Цикл
        Если ПерваяСтрока Тогда
            ТекстовыйФайл.ЗаписатьСтроку(СтрокаМассива);
            ПерваяСтрока = Ложь;
        Иначе
            ТекстовыйФайл.ЗаписатьСтроку("--" + СтрокаМассива);    
        КонецЕсли;
    КонецЦикла;
    
    ТекстовыйФайл.Закрыть();

    Если УдалитьBOM И Кодировка = КодировкаТекста.UTF8 Тогда

        УдалитьBOMВФайле(ИмяФайла)

    КонецЕсли

КонецПроцедуры

Функция УстановитьСоединение_cURL(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders,
        ТелоЗапроса, ИмяФайлаРезультата, Cookie, ДопЗаголовки = Неопределено, Кодировка = Неопределено, ПоSSL = Истина,
        POST = Истина, ЭтоДвоичныеДанные = Ложь, МетодDelete = Ложь, УдалитьBOM = Ложь, CUrlEnCode = Ложь)
        
    // путь к cURL
    Если Прав(ПутьКурл, 1) = "\" Тогда
        ПутьКурл = Сред(ПутьКурл, 1, СтрДлина(ПутьКурл) - 1);
    КонецЕсли;
    
    // проверка наличия каталога cURL
    ПапкаКурл = Новый Файл(ПутьКурл);
    Если Не ПапкаКурл.Существует() Тогда
        ТекстСообщения = НСтр("ru='Не найден каталог с компонентой cURL!';uk='Не знайдений каталог з компонентою cURL!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецЕсли;

    // путь к временным файлам
    ПутьКРесурсам = "1c_curl_temp";
    temp = ПеременнаяОкружения("%TEMP%");
    
    Если ЗначениеЗаполнено(temp) Тогда
        ПутьКВременнымФайлам = temp + "\" + ПутьКРесурсам;
    Иначе
        ПутьКВременнымФайлам = ПутьКурл + "\" + ПутьКРесурсам;
    КонецЕсли;
    
    //    проверка наличия каталога временных файлов / создание
    Папка1c_curl_temp = Новый Файл(ПутьКВременнымФайлам);
    
    Если Не Папка1c_curl_temp.Существует() Тогда
        Попытка
            СоздатьКаталог(ПутьКВременнымФайлам);
        Исключение
            ТекстСообщения = НСтр("ru='Не удается создать каталог для временных файлов компоненты cURL!';uk='Не вдається створити каталог для тимчасових файлів компоненти cURL!'") + ОписаниеОшибки();
            СообщениеПользователю(ТекстСообщения);
            Возврат Ложь;
        КонецПопытки
    КонецЕсли;

    УдалитьВременныеФайлы_cURL(ПутьКВременнымФайлам, ПутьКРесурсам);
    
    // полный путь к ресурсу
    Если ПоSSL <> Неопределено Тогда
        URI = "url=" + ?(ПоSSL, "https://", "http://") + ИнтернетАдресДляСоединения + ?(Лев(РесурсНаСервере, 1) <> "/" И ЗначениеЗаполнено(РесурсНаСервере) , "/", "") + РесурсНаСервере;
    Иначе
        URI = ИнтернетАдресДляСоединения + РесурсНаСервере;
    КонецЕсли;    

    // ИД текущего соединения
    ГСЧ = Новый ГенераторСлучайныхЧисел();
    ID = ГСЧ.СлучайноеЧисло(100000, 999999); 
    ID = Формат(ID, "ЧГ=0");

    // сессия
    Если Не ПустаяСтрока(Cookie) Тогда
        СтрСессия = " --cookie """ + ПутьКВременнымФайлам + "\" + Cookie + """";
    Иначе
        СтрСессия = "";
    КонецЕсли;    

    Если РежимОтладки И ЗначениеЗаполнено(СтрСессия) Тогда
        СообщениеПользователю("Текущая сессия: " + СтрСессия, Ложь);    
    КонецЕсли;     
    
    Если НЕ ЗначениеЗаполнено(Сессия) Тогда //здесь проверка глобальной сесии (реквизита обработки)
        УдалитьВременныеФайлы_cURL(ПутьКВременнымФайлам, ПутьКРесурсам, "*.cookiep24");    
    КонецЕсли;    
    
    // куки получаем всегда
    СтрКуки = " --cookie-jar """ +  ПутьКВременнымФайлам + "\" + ID + "_cookie.cookiep24""";

    // прокси
    Прокси_cURL = УстановитьПрокси_cURL(Прокси);     
    //    
    
    Если ЭтоДвоичныеДанные Тогда
        стрПараметрыЗапроса = ТелоЗапроса;
    Иначе    
        стрПараметрыЗапроса = ПолучитьПараметрыЗапроса_cURL(ТелоЗапроса, CUrlEnCode);
    КонецЕсли;    

    Если ДопЗаголовки <> Неопределено Тогда

        Для Каждого СтрокаТЗ Из ДопЗаголовки Цикл
            Если Найти("Папка24Обмен,Папка24Подпись", ДействиеАналитики) > 0 Тогда
                //для ЭкранироватьДвойныеКавычки(СессияПапка24)
                стрПараметрыЗапроса = стрПараметрыЗапроса + " --header """ + СтрокаТЗ.Заголовок + ": " + ЭкранироватьДвойныеКавычки(СтрокаТЗ.ЗначениеЗаголовка) + """"
            Иначе
                стрПараметрыЗапроса = стрПараметрыЗапроса + " --header """ + СтрокаТЗ.Заголовок + ": " + СтрокаТЗ.ЗначениеЗаголовка + """";
            КонецЕсли
        КонецЦикла;
        
    КонецЕсли;
                    
    Если БезПроверкиСертификатаСайта Тогда
        стрПараметрыЗапроса = " --insecure " + Символы.ПС + стрПараметрыЗапроса;    
    КонецЕсли;
    
    Если РежимОтладки Тогда
        //стрПараметрыЗапроса = " --trace-ascii tracefile_" +  ID + ".txt " + стрПараметрыЗапроса;
        стрПараметрыЗапроса = " --trace-ascii """ + ПутьКВременнымФайлам + "\tracefile_" +  ID + ".txt"" " + Символы.ПС + стрПараметрыЗапроса;
    КонецЕсли;

    Если МетодDelete Тогда
        ПрефиксКурл = Символы.ПС + "-X DELETE"
    ИначеЕсли POST = Истина Тогда
        ПрефиксКурл = Символы.ПС + "-X POST"
    Иначе
        ПрефиксКурл = ""
    КонецЕсли;

    // сформируем строку для выполнения    
    СформироватьКонфигФайл_cURL(URI + ПрефиксКурл + " --location " + ?(ЗначениеЗаполнено(UserAgentHeaders), " --user-agent "
                    + """" + UserAgentHeaders + """", "")
                    + " " + СтрСессия + " " + стрПараметрыЗапроса
                    + " --tlsv1.2" + " --output """ + ПутьКВременнымФайлам + "\" + ID + "_response.p24"""
                    + " --dump-header """ + ПутьКВременнымФайлам + "\" + ID + "_header.p24""" 
                    + Прокси_cURL
                    + СтрКуки, ПутьКВременнымФайлам + "\ConfigFile.txt", Кодировка, УдалитьBOM);    
 
    СтрокаВыполнения = """" + ПутьКурл + "\" + "curl.exe" + """" + " --config " + """" + ПутьКВременнымФайлам + "\ConfigFile.txt" + """";

    Если РежимОтладки Тогда
        Попытка
            //    вывод запроса и строки выполнения
            СообщениеПользователю(Символы.ПС + ПолучитьТекущиеДатуВремя() + " Запрос " + URI, Ложь);
            СообщениеПользователю("Строка выполнения курл " + СтрокаВыполнения + Символы.ПС, Ложь);
            //    вывод ConfigFile.txt
            ЧтениеТекста = Новый ТекстовыйДокумент;
            ЧтениеТекста.Прочитать(ПутьКВременнымФайлам + "\ConfigFile.txt", Кодировка);
            ТелоЗапроса = ЧтениеТекста.ПолучитьТекст();
            рТелоЗапроса = СкрытьПароль(ТелоЗапроса);
            СообщениеПользователю("Тело запроса ConfigFile " + рТелоЗапроса, Ложь);
        Исключение
        КонецПопытки
    КонецЕсли;

    //  выполним запрос   
    Попытка                        
        WshShell = ПолучитьWshShell();
        РезультатЗапуска = WshShell.Run(СтрокаВыполнения, 0, 1);    
    Исключение  
        
        СообщениеПользователю(НСтр("ru='Ошибка выполнения команды системы! Возможно отсутствует каталог ""curl""!';uk='Помилка виконання команди системи! Можливо відсутній каталог ""curl""!'"), Ложь);
        СообщениеПользователю(НСтр("ru='Ошибка ""run cURL"" : ';uk='Помилка ""run cURL"" : '") + ОписаниеОшибки());
        
        Если РежимОтладки Тогда
            СообщениеПользователю(Символы.ПС + ПолучитьТекущиеДатуВремя() + " Строка выполнения курл " + СтрокаВыполнения);
        КонецЕсли;    
        
        Возврат Ложь;        
        
    КонецПопытки;    

    Если РежимОтладки Тогда
        СообщениеПользователю(НСтр("ru='Результат запуска Curl: ';uk='Результат запуску Curl: '") + РезультатЗапуска, Ложь)
    КонецЕсли;

    Если ЗначениеЗаполнено(Cookie) И СессияДок <> "GetSession" Тогда //если сессия уже была получена, удалим старый куки
        УдалитьВременныеФайлы_cURL(ПутьКВременнымФайлам, ПутьКРесурсам, Cookie);
    ИначеЕсли ЗначениеЗаполнено(СессияДок) Тогда //если сессия уже была получена, удалим старый куки
        УдалитьВременныеФайлы_cURL(ПутьКВременнымФайлам, ПутьКРесурсам, СессияДок);
    КонецЕсли;
    
    // прочитаем заголовки     
    стРезультат = ПрочитатьЗаголовки_cURL(ПутьКВременнымФайлам, ID, Прокси);

    Если стРезультат = Ложь Тогда
        Возврат Ложь;
    КонецЕсли;

    Статус = стРезультат.Статус;
    Локация = стРезультат.Location;
    
    ТелоОтвета = ПрочитатьОтвет_cURL(ПутьКВременнымФайлам, ID, ИмяФайлаРезультата);

    локCookie = ID + "_cookie.cookiep24"; //всегда будем хранить последнюю сессию в файле
    
    стРезультат = Новый Структура;
    стРезультат.Вставить("Статус", Статус);
    стРезультат.Вставить("Location", Локация);
    стРезультат.Вставить("Cookie", локCookie);
    стРезультат.Вставить("ИмяФайлаРезультата", ПутьКВременнымФайлам + "\" + ID + "_response.p24");
    стРезультат.Вставить("ТелоОтвета", ТелоОтвета);
    
    Если РежимОтладки И Найти(ТелоОтвета, "GIF89a") = 0 Тогда  //GIF89a условие костыть для гугл аналитики
        Попытка
            СообщениеПользователю(ТелоОтвета, Ложь);
            СообщениеПользователю("Статус " + Статус, Ложь);
            СообщениеПользователю("Ответ " + СкрытьПароль(ТелоОтвета), Ложь);
            СообщениеПользователю("Cookie " + Cookie, Ложь);
            Попытка
                ЧтениеТекста = Новый ЧтениеТекста();
                ЧтениеТекста.Открыть(ПутьКВременнымФайлам + "\" + ID + "_header.p24", КодировкаТекста.UTF8);
                ЗаголовкиОтвета = ЧтениеТекста.Прочитать();
                СообщениеПользователю("Заголовки ответа " + ЗаголовкиОтвета, Ложь)
            Исключение
            КонецПопытки
        Исключение
        КонецПопытки
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Cookie) И Статус = 401 Тогда                             
        
        Авторизовано = Ложь;
        ТекстСообщения = НСтр("ru = 'Для работы требуется авторизация';uk='Для роботи потрібна авторизація'");
        СообщениеПользователю(ТекстСообщения,,"Объект.ИмяПользователя");
        
    КонецЕсли;
    
    Возврат    стРезультат;
        
КонецФункции

Функция ПолучитьПараметрыЗапроса_cURL(ТелоЗапроса, CUrlEnCode)

    Если CUrlEnCode Тогда
        СуффиксData = "-urlencode"
    Иначе
        СуффиксData = ""
    КонецЕсли;

    стрПараметры = "";
    
    СтрЗапрос = ТелоЗапроса;

    Если Лев(СтрЗапрос, 1) = "&" Тогда
        СтрЗапрос = Сред(СтрЗапрос, 2);
    КонецЕсли;

    спДействийАналитики = "ОтправкаПодписанногоДокументаSmartID,Папка24Авторизация,Папка24АвторизацияШаг2,РасшифровкаОтправкаОтчета";//,ДобавитьСотрудникаВГруппу";

    Инд = Найти(СтрЗапрос, "&");
    Пока Инд > 0 Цикл         
        СтрПараметр = Лев(СтрЗапрос, Инд - 1);
        СтрЗапрос = Сред(СтрЗапрос, Инд + 1);
        Инд = Найти(СтрЗапрос, "&");
        Если ЗначениеЗаполнено(СтрПараметр) И СтрПараметр <> """" Тогда
            Если Найти(спДействийАналитики, ДействиеАналитики) > 0  Тогда
                стрПараметры = стрПараметры + " --data" + СуффиксData + " """ + СтрПараметр + """"
            Иначе
                стрПараметры = стрПараметры + " --data" + СуффиксData + " " + СтрПараметр;
            КонецЕсли
        КонецЕсли
    КонецЦикла;    

    Если ЗначениеЗаполнено(СтрЗапрос) Тогда
        Если Найти(спДействийАналитики, ДействиеАналитики) > 0  Тогда
            стрПараметры = стрПараметры + ?(Лев(СокрЛП(СтрЗапрос), 1) <> "-", " --data" + СуффиксData + " """, "") + СтрЗапрос + """"
        Иначе
            стрПараметры = стрПараметры + ?(Лев(СокрЛП(СтрЗапрос), 1) <> "-", " --data" + СуффиксData + " ", "") + СтрЗапрос;
        КонецЕсли
    КонецЕсли;

    Возврат стрПараметры;

КонецФункции

Функция ПрочитатьОтвет_cURL(ПутьКФайлам, ID, ФайлРезультата)

    Результат = "";
    ИмяФайла = ПутьКФайлам + "\" + ID + "_response.p24";    
    Попытка
        
        ФайлОтвет = Новый Файл(ИмяФайла);
        Если Не ФайлОтвет.Существует() Тогда 
            Возврат Результат;
        КонецЕсли;    
        
        // чтение как текста
        ЧтениеТ = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        Результат = ЧтениеТ.Прочитать();
        ЧтениеТ.Закрыть();

        Если Не ЗначениеЗаполнено(ФайлРезультата) Тогда
            ФайлРезультата = ПолучитьИмяВременногоФайла("txt")
        КонецЕсли;
        
        Если Найти(ФайлРезультата,"Privat24to1CManagedupdate.exe") > 0 Тогда
            КопироватьФайл(ИмяФайла, ФайлРезультата);     
        Иначе
            ЗаписьТ = Новый ЗаписьТекста(ФайлРезультата, КодировкаТекста.UTF8);
            ЗаписьТ.Записать(Результат);
            ЗаписьТ.Закрыть();        
        КонецЕсли;
    
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка чтения ответа : ';uk='Помилка читання відповіді: '") + ОписаниеОшибки());
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции    

Функция УстановитьПрокси_cURL(Прокси)  
    
    Прокси_cURL = "";

    Если Прокси = Неопределено Тогда
        Возврат Прокси_cURL;
    КонецЕсли;

    АдресПроксиСерв = Прокси.Сервер("HTTPS");
    ПортПроксиСерв = Прокси.Порт("HTTPS");
    Если Не ЗначениеЗаполнено(АдресПроксиСерв) Тогда
        АдресПроксиСерв = Прокси.Сервер("HTTP");
        ПортПроксиСерв = Прокси.Порт("HTTP");
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(АдресПроксиСерв) Тогда
        СообщениеПользователю(НСтр("ru='Не заполнен адрес прокси-сервера!';uk='Не заповнена адреса проксі-сервера!'"));
        Возврат Прокси_cURL;    
    КонецЕсли;
                
    ////-x, --proxy <[protocol://][user:password@]proxyhost[:port]>
    
    Прокси_cURL = " --proxy ";
                  
    // пользователь и пароль
    Если ЗначениеЗаполнено(Прокси.Пользователь) Тогда
        
        ТекПользователь = СокрЛП(Прокси.Пользователь);
        ТекПользователь =  EncodeURL(ЗаменитьСС(ТекПользователь)); 
        Прокси_cURL = Прокси_cURL + ТекПользователь;  
        
        Если ПустаяСтрока(Прокси.Пароль) = 0 Тогда   
            
            Прокси_cURL = Прокси_cURL + ":";
            ТекПароль = СокрЛП(Прокси.Пароль);
            ТекПароль =  EncodeURL(ЗаменитьСС(ТекПароль)); 
            Прокси_cURL = Прокси_cURL + ТекПароль;   
            
        Иначе     
            //Сообщение_cURL("Не заполнен пароль прокси-сервера!");                                              
        КонецЕсли;  
        
        Прокси_cURL = Прокси_cURL + "@";
        
    Иначе              
        //Сообщение_cURL("Не заполнен пользователь прокси-сервера!");                                              
    КонецЕсли;
                 
    // адрес прокси
    Прокси_cURL = Прокси_cURL + СокрЛП(АдресПроксиСерв);
              
    // порт
    Если ЗначениеЗаполнено(ПортПроксиСерв) Тогда
        Прокси_cURL = Прокси_cURL + ":" + СокрЛП(Формат(ПортПроксиСерв, "ЧГ=0"));
    КонецЕсли;                                           
                                                   
    Возврат Прокси_cURL;    
    
КонецФункции

Процедура УдалитьВременныеФайлы_cURL(ПутьКФайлам, ТочныйПуть, Маска = "*.p24") 
    
    Если РежимОтладки Тогда
        Возврат;
    КонецЕсли;
    
    Попытка                           
        //// проверка текущего каталога на путь "curl\resource\" чтобы не удалялись все файлы
        //Если Найти(Каталог.ПолноеИмя, ТочныйПуть) = 0 Тогда
        //    Сообщение_cURL(НСтр("ru='Временные файлы ""cURL"" не удалены, путь не точный';uk='Тимчасові файли ""cURL"" не видалені, шлях не точний'"));
        //    Возврат;
        //КонецЕсли;        
        
        УдалитьФайлы(ПутьКФайлам, Маска);          
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка удаления временных файлов ""cURL"": ';uk='Помилка видалення тимчасових файлів ""cURL"": '") + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Функция ПрочитатьЗаголовки_cURL(ПутьКФайлам, ID, Прокси)

    Статус = 0;
    Локация = "";
    
    Попытка                    
        ПутьКФайлу = ПутьКФайлам + "\" + ID + "_header.p24";
        ФайлЗаг = Новый Файл(ПутьКФайлу);
        Если Не ФайлЗаг.Существует() Тогда  
            СообщениеПользователю(НСтр("ru='Не найдены заголовки: ';uk='Не знайдені заголовки: '") + ПутьКФайлу);
            Возврат Ложь;
        КонецЕсли;  
        
        ФайлЗаголовков = Новый ЧтениеТекста;
        ФайлЗаголовков.Открыть(ПутьКФайлу);     
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка открытия файла _header.p24: ';uk='Помилка відкриття файлу _header.p24: '") + ОписаниеОшибки());
        Возврат Ложь;
    КонецПопытки;

    Попытка
        // прочитаем статус
        ПерваяСтр = ФайлЗаголовков.ПрочитатьСтроку(); 
        Если Найти(ПерваяСтр, "200") <> 0 Тогда
            Статус = 200;
        ИначеЕсли Найти(ПерваяСтр, "201") <> 0 Тогда
            Статус = 201
        ИначеЕсли Найти(ПерваяСтр, "400") <> 0 Тогда
            Статус = 400
        ИначеЕсли Найти(ПерваяСтр, "401") <> 0 Тогда
            Статус = 401;
        ИначеЕсли  Найти(ПерваяСтр, "302") <> 0 Тогда
            Статус = 302;
        ИначеЕсли  Найти(ПерваяСтр, "301") <> 0 Тогда
            Статус = 301;
        ИначеЕсли  Найти(ПерваяСтр, "304") <> 0 Тогда
            Статус = 304;    
        КонецЕсли;    

        Если Прокси <> Неопределено Или Найти(ПерваяСтр, "100") > 0 Тогда
            СледующаяСтрока = ФайлЗаголовков.ПрочитатьСтроку();
            Пока СледующаяСтрока <> Неопределено Цикл
                Если Найти(СледующаяСтрока, "HTTP/") > 0 И Найти(СледующаяСтрока, "200") > 0 Тогда
                    Статус = 200;
                    Прервать;
                ИначеЕсли Найти(СледующаяСтрока, "HTTP/") > 0 И Найти(СледующаяСтрока, "201") > 0 Тогда
                    Статус = 201;
                    Прервать
                ИначеЕсли Найти(СледующаяСтрока, "400") <> 0 Тогда
                    Статус = 400;
                    Прервать
                ИначеЕсли Найти(СледующаяСтрока, "401") <> 0 Тогда
                    Статус = 401;
                    Прервать;
                ИначеЕсли  Найти(СледующаяСтрока, "302") <> 0 Тогда
                    Статус = 302;
                    Прервать;
                ИначеЕсли  Найти(СледующаяСтрока, "301") <> 0 Тогда
                    Статус = 301;
                    Прервать;
                ИначеЕсли  Найти(СледующаяСтрока, "304") <> 0 Тогда
                    Статус = 304;
                    Прервать;
                КонецЕсли;    
                СледующаяСтрока = ФайлЗаголовков.ПрочитатьСтроку()
            КонецЦикла;
        КонецЕсли;
    
        // прочитаем локацию          
        Пока ПерваяСтр <> Неопределено Цикл
            Если Найти(ПерваяСтр, "Location:") <> 0 Тогда   
                Локация = СокрЛП(Сред(ПерваяСтр, 10)); 
                Прервать;
            КонецЕсли;    
            ПерваяСтр = ФайлЗаголовков.ПрочитатьСтроку();
        КонецЦикла;    
        
    Исключение    
        СообщениеПользователю(НСтр("ru='Ошибка чтения строк _header.p24: ';uk='Помилка читання рядків _header.p24: '") + ОписаниеОшибки());
        Возврат Ложь;
    КонецПопытки;
    
    стРезультат = Новый Структура();
    стРезультат.Вставить("Статус", Статус);
    стРезультат.Вставить("Location", Локация);
    
    Возврат стРезультат;
    
КонецФункции

Процедура ПодменитьИнтернетАдрес(ИнтернетАдрес, поSSL)
    
    //Возврат;
    //Если РежимОтладки Тогда
        //СообщениеПользователю(ИнтернетАдрес);
        Если Найти(ИнтернетАдрес, "test/p24") > 0 ИЛИ Найти(ИнтернетАдрес, "papka24.test") > 0 ИЛИ Найти(ИнтернетАдрес, "docs.test") > 0 ИЛИ Найти(ИнтернетАдрес, "salary.privatbank.test") > 0 Тогда
            //ИнтернетАдрес = СтрЗаменить(ИнтернетАдрес, ".ua", ".test");
            поSSL = Ложь;
        КонецЕсли;    
        
    //КонецЕсли;
    
КонецПроцедуры

Процедура СообщениеПользователю(Знач ТекстСообщения, ОтправлятьСтатистику = Истина, Знач Поле = "") Экспорт

    Если ЗаписьЛогаВФайл И РежимОтладки Тогда
        Попытка
            //ФайлЛогов = Новый Файл(КаталогВременныхФайлов() + "Log1C.txt");
            //Если НЕ ФайлЛогов.Существует() Тогда
            
            //врмКаталог = "";
            //Если ЗначениеЗаполнено(КаталогВыгрузки) Тогда 
            //    врмКаталог = КаталогВыгрузки;
            //Иначе
            //    врмКаталог = КаталогВременныхФайлов();
            //КонецЕсли;
            //врФайл = Новый ЗаписьТекста( врмКаталог + "Log1C.txt", , ,Истина);
            //врФайл.Записать(ТекстСообщения);
            //врФайл.Закрыть();
            ТекстОтладки = ТекстОтладки + Символы.ПС + (ТекстСообщения);
            //Иначе
            //    
            //КонецЕсли;
        Исключение
        КонецПопытки;
        
    Иначе
        
        Попытка
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = ТекстСообщения;
            Сообщение.Поле = Поле;
            Сообщение.Сообщить();
        Исключение
            Сообщить(ТекстСообщения);
        КонецПопытки;
        
        
    КонецЕсли;
    
    Если ОтправлятьСтатистику И ЗначениеЗаполнено(ДействиеАналитики) Тогда
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики + "Ошибка",, ТекстСообщения);
    КонецЕсли;
    
КонецПроцедуры

Функция ЗаменитьСС(ВхТекст)                                         

    Текст = СокрЛП(ВхТекст);

    //Текст = СтрЗаменить(Текст, Символ(34), "");//    убрать кавычку двойную
    //Текст = СтрЗаменить(Текст, Символ(34), "\" + Символ(34));//    экранировать кавычку двойную
    //Текст = СтрЗаменить(Текст, "(", "");
    //Текст = СтрЗаменить(Текст, ")", "");
    //Текст = СтрЗаменить(Текст, "%", "проц.");
    //Текст = СтрЗаменить(Текст, "/", ".");
    //Текст = СтрЗаменить(Текст, " ", "");
    Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));//    экранировать кавычку двойную
    Текст = СтрЗаменить(Текст, ",", ".");
    Текст = СтрЗаменить(Текст, Символы.ПС, "");
    Текст = СтрЗаменить(Текст, Символы.ВК, "");
    Текст = СтрЗаменить(Текст, "І", "I");
    Текст = СтрЗаменить(Текст, "і", "i");
    Текст = СтрЗаменить(Текст, "Ї", "I");
    Текст = СтрЗаменить(Текст, "ї", "i");
    Текст = СтрЗаменить(Текст, "№", "N");
    Текст = СтрЗаменить(Текст, "Є", "E");
    Текст = СтрЗаменить(Текст, "є", "e");
    Текст = СтрЗаменить(Текст, Символ(160), "");//    убрать разделитель триад чисел

    Возврат Текст;

КонецФункции

Функция ЗаменитьСССоСкобкамиПробеломТочкой(ВхТекст)                                         

    Текст = СокрЛП(ВхТекст);

    //Текст = СтрЗаменить(Текст, Символ(34), "");//    убрать кавычку двойную
    //Текст = СтрЗаменить(Текст, Символ(34), "\" + Символ(34));//    экранировать кавычку двойную
    Текст = СтрЗаменить(Текст, "(", "");
    Текст = СтрЗаменить(Текст, ")", "");
    //Текст = СтрЗаменить(Текст, "%", "проц.");
    //Текст = СтрЗаменить(Текст, "/", ".");
    Текст = СтрЗаменить(Текст, " ", "");
    Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));//    экранировать кавычку двойную
    Текст = СтрЗаменить(Текст, ",", ".");
    Текст = СтрЗаменить(Текст, Символы.ПС, "");
    Текст = СтрЗаменить(Текст, Символы.ВК, "");
    Текст = СтрЗаменить(Текст, "І", "I");
    Текст = СтрЗаменить(Текст, "і", "i");
    Текст = СтрЗаменить(Текст, "Ї", "I");
    Текст = СтрЗаменить(Текст, "ї", "i");
    Текст = СтрЗаменить(Текст, "№", "N");
    Текст = СтрЗаменить(Текст, "Є", "E");
    Текст = СтрЗаменить(Текст, "є", "e");
    Текст = СтрЗаменить(Текст, Символ(160), "");//    убрать разделитель триад чисел

    Текст = СтрЗаменить(Текст, ".", "");

    Возврат Текст;

КонецФункции

Функция ЗаменитьСССоСкобкамиПробеломТочкойАрифметика(ВхТекст)                                         

    Текст = СокрЛП(ВхТекст);

    //Текст = СтрЗаменить(Текст, Символ(34), "");//    убрать кавычку двойную
    //Текст = СтрЗаменить(Текст, Символ(34), "\" + Символ(34));//    экранировать кавычку двойную
    Текст = СтрЗаменить(Текст, "(", "");
    Текст = СтрЗаменить(Текст, ")", "");
    //Текст = СтрЗаменить(Текст, "%", "проц.");
    //Текст = СтрЗаменить(Текст, "/", ".");
    Текст = СтрЗаменить(Текст, " ", "");
    Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));//    экранировать кавычку двойную
    Текст = СтрЗаменить(Текст, ",", ".");
    Текст = СтрЗаменить(Текст, Символы.ПС, "");
    Текст = СтрЗаменить(Текст, Символы.ВК, "");
    Текст = СтрЗаменить(Текст, "І", "I");
    Текст = СтрЗаменить(Текст, "і", "i");
    Текст = СтрЗаменить(Текст, "Ї", "I");
    Текст = СтрЗаменить(Текст, "ї", "i");
    Текст = СтрЗаменить(Текст, "№", "N");
    Текст = СтрЗаменить(Текст, "Є", "E");
    Текст = СтрЗаменить(Текст, "є", "e");
    Текст = СтрЗаменить(Текст, Символ(160), "");//    убрать разделитель триад чисел

    Текст = СтрЗаменить(Текст, ".", "");

    Текст = СтрЗаменить(Текст, "+", "");
    Текст = СтрЗаменить(Текст, "-", "");
    Текст = СтрЗаменить(Текст, "*", "");
    Текст = СтрЗаменить(Текст, "/", "");
    Текст = СтрЗаменить(Текст, "=", "");
    Текст = СтрЗаменить(Текст, ":", "");
    Текст = СтрЗаменить(Текст, "^", "");
    Текст = СтрЗаменить(Текст, "%", "");
    Текст = СтрЗаменить(Текст, "!", "");
    Текст = СтрЗаменить(Текст, "@", "");
    Текст = СтрЗаменить(Текст, "#", "");
    Текст = СтрЗаменить(Текст, "$", "");
    Текст = СтрЗаменить(Текст, "&", "");
    Текст = СтрЗаменить(Текст, "?", "");
    Текст = СтрЗаменить(Текст, ";", "");
    Текст = СтрЗаменить(Текст, "№", "");
    Текст = СтрЗаменить(Текст, ".", "");

    Возврат Текст;

КонецФункции

Процедура УстановкаПараметровПрокси() Экспорт

    //    установка прокси
    Если ИспользоватьПрокси Тогда
        Попытка
            
            Прокси = Новый ИнтернетПрокси;
            Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НеИспользоватьПроксиДляЛокальныхАдресов;
            
            Если НЕ ЗначениеЗаполнено(ПротоколПрокси) Тогда
                ПротоколПрокси = "http";
            КонецЕсли;
            
            Если Не ЗначениеЗаполнено(ПортПроксиСервера) Тогда
                ПортПроксиСервера = 3128;
            КонецЕсли;

            Прокси.Установить(ПротоколПрокси, АдресПроксиСервера, Число(ПортПроксиСервера));
            
            Прокси.Пользователь = ПользовательПрокси;
            Прокси.Пароль = ПарольПрокси;
            
        Исключение
            ИспользоватьПрокси = Ложь;
            Прокси = Неопределено;
            ТекстСообщения = НСтр("ru = 'Ошибка при установке параметров прокси сервера';uk='Помилка при установці параметрів проксі сервера'") + Символы.ПС + ОписаниеОшибки();
            СообщениеПользователю(ТекстСообщения);
        КонецПопытки;    
        
    Иначе
        Прокси = Неопределено;
    КонецЕсли

КонецПроцедуры    //    УстановкаПараметровПрокси()

Функция ПолучитьИДКлиентовВГруппеЧП()
    
    ДействиеАналитики = "ПолучениеСпискаКлиентовЧП";
    
    РесурсНаСервере = "/api/account/get-clients-ingroup";
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    Если ЗначениеЗаполнено(ИдАК) Тогда
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "id";
        НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    КонецЕсли;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "token";
    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
    ТелоЗапроса = "";
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", , Заголовки,,,Ложь);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка группы ЧП!';uk='Помилка відправки запиту на отримання списку групи ПП'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Неопределено;
    Иначе
        Статус = стРезультат.Статус;
        //Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка обработки запроса на получение списка группы ЧП!';uk='Помилка обробки відправки запиту на отримання списку групи ПП'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецЕсли;
    
    Если НЕ ЕстьОшибки Тогда
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
    Возврат СтруктураОтвета.clients_in_group;
    
        
КонецФункции

Функция ИмпортВыпискиАК(НачПериода, КонПериода, idКлиентаВГруппе = Неопределено)  

    Если ЭтотОбъект.ФлажокЗаменитьОтветСервера Тогда
        XML = ""
    Иначе
        XML = импОтправитьЗапросНаИмпортВыписокАвтоклиент(НачПериода, КонПериода, idКлиентаВГруппе);
        Если XML = "" Тогда
            FollowId = "";
            Возврат Ложь;
        КонецЕсли
    КонецЕсли;
    
    Попытка
        ПрочитатьОтветПоИмпортуЧерезАвтоклиент(XML);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа (запрос на импорт платежей через автоклиент)!';uk='Помилка при читанні відповіді (запит на імпорт платежів через автоклієнт)! '");
        СообщениеПользователю(ТекстСообщения);
        FollowId = "";
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки());    
        КонецЕсли;
        Возврат Ложь;
    КонецПопытки;
    
    Если ЗначениеЗаполнено(FollowId) Тогда
        Возврат Истина; //выполнение в цикле    
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции
        
Функция ИмпортПлатежей(НачПериода, КонПериода) Экспорт
    
    ДействиеАналитики = "ПолучениеСпискаПлатежей";
    
    Если СтрДлина(XML) = 0 ИЛИ ЗначениеЗаполнено(FollowId) ИЛИ ЗначениеЗаполнено(ТекущийИДКлиентаГруппыЧП) Тогда
        
        Если НЕ ЗначениеЗаполнено(FollowId) И НЕ ЗначениеЗаполнено(ТекущийИДКлиентаГруппыЧП) Тогда
            ТабВходящихПлатежей.Очистить();            
        КонецЕсли;

        Если НЕ ЗначениеЗаполнено(ТекущийИДКлиентаГруппыЧП) Тогда
            ТаблицаИДГруппыЧП.Очистить();
        КонецЕсли;
        
        Если НЕ ИспользоватьСтароеAPI Тогда
            
            ДействиеАналитики = ДействиеАналитики + "AKv4";

            Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                Возврат Ложь;
            КонецЕсли;
                    
            Если НЕ ЗначениеЗаполнено(КодПоЕДРПОУ) И ТаблицаИДГруппыЧП.Количество() = 0 Тогда
                
                МассивИД_ЧП = ПолучитьИДКлиентовВГруппеЧП();
                
                Для Каждого СтрокаМассива Из МассивИД_ЧП Цикл
                    НоваяСтрока = ТаблицаИДГруппыЧП.Добавить();
                    НоваяСтрока.ИДКлиента = СтрокаМассива;
                КонецЦикла;
                
                Если ТаблицаИДГруппыЧП.Количество() > 0 Тогда
                    ТекущийИДКлиентаГруппыЧП = ТаблицаИДГруппыЧП[0].ИДКлиента;
                КонецЕсли;
                
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(ТекущийИДКлиентаГруппыЧП) Тогда
                 
                ВыполнятьВЦикле = ИмпортВыпискиАК(НачПериода, КонПериода);
                Если ВыполнятьВЦикле Тогда
                    Возврат Истина;
                КонецЕсли;
                    
            Иначе                
                
                ВыполнятьВЦикле = ИмпортВыпискиАК(НачПериода, КонПериода, ТекущийИДКлиентаГруппыЧП);
                Если НЕ ВыполнятьВЦикле Тогда //закончились порции для текущего ИД ЧП
                    ТаблицаИДГруппыЧП.Удалить(0);
                    Если ТаблицаИДГруппыЧП.Количество() > 0 Тогда
                        ТекущийИДКлиентаГруппыЧП = ТаблицаИДГруппыЧП[0].ИДКлиента;
                        ВыполнятьВЦикле = Истина;
                    Иначе
                        ТекущийИДКлиентаГруппыЧП = "";                        
                    КонецЕсли;
                КонецЕсли;
                
                Если ВыполнятьВЦикле Тогда 
                    Возврат Истина;
                КонецЕсли;

            КонецЕсли;            
            
        //Иначе    
        //    
        //    //Первый шаг - отправка запроса и получение xml документа
        //    Попытка 
        //        XML = импОтправитьЗапросНаИмпортВыписок(НачПериода, КонПериода); 
        //        
        //        Если XML = "" Тогда
        //            Возврат Ложь;
        //        КонецЕсли;    
        //    Исключение                                                                                 
        //        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа (запрос на импорт платежей)!';uk='Помилка при відправці запиту (запит на імпорт платежів)! '")
        //            + ОписаниеОшибки();
        //        СообщениеПользователю(ТекстСообщения);
        //        XML = "";
        //        Возврат Ложь;
        //    КонецПопытки;
            
        КонецЕсли;

    КонецЕсли;
    
    //Если ИспользоватьСтароеAPI Тогда    
    //    инд = 1;
    //    Попытка
    //        Пока импПрочитатьУзелList(XML, ТабВходящихПлатежей) = Истина И инд < 100 Цикл          
    //            инд = инд + 1;
    //        КонецЦикла;      
    //    Исключение
    //        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа списка платежей!';uk='Помилка при читанні відповіді списку платежів!'");
    //        СообщениеПользователю(ТекстСообщения);
    //        XML = "";
    //        Возврат Ложь;
    //    КонецПопытки;    
    //    
    //    Если импПрочитатьУзелList(XML, ТабВходящихПлатежей) Тогда //если еще есть записи - вернем выполнение в цикл
    //        Возврат Истина;
    //    КонецЕсли;
    //    
    //    Если ТабВходящихПлатежей.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Нет документов для импорта ';uk='Немає документів для імпорту '");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        XML = "";
    //        Возврат Ложь;
    //    КонецЕсли;
    //КонецЕсли;
    
    FollowId = "";
    ТекущийИДКлиентаГруппыЧП = "";
    
    //Третий шаг - заполнение табличной части "ИмпортПлатежныеДокументы" 
    Попытка
        
        ДействиеАналитики = "ПолучениеСпискаПлатежей";
        
        Если НЕ ИспользоватьСтароеAPI Тогда
            ДействиеАналитики = ДействиеАналитики + "AKv4";
        КонецЕсли;
    
        импЗаполнитьПлатежныеДокументы(ТабВходящихПлатежей);
        
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
        
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при заполнении списка импортированных документов! ';uk='Помилка при заповненні списку імпортованих документів!'");
        СообщениеПользователю(ТекстСообщения);
        XML = "";
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки());
        КонецЕсли;    
        Возврат Ложь;
    КонецПопытки;    
    
    //ОбновитьОстаткиПоСчетам(КонецДня(КонПериода));
    XML = "";

    Возврат Ложь;
    
КонецФункции

Процедура ПрочитатьОтветПоИмпортуЧерезАвтоклиент(ОтветXML)

    Если ЭтотОбъект.ФлажокЗаменитьОтветСервера Тогда
        СтруктураОтвета = jsonПрочитатьИнициализация(ПолеВводаТест1)
    Иначе
        СтруктураОтвета = jsonПрочитатьИнициализация(ОтветXML);
    КонецЕсли;
    
    Попытка
        Если СтруктураОтвета.exist_next_page И СтруктураОтвета.transactions.Количество() > 0 И FollowId <> СтруктураОтвета.next_page_id Тогда
            FollowId = СтруктураОтвета.next_page_id;
        Иначе
            FollowId = "";
        КонецЕсли;
    Исключение
        FollowId = "";
    КонецПопытки;
    
    //МассивСтруктурыПлатежей = СтруктураОтвета.StatementsResponse.statements;
    МассивСтруктурыПлатежей = СтруктураОтвета.transactions;
    
    Для Каждого СтрокаСтруктуры Из МассивСтруктурыПлатежей Цикл
        ПрочитатьДанныеПлатежаАвтоклиент(СтрокаСтруктуры);
    КонецЦикла;
    
    //    Для Каждого ВложеннаяСтрокаСтруктуры Из СтрокаСтруктуры Цикл
    //        Если ТипЗнч(ВложеннаяСтрокаСтруктуры.Значение) = Тип("Структура") Тогда
    //            ДанныеПлатежа = ВложеннаяСтрокаСтруктуры.Значение;
    //            ПрочитатьДанныеПлатежаАвтоклиент(ДанныеПлатежа);
    //        Иначе    
    //            Для Каждого СтрокаВложеннойСтруктуры Из ВложеннаяСтрокаСтруктуры.Значение Цикл
    //                Для Каждого СтрокаПлатажа Из СтрокаВложеннойСтруктуры Цикл
    //                    ДанныеПлатежа = СтрокаПлатажа.Значение;
    //                    ПрочитатьДанныеПлатежаАвтоклиент(ДанныеПлатежа);
    //                КонецЦикла;
    //            КонецЦикла;
    //        КонецЕсли;
    //        
    //    КонецЦикла;
    //КонецЦикла;
    
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики ,,,"КоличествоПлатежей", Формат(ТабВходящихПлатежей.количество(), "ЧГ=0"));
    
КонецПроцедуры

Функция ПреобразоватьНомерСчетаИзФорматаIBAN(НомерСЧета)
            
    НовыйНомерСчета = Прав(НомерСЧета, 19);
    
    ЗапасноеУсловиеНаВыход = СтрДлина(НовыйНомерСчета);
    Пока Лев(НовыйНомерСчета, 1) = "0" И ЗапасноеУсловиеНаВыход > 0 Цикл
        
        НовыйНомерСчета = Сред(Прав(НовыйНомерСчета, 19), 2, СтрДлина(НовыйНомерСчета) - 1);
        
        ЗапасноеУсловиеНаВыход = ЗапасноеУсловиеНаВыход - 1;
        
    КонецЦикла;    
    
    Возврат НовыйНомерСчета;
    
КонецФУнкции

Функция АлгоритмЛуна(ШтрКод) Экспорт
//   N = СтрДлина(ШтрКод)+1;    
//   sum = 0;
//   Для i = 1 по N-1 Цикл
//     p = Сред(ШтрКод,N-i,1);
//     Если(i/2 <> Цел(i/2) ) Тогда
//       p = 2*p;
//       Если (p > 9) Тогда 
//         p = p - 9;
//       КонецЕсли;
//     КонецЕсли;
//     sum = sum + p;   
//   КонецЦикла;
//   sum = (sum/10) - Цел(sum/10);
//   Если (sum <> 0) Тогда 
//     sum = 10 - sum*10;
//   КонецЕсли;      
//   Сообщить("Контр.число ="+sum); 
//   Возврат sum; 
 КонецФункции

Функция СчетВФорматеIBAN(НомерСЧета)

    Возврат СтрДлина(НомерСЧета) = 29

КонецФУнкции

Функция ПолучитьКодМФОИзСчетаIBAN(НомерСчета)
    
    КодМФО = "";
    Попытка
        КодМФО = Прав(Лев(НомерСчета, 10), 6);
    Исключение
        
        Если РежимОтладки Тогда
            СообщениеПользователю("Ошибка при получение кода МФО банка " + ОписаниеОшибки(), Ложь);    
        КонецЕсли;
        
    КонецПопытки;

    Возврат КодМФО;    
    
КонецФункции

Функция УдалитьНедопустимыеСомволы(Строка) 
    
    НоваяСтрока = Строка;
    
    ЗапаснойСчетчик = СтрДлина(НоваяСтрока);
    
    Пока НайтиНедопустимыеСимволыXML(НоваяСтрока) > 0 И ЗапаснойСчетчик > 0 Цикл
        НомерНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(НоваяСтрока);
        НоваяСтрока = Сред(НоваяСтрока, 0, НомерНедопустимогоСимвола - 1) + Сред(НоваяСтрока, НомерНедопустимогоСимвола + 1, СтрДлина(НоваяСтрока));
        ЗапаснойСчетчик = ЗапаснойСчетчик - 1;
    КонецЦикла;
    
    Возврат НоваяСтрока;
    
КонецФункции

Процедура ПрочитатьДанныеПлатежаАвтоклиент(ДанныеПлатежа)
    
    //ref
    Референс = ДанныеПлатежа.REF; //+ "." + ДанныеПлатежа.REFN;  
    //!ref
    РеференсДоп = ДанныеПлатежа.REFN;
    
    //НомерПлатежа = ДанныеПлатежа.BPL_NUM_DOC;     
    //ДатаВремя = ДанныеПлатежа.BPL_DAT_OD + " " + ДанныеПлатежа.BPL_TIM_P + ":00"; //BPL_DAT_KL
    //
    //СостояниеДока = ДанныеПлатежа.BPL_PR_PR;
    //ВидПлатежа = ДанныеПлатежа.BPL_FL_REAL;
    //ТипДока = ДанныеПлатежа.BPL_DOC_TYP;  
    //
    //СуммаСтрока = ДанныеПлатежа.BPL_SUM;
    //Сумма = Число(СуммаСтрока);
    //
    //Валюта = ДанныеПлатежа.BPL_CCY;
    //
    //НазначениеПлатежа = ДанныеПлатежа.BPL_OSND;
    
    НомерПлатежа = ДанныеПлатежа.NUM_DOC;     
    ДатаВремя = ДанныеПлатежа.DAT_OD + " " + ДанныеПлатежа.TIM_P + ":00"; //BPL_DAT_KL
    
    СостояниеДока = ДанныеПлатежа.PR_PR;
    ВидПлатежа = ДанныеПлатежа.FL_REAL;
    ТипДока = ДанныеПлатежа.DOC_TYP;  
    
    СуммаСтрока = ДанныеПлатежа.SUM;
    Сумма = Число(СуммаСтрока);
    
    Валюта = ДанныеПлатежа.CCY;
    
    НазначениеПлатежа = ДанныеПлатежа.OSND;
    
    Если НайтиНедопустимыеСимволыXML(НазначениеПлатежа) > 0 Тогда
        НазначениеПлатежа = УдалитьНедопустимыеСомволы(НазначениеПлатежа);        
    КонецЕсли;
    
    ЭтоПриход = ДанныеПлатежа.TRANTYPE = "C"; // кредит
        
    РСчет = ДанныеПлатежа.AUT_MY_ACC;         
    
    РСчет = (РСчет);
    
    СчетКонтрагента = ДанныеПлатежа.AUT_CNTR_ACC;
    
    СчетКонтрагента = (СчетКонтрагента);

    НаименованиеКонтрагента = ДанныеПлатежа.AUT_CNTR_NAM;   
    КодКонтрагента = ДанныеПлатежа.AUT_CNTR_CRF; 
    
    НаимБанкаКонтр = ДанныеПлатежа.AUT_CNTR_MFO_NAME;
    Попытка
        ГородБанкаКонтр = ДанныеПлатежа.AUT_CNTR_MFO_CITY;
    Исключение
        ГородБанкаКонтр = "";    
    КонецПопытки;

    НаименованиеНаше = ДанныеПлатежа.AUT_MY_NAM;
    КодНаш = ДанныеПлатежа.AUT_MY_CRF;  
    
    НаимБанкаНаше = ДанныеПлатежа.AUT_MY_MFO_NAME;
    
    Попытка
        ГородБанкаНаш = ДанныеПлатежа.AUT_MY_MFO_CITY; 
    Исключение
        ГородБанкаНаш = "";    
    КонецПопытки;
    
    МФОКонтрагента = ДанныеПлатежа.AUT_CNTR_MFO;
    
    Если НЕ ЗначениеЗаполнено(МФОКонтрагента) И СтрДлина(СчетКонтрагента) = 29 Тогда // попробуем получить код МФО банка из счета в формате IBAN
        МФОКонтрагента = ПолучитьКодМФОИзСчетаIBAN(СчетКонтрагента);    
    КонецЕсли;
        
    МФОНаш = ДанныеПлатежа.AUT_MY_MFO;
    
    Если НЕ ЗначениеЗаполнено(МФОНаш) И СтрДлина(РСчет) = 29 Тогда // попробуем получить код МФО банка из счета в формате IBAN
        МФОНаш = ПолучитьКодМФОИзСчетаIBAN(РСчет);    
    КонецЕсли;
        
    Если КодНаш = "000000000" Тогда //валютная операция
        
        КодНаш = ЗаполнитьКодПредприятияПоБанковскомуСчету(РСчет);
        
    КонецЕсли;
    
    //проверка на фирму
    //Если ПолучитьКодОрганизации() <> КодНаш Тогда
    //    
    //    Если РежимОтладки Тогда
    //        ТекстСообщения = НСтр("ru = ' Платеж ';uk=' Платіж '") + НомерПлатежа +  НСтр("ru = ' пропущен, т.к. не относится к выбранной организации. ';uk=' пропущений, тому що не відноситься до обраної організації.'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //    КонецЕсли;    
    //    
    //    Возврат;
    //    
    //КонецЕсли;
    
    
    СтруктураПоиска = Новый Структура;
    
    СтруктураПоиска.Вставить("Референс", Референс);
    СтруктураПоиска.Вставить("РеференсДоп", РеференсДоп);
    СтруктураПоиска.Вставить("ТипДока", ТипДока);
    СтруктураПоиска.Вставить("НомерПлатежа", НомерПлатежа);
        
    МассивПЛ = ТабВходящихПлатежей.НайтиСтроки(СтруктураПоиска);
    
    Если МассивПЛ.Количество() <> 0 И ИдКонф <> "KUBU" Тогда //если такой платеж уже есть - то это перемещение между счетами
        СтрокаТЗ = МассивПЛ[0];
        ////меняем местами расчетные счета
        //темпРСчет = СтрокаТЗ.РСчет;
        //СтрокаТЗ.РСчет = СтрокаТЗ.СчетКонтрагента;
        //СтрокаТЗ.СчетКонтрагента = темпРСчет;
        СтрокаТЗ.ЭтоПеремещение = Истина;
        Возврат;
    КонецЕсли;
    
    тзНоваятСрока = ТабВходящихПлатежей.Добавить();   
    
    //ref
    тзНоваятСрока.Референс = Референс;
    //!ref
    тзНоваятСрока.РеференсДоп = РеференсДоп;
    
    тзНоваятСрока.НаимБанкаКонтр = НаимБанкаКонтр;
    тзНоваятСрока.ГородБанкаКонтр = ГородБанкаКонтр;

    тзНоваятСрока.НаимБанкаНаше = НаимБанкаНаше;
    тзНоваятСрока.ГородБанкаНаш = ГородБанкаНаш;
    
    тзНоваятСрока.НомерПлатежа = НомерПлатежа;
    тзНоваятСрока.ДатаВремя = ДатаВремя;
    тзНоваятСрока.СостояниеДока = СостояниеДока;
    тзНоваятСрока.ВидПлатежа = ВидПлатежа;
    тзНоваятСрока.ТипДока = ТипДока;
    
    тзНоваятСрока.Сумма = Сумма;    
    тзНоваятСрока.ЭтоПриход = ЭтоПриход;
    тзНоваятСрока.Валюта = Валюта;
    
    тзНоваятСрока.РСчет = РСчет;
    тзНоваятСрока.МФОНаш = МФОНаш;
    тзНоваятСрока.НаименованиеНаше = НаименованиеНаше;
    тзНоваятСрока.КодНаш = КодНаш;
    
    тзНоваятСрока.СчетКонтрагента = СчетКонтрагента;
    тзНоваятСрока.МФОКонтрагента = МФОКонтрагента;
    тзНоваятСрока.НаименованиеКонтрагента = НаименованиеКонтрагента;
    тзНоваятСрока.КодКонтрагента = КодКонтрагента;
    
    тзНоваятСрока.НазначениеПлатежа = НазначениеПлатежа;

    //Если (тзНоваятСрока.КодНаш = тзНоваятСрока.КодКонтрагента И тзНоваятСрока.МФОНаш <> тзНоваятСрока.МФОКонтрагента И НЕ ЭтоТранзитныйСчет(СчетКонтрагента)) ИЛИ 
    //    Найти(НазначениеПлатежа, "Виплата вiдсоткiв згiдно депозитного договору") > 0 ИЛИ Найти(НазначениеПлатежа, "Повернення коштiв згiдно договору про депозит") > 0
    //    Тогда //И НЕ ЭтоТранзитныйСчет(СчетКонтрагента) - добавлено под кейс клиента, возможны проблемы с другими проводками
    //    
    //    темп = тзНоваятСрока.РСчет;
    //    тзНоваятСрока.РСчет = тзНоваятСрока.СчетКонтрагента;
    //    тзНоваятСрока.СчетКонтрагента = темп;
    //    
    //    темп = тзНоваятСрока.МФОНаш;
    //    тзНоваятСрока.МФОНаш = тзНоваятСрока.МФОКонтрагента;
    //    тзНоваятСрока.МФОКонтрагента = темп;
    //    
    //    темп = тзНоваятСрока.НаимБанкаНаше;
    //    тзНоваятСрока.НаимБанкаНаше = тзНоваятСрока.НаимБанкаКонтр;
    //    тзНоваятСрока.НаимБанкаКонтр = темп;
    //    
    //    темп = тзНоваятСрока.ГородБанкаНаш;
    //    тзНоваятСрока.ГородБанкаНаш = тзНоваятСрока.ГородБанкаКонтр;
    //    тзНоваятСрока.ГородБанкаКонтр = темп;
    //    
    //КонецЕсли;
    
КонецПроцедуры

Функция импОтправитьЗапросНаИмпортВыписокАвтоклиент(НачДата, КонДата, idКлиентаВГруппе = Неопределено)   
    
    ДействиеАналитики = "ВыпискаV3";
    
    ТелоОтвета = "";
    
    ДатаНачалаПериода = Формат(НачДата, "ДЛФ=Д;ДФ=дд-ММ-гггг");
    ДатаКонцаПериода = Формат(КонДата, "ДЛФ=Д;ДФ=дд-ММ-гггг");
    
    Если ЗначениеЗаполнено(БанковскийСчет) Тогда
        Счет = "&acc=" + СокрЛП(БанковскийСчет.НомерСчета);
    Иначе
        Счет = "";
    КонецЕсли;                                 
    
    ТелоЗапроса = "";     
        
    РесурсНаСервере = "/api/statements/transactions?" 
        + "&startDate=" + ДатаНачалаПериода
        + "&endDate=" + ДатаКонцаПериода
        + "&limit=100"
        + Счет;
    Если ЗначениеЗаполнено(FollowId) Тогда
        РесурсНаСервере = РесурсНаСервере + "&followId=" + FollowId;
    КонецЕсли;        
    
    Если ЗначениеЗаполнено(idКлиентаВГруппе) Тогда
        РесурсНаСервере = РесурсНаСервере + "&id=" + idКлиентаВГруппе;
    КонецЕсли;        

    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    Если ЗначениеЗаполнено(ИдАК) Тогда
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "id";
        НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    КонецЕсли;
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "token";
    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", , Заголовки,,,Ложь);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на импорт выписки (автоклиент)!';uk='Помилка відправки запиту на імпорт виписки (автоклієнт)'");
        СообщениеПользователю(ТекстСообщения);
        Возврат "";
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка обработки запроса на импорт выписки (автоклиент)!';uk='Помилка обробки відправки запиту на імпорт виписки (автоклієнт)'");
        СообщениеПользователю(ТекстСообщения);
        Возврат "";
    КонецЕсли;
    
    Если НЕ ЕстьОшибки Тогда
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
    КонецЕсли;
    
    Возврат ТелоОтвета;
    
КонецФункции

//Процедура НайтиСоздатьАвтоклиент()
//    
//    ИмяАвтоклиента = "Модуль обміну (створений автоматично)";
//    
//    ИдАК = НайтиАвтоклиентМодуляОбмена(ИмяАвтоклиента);    
//    
//    Если НЕ ЗначениеЗаполнено(ИдАК) Тогда
//        ИдАК = СоздатьАвтоклиент(ИмяАвтоклиента);    
//    КонецЕсли;
//    
//    Если НЕ ЗначениеЗаполнено(ИдАК) Тогда
//        Возврат;    
//    КонецЕсли;
//    
//    ТокенАК = ПолучитьТокенАвтоклиента();
//    
//КонецПроцедуры

//Функция ПолучитьТокенАвтоклиента()
//    
//    ДействиеАналитики = "ПолучениеTokenПоIdАвтоклиента";

//    РесурсНаСервере = "/api/account/get-settings-api/" + ИдАК;
//    ТелоЗапроса = "";
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияАК, ,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияАК = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение токена автоклиента.';uk='Помилка відправки запиту на отримання токена автоклієнту'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияАК = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение токена автоклиента.';uk='Помилка при обробці відповіді на отримання токена автоклієнту'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

//    Попытка 
//        Возврат СтруктураОтвета.token;
//    Исключение
//        
//        ТекстСообщения = НСтр("ru='Ошибка при чтении ответа на получение токена автоклиента.';uk='Помилка при читанні відповіді на отримання токена автоклієнту'")
//            + ОписаниеОшибки();
//        СообщениеПользователю(ТекстСообщения);
//        
//        Возврат "";     
//    КонецПопытки;

//    Возврат ""; 
//    
//КонецФункции

//Функция СоздатьАвтоклиент(ИмяАвтоклиента)
//    
//    ДействиеАналитики = "СозданиеАвтоклиента";
//    
//    РесурсНаСервере = "/api/account/create";

//    ТелоЗапроса = "{""name"":""" + ИмяАвтоклиента + """,""properties"":{""date_in_name_file"":true,""all_in_one_file"":false,""encoding"":""cp1251"",""interval_time_statements"":15,""path_folder_statements_save"":""statements\\"",""path_folder_balance_save"":""balance\\"",""path_folder_consolidated_save"":""consolidated\\"",""path_folder_payments_for_import"":""prepared\\"",""path_folder_payments_with_import"":""saved\\"",""path_folder_rejected_payments"":""rejected\\"",""format"":""dbf"",""proxy"":"""",""name"":""" + ИмяАвтоклиента + """,""accounts"":[]}}";

//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/plain, ";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияАК, Заголовки ,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияАК = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на создание автоклиента.';uk='Помилка відправки запиту на створення автоклієнту'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияАК = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на создание автоклиента.';uk='Помилка при обробці відповіді на створення автоклієнту'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

//    Попытка 
//        Возврат СтруктураОтвета.id;
//    Исключение
//        
//        ТекстСообщения = НСтр("ru='Ошибка при чтении ответа на создание автоклиента.';uk='Помилка при читанні відповіді на створення автоклієнту'")
//            + ОписаниеОшибки();
//        СообщениеПользователю(ТекстСообщения);
//        
//        Возврат "";     
//    КонецПопытки;
//    
//    Возврат "";
//    
//КонецФункции

//Функция НайтиАвтоклиентМодуляОбмена(ИмяАвтоклиента)
//    
//    ДействиеАналитики = "ПолучениеСпискаАвтоклиентов";
//    
//    РесурсНаСервере = "/api/account/get-list";
//    ТелоЗапроса = "{""offset"":0,""perPage"":10000}";

//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/plain, ";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
//            
//    UserAgentHeaders = ОпределитьUserAgentHeaders();

//    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияАК, Заголовки ,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияАК = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение списка автоклиентов.';uk='Помилка відправки запиту на отримання списку автоклієнтів'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияАК = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение списка автоклиентов.';uk='Помилка при обробці відповіді на отримання списка автоклієнтів'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
//    
//    Если НЕ ЗначениеЗаполнено(ИДКлиента) Тогда 
//        ИДКлиента = ПолучитьИДКлиентаАвтоКлиент();
//    КонецЕсли;
//            
//    Попытка
//        
//        МассивАвтоклиентов = СтруктураОтвета.respObject;
//        
//        Для Каждого СтрокаМассива Из МассивАвтоклиентов Цикл
//                                
//            Если СтрокаМассива.name = ИмяАвтоклиента И (СтрокаМассива.clientEkbId = ИДКлиента ИЛИ НЕ ЗначениеЗаполнено(СтрокаМассива.clientEkbId)) Тогда
//                Возврат СтрокаМассива.id;    
//            КонецЕсли;
//            
//        КонецЦикла;
//        
//    Исключение
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа по списку автоклиентов.';uk='Помилка при обробці відповіді за списком автоклієнтів'")
//            + ОписаниеОшибки();
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецПопытки;
//    
//    Возврат "";
//    
//КонецФункции

//Функция ПолучитьИДКлиентаАвтоКлиент()
//        
//    ДействиеАналитики = "ПолучениеИДКлиента";
//    
//    РесурсНаСервере = "/api/proxy/get-account-info";
//    ТелоЗапроса = "";

//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

//    //Если ЗначениеЗаполнено(ИдАК) Тогда
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "id";
//    НоваяСтрока.ЗначениеЗаголовка = ИдАК;
//    //КонецЕсли;
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "token";
//    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", , Заголовки,,,Ложь);

//        
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        
//        Если РежимОтладки Тогда
//            ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение ид клиента.';uk='Помилка відправки запиту на отримання ід клієнта'");
//            СообщениеПользователю(ТекстСообщения);
//            Возврат "";
//        КонецЕсли;
//        
//    Иначе
//        Статус = стРезультат.Статус;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        Если РежимОтладки Тогда
//            ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение ид клиента.';uk='Помилка при обробці відповіді на отримання ід клієнта'");
//            СообщениеПользователю(ТекстСообщения);
//        КонецЕсли;
//        Возврат "";
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
//    
//    Попытка                        
//        Возврат СтруктураОтвета.clientEkbId;
//    Исключение
//        Если РежимОтладки Тогда
//            ТекстСообщения = НСтр("ru='Ошибка при чтении ответа на получение ид клиента.';uk='Помилка при читанні відповіді на отримання ід клієнта'")
//                + ОписаниеОшибки();
//            СообщениеПользователю(ТекстСообщения);
//        КонецЕсли;
//        Возврат "";
//    КонецПопытки;    
//    
//КонецФункции

//Процедура АвторизацияАвтоклиента()
//    
//    токен = ПолучитьАвторизационныйТокенАвтоклиента();
//    
//    ДействиеАналитики = "АвторизацияАвтоклиент";
//    
//    Если НЕ ЗначениеЗаполнено(токен) Тогда
//        Возврат;    
//    КонецЕсли;
//    
//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/plain, ";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept-Language";
//    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
//        
//    РесурсНаСервере = "/api/auth";
//    ТелоЗапроса = "{""authData"": """ + токен + """}";
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();

//    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "", Заголовки ,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияАК = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение сессии автоклиента.';uk='Помилка відправки запиту на отримання сесії автоклієнта'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияАК = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение сессии автоклиента.';uk='Помилка при обробці відповіді на отримання сесії автоклієнта'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//КонецПроцедуры

//Функция ПолучитьАвторизационныйТокенАвтоклиента()
//    
//    ДействиеАналитики = "ПолучениеToken";
//    
//    РесурсНаСервере = "/api/v2/extauth/autoclient?company_id=" + ИДКомпанииВ3;
//    ТелоЗапроса = ""; 
//    UserAgentHeaders = ОпределитьUserAgentHeaders();

//    стРезультат = УстановитьСоединение(АдресВ3, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияВ3,  ,,,Ложь);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияВ3 = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение токена автоклиента.';uk='Помилка відправки запиту на отримання токена автоклієнта'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияВ3 = стРезультат.Cookie;
//        Если Не ЗначениеЗаполнено(стРезультат.Cookie) Тогда
//            Авторизовано = Ложь;
//            СессияВ3 = "";
//            Возврат "";
//        КонецЕсли;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение токена автоклиента.';uk='Помилка при обробці відповіді на отримання токена автоклієнта'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;

//    Если СтруктураОтвета = Неопределено Тогда
//        Возврат "";    
//    КонецЕсли;
//    
//    Попытка
//        Возврат СтруктураОтвета.data;
//    Исключение
//        ТекстСообщения = НСтр("ru='Ошибка при чтении ответа на получение токена автоклиента.';uk='Помилка при читанні відповіді на отримання токена автоклієнта'")
//            + ОписаниеОшибки();
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";    
//    КонецПопытки;
//    
//КонецФункции

//Функция ПолучитьМассивКомпанийВ3() 
//    
//    ДействиеАналитики = "ПолучениеСпискаПредприятий";
//    
//    РесурсНаСервере = "/api/companies/v2";
//    
//    ТелоЗапроса = "{""action"":""companies"", ""offset"":0, ""limit"":1000}";
//     
//    //ТелоЗапроса = "{""Top"":10000,""Step"":1}"; 
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/javascript, ; q=0.01";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=UTF-8";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept-Language";
//    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Connection";
//    НоваяСтрока.ЗначениеЗаголовка = "keep-alive";
//        
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Upgrade-Insecure-Requests";
//    НоваяСтрока.ЗначениеЗаголовка = "1"; 
//    
//    стРезультат = УстановитьСоединение(АдресВ3, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияВ3, Заголовки ,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияВ3 = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение списка компаний.';uk='Помилка відправки запиту на отримання списку компаній.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияВ3 = стРезультат.Cookie;
//        
//        Если Не ЗначениеЗаполнено(стРезультат.Cookie) Тогда
//            Авторизовано = Ложь;
//            СессияВ3 = "";
//            Возврат "";
//        КонецЕсли;
//        
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при обработке ответа на получение списка компаний.';uk='Помилка при обробці відповіді на отримання списку компаній.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//    МассивКомпаний = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
//    
//    Если МассивКомпаний = Неопределено Тогда
//        Возврат "";    
//    КонецЕсли;
//    
//    Возврат МассивКомпаний.Links;
//    
//КонецФункции

//Функция ПолучитьИДКомпанииВ3()
//    
//    //Для Каждого СтрокаКомпании Из ТокеныКомпаний Цикл
//    //    Если СтрокаКомпании.КодКомпании = КодПоЕДРПОУ ИЛИ СтрокаКомпании.КодКомпании = ИНН Тогда
//    //        Возврат СтрокаКомпании.ИДКомпании;    
//    //    КонецЕсли;
//    //КонецЦикла;
//        
//    МассивКомпаний = ПолучитьМассивКомпанийВ3();
//    
//    Если МассивКомпаний = "" Тогда
//        Возврат "";
//    КонецЕсли;
//    
//    Для Каждого Компания Из МассивКомпаний Цикл
//        Попытка
//            Если Компания.crf = КодПоЕДРПОУ ИЛИ Компания.crf = ИНН Тогда
//                //ВыбратьКомпаниюНаПБ24(Компания.id, Компания.role);
//                Возврат Компания.id;
//            КонецЕсли;
//            
//            Если (КодПоЕДРПОУ = (Компания.civil_passport.serial_n + Компания.civil_passport.serial_t)) ИЛИ (НЕ ЗначениеЗаполнено(КодПоЕДРПОУ) И НЕ ЗначениеЗаполнено(Компания.crf)) Тогда
//                Возврат Компания.id;
//            КонецЕсли;
//                
//        Исключение
//            Продолжить; // это группа ЧП 
//        КОнецПопытки;
//        
//    КонецЦикла;
//    
//    ТекстСообщения = НСтр("ru='Выбранная организация не найдена в Вашем аккаунте Приват24 (поиск по коду организации).';uk='Обрана організація не знайдена у Вашому акаунті Приват24 (пошук по коду організації).'");
//    СообщениеПользователю(ТекстСообщения);
//    Возврат "";
//    
//КонецФункции

//Процедура ВыбратьКомпаниюНаПБ24(company_id, role)
//    
//    ДействиеАналитики = "ВыборПредприятия";
//    
//    РесурсНаСервере = "/api/me/switch_corp?company_id=" + company_id;
//    ТелоЗапроса = "{""id"": """ + company_id + """, ""role"": """ + role + """}";
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/javascript,  ; q=0.01";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/json";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept-Encoding";
//    НоваяСтрока.ЗначениеЗаголовка = "gzip, deflate, br";
//        
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Length";
//    НоваяСтрока.ЗначениеЗаголовка = СтрДлина(ТелоЗапроса);

//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept-Language";
//    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4";

//    стРезультат = УстановитьСоединение(АдресВ3, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияВ3, Заголовки,,,Истина);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияВ3 = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на выбор компании в Приват24.';uk='Помилка відправки запиту на вибір компанії в Приват24.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    Иначе
//        Статус = стРезультат.Статус;
//        СессияВ3 = стРезультат.Cookie;
//        
//        Если Не ЗначениеЗаполнено(стРезультат.Cookie) Тогда
//            СессияВ3 = "";
//            Авторизовано = Ложь;
//            Возврат;
//        КонецЕсли;
//        
//    КонецЕсли;
//    
//    Если Статус <> 204 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка при выборе компаний в Приват24.';uk='Помилка при виборі компаній в Приват24.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    КонецЕсли;
//    
//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//КонецПроцедуры

Процедура KUBU_ЗаполнитьБанковскуюВыписку(СтрокаПлатеж, НоваяСтрока)
    
    НоваяСтрока.БанковскийСчет = НайтиСоздатьСчет(СтрокаПлатеж.Организация, СтрокаПлатеж.МФОНаш, СтрокаПлатеж.РСчет, НоваяСтрока.Валюта, СтрокаПлатеж.НаимБанкаНаше, СтрокаПлатеж.ГородБанкаНаш);
    НоваяСтрока.ВидОперации = KUBU_НайтиВидОпериацииПоУмолчанию(СтрокаПлатеж.ЭтоПриход);
    НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС(СтрокаПлатеж.НазначениеПлатежа);
    НоваяСтрока.СуммаНДС = ПолучитьСуммуНДС(НоваяСтрока.СуммаДокумента, НоваяСтрока.СтавкаНДС);
    НоваяСтрока.НазначениеПлатежа = СтрокаПлатеж.НазначениеПлатежа;
    НоваяСтрока.Дата = КонецДня(НоваяСтрока.Дата);
    
    //поиск за день, по счету
    KUBU_НайтиБанковскуюВыписку(НоваяСтрока);
    
КонецПроцедуры

Процедура KUBU_НайтиБанковскуюВыписку(СтрокаПлатежа)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    БанковскаяВыписка.Ссылка КАК Ссылка,
        |    БанковскаяВыписка.Проведен,
        |    БанковскаяВыписка.Дата
        |ИЗ
        |    Документ.БанковскаяВыписка КАК БанковскаяВыписка
        |ГДЕ
        |    НЕ БанковскаяВыписка.ПометкаУдаления
        |    И КОНЕЦПЕРИОДА(БанковскаяВыписка.Дата, ДЕНЬ) = &Дата
        |    И БанковскаяВыписка.РасчетныйСчет = &РасчетныйСчет
        |    И БанковскаяВыписка.Организация = &Организация";
    
    Запрос.УстановитьПараметр("Дата", КонецДня(СтрокаПлатежа.Дата));
    Запрос.УстановитьПараметр("РасчетныйСчет", СтрокаПлатежа.БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", СтрокаПлатежа.Организация);
    
    РезультатЗапроса = Запрос.Выполнить().Выбрать();
    
    КоличествоДок = 0;
    ТекстПереченьДокументов = "";
    
    Пока РезультатЗапроса.Следующий() Цикл
        Если КоличествоДок = 0 Тогда
            
            СтрокаПлатежа.СсылкаНаДокумент = РезультатЗапроса.Ссылка;
            ТекстПереченьДокументов = ТекстПереченьДокументов + ?(ЗначениеЗаполнено(ТекстПереченьДокументов), ", ", "") + РезультатЗапроса.Ссылка;
            СтрокаПлатежа.Номер = РезультатЗапроса.Ссылка.Номер;
            СтрокаПлатежа.Дата = РезультатЗапроса.Дата;
            
            Если РезультатЗапроса.Проведен Тогда
                СтрокаПлатежа.ИдентификаторКартинки = 0;
            Иначе
                СтрокаПлатежа.ИдентификаторКартинки = 2;
            КонецЕсли;
            
        КонецЕсли;
        КоличествоДок = КоличествоДок + 1;
    КонецЦикла;
    
    Если КоличествоДок > 1 Тогда
        СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) платежных документов возможно дублирующих друг друга! Дата - " + СтрокаПлатежа.Дата + " ' 
            |uk = 'В інформаційній базі знайдено кілька (%КоличествоДок%) платіжних документів можливо дублюючих один одного! Дата - " + СтрокаПлатежа.Дата + " '");
        СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
        СообщениеПользователю(СтрокаЗамечание, Ложь);
        Если ЗначениеЗаполнено(ТекстПереченьДокументов) Тогда
            СообщениеПользователю(НСтр("ru = 'Перечень возможно дублирующих документов: '; uk = 'Перелік можливо дублюючих документів: '") + ТекстПереченьДокументов, Ложь)
        КонецЕсли
    КонецЕсли;
    
КонецПроцедуры    

Функция KUBU_НайтиВидОпериацииПоУмолчанию(ЭтоПриход)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ВидыОпераций.Ссылка КАК ВидОперации
        |ИЗ
        |    Справочник.ВидыОпераций КАК ВидыОпераций
        |ГДЕ
        |    НЕ ВидыОпераций.ПометкаУдаления
        |    И ВидыОпераций.ОбъектМетаданныхДляОперации = ""Документ.БанковскаяВыписка""
        |    И ВидыОпераций.ВидОперации = &ВидОперации
        |    И ВидыОпераций.ОперацияПоУмолчанию";
    
    Запрос.УстановитьПараметр("ВидОперации", ?(ЭтоПриход, Перечисления.ОперацииБанковскаяВыписка.Приход, Перечисления.ОперацииБанковскаяВыписка.Расход));
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Возврат ВыборкаДетальныеЗаписи.ВидОперации;
    КонецЦикла;
    
    Возврат Справочники.ВидыОпераций.ПустаяСсылка();
    
КонецФункции

Функция СтрокаВДату(Знач ФорматДаты, Знач Дано, Ошибка = Ложь) Экспорт 

    Попытка 
        ё = Формат('00010101', "ДФ=" + ФорматДаты) // - необязательная проверка первого правильности параметра 
    Исключение 
        Ошибка = Истина; 
        Возврат '00010101' 
    КонецПопытки; 
    
    Ч = Новый Соответствие; 
    Для ё = 1 По СтрДлина(ФорматДаты) + 7 Цикл 
        Ч[Сред(ФорматДаты + "dMyHhms", ё, 1)] = 0    // - инициализация частей даты 
    КонецЦикла; 
    Для ё = 1 По 12 Цикл 
        Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMММ"), Формат(ё, "ЧЦ=4; ЧВН=")); // - замена названий месяцев числами 
        Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMМ" ), Формат(ё, "ЧЦ=3; ЧВН=")) 
    КонецЦикла; 
    Для ё = 1 По СтрДлина(ФорматДаты) Цикл 
        Ч[Сред(ФорматДаты, ё, 1)] = 10 * Ч[Сред(ФорматДаты, ё, 1)] + Найти("123456789", Сред(Дано, ё, 1)); // - накопление частей даты 
        Ошибка = Ошибка ИЛИ Найти("dMyHhms", Сред(ФорматДаты, ё, 1)) И НЕ Найти("0123456789", Сред(Дано, ё, 1)) // - необязательная проверка на цифры 
    КонецЦикла; 
    Ч["y"] = Ч["y"] + ?(Ч["y"] < 50, 2000, ?(Ч["y"] < 100, 1900, 0)); // - дополнение двух цифр года до четырех 
    Попытка 
        Возврат Дата(Ч["y"], Ч["M"], Ч["d"], Ч["H"] + Ч["h"], Ч["m"], Ч["s"]) 
    Исключение 
        Ошибка = Истина; 
        Возврат '00010101' 
    КонецПопытки

КонецФункции

Функция ПреобразоватьДату(ДатаСтр) Экспорт
    
    ДатаДок = '00010101';
    
    Попытка
        //    v2
        ДатаДок = Дата(Лев(ДатаСтр, 4), Сред(ДатаСтр, 5, 2), Сред(ДатаСтр, 7, 2),
            Сред(ДатаСтр, 10, 2), Сред(ДатаСтр, 13, 2), Сред(ДатаСтр, 16, 2))
    Исключение
        Попытка
            //    v3 дата и время
            ДатаДок = Дата(Сред(ДатаСтр, 7, 4), Сред(ДатаСтр, 4, 2), Сред(ДатаСтр, 1, 2),
                Сред(ДатаСтр, 12, 2), Сред(ДатаСтр, 15, 2), Сред(ДатаСтр, 18, 2))
        Исключение
            //    v3 дата
            ДатаДок = Дата(Сред(ДатаСтр, 7, 4), Сред(ДатаСтр, 4, 2), Сред(ДатаСтр, 1, 2))
        КонецПопытки
    КонецПопытки;

    Возврат ДатаДок

КонецФункции

Процедура импЗаполнитьПлатежныеДокументы(ТЗПлатежей)
    
    Для Каждого СтрокаПлатеж Из ТЗПлатежей Цикл
        
        Если (СтрокаПлатеж.СостояниеДока <> "r") Или (СтрокаПлатеж.ВидПлатежа <> "r") Тогда 
            Если РежимОтладки Тогда
                СообщениеПользователю("Платеж " + СтрокаПлатеж.НомерПлатежа + " не загружен по виду " + СтрокаПлатеж.ВидПлатежа + " или состоянию " + СтрокаПлатеж.СостояниеДока, Ложь);
            КонецЕсли;    
            Продолжить;             
        КонецЕсли;                                                                
        
        НоваяСтрока = ИмпортПлатежныеДокументы.Добавить();
        НоваяСтрока.ИдентификаторКартинки = 5;//такой картинки нет 
        НоваяСтрока.КартинкаОшибки = 5;//такой картинки нет
        
        НоваяСтрока.Организация = НайтиОрганизацию(СтрокаПлатеж.КодНаш);
        
        Попытка
            ДатаПлатежки = Дата(Лев(СтрокаПлатеж.ДатаВремя, Найти(СтрокаПлатеж.ДатаВремя,"T")-1)+СтрЗаменить(Прав(СтрокаПлатеж.ДатаВремя,8),":",""));
        Исключение
            Попытка
                ДатаПлатежки = Дата(СтрокаПлатеж.ДатаВремя);
            Исключение
                ДатаПлатежки = '00010101';    
            КонецПопытки;
        КонецПопытки;    
        
        Если ДатаПлатежки = '00010101' Тогда
            ДатаПлатежки = СтрокаВДату("ДФ=dd.MM.yyyy", СтрокаПлатеж.ДатаВремя);            
        КонецЕсли;
        
        Если ДатаПлатежки = '00010101' Тогда
            ДатаПлатежки = СтрокаВДату("ДФ=dd.MM.yyyy hh:mm:ss", СтрокаПлатеж.ДатаВремя);            
        КонецЕсли;
        
        Если ДатаПлатежки = '00010101' Тогда
            ДатаПлатежки = ПреобразоватьДату(СтрокаПлатеж.ДатаВремя);    
        КонецЕсли;
        
        НоваяСтрока.Дата = ДатаПлатежки;
        НоваяСтрока.СуммаДокумента = СтрокаПлатеж.Сумма;
        
        НоваяСтрока.НомерПлатежа = СтрокаПлатеж.НомерПлатежа;
        
        // 1) Определим вид платежа – входящий или исходящий.
        Исходяший = НЕ СтрокаПлатеж.ЭтоПриход;
    
        // 2) Определим вид документа в программе.
        СтруктураДок = ПолучитьИмяИВидДокумента(СтрокаПлатеж);
        
        НоваяСтрока.ВидДокумента = СтруктураДок.ВидДокумента;
        НоваяСтрока.ИмяДокумента = СтруктураДок.ИмяДокумента;
        
        Если Исходяший ИЛИ НоваяСтрока.ВидДокумента = "Перемещение ДС" Тогда
            НоваяСтрока.СуммаРасход = НоваяСтрока.СуммаДокумента;
        Иначе    
            НоваяСтрока.СуммаПриход = НоваяСтрока.СуммаДокумента;
        КонецЕсли;
        
        НоваяСтрока.Валюта = НайтиВалюту(СтрокаПлатеж.Валюта);
        
        Если ИдКонф = "KUBU" Тогда
            НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
            KUBU_ЗаполнитьБанковскуюВыписку(СтрокаПлатеж, НоваяСтрока);
            Продолжить;
        КонецЕсли;    
        
        //Если (ИНН = СтрокаПлатеж.КодКонтрагента ИЛИ КодПоЕДРПОУ = СтрокаПлатеж.КодКонтрагента) И (НЕ ЭтоТранзитныйСчет(СтрокаПлатеж.СчетКонтрагента) И НЕ ЭтоТранзитныйСчет(СтрокаПлатеж.РСчет)) Тогда
        Если НоваяСтрока.ВидДокумента = "Перемещение ДС" Тогда
            
            НоваяСтрока.Контрагент = Справочники.Контрагенты.ПустаяСсылка(); //контрагент нам не нужен, т.к. это перевод между своими счетами
            
            Если ИдКонф = "UNF" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
                НоваяСтрока.ВидОперации = Перечисления.ТипыДенежныхСредств.Безналичные;
            ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Или Метаданные.Имя = "BASБухгалтерияКОРП" Тогда
                НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
            ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                НоваяСтрока.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
            КонецЕсли;
            
            НоваяСтрока.СчетКонтрагента = НайтиСоздатьСчет(НоваяСтрока.Организация, СтрокаПлатеж.МФОКонтрагента, СтрокаПлатеж.СчетКонтрагента, НоваяСтрока.Валюта, СтрокаПлатеж.НаимБанкаНаше, СтрокаПлатеж.ГородБанкаНаш);
            
            //Если Найти(СтрокаПлатеж.НазначениеПлатежа, "Выплата процентов") <> 0 ИЛИ Найти(СтрокаПлатеж.НазначениеПлатежа, "Виплата вiдсоткiв") <> 0 Тогда
            //    НоваяСтрока.СуммаПриход = НоваяСтрока.СуммаДокумента;
            //    НоваяСтрока.СуммаРасход = 0;
            //Иначе
            //    НоваяСтрока.СуммаРасход = НоваяСтрока.СуммаДокумента;    
            //КонецЕсли;        

        Иначе
            
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("КодКонтрагента", СтрокаПлатеж.КодКонтрагента);
            СтруктураПоиска.Вставить("СчетКонтрагента", СтрокаПлатеж.СчетКонтрагента);
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", СтрокаПлатеж.НаименованиеКонтрагента);
            
            СтруктураДоговора = Новый Структура;
            СтруктураДоговора.Вставить("Организация", НоваяСтрока.Организация);
            
            //Если ЭтоТранзитныйСчет(СтрокаПлатеж.СчетКонтрагента) Тогда
            //    НоваяСтрока.Контрагент = КонтрагентПоУмолчанию;    
            //Иначе    
                НоваяСтрока.Контрагент = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, НЕ Исходяший, Неопределено, СтруктураДоговора);
                                        //НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, НЕ Исходяший);
            //КонецЕсли;                            
            НоваяСтрока.СчетКонтрагента = НайтиСоздатьСчет(НоваяСтрока.Контрагент, СтрокаПлатеж.МФОКонтрагента, СтрокаПлатеж.СчетКонтрагента, НоваяСтрока.Валюта, СтрокаПлатеж.НаимБанкаКонтр, СтрокаПлатеж.ГородБанкаКонтр);
            
        КонецЕсли;    
        
        НоваяСтрока.БанковскийСчет = НайтиСоздатьСчет(НоваяСтрока.Организация, СтрокаПлатеж.МФОНаш, СтрокаПлатеж.РСчет, НоваяСтрока.Валюта, СтрокаПлатеж.НаимБанкаНаше, СтрокаПлатеж.ГородБанкаНаш);
        
        Если НоваяСтрока.ВидДокумента = "Перемещение ДС" И СтрокаПлатеж.ЭтоПриход Тогда
            
            времСчет = НоваяСтрока.СчетКонтрагента;
            НоваяСтрока.СчетКонтрагента = НоваяСтрока.БанковскийСчет;
            НоваяСтрока.БанковскийСчет = времСчет;
            
        КонецЕсли;
        
        Если ЗначениеЗаполнено(ДатаПлатежки) И ЗначениеЗаполнено(СтрокаПлатеж.НомерПлатежа) Тогда
            Если ПоискПлатежныхДокументовПоУказаннымПолям Тогда            
                
                ВходящиеПараметры = Новый Структура();
                ВходящиеПараметры.Вставить("ИмяДокумента", СтруктураДок.ИмяДокумента);
                ВходящиеПараметры.Вставить("ВидДокумента", НоваяСтрока.ВидДокумента);
                ВходящиеПараметры.Вставить("ДатаПлатежа", НачалоДня(НоваяСтрока.Дата));
                ВходящиеПараметры.Вставить("СуммаПлатежа", НоваяСтрока.СуммаДокумента);
                ВходящиеПараметры.Вставить("Организация", НоваяСтрока.Организация);
                ВходящиеПараметры.Вставить("НомерСчетаОрганизации", НоваяСтрока.БанковскийСчет.НомерСчета);
                ВходящиеПараметры.Вставить("Контрагент", НоваяСтрока.Контрагент);
                ВходящиеПараметры.Вставить("НомерСчетаКонтрагента", НоваяСтрока.СчетКонтрагента.НомерСчета);
                ВходящиеПараметры.Вставить("НазначениеПлатежа", СтрокаПлатеж.НазначениеПлатежа);                                                   
                ВходящиеПараметры.Вставить("ВходящийНомер", СтрокаПлатеж.НомерПлатежа);

                НайтиПлатежныйДокументПоПолямПоиска(ВходящиеПараметры, НоваяСтрока);

            Иначе
                НайтиПлатежныйДокумент(СтрокаПлатеж, СтруктураДок.ИмяДокумента, НоваяСтрока.Дата, НоваяСтрока);
            КонецЕсли;    
        КонецЕсли;

        Если ЗначениеЗаполнено(НоваяСтрока.СсылкаНаДокумент) Тогда // уже нашли док., берем все данные из него.
            
            Если НеЗаполнятьЗагруженныеРанееПлатежи Тогда
                ИмпортПлатежныеДокументы.Удалить(НоваяСтрока.НомерСтроки - 1);
                Продолжить;
            КонецЕсли;
            
            НайденныйДок = НоваяСтрока.СсылкаНаДокумент;
                        
            Если ИдКонф = "UNF" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
                
                Если НоваяСтрока.ИмяДокумента = "ПеремещениеДС" Тогда
                    
                    НоваяСтрока.СуммаДокумента = НайденныйДок.СуммаДокумента; 
                    //НоваяСтрока.ВидОперации = "Перемещение ДС";
                    
                Иначе    
                    
                    Попытка
                        НоваяСтрока.ВидОперации = НайденныйДок.ВидОперации;
                        
                        Если ИдКонф = "OSMD" Тогда
                            НоваяСтрока.ДоговорКонтрагента = НайденныйДок.ДоговорКонтрагента;        
                        КонецЕСли;
                        
                        НоваяСтрока.ДоговорКонтрагента = НайденныйДок.РасшифровкаПлатежа[0].Договор;
                        НоваяСтрока.ДокументРасчетов = НайденныйДок.РасшифровкаПлатежа[0].Документ;
                        НоваяСтрока.СтавкаНДС = НайденныйДок.РасшифровкаПлатежа[0].СтавкаНДС;
                    Исключение
                        Если РежимОтладки Тогда
                            СообщениеПользователю(ОписаниеОшибки(), Ложь);
                        КонецЕсли;    
                    КонецПопытки;
                                        
                КонецЕсли;

            ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
                Попытка
                    НоваяСтрока.ВидОперации = НайденныйДок.ВидОперации;
                    НоваяСтрока.ДоговорКонтрагента = НайденныйДок.РасшифровкаПлатежа[0].ДоговорКонтрагента;
                    НоваяСтрока.СтавкаНДС = НайденныйДок.РасшифровкаПлатежа[0].СтавкаНДС;
                Исключение
                    Если РежимОтладки Тогда
                        СообщениеПользователю(ОписаниеОшибки(), Ложь);
                    КонецЕсли;    
                КонецПопытки;
                
            ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                
                Попытка
                    НоваяСтрока.ВидОперации = НайденныйДок.ХозяйственнаяОперация;
                    //НоваяСтрока.ДоговорКонтрагента = НайденныйДок.РасшифровкаПлатежа[0].ОснованиеПлатежа;
                Исключение
                    Если РежимОтладки Тогда
                        СообщениеПользователю(ОписаниеОшибки(), Ложь);
                    КонецЕсли;    
                КонецПопытки;
                
            КонецЕсли;
            
            НоваяСтрока.Номер = НайденныйДок.Номер;
            
            Если НоваяСтрока.ИмяДокумента <> "ПеремещениеДС" И (ИдКонф <> "UNF" И ИдКонф <> "OSMD"
                    //Или Найти(ВРег(Метаданные.Имя), ВРег("BASSmallBusiness")) > 0//костыль для импорта платежей до реализации поддержки BASSmallBusiness
                    Или ИдКонф = "BSB") Тогда 
                
                НоваяСтрока.Контрагент = НайденныйДок.Контрагент;
                НоваяСтрока.НазначениеПлатежа = НайденныйДок.НазначениеПлатежа;

                //Если ИдКонф <> "UT_3" И ИдКонф <> "ERP" Тогда
                Если ИдКонф <> "UT_3" И ИдКонф <> "BASC" Тогда
                    Попытка
                        НоваяСтрока.СуммаНДС = НайденныйДок.РасшифровкаПлатежа.Итог("СуммаНДС");
                    Исключение
                        // ERP2
                    КонецПопытки
                КонецЕсли;    
                
            КонецЕсли;
            
        Иначе //заполняем все сами
            
            Если НоваяСтрока.ВидДокумента <> "Перемещение ДС" Тогда
                Если Не ЗначениеЗаполнено(НоваяСтрока.ВидОперации) Тогда
                    НоваяСтрока.ВидОперации = имОпределитьВидОперацииПлатежки(СтрокаПлатеж.ТипДока, СтрокаПлатеж.ЭтоПриход);//!!!!!
                КонецЕсли;    
            КонецЕсли;
            
            СтруктураДоговора = Новый Структура;
            СтруктураДоговора.Вставить("Организация", НоваяСтрока.Организация);
            
            НоваяСтрока.ДоговорКонтрагента = НайтиСоздатьДоговорКонтрагента(НоваяСтрока.Контрагент, НЕ Исходяший, СтруктураДоговора);
            НоваяСтрока.НазначениеПлатежа = СтрокаПлатеж.НазначениеПлатежа;

            //Если ИдКонф <> "UT_3" И ИдКонф <> "ERP" Тогда 
            Если ИдКонф <> "UT_3" И ИдКонф <> "BASC" Тогда
                НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС(СтрокаПлатеж.НазначениеПлатежа);
                НоваяСтрока.СуммаНДС = ПолучитьСуммуНДС(НоваяСтрока.СуммаДокумента, НоваяСтрока.СтавкаНДС);
            КонецЕсли;    
            
        КонецЕсли;

        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        
    КонецЦикла;
    
    ИмпортПлатежныеДокументы.Сортировать("Дата");
    
КонецПроцедуры //импЗаполнитьПлатежныеДокументы()

Функция ЛокализироватьВидДокумента(ВидДокумента)
    
    //"Расх. со счета" 
    //"Пост. на счет"
    //"Спис. со счета" 
    //"Перемещение ДС"
    //"Банківська виписка"
         
    Если ВидДокумента = "Перемещение ДС" Тогда
        Возврат НСтр("ru = 'Перемещение ДС'; uk = 'Переміщення коштів'");         
    КонецЕсли;
    
    Если ВидДокумента = "Расх. со счета" Тогда
        Возврат НСтр("ru = 'Расх. со счета'; uk = 'Витрата з рах.'");         
    КонецЕсли;
    
    Если ВидДокумента = "Спис. со счета" Тогда
        Возврат НСтр("ru = 'Спис. со счета'; uk = 'Списання з рах.'");         
    КонецЕсли;
    
    Если ВидДокумента = "Пост. на счет" Тогда
        Возврат НСтр("ru = 'Пост. на счет'; uk = 'Надходження на рах.'");         
    КонецЕсли;

    Если ВидДокумента = "Банківська виписка" Тогда
        Возврат НСтр("ru = 'Банковская виписка'; uk = 'Банківська виписка'");         
    КонецЕсли;
    
    Возврат ВидДокумента;
    
КонецФункции

Функция ЭтоТранзитныйСчет(НомерСчета)
    
    //Если Лев(НомерСчета, 4) = "2924" Тогда
    //    Возврат Истина;
    //КонецЕсли;
    КопияСчета = ПреобразоватьНомерСчетаИзФорматаIBAN(НомерСчета);
    
    //Если Лев(КопияСчета, 4) = "2900" Тогда
    //    Возврат Истина;
    //КонецЕсли;
    
    Если Лев(КопияСчета, 4) = "2902" Тогда
        Возврат Истина;
    КонецЕсли;
    
    Если Лев(КопияСчета, 4) = "2909" Тогда
        Возврат Истина;
    КонецЕсли;
    
    Если Лев(КопияСчета, 4) = "3678" Тогда
        Возврат Истина;
    КонецЕсли;
    
    Если Лев(КопияСчета, 4) = "3615" Тогда
        Возврат Истина;
    КонецЕсли;
    
    //Если Лев(НомерСчета, 4) = "7020" Тогда
    //    Возврат Истина;
    //КонецЕсли;
    //
    
    Если Лев(КопияСчета, 4) = "2608" Тогда
        Возврат Истина;
    КонецЕсли;
    
    Если Лев(КопияСчета, 4) = "2618" Тогда
        Возврат Истина;
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции
    
Функция ПолучитьИмяИВидДокумента(СтрокаПлатежа)
    
    Исходяший = НЕ СтрокаПлатежа.ЭтоПриход;
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
        ИмяДокумента = ?(Исходяший, "РасходСоСчета", "ПоступлениеНаСчет");
        ВидДокумента = ?(Исходяший, "Расх. со счета", "Пост. на счет");
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        ИмяДокумента = ?(Исходяший, "СписаниеСРасчетногоСчета", "ПоступлениеНаРасчетныйСчет");
        ВидДокумента = ?(Исходяший, "Спис. со счета", "Пост. на счет");
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        ИмяДокумента = ?(Исходяший, "СписаниеБезналичныхДенежныхСредств", "ПоступлениеБезналичныхДенежныхСредств");
        ВидДокумента = ?(Исходяший, "Спис. со счета", "Пост. на счет");    
    КонецЕсли;

    //Если ИНН = СтрокаПлатежа.КодКонтрагента ИЛИ КодПоЕДРПОУ = СтрокаПлатежа.КодКонтрагента Тогда
    //Если (ИНН = СтрокаПлатежа.КодКонтрагента ИЛИ КодПоЕДРПОУ = СтрокаПлатежа.КодКонтрагента) И НЕ ЭтоТранзитныйСчет(СтрокаПлатежа.СчетКонтрагента) Тогда
    //Если СтрокаПлатежа.ЭтоПеремещение Тогда//***ЭтоПеремещение - Совпадают реквизиты документов "Референс", "ТипДока", "НомерПлатежа"

    Если (СтрокаПлатежа.ЭтоПеремещение) ИЛИ ((СтрокаПлатежа.КодНаш = СтрокаПлатежа.КодКонтрагента ИЛИ СтрокаПлатежа.КодНаш = СтрокаПлатежа.КодКонтрагента) И (НЕ ЭтоТранзитныйСчет(СтрокаПлатежа.СчетКонтрагента) И НЕ ЭтоТранзитныйСчет(СтрокаПлатежа.РСчет))) Тогда
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            ИмяДокумента = "ПеремещениеДС";
            ВидДокумента = "Перемещение ДС";
        ИначеЕсли ИдКонф = "OSMD" Тогда
            ИмяДокумента = "ПеремещениеДенежныхСредств";
            ВидДокумента = "Перемещение ДС";    
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            ИмяДокумента = "СписаниеСРасчетногоСчета";
            ВидДокумента = "Перемещение ДС";    
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            ИмяДокумента = "СписаниеБезналичныхДенежныхСредств";
            ВидДокумента = "Перемещение ДС";        
        КонецЕсли;    
    
    КонецЕсли;
    
    Если ИдКонф = "KUBU" Тогда
        ИмяДокумента = "БанковскаяВыписка";
        ВидДокумента = "Банківська виписка";    
    КонецЕсли;
    
    СтруктураДок = Новый Структура;
    СтруктураДок.Вставить("ИмяДокумента", ИмяДокумента);
    СтруктураДок.Вставить("ВидДокумента", ВидДокумента);
    
    Возврат СтруктураДок;
    
КонецФункции

Функция НайтиВалюту(Знач ТекстВалюта, СообщатьОшибку = Истина)
    
    Если НЕ ЗначениеЗаполнено(ТекстВалюта) Тогда
        ТекстВалюта = "UAH"; //по умолчанию гривна будет
    КонецЕсли;
    
    Если ТекстВалюта = "UAH" Тогда
        Валюта = Справочники.Валюты.НайтиПоКоду("980");
    ИначеЕсли ТекстВалюта = "USD" Тогда
        Валюта = Справочники.Валюты.НайтиПоКоду("840");
    ИначеЕсли ТекстВалюта = "EUR" Тогда        
        Валюта = Справочники.Валюты.НайтиПоКоду("978");
    ИначеЕсли ТекстВалюта = "RUR" ИЛИ ТекстВалюта = "RUB" Тогда        
        Валюта = Справочники.Валюты.НайтиПоКоду("643");    
    ИначеЕсли ЗначениеЗаполнено(ТекстВалюта) Тогда
        
        Валюта = Справочники.Валюты.НайтиПоНаименованию(ТекстВалюта);
        
        Если Валюта.Пустая() Тогда
            Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(ТекстВалюта));    
        КонецЕсли;
    Иначе
        Валюта = Справочники.Валюты.ПустаяСсылка();
    КонецЕсли;
    
    Если Валюта.Пустая() И СообщатьОшибку Тогда
        СообщениеПользователю(НСтр("ru = 'Внимание!!! При загрузке данных не найденна валюта '; uk = 'Увага!!! При завантаженні данних не знайдена валюта ' ") + ТекстВалюта);
    КонецЕсли;
    
    Возврат Валюта;
    
КонецФункции //НайтиВалюту()

Процедура ЗаполнитьИменаПолейПоискаПоТекущейКонфигурации(ИмяДокумента, ВидДокумента)

    Если ИмяДокумента = "ПеремещениеДС" ИЛИ ИмяДокумента = "ПеремещениеДенежныхСредств" Тогда
        РеквизитСчетаКонтрагента = "БанковскийСчетПолучатель";
    Иначе    
        РеквизитСчетаКонтрагента = "СчетКонтрагента";
    КонецЕсли;
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если ВидДокумента = "Перемещение ДС" Тогда
            РеквизитСчетаКонтрагента = "БанковскийСчетПолучатель";    
        Иначе    
            РеквизитСчетаКонтрагента = "БанковскийСчетКонтрагента";        
        КонецЕсли;    
    КонецЕсли;    
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
        РеквизитСчетОрганизации = "БанковскийСчет";    
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        РеквизитСчетОрганизации = "СчетОрганизации";        
    КонецЕсли;

    ЗаполнитьПоляПоискаПоКонфигурации("НомерСчетаОрганизации", РеквизитСчетОрганизации + ".НомерСчета"); 
    ЗаполнитьПоляПоискаПоКонфигурации("НомерСчетаКонтрагента", РеквизитСчетаКонтрагента + ".НомерСчета");
    
    //?(ЗначениеЗаполнено(НоваяСтрока.БанковскийСчет)," ПлатежныеДокументы." + РеквизитСчетОрганизации + " = &БанковскийСчет ", "") 
    //+ ?(ИдКонф = "OSMD", " ИЛИ ", 
    //" И (ПлатежныеДокументы." + РеквизитСчетаКонтрагента + ".НомерСчета = &СчетКонтрагента ИЛИ ПлатежныеДокументы." + РеквизитСчетаКонтрагента + ".НомерСчета is null)) ИЛИ (") + 
    //?(ИмяДокумента = "ПеремещениеДС" ИЛИ ИмяДокумента = "ПеремещениеДенежныхСредств", "ПлатежныеДокументы.БанковскийСчет.НомерСчета = &СчетКонтрагента И ПлатежныеДокументы." + РеквизитСчетаКонтрагента + " = &БанковскийСчет", " ЛОЖЬ ") 
    //+ " ))
    //|    И ПлатежныеДокументы.СуммаДокумента = &СуммаДокумента 

КонецПроцедуры

Процедура ЗаполнитьПоляПоискаПоКонфигурации(ИмяПараметраВЗапросе, ИмяПоляВКонфигурации)
    
    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("ИмяПараметраВЗапросе", ИмяПараметраВЗапросе);
 

    НайденныеСтроки = ПоляДляПоискаПлатежей.НайтиСтроки(ПараметрыОтбора);
    Для Каждого Строка Из НайденныеСтроки Цикл
        Строка.ИмяПоляВКонфигурации = ИмяПоляВКонфигурации;
    КонецЦикла;
    
КонецПроцедуры

Процедура НайтиПлатежныйДокументПоПолямПоиска(ВходящиеПараметры, НоваяСтрока)            
        
    ИмяДокумента = ВходящиеПараметры.ИмяДокумента;    
    
    Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда        
        Если ИмяДокумента = "ПеремещениеДС" Тогда //в бухгалтерии нет перемещения
            ИмяДокумента = "СписаниеСРасчетногоСчета";    
        КонецЕсли;    
    КонецЕсли;

    РеквизитДаты = "Дата"; //поиск всегда по дате документа, на начало дня
    
    Если ИмяДокумента = "ПеремещениеДС" ИЛИ ИмяДокумента = "ПеремещениеДенежныхСредств" Тогда
        //РеквизитДаты = "Дата";
        РеквизитНомера = "Номер";
        НомерДляПоискаДок = "";
    Иначе    
        //РеквизитДаты = "ДатаВходящегоДокумента";
        РеквизитНомера = "НомерВходящегоДокумента";
        НомерДляПоискаДок = СокрЛП(ВходящиеПараметры.ВходящийНомер);
        ЗаполнитьПоляПоискаПоКонфигурации("ВходящийНомер", РеквизитНомера);        
    КонецЕсли;
    
    ЗаполнитьИменаПолейПоискаПоТекущейКонфигурации(ИмяДокумента, ВходящиеПараметры.ВидДокумента);
    
    ЗапросПоискаДокумента = Новый Запрос;
        
    УсловияПоискаПоПолям = "";    
    Для Каждого ПолеПараметра Из ПоляДляПоискаПлатежей Цикл
        
        Если НЕ ПолеПараметра.Использовать Тогда
            Продолжить;
        КонецЕсли;
        
        Попытка
            
            Если НЕ ЗначениеЗаполнено(ПолеПараметра.ИмяПоляВКонфигурации) Тогда
                
                Если РежимОтладки Тогда
                    СообщениеПользователю(НСтр("ru = 'Не заполнено имя поля реквизита для конфигурации '; uk = 'Не заповнено ім'я поля реквізита для конфігурації '")
                        + ИдКонф + НСтр("ru = ' реквизит '; uk = ' реквізит '") + ПолеПараметра.ИмяПараметраВЗапросе, Ложь);     
                КонецЕсли;
                
                Продолжить;
                
            КонецЕсли;            
                
            Если ПолеПараметра.ИмяПоляВКонфигурации <> "Дата" И Метаданные.Документы[ИмяДокумента].Реквизиты.Найти(СтрЗаменить(ПолеПараметра.ИмяПоляВКонфигурации, ".НомерСчета", "")) = Неопределено Тогда
                
                Если РежимОтладки Тогда
                    СообщениеПользователю(НСтр("ru = 'В метаданных документа '; uk = 'В метаданих документа '") + ИмяДокумента
                        + НСтр("ru = ' не найден реквизит '; uk = ' не знайдений реквізит '") + ПолеПараметра.ИмяПоляВКонфигурации, Ложь);     
                КонецЕсли;
            
                Продолжить;
                
            КонецЕсли;
            
            ЗначениеПараметра = ВходящиеПараметры[ПолеПараметра.ИмяПараметраВЗапросе];
            ЗапросПоискаДокумента.УстановитьПараметр(ПолеПараметра.ИмяПараметраВЗапросе, ЗначениеПараметра);
            
            Если ПолеПараметра.ИмяПараметраВЗапросе = "ДатаПлатежа" Тогда //для даты нужно добавить функцию НАЧАЛОДНЯ
                УсловияПоискаПоПолям = УсловияПоискаПоПолям + " И НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ)" + " = &" + ПолеПараметра.ИмяПараметраВЗапросе;
            ИначеЕсли ПолеПараметра.ИмяПараметраВЗапросе = "НазначениеПлатежа" Тогда //для строк неограниченной длины
                УсловияПоискаПоПолям = УсловияПоискаПоПолям + " И ВЫРАЗИТЬ(ПлатежныеДокументы.НазначениеПлатежа КАК СТРОКА(250))" + " = &" + ПолеПараметра.ИмяПараметраВЗапросе;
            Иначе    
                УсловияПоискаПоПолям = УсловияПоискаПоПолям + " И ПлатежныеДокументы." + ПолеПараметра.ИмяПоляВКонфигурации + " = &" + ПолеПараметра.ИмяПараметраВЗапросе;
            КонецЕсли;
            
        Исключение
            СообщениеПользователю(НСтр("ru = 'Не найдено поле поиска по входящему параметру '; uk = 'Не знайдено поле пошуку по вхідному параметру '") + ПолеПараметра.ИмяПараметраВЗапросе + Символы.ПС + ОписаниеОшибки(), Ложь);
        КонецПопытки;

    КонецЦикла;
        
        
    // При наличии нескольких предпочтение отдается первому, с совпадающим номером счета.
    ЗапросПоискаДокумента.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежныеДокументы.Ссылка,
    |    ПлатежныеДокументы.Проведен,
    |    ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
    |    ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
    |    ПлатежныеДокументы.Организация
    |ИЗ
    |    Документ." + ИмяДокумента + " КАК ПлатежныеДокументы
    |ГДЕ
    
    | НЕ ПлатежныеДокументы.ПометкаУдаления " + УсловияПоискаПоПолям; 
    
    
    Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
    
    КоличествоДок = 0;
    ТекстПереченьДокументов = "";
    
    Пока Результат.Следующий() Цикл
        
        ВыборкаНомер = СокрЛП(Результат.Номер);
        //ВыборкаНомер = Прав(СокрЛП(?(СтрДлина(ВыборкаНомер) > 10,СтрЗаменить(ВыборкаНомер,"-",""),ВыборкаНомер)),10);
        //Если ВыборкаНомер = НомерДляПоискаДок ИЛИ НЕ ЗначениеЗаполнено(НомерДляПоискаДок) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаНомер) Тогда
        Если (ПоискПоВходящемуНомеру И (Найти(ВыборкаНомер, НомерДляПоискаДок) > 0 ИЛИ НЕ ЗначениеЗаполнено(НомерДляПоискаДок) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаНомер))) ИЛИ НЕ ПоискПоВходящемуНомеру Тогда
            Если КоличествоДок = 0 Тогда
                
                НоваяСтрока.СсылкаНаДокумент = Результат.Ссылка;
                НоваяСтрока.Номер = Результат.Ссылка.Номер;
                НоваяСтрока.Дата = Результат.Дата;
                
                Если Результат.Проведен Тогда
                    НоваяСтрока.ИдентификаторКартинки = 0;
                Иначе
                    НоваяСтрока.ИдентификаторКартинки = 2;
                КонецЕсли;
                
            КонецЕсли;
            ТекстПереченьДокументов = ТекстПереченьДокументов + ?(ЗначениеЗаполнено(ТекстПереченьДокументов), ", ", "") + Результат.Ссылка;
            КоличествоДок = КоличествоДок + 1;

        Иначе
            Если ЗначениеЗаполнено(НомерДляПоискаДок) И РежимОтладки Тогда
                СтрокаЗамечание = НСтр("ru = 'Не найден документ с номером - (%НомерДляПоискаДок%)'; uk = 'Не вдалося знайти документ з номером - (%НомерДляПоискаДок%)'");
                СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%НомерДляПоискаДок%", НомерДляПоискаДок);
                СообщениеПользователю(СтрокаЗамечание, Ложь);
            КонецЕсли;

        КонецЕсли;
    КонецЦикла;
    
    Если КоличествоДок > 1 Тогда
    
        СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) платежных документов возможно дублирующих друг друга!'; uk = 'В інформаційній базі знайдено кілька (%КоличествоДок%) платіжних документів можливо дублюючих один одного!'");
        СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
        Если ЗначениеЗаполнено(ТекстПереченьДокументов) Тогда
            СообщениеПользователю(НСтр("ru = 'Перечень возможно дублирующих документов: '; uk = 'Перелік можливо дублюючих документів: '") + ТекстПереченьДокументов, Ложь)
        КонецЕсли;

        Для Каждого ПолеПараметра Из ПоляДляПоискаПлатежей Цикл
            
            Если НЕ ПолеПараметра.Использовать Тогда
                Продолжить;
            КонецЕсли;
            
            Попытка
                СтрокаЗамечание = СтрокаЗамечание + " " + ПолеПараметра.ИмяПоля + " - " + ВходящиеПараметры[ПолеПараметра.ИмяПараметраВЗапросе];
            Исключение
            КонецПопытки;
            
        КонецЦикла;
        
        СообщениеПользователю(СтрокаЗамечание, Ложь);
        
    КонецЕсли;
    
КонецПроцедуры //НайтиПлатежныйДокументПоПолямПоиска()


Процедура НайтиПлатежныйДокумент(СтрокаПлатеж, ИмяДокумента, ДатаПлатежки , НоваяСтрока)            
        
    лИмяДокумента = ИмяДокумента;
    
    Если ИмяДокумента = "ПеремещениеДС" ИЛИ ИмяДокумента = "ПеремещениеДенежныхСредств" Тогда
        РеквизитСчетаКонтрагента = "БанковскийСчетПолучатель";
        РеквизитДаты = "Дата";
        РеквизитНомера = "Номер";
        НомерДляПоискаДок = "";
    Иначе    
        РеквизитСчетаКонтрагента = "СчетКонтрагента";
        РеквизитДаты = "ДатаВходящегоДокумента";
        РеквизитНомера = "НомерВходящегоДокумента";
        НомерДляПоискаДок = СокрЛП(СтрокаПлатеж.НомерПлатежа);
    КонецЕсли;    
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если НоваяСтрока.ВидДокумента = "Перемещение ДС" Тогда
            РеквизитСчетаКонтрагента = "БанковскийСчетПолучатель";    
        Иначе    
            РеквизитСчетаКонтрагента = "БанковскийСчетКонтрагента";        
        КонецЕсли;    
    КонецЕсли;    
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
        РеквизитСчетОрганизации = "БанковскийСчет";    
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        РеквизитСчетОрганизации = "СчетОрганизации";
        
        Если ИмяДокумента = "ПеремещениеДС" Тогда //в бухгалтерии нет перемещения
            лИмяДокумента = "СписаниеСРасчетногоСчета";    
        КонецЕсли;
        
    КонецЕсли;

    Если ИдКонф = "BASC" Тогда
        РеквизитСчетаКонтрагента = "СчетКонтрагента"
    КонецЕсли;

    // При наличии нескольких предпочтение отдается первому, с совпадающим номером счета.
    ЗапросПоискаДокумента = Новый Запрос;
    ЗапросПоискаДокумента.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежныеДокументы.Ссылка,
    |    ПлатежныеДокументы.Проведен,
    |    ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
    |    ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
    |    ПлатежныеДокументы.Организация
    |ИЗ
    |    Документ." + лИмяДокумента + " КАК ПлатежныеДокументы
    |ГДЕ
    |    (НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок ИЛИ НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ)= &ДатаДок ) И ((" +
    ?(ЗначениеЗаполнено(НоваяСтрока.БанковскийСчет)," ПлатежныеДокументы." + РеквизитСчетОрганизации + " = &БанковскийСчет ", " Истина ") + ?(ИдКонф = "OSMD", " ИЛИ ", 
    " И (ПлатежныеДокументы." + РеквизитСчетаКонтрагента + ".НомерСчета = &СчетКонтрагента ИЛИ ПлатежныеДокументы." + РеквизитСчетаКонтрагента + ".НомерСчета is null)) ИЛИ (") + 
    ?(ИмяДокумента = "ПеремещениеДС" ИЛИ ИмяДокумента = "ПеремещениеДенежныхСредств", "ПлатежныеДокументы.БанковскийСчет.НомерСчета = &СчетКонтрагента И ПлатежныеДокументы." + РеквизитСчетаКонтрагента + " = &БанковскийСчет", " ЛОЖЬ ") 
    + " ))
    |    И ПлатежныеДокументы.СуммаДокумента = &СуммаДокумента 
    |    И НЕ ПлатежныеДокументы.ПометкаУдаления"; 
    //|    И ПлатежныеДокументы.Организация = &Организация";
    
    ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", НачалоДня(ДатаПлатежки));
    ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента", НоваяСтрока.СуммаДокумента);
    //ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
    ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", НоваяСтрока.БанковскийСчет);
    ЗапросПоискаДокумента.УстановитьПараметр("СчетКонтрагента", НоваяСтрока.СчетКонтрагента.НомерСчета);
    
    Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
    
    //ДлинаНомера = СтрДлина(НомерДляПоискаДок);
    КоличествоДок = 0;
    ТекстПереченьДокументов = "";
    
    Пока Результат.Следующий() Цикл
        
        ВыборкаНомер = СокрЛП(Результат.Номер);
        //ВыборкаНомер = Прав(СокрЛП(?(СтрДлина(ВыборкаНомер) > 10,СтрЗаменить(ВыборкаНомер,"-",""),ВыборкаНомер)),10);//kav
        //Если ВыборкаНомер = НомерДляПоискаДок ИЛИ НЕ ЗначениеЗаполнено(НомерДляПоискаДок) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаНомер) Тогда//kav
        Если (ПоискПоВходящемуНомеру И (Найти(ВыборкаНомер, НомерДляПоискаДок) > 0 ИЛИ НЕ ЗначениеЗаполнено(НомерДляПоискаДок) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаНомер))) ИЛИ НЕ ПоискПоВходящемуНомеру Тогда//kav

            Если КоличествоДок = 0 Тогда
                
                НоваяСтрока.СсылкаНаДокумент = Результат.Ссылка;
                НоваяСтрока.Номер = Результат.Ссылка.Номер;
                НоваяСтрока.Дата = Результат.Дата;
                
                Если Результат.Проведен Тогда
                    НоваяСтрока.ИдентификаторКартинки = 0;
                Иначе
                    НоваяСтрока.ИдентификаторКартинки = 2;
                КонецЕсли;
                
            КонецЕсли;
            ТекстПереченьДокументов = ТекстПереченьДокументов + ?(ЗначениеЗаполнено(ТекстПереченьДокументов), ", ", "") + Результат.Ссылка;
            КоличествоДок = КоличествоДок + 1;

        Иначе
            
            Если ЗначениеЗаполнено(НомерДляПоискаДок) И РежимОтладки Тогда
                СтрокаЗамечание = НСтр("ru = 'Не найден документ с номером - (%НомерДляПоискаДок%)'; uk = 'Не вдалося знайти документ з номером - (%НомерДляПоискаДок%)'");
                СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%НомерДляПоискаДок%", НомерДляПоискаДок);
                СообщениеПользователю(СтрокаЗамечание, Ложь);
            КонецЕсли;

        КонецЕсли;
    КонецЦикла;
    
    Если КоличествоДок > 1 Тогда
        СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) платежных документов возможно дублирующих друг друга! Дата - " + ДатаПлатежки + " Контрагент - " + СтрокаПлатеж.НаименованиеКонтрагента + " , счет - " + НоваяСтрока.СчетКонтрагента.НомерСчета + " '; 
            |uk = 'В інформаційній базі знайдено кілька (%КоличествоДок%) платіжних документів можливо дублюючих один одного! Дата - " + ДатаПлатежки + " Контрагент - " + СтрокаПлатеж.НаименованиеКонтрагента + " , рахунок - " + НоваяСтрока.СчетКонтрагента.НомерСчета + " '");
        СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
        СообщениеПользователю(СтрокаЗамечание, Ложь);
        Если ЗначениеЗаполнено(ТекстПереченьДокументов) Тогда
            СообщениеПользователю(НСтр("ru = 'Перечень возможно дублирующих документов: '; uk = 'Перелік можливо дублюючих документів: '") + ТекстПереченьДокументов, Ложь)
        КонецЕсли
    КонецЕсли;
    
КонецПроцедуры //НайтиПлатежныйДокумент()

Функция НайтиСоздатьСчет(Владелец, МФОБанка, Знач НомерСчета, Валюта, НаимБанка, ГородБанка, Создавать = Истина)
    
    НазваниеСправочникаСчета = "БанковскиеСчета";
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
            НазваниеСправочникаСчета = "БанковскиеСчетаОрганизаций";
        Иначе
            НазваниеСправочникаСчета = "БанковскиеСчетаКонтрагентов";
        КонецЕсли;
    ИначеЕсли ИдКонф = "KUBU" Тогда
        Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
            НазваниеСправочникаСчета = "РасчетныеСчета";
        Иначе
            НазваниеСправочникаСчета = "РасчетныеСчетаКонтрагентов";
        КонецЕсли;
        НомерСчета = Число(НомерСчета);
    КонецЕсли;

    БанковскийСчетКонтр = Справочники[НазваниеСправочникаСчета].ПустаяСсылка();
    
    //ПоискПоСтаромуНомеруСчета = Метаданные.Справочники[НазваниеСправочникаСчета].Реквизиты.Найти("НомерСчетаУстаревший") <> Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    БанковскиеСчета.Ссылка КАК БанковскийСчет
        |ИЗ
        |    Справочник." + НазваниеСправочникаСчета + " КАК БанковскиеСчета
        |ГДЕ
        |    НЕ БанковскиеСчета.ПометкаУдаления
        |    И БанковскиеСчета.НомерСчета = &НомерСчета 
        //" + ?(ПоискПоСтаромуНомеруСчета, " ИЛИ НомерСчетаУстаревший = &НомерСчета ", "") + "   
        |    И БанковскиеСчета.Владелец = &Владелец";
    
    Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
    Запрос.УстановитьПараметр("Владелец", Владелец);

    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        БанковскийСчетКонтр = ВыборкаДетальныеЗаписи.БанковскийСчет;
    КонецЦикла;
    
    Если БанковскийСчетКонтр.Пустая() И ЗначениеЗаполнено(Владелец) И Создавать Тогда //создадим
        
        НовыйСчет = Справочники[НазваниеСправочникаСчета].СоздатьЭлемент();
        НовыйСчет.НомерСчета = НомерСчета;
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            НовыйСчет.СчетУчета = ПланыСчетов.Управленческий.Банк;
            НовыйСчет.ВариантВыводаМесяца = 0;
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
                НовыйСчет.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
            КонецЕсли;    
        КонецЕсли;    
        
        НовыйСчет.Владелец = Владелец;
        НовыйСчет.Банк = НайтиСоздатьБанк(МФОБанка, НаимБанка, ГородБанка);
        
        Если ИдКонф = "KUBU" Тогда
            НовыйСчет.Валюта = Валюта;    
        Иначе    
            НовыйСчет.ВидСчета = "Расчетный";
            НовыйСчет.ВалютаДенежныхСредств = Валюта;
        КонецЕсли;
        
        СтрокаНаименования = СокрЛП(НовыйСчет.НомерСчета) + ?(ЗначениеЗаполнено(НовыйСчет.Банк), ", в " + Строка(НовыйСчет.Банк), "");
        СтрокаНаименования = Лев(СтрокаНаименования, 100);
        НовыйСчет.Наименование = СтрокаНаименования;
        
        Попытка
            НовыйСчет.Записать();
            ТекстСообщения = НСтр("ru = 'В базе создан новый счет контрагента ';uk='У базі створено новий рахунок контрагента '") + НовыйСчет.Наименование + "(" + Владелец.Наименование + ")";
            СообщениеПользователю(ТекстСообщения, Ложь);
        Исключение
            ТекстСообщения = НСтр("ru = 'Ошибка при создании счета контрагента ';uk='Помилка при створенні рахунку контрагента '") + Владелец.Наименование;
            СообщениеПользователю(ТекстСообщения, Ложь);
            СообщениеПользователю(ОписаниеОшибки(), Ложь);
        КонецПопытки;    
        БанковскийСчетКонтр = НовыйСчет.Ссылка;
        
    КонецЕсли;
    
    Возврат БанковскийСчетКонтр;
    
КонецФункции //НайтиСоздатьСчет

Функция НайтиСоздатьБанк(МФО, Наименование, Город, Создавать = Истина)
    
    НазваниеСправочникаБанка = "Банки";
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        НазваниеСправочникаБанка = "КлассификаторБанков";     
    КонецЕсли;
    
    БанкОбъект = Справочники[НазваниеСправочникаБанка].НайтиПоКоду(МФО);
    
    Если (БанкОбъект.Пустая() ИЛИ БанкОбъект.ПометкаУдаления) И Создавать Тогда 
        
        БанкОбъект = Справочники[НазваниеСправочникаБанка].СоздатьЭлемент();
        БанкОбъект.Наименование = Наименование;
        БанкОбъект.Город = Город; 
        БанкОбъект.Код = МФО;
        
        Попытка
            БанкОбъект.Записать();
            ТекстСообщения = НСтр("ru='В системе создан новый  банк: ';uk='В системі створено новий банк: '") + БанкОбъект.Наименование;
            СообщениеПользователю(ТекстСообщения, Ложь);
        Исключение
            ТекстСообщения = НСтр("ru='Ошибка при создании банка: ';uk='Помилка при створенні банку: '") + БанкОбъект.Наименование;
            СообщениеПользователю(ТекстСообщения, Ложь);
            СообщениеПользователю(ОписаниеОшибки(), Ложь)
        КонецПопытки;    
        
        
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(БанкОбъект.Ссылка) И Создавать Тогда
        ТекстСообщения = НСтр("ru='Ошибка при создании банка с кодом МФО: ';uk='Помилка при створенні банку з кодом МФО: '") + МФО;
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;    
    
    Возврат БанкОбъект.Ссылка;
    
КонецФункции //НайтиСоздатьБанк

Функция ПолучитьСуммуНДС(Сумма, СтавкаНДС, СуммаВключаетНДС = Истина)
    
    лСтавка = 0;
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        лСтавка = СтавкаНДС.Ставка;    
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
        Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС0 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
            лСтавка = 0;
        ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
            лСтавка = 20;
        ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
            лСтавка = 7;
        КонецЕсли;    
    КонецЕсли;
    
    Если лСтавка = 0 Тогда
        Возврат 0;
    Иначе
        ПроцентНДС = лСтавка / 100;
        
        Если СуммаВключаетНДС Тогда
            СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
        Иначе
            СуммаНДС = Сумма * ПроцентНДС;
        КонецЕсли;
        
        Возврат СуммаНДС;
      КонецЕсли;
    
КонецФункции //ПолучитьСуммуНДС()

Функция ПрочитатьСтавкуНДС(Знач НазначениеПлатежа)
    
    НазначениеПлатежа = НРег(НазначениеПлатежа);
    НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ВК, "");
    НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ПС, "");
    НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "¶", "");
    
    Если Найти(НазначениеПлатежа, "без ндс") > 0 Или Найти(НазначениеПлатежа, "без пдв") > 0 
            ИЛИ Найти(НазначениеПлатежа, "безндс") > 0 Или Найти(НазначениеПлатежа, "безпдв") > 0 Тогда
     
         Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            
            РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
            
            Если РеквизитСтавкаНДС.Пустая() Тогда
                РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без ПДВ");    
            КонецЕсли;
            
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
            РеквизитСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
        КонецЕсли;    
        
    ИначеЕсли Найти(НазначениеПлатежа, "ндс 0") > 0 Или Найти(НазначениеПлатежа, "пдв 0") > 0 
            ИЛИ Найти(НазначениеПлатежа, "ндс - 0") > 0 Или Найти(НазначениеПлатежа, "пдв - 0") > 0
            ИЛИ Найти(НазначениеПлатежа, "ндс-0") > 0 Или Найти(НазначениеПлатежа, "пдв-0") > 0 
            ИЛИ Найти(НазначениеПлатежа, "ндс0") > 0 Или Найти(НазначениеПлатежа, "пдв0") > 0 Тогда
     
         Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
            РеквизитСтавкаНДС = Перечисления.СтавкиНДС.НДС0;    
        КонецЕсли;    
        
    ИначеЕсли Найти(НазначениеПлатежа, "не ндс") > 0 Или Найти(НазначениеПлатежа, "не пдв") > 0 
            ИЛИ Найти(НазначениеПлатежа, "нендс") > 0 Или Найти(НазначениеПлатежа, "непдв") > 0 Тогда
     
         Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не НДС");
            
            Если РеквизитСтавкаНДС.Пустая() Тогда
                РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не ПДВ");    
            КонецЕсли;
            
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
            РеквизитСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
        КонецЕсли;    
        
    Иначе
        
        ПозицияНДС = Найти(НазначениеПлатежа, "ндс") ;
        
        Если ПозицияНДС = 0 Тогда
            ПозицияНДС = Найти(НазначениеПлатежа, "пдв");
        КонецЕсли;
        
        Если ПозицияНДС = 0 Тогда
            РеквизитСтавкаНДС  = СтавкаНДС;//из реквизита обработки
        Иначе    
            ТекПоз = ПозицияНДС;
            СтрЧисел = "";
            Пока ТекПоз < СтрДлина(НазначениеПлатежа) Цикл
                
                ТекСимвол = Сред(НазначениеПлатежа,ТекПоз,1);
                
                Если Не ЗначениеЗаполнено(ТекСимвол) Тогда
                    ТекПоз = ТекПоз + 1;
                    Продолжить;    
                КонецЕсли;
                
                Попытка //пытаемся преобразовать найденный символ в число
                    ТекЧисло = Число(ТекСимвол); //получилось
                    СтрЧисел = СтрЧисел + ТекСимвол;
                Исключение
                    Если СтрЧисел <> "" Тогда //если преобразование в число не удалось, то проверяем были ли успешные попытки преобразования
                        Прервать; //если успешные попытки были, это значит что мы уже нашли нужную нам ставку
                    КонецЕсли;    
                КонецПопытки;
                
                ТекПоз = ТекПоз + 1;
                
            КонецЦикла;
            
            СтрЧисел = СтрЗаменить(СтрЧисел, "-", "");

            Если СтрЧисел = "" ИЛИ СтрДлина(СтрЧисел) > 2 Тогда //берем ставку НДС по умолчанию
                РеквизитСтавкаНДС  = СтавкаНДС;//из реквизита обработки
            Иначе
                Ставка = СтрЧисел;//ну а здесь 0% или 20% или 7% 
                
                Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                    РеквизитСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(Ставка + "%");
                ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "KUBU" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "OSMD" Тогда
                    
                    Если Ставка = "0" Тогда
                        РеквизитСтавкаНДС = Перечисления.СтавкиНДС.НДС0;
                    ИначеЕсли Ставка = "7" Тогда
                        РеквизитСтавкаНДС = Перечисления.СтавкиНДС.НДС7;
                    ИначеЕсли Ставка = "20" Тогда
                        РеквизитСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
                    КонецЕсли;
                    
                КонецЕсли;    
                
            КонецЕсли;    
        КонецЕсли;    
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(РеквизитСтавкаНДС) Тогда
        РеквизитСтавкаНДС = СтавкаНДС;
    КонецЕсли;        
    
    Возврат РеквизитСтавкаНДС;
    
КонецФункции //ПрочитатьСтавкуНДС

Функция НайтиОрганизацию(КодОрганизации, ЕслиНеНайденаБеремИзНастроекМодуля = Истина) 
            
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    Организации.Ссылка
        |ИЗ
        |    Справочник.Организации КАК Организации
        |ГДЕ
        |    Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ
        |    И НЕ Организации.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодОрганизации);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Возврат ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;

    Если ЕслиНеНайденаБеремИзНастроекМодуля Тогда
        Возврат Организация; //если не нашли. берем из настроек модуля
    Иначе
        Возврат Справочники.Организации.ПустаяСсылка()
    КонецЕсли
        
КонецФункции

// Функция выполняет поиск и создание (если необходимо) контрагента
//
// Параметры:
//  ДанныеКонтрагента - Структура - содержит структуру параметров
//        Описание струткуры:
//            КодКонтрагента             - Строка - код ЕДРПО контрагента
//          СчетКонтрагента         - Строка - номер банковского счета контрагента
//            НаименованиеКонтрагента - Строка - название контрагента
//
//  Создавать  - Булево           - содержит признак нужно ли создавать контрагента если он не найден
//  Покупатель - Булево           - признак контагента "покупатель"
//    ТаблицаКИ  - Таблица значений - таблица с контактной информацией контрагента
//        Колонки ТЗ все типа "Строка":
//            "Вид"
//            "Вулиця"
//            "Місто"
//            "Область"
//            "Індекс"
//
//    СтруктураДоговора - Структура - содержит структуру для создания договора
//        Описание струткуры:
//            ДатаДоговора  - Дата   - дата договора
//            НомерДоговора - Строка - номер договора 
//
// Возвращаемое значение:
//   - Булево - признак завершения работы функции
//
Функция НайтиСоздатьКонтрагента(ДанныеКонтрагента, Создавать = Истина, Покупатель = Истина, ТаблицаКИ = Неопределено, СтруктураДоговора = Неопределено)
    
    ИмяРеквизитаИНН = "ИНН";
    НазваниеСправочникаСчета = "БанковскиеСчета";
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда //костылики из-за "гениальности" авторов УТ 3
        ИмяРеквизитаИНН = "ИННПлательщикаНДС";    
        НазваниеСправочникаСчета = "БанковскиеСчетаКонтрагентов";
    ИначеЕсли ИдКонф = "KUBU" Тогда
        Возврат Справочники.Контрагенты.ПустаяСсылка(); //пока не делаем
        НазваниеСправочникаСчета = "РасчетныеСчетаКонтрагентов";
    КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Контрагенты.Ссылка КАК Контрагент
        |ИЗ
        |    Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |    Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ
        |    И Контрагенты.КодПоЕДРПОУ <> """"
        |    И НЕ Контрагенты.ПометкаУдаления
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |    БанковскиеСчета.Владелец.Ссылка
        |ИЗ
        |    Справочник." + НазваниеСправочникаСчета + " КАК БанковскиеСчета
        |ГДЕ
        |    БанковскиеСчета.НомерСчета = &НомерСчета
        |    И БанковскиеСчета.НомерСчета <> """"
        |    И НЕ БанковскиеСчета.Владелец.ПометкаУдаления
        |    И НЕ БанковскиеСчета.ПометкаУдаления
        |    И БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |    Контрагенты.Ссылка
        |ИЗ
        |    Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |    Контрагенты." + ИмяРеквизитаИНН + " = &ИНН
        |    И Контрагенты." + ИмяРеквизитаИНН + " <> """"
        |    И НЕ Контрагенты.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("КодПоЕДРПОУ", ДанныеКонтрагента.КодКонтрагента);
    Запрос.УстановитьПараметр("ИНН", ДанныеКонтрагента.КодКонтрагента);
    Запрос.УстановитьПараметр("НомерСчета", ДанныеКонтрагента.СчетКонтрагента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Попытка
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            Возврат ВыборкаДетальныеЗаписи.Контрагент; //возвращаем первого из найденных
        КонецЦикла;
    Исключение
    КонецПопытки;

    Если НеСоздаватьКонтрагентовАвтоматически ИЛИ НЕ Создавать Тогда
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецЕсли;
    
    //контрагент не найден, будем создавать
    НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
    НовыйЭлемент.Наименование = ДанныеКонтрагента.НаименованиеКонтрагента;
    НовыйЭлемент.НаименованиеПолное = ДанныеКонтрагента.НаименованиеКонтрагента;
    
    Если ИдКонф <> "UT_3" И ИдКонф <> "ERP" Тогда
        НовыйЭлемент.Родитель = ГруппаДляНовыхКонтрагентов;
        НовыйЭлемент.Комментарий = НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'");
    КонецЕсли;    
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        КонтрагентСсылка = UNF_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора);
    ИначеЕсли ИдКонф = "OSMD" Тогда
        КонтрагентСсылка = OSMD_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора);
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        КонтрагентСсылка = BP_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора);
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        КонтрагентСсылка = UT_3_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора);    
    КонецЕсли;    
    
    Возврат КонтрагентСсылка;
    
КонецФункции //НайтиСоздатьКонтрагента

Функция UNF_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора)    
    
    НовыйЭлемент.ВестиРасчетыПоДоговорам = Истина;
    
    Если СтрДлина(ДанныеКонтрагента.КодКонтрагента) = 12 Тогда
        
        Попытка
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
        Исключение
        КонецПопытки;
        
        Попытка
            НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
        Исключение
        КонецПопытки;
        
        НовыйЭлемент.ИНН = ДанныеКонтрагента.КодКонтрагента;
        
    Иначе
        
        Попытка
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
        Исключение
        КонецПопытки;    
        
        Попытка
            НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
        Исключение
        КонецПопытки;
        
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодКонтрагента;
        
    КонецЕсли;
    
    Попытка
        НовыйЭлемент.Покупатель = Покупатель;
        НовыйЭлемент.Поставщик = НЕ Покупатель;
    Исключение
    КонецПопытки;
    
    //добавлено для загрузки фин. док.
    Если ДанныеКонтрагента.Свойство("ЮрФиз") Тогда
        Если ДанныеКонтрагента.ЮрФиз = "Юридична" Тогда
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;    
        ИначеЕсли ДанныеКонтрагента.ЮрФиз = "Фізична" Тогда     
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;    
        КонецЕсли;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодИНН") Тогда
        НовыйЭлемент.ИНН = ДанныеКонтрагента.ИНН;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодПоЕДРПОУ") Тогда
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодПоЕДРПОУ;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("НомерСвидетельства") Тогда
        НовыйЭлемент.НомерСвидетельства = ДанныеКонтрагента.НомерСвидетельства;
    КонецЕсли;
    
    
    НовыйЭлемент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
    НовыйЭлемент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
    НовыйЭлемент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
    НовыйЭлемент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
    
    Попытка
        НовыйЭлемент.СтранаРегистрации = Справочники.СтраныМира.Украина;
    Исключение
    КонецПопытки;
    
    Попытка
        НовыйЭлемент.Записать();
        ТекстСообщения = НСтр("ru = 'В базе создан новый контрагент ';uk='У базі створено новий контрагент '") + НовыйЭлемент.Наименование;
        СообщениеПользователю(ТекстСообщения, Ложь);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при создании контрагента ';uk='Помилка при створенні контрагента '");
        СообщениеПользователю(ТекстСообщения, Ложь);
        СообщениеПользователю(ОписаниеОшибки(), Ложь);
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецПопытки;    
    
    Попытка
        Если ТаблицаКИ <>  Неопределено Тогда //заполняем контактную информацию, добавлено для загрузки фин. док.
            Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
                
                НоваяСтрокаКИ = НовыйЭлемент.КонтактнаяИнформация.Добавить();
                
                Представление = СтрокаКИ.Вулиця + "," +  СтрокаКИ.Місто + "," + СтрокаКИ.Область + "," + СтрокаКИ.Індекс;
                
                СтруктураСтроки = Новый Структура("Тип, Страна, Вид, Представление, Регион, Город, ЗначенияПолей",
                Перечисления.ТипыКонтактнойИнформации.Адрес, "Украина", СтрокаКИ.Вид, Представление, "", "", "");
                
                ЗначениеПолей = Новый СписокЗначений;
                ЗначениеПолей.Добавить(СтрокаКИ.Вулиця, "Улица");
                ЗначениеПолей.Добавить(СтрокаКИ.Місто, "Город");
                ЗначениеПолей.Добавить(СтрокаКИ.Область, "Регион");
                ЗначениеПолей.Добавить(СтрокаКИ.Індекс, "Индекс");
                ЗначениеПолей.Добавить("Украина", "Страна");
                
                ОбъектXDTOКИ = "";
                
                Попытка
                    Выполнить("ОбъектXDTOКИ = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(ЗначениеПолей, СтруктураСтроки.Представление, СтруктураСтроки.Тип)");
                Исключение    
                    Выполнить("ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(ЗначениеПолей, СтруктураСтроки.Представление, СтруктураСтроки.Тип)");
                КонецПопытки;    
                
                Попытка
                    Выполнить("СтруктураСтроки.Представление = КонтактнаяИнформацияСлужебный.СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтрокаКИ.Вид)");
                Исключение
                    Выполнить("СтруктураСтроки.Представление = УправлениеКонтактнойИнформациейСлужебный.СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтрокаКИ.Вид)");
                КонецПопытки;
                
                //Запишем уточнённое представление контактной информации
                Попытка
                    Выполнить("КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтруктураСтроки.Представление)");
                Исключение
                    Выполнить("СтруктураСтроки.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ОбъектXDTOКИ)");
                КонецПопытки;    
                
                //Приводим объект XDTO в XML-строку для записи в табличную часть
                Попытка
                    Выполнить("СтруктураСтроки.ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектXDTOКИ)");
                Исключение
                    Выполнить("СтруктураСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ)");
                КонецПопытки;    
                
                //Запись сериализованной информации в табличную часть
                ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтруктураСтроки);
                
            КонецЦикла;
        КонецЕсли;
    Исключение
        ТекстСообщения = НСтр("ru='Ошибка при записи контактной информации контрагента ';uk='Помилка при запису контактної інформації контрагента '") + Контрагент;
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь            
    КонецПопытки;
    
    Попытка
        НовыйЭлемент.ДоговорПоУмолчанию = НайтиСоздатьДоговорКонтрагента(НовыйЭлемент.Ссылка, Покупатель, СтруктураДоговора);
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
    Возврат НовыйЭлемент.Ссылка;
    
КонецФункции 

Функция OSMD_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора)
    
    Если СтрДлина(ДанныеКонтрагента.КодКонтрагента) = 12 Тогда
        
        Попытка
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
        Исключение
        КонецПопытки;
        
        НовыйЭлемент.ИНН = ДанныеКонтрагента.КодКонтрагента;
        
    Иначе
        
        Попытка
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
        Исключение
        КонецПопытки;    
        
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодКонтрагента;
        
    КонецЕсли;    
    
    Если ДанныеКонтрагента.Свойство("КодИНН") Тогда
        НовыйЭлемент.ИНН = ДанныеКонтрагента.ИНН;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодПоЕДРПОУ") Тогда
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодПоЕДРПОУ;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("НомерСвидетельства") Тогда
        НовыйЭлемент.НомерСвидетельства = ДанныеКонтрагента.НомерСвидетельства;
    КонецЕсли;
    
    Попытка
        НовыйЭлемент.Записать();
        ТекстСообщения = НСтр("ru = 'В базе создан новый контрагент ';uk='У базі створено новий контрагент '") + НовыйЭлемент.Наименование;
        СообщениеПользователю(ТекстСообщения, Ложь);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при создании контрагента ';uk='Помилка при створенні контрагента '");
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецПопытки;    
    
    НовыйЭлемент.ДоговорПоУмолчанию = НайтиСоздатьДоговорКонтрагента(НовыйЭлемент.Ссылка, Покупатель, СтруктураДоговора);

    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
    Возврат НовыйЭлемент.Ссылка;
    
КонецФункции

Функция BP_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора)    
    
    Если СтрДлина(ДанныеКонтрагента.КодКонтрагента) = 12 Тогда
        НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
        НовыйЭлемент.ИНН = ДанныеКонтрагента.КодКонтрагента; 
    Иначе
        НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодКонтрагента;
    КонецЕсли;
    
    //добавлено для загрузки фин. док.
    
    Если ДанныеКонтрагента.Свойство("ЮрФиз") Тогда
        Если ДанныеКонтрагента.ЮрФиз = "Юридична" Тогда
            НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;    
        ИначеЕсли ДанныеКонтрагента.ЮрФиз = "Фізична" Тогда     
            НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;    
        КонецЕсли;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодИНН") Тогда
        НовыйЭлемент.ИНН = ДанныеКонтрагента.ИНН;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодПоЕДРПОУ") Тогда
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодПоЕДРПОУ;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("НомерСвидетельства") Тогда
        НовыйЭлемент.НомерСвидетельства = ДанныеКонтрагента.НомерСвидетельства;
    КонецЕсли;
    
    Попытка
        НовыйЭлемент.Записать();
        ТекстСообщения = НСтр("ru = 'В базе создан новый контрагент ';uk='У базі створено новий контрагент '") + НовыйЭлемент.Наименование;
        СообщениеПользователю(ТекстСообщения, Ложь);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при создании контрагента ';uk='Помилка при створенні контрагента '");
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецПопытки;    
    
    Попытка
        Если ТаблицаКИ <>  Неопределено Тогда //заполняем контактную информацию, добавлено для загрузки фин. док.
            Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
                
                НоваяСтрокаКИ = НовыйЭлемент.КонтактнаяИнформация.Добавить();
                
                Представление = СтрокаКИ.Вулиця + "," +  СтрокаКИ.Місто + "," + СтрокаКИ.Область + "," + СтрокаКИ.Індекс;
                
                СтруктураСтроки = Новый Структура("Тип, Страна, Вид, Представление, Регион, Город, ЗначенияПолей",
                Перечисления.ТипыКонтактнойИнформации.Адрес, "Украина", СтрокаКИ.Вид, Представление, "", "", "");
                
                ЗначениеПолей = Новый СписокЗначений;
                ЗначениеПолей.Добавить(СтрокаКИ.Вулиця, "Улица");
                ЗначениеПолей.Добавить(СтрокаКИ.Місто, "Город");
                ЗначениеПолей.Добавить(СтрокаКИ.Область, "Регион");
                ЗначениеПолей.Добавить(СтрокаКИ.Індекс, "Индекс");
                ЗначениеПолей.Добавить("Украина", "Страна");
                
                ОбъектXDTOКИ = "";
                
                Попытка
                    Выполнить("ОбъектXDTOКИ = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(ЗначениеПолей, СтруктураСтроки.Представление, СтруктураСтроки.Тип)");
                Исключение    
                    //    BSB, BASC, ...
                    Выполнить("ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(ЗначениеПолей, СтруктураСтроки.Представление, СтруктураСтроки.Тип)");
                КонецПопытки;    
                
                Попытка
                    Выполнить("СтруктураСтроки.Представление = КонтактнаяИнформацияСлужебный.СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтрокаКИ.Вид)");
                Исключение
                    //Попытка
                        //    BSB, ...
                        Выполнить("СтруктураСтроки.Представление = УправлениеКонтактнойИнформациейСлужебный.СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтрокаКИ.Вид)");
                    //Исключение
                    //    Попытка
                    //        //    BASC
                    //        Выполнить("СтруктураСтроки.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтрокаКИ.Вид)")
                    //    Исключение
                    //        СообщениеПользователю(ОписаниеОшибки(), Ложь)
                    //    КонецПопытки
                    //КонецПопытки
                КонецПопытки;
                
                //Запишем уточнённое представление контактной информации
                Попытка
                    Выполнить("КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(ОбъектXDTOКИ, СтруктураСтроки.Представление)");
                Исключение
                    //    BSB, BASC, ...
                    Выполнить("СтруктураСтроки.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ОбъектXDTOКИ)");
                КонецПопытки;    
                
                //Приводим объект XDTO в XML-строку для записи в табличную часть
                Попытка
                    Выполнить("СтруктураСтроки.ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектXDTOКИ)");
                Исключение
                    //    BSB, BASC, ...
                    Выполнить("СтруктураСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ)");
                КонецПопытки;
                
                //Запись сериализованной информации в табличную часть
                ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтруктураСтроки);
                
            КонецЦикла;
        КонецЕсли;
    Исключение
        ТекстСообщения = НСтр("ru='Ошибка при записи контактной информации контрагента ';uk='Помилка при запису контактної інформації контрагента '") + Контрагент;
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
    КонецПопытки;
    
    НовыйЭлемент.ОсновнойДоговорКонтрагента = НайтиСоздатьДоговорКонтрагента(НовыйЭлемент.Ссылка, Покупатель, СтруктураДоговора);

    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
    Возврат НовыйЭлемент.Ссылка;
    
КонецФункции 

Функция UT_3_СоздатьКонтрагента(НовыйЭлемент, ДанныеКонтрагента, Покупатель, ТаблицаКИ, СтруктураДоговора)    
    
    Если СтрДлина(ДанныеКонтрагента.КодКонтрагента) = 12 Тогда
        НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
        НовыйЭлемент.ИННПлательщикаНДС = ДанныеКонтрагента.КодКонтрагента; 
    Иначе
        НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодКонтрагента;
    КонецЕсли;
    
    //добавлено для загрузки фин. док.
    Если ДанныеКонтрагента.Свойство("ЮрФиз") Тогда
        Если ДанныеКонтрагента.ЮрФиз = "Юридична" Тогда
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;    
        ИначеЕсли ДанныеКонтрагента.ЮрФиз = "Фізична" Тогда     
            НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;    
        КонецЕсли;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодИНН") Тогда
        НовыйЭлемент.ИННПлательщикаНДС = ДанныеКонтрагента.ИНН;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("КодПоЕДРПОУ") Тогда
        НовыйЭлемент.КодПоЕДРПОУ = ДанныеКонтрагента.КодПоЕДРПОУ;
    КонецЕсли;
    
    Если ДанныеКонтрагента.Свойство("НомерСвидетельства") Тогда
        НовыйЭлемент.НомерСвидетельстваПлательщикаНДС = ДанныеКонтрагента.НомерСвидетельства;
    КонецЕсли;
    
    
    Попытка
        НовыйЭлемент.Записать();
        ТекстСообщения = НСтр("ru = 'В базе создан новый контрагент ';uk='У базі створено новий контрагент '") + НовыйЭлемент.Наименование;
        СообщениеПользователю(ТекстСообщения, Ложь);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при создании контрагента ';uk='Помилка при створенні контрагента '");
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
        Возврат Справочники.Контрагенты.ПустаяСсылка();
    КонецПопытки;    
    
    Попытка
        Если ТаблицаКИ <>  Неопределено Тогда //заполняем контактную информацию, добавлено для загрузки фин. док.
            Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
                
                НоваяСтрокаКИ = НовыйЭлемент.КонтактнаяИнформация.Добавить();
                
                //Представление = СтрокаКИ.Вулиця + "," +  СтрокаКИ.Місто + "," + СтрокаКИ.Область + "," + СтрокаКИ.Індекс;
                //
                //СтруктураСтроки = Новый Структура("Тип, Страна, Вид, Представление, Регион, Город, ЗначенияПолей",
                //Перечисления.ТипыКонтактнойИнформации.Адрес, "Украина", СтрокаКИ.Вид, Представление, "", "", "");
                //
                //ЗначениеПолей = Новый СписокЗначений;
                //ЗначениеПолей.Добавить(СтрокаКИ.Вулиця, "Улица");
                //ЗначениеПолей.Добавить(СтрокаКИ.Місто, "Город");
                //ЗначениеПолей.Добавить(СтрокаКИ.Область, "Регион");
                //ЗначениеПолей.Добавить(СтрокаКИ.Індекс, "Индекс");
                //ЗначениеПолей.Добавить("Украина", "Страна");
                
                СтруктураАдреса = Новый Структура();
                СтруктураАдреса.Вставить("Индекс", СтрокаКИ.Индекс);
                СтруктураАдреса.Вставить("Область", СтрокаКИ.Область);
                СтруктураАдреса.Вставить("Район", "");
                СтруктураАдреса.Вставить("Город", СтрокаКИ.Місто);
                СтруктураАдреса.Вставить("НаселенныйПункт", "");
                СтруктураАдреса.Вставить("Улица", СтрокаКИ.Вулиця);
                СтруктураАдреса.Вставить("Дом", "");
                СтруктураАдреса.Вставить("Корпус", "");
                СтруктураАдреса.Вставить("Квартира", "");
                
                Представление = "";
                Выполнить("Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление)");
    
                //Запись сериализованной информации в табличную часть
                ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтруктураАдреса);
                
            КонецЦикла;
        КонецЕсли;
    Исключение
        ТекстСообщения = НСтр("ru='Ошибка при записи контактной информации контрагента ';uk='Помилка при запису контактної інформації контрагента '") + Контрагент;
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
    КонецПопытки;
    
    //НовыйЭлемент.ДоговорПоУмолчанию = НайтиСоздатьДоговорКонтрагента(НовыйЭлемент.Ссылка, Покупатель, СтруктураДоговора);

    Попытка
        НовыйЭлемент.Записать();
        
        UT_3_СоздатьПартнера(НовыйЭлемент, Покупатель); //УТ3 - у ребят разработчиков свое видение структуры справочников....
        
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
    Возврат НовыйЭлемент.Ссылка;
    
КонецФункции

Процедура UT_3_СоздатьПартнера(Контрагент, ЭтоПокупатель)
    
    Партнер = Справочники.Партнеры.СоздатьЭлемент();
    Партнер.Клиент = ЭтоПокупатель;
    Партнер.Поставщик = НЕ ЭтоПокупатель;
    Партнер.Наименование = Контрагент.Наименование;
    Партнер.НаименованиеПолное = Контрагент.НаименованиеПолное; 
    //Партнер.ЮрФизЛицо = ?(Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
    
    Попытка
        Партнер.Записать();
        Контрагент.Партнер = Партнер.Ссылка;
        Контрагент.Записать();
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки())
        КонецЕсли
    КонецПопытки;
    
КонецПроцедуры

Функция НайтиСоздатьДоговорКонтрагента(Контрагент, Покупатель = Истина, СтруктураДоговора = Неопределено)    
    
    Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
    КонецЕсли;
    
    ВидДоговора = "";
    лНомерДоговора = Неопределено;
    лДатаДоговора = Неопределено;
    лДоговорПоУмолчанию = Неопределено;
    лОрганизация = Организация;
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        Если Покупатель Тогда
            ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
        Иначе
            ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;
        КонецЕсли;
        
        Попытка
            лДоговорПоУмолчанию = Контрагент.ДоговорПоУмолчанию;
        Исключение
            Попытка
                //    BSB, ...
                лДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()
            Исключение
            КонецПопытки
        КонецПопытки;

    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        Если Покупатель Тогда
            ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
        Иначе
            ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
        КонецЕсли;
        
        лДоговорПоУмолчанию = Контрагент.ОсновнойДоговорКонтрагента;
        
    ИначеЕсли ИдКонф = "OSMD" Тогда
        
        лДоговорПоУмолчанию = Контрагент.ДоговорПоУмолчанию;
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда    
        
        Если Покупатель Тогда
            ВидДоговора = Перечисления.ТипыДоговоров.СПокупателем;
        Иначе
            ВидДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
        КонецЕсли;
        
        лДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
        
    КонецЕсли;
    
    Если СтруктураДоговора <> Неопределено Тогда
        
        Если СтруктураДоговора.Свойство("ДатаДоговора") И ЗначениеЗаполнено(СтруктураДоговора.ДатаДоговора) Тогда
            лДатаДоговора = Дата(СтрЗаменить(СтруктураДоговора.ДатаДоговора,"-",""));
        КонецЕсли;
        
        Если СтруктураДоговора.Свойство("НомерДоговора") Тогда
            лНомерДоговора = СтруктураДоговора.НомерДоговора;
        КонецЕсли;
        
        Если СтруктураДоговора.Свойство("Организация") Тогда
            лОрганизация = СтруктураДоговора.Организация;
        КонецЕсли;
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(лДоговорПоУмолчанию) И ИдКонф = "OSMD" Тогда
        Возврат лДоговорПоУмолчанию;
    КонецЕсли;

    //Если ЗначениеЗаполнено(лДоговорПоУмолчанию) И лДоговорПоУмолчанию.ВидДоговора = ВидДоговора Тогда
    //    Возврат лДоговорПоУмолчанию;
    //КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ДоговорыКонтрагентов.Ссылка КАК Договор
    |ИЗ
    |    Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
    |ГДЕ НЕ ПометкаУдаления И " +
    ?(ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP", "ДоговорыКонтрагентов.Контрагент = &Контрагент " + ?(ЗначениеЗаполнено(ВидДоговора), " И ДоговорыКонтрагентов.ТипДоговора = &ВидДоговора", ""), "ДоговорыКонтрагентов.Владелец = &Контрагент" + ?(ЗначениеЗаполнено(ВидДоговора), " И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора", "")) 
    ; 
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда
        Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(лНомерДоговора), " И ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора", "") + 
        ?(ЗначениеЗаполнено(лДатаДоговора),  " И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора", "");
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(лНомерДоговора), " И ДоговорыКонтрагентов.Номер = &НомерДоговора", "") + 
        ?(ЗначениеЗаполнено(лДатаДоговора),  " И ДоговорыКонтрагентов.Дата = &ДатаДоговора", "");    
    КонецЕсли;
    
    Запрос.УстановитьПараметр("ДатаДоговора", лДатаДоговора);
    Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("НомерДоговора", лНомерДоговора);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        Попытка
            Если ЗначениеЗаполнено(лОрганизация) И ВыборкаДетальныеЗаписи.Договор.Организация = лОрганизация Тогда
                 Возврат ВыборкаДетальныеЗаписи.Договор;
            КонецЕсли;    
        Исключение
            Возврат ВыборкаДетальныеЗаписи.Договор;    
        КонецПопытки;
        
    КонецЦикла;
    
    //создаем если не нашли
    
    НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
    
    НовыйДоговор.Наименование = "Основной договор (" + ВидДоговора + ")";
    Попытка
        НовыйДоговор.Организация = лОрганизация;
    Исключение
    КонецПопытки;

    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        НовыйДоговор.Контрагент = Контрагент;
        НовыйДоговор.ТипДоговора = ВидДоговора;    
        
    Иначе    
        
        НовыйДоговор.Владелец = Контрагент;
        
        Если ИдКонф <> "OSMD" Тогда 
            НовыйДоговор.ВидДоговора = ВидДоговора;
        КонецЕсли;    
        
    КонецЕсли;    
    
    Если ИдКонф <> "OSMD" Тогда
        НовыйДоговор.ВидДоговораПоГК = Справочники.ВидыДоговоровПоГК.Поставка;
    КонецЕсли;
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
        НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
        НовыйДоговор.ВидЦен                  = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
        НовыйДоговор.ВалютаРасчетов          = Константы.НациональнаяВалюта.Получить();
        
        Если СтруктураДоговора <> Неопределено Тогда
            
            Если СтруктураДоговора.Свойство("ДатаДоговора") Тогда
                НовыйДоговор.ДатаДоговора = СтруктураДоговора.ДатаДоговора;
            КонецЕсли;    
            
            Если СтруктураДоговора.Свойство("НомерДоговора") Тогда
                НовыйДоговор.НомерДоговора = СтруктураДоговора.НомерДоговора;
            КонецЕсли;    
            
        КонецЕсли;        

    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
        НовыйДоговор.СхемаНалоговогоУчета =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
        НовыйДоговор.ВидДоговораПоГК = Справочники.ВидыДоговоровПоГК.Поставка;
        
        НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
        НовыйДоговор.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом; 
        
        Если СтруктураДоговора <> Неопределено Тогда
            
            Если СтруктураДоговора.Свойство("ДатаДоговора") Тогда
                НовыйДоговор.Дата = СтруктураДоговора.ДатаДоговора;
            КонецЕсли;    
            
            Если СтруктураДоговора.Свойство("НомерДоговора") Тогда
                НовыйДоговор.Номер = СтруктураДоговора.НомерДоговора;
            КонецЕсли;    
            
        КонецЕсли;        
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        НовыйДоговор.ОбособленноеПодразделениеПоУмолчанию      = НовыйДоговор.Организация.ОбособленноеПодразделениеПоУмолчанию;
        НовыйДоговор.ОтветственныйЗаВыпискуНалоговыхДокументов = НовыйДоговор.Организация.ОтветственныйЗаВыпискуНалоговыхДокументов;
        НовыйДоговор.НоменклатураЗаполненияНалоговыхНаАванс    = НовыйДоговор.Организация.НоменклатураЗаполненияНалоговыхНаАванс;
        НовыйДоговор.МоментОпределенияБазыНДС                    = Справочники.ДоговорыКонтрагентов.ПолучитьМоментОпределенияБазыНДСПоУмолчанию(НовыйДоговор);
        
        Если НовыйДоговор.Контрагент.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
            НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
            НовыйДоговор.ПорядокОплаты         = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
        Иначе    
            НовыйДоговор.ПорядокОплаты         = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
            Если НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
                НовыйДоговор.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
            КонецЕсли;    
        КонецЕсли;
        
    КонецЕсли;
    
    Попытка
        НовыйДоговор.Записать();
    Исключение
        ТекстСообщения = НСтр("ru='Ошибка при создании договора контрагента: ';uk='Помилка при створенні договору контрагента: '") + Контрагент;
        СообщениеПользователю(ТекстСообщения);//, Ложь
        СообщениеПользователю(ОписаниеОшибки());//, Ложь
        Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
    КонецПопытки;
    
    Возврат НовыйДоговор.Ссылка;
    
КонецФункции //НайтиСоздатьДоговорКонтрагента    

Функция имОпределитьВидОперацииПлатежки(doctype, ЭтоПриход)
    
    Если ЭтоПриход Тогда //doctype = "x" ИЛИ doctype = "m" ИЛИ doctype = "t" ИЛИ doctype = "p" Тогда // по хорошому нужно анализировать все эти статусы
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
        ИначеЕсли ИдКонф = "OSMD" Тогда
            ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтЛицевогоСчета;    
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;    
        КонецЕсли;
    Иначе //doctype = "r" ИЛИ doctype = "m" ИЛИ doctype = "t" ИЛИ doctype = "p" Тогда
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            Если doctype = "m" Тогда
                ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
            Иначе    
                ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
            КонецЕсли;    
        ИначеЕсли ИдКонф = "OSMD" Тогда
            ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПустаяСсылка(); //в ОСМД нет видов операция на расход со счета    
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            Если doctype = "m" Тогда
                ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
            Иначе    
                ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
            КонецЕсли;    
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            Если doctype = "m" Тогда
                ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
            Иначе    
                ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
            КонецЕсли;    
        КонецЕсли;
    КонецЕсли;    
    
    Возврат ВидОперации;
    
КонецФункции //имОпределитьВидОперацииПлатежки()

//Функция импПрочитатьУзелList(Текст, тз)   
//    
//    Длина = СтрДлина(Текст);
//    Если Длина = 0 Тогда
//        Возврат Ложь;
//    КонецЕсли;    
//                                                           
//    НачПоз = Найти(Текст, "<row n");
//    Если НачПоз = 0 Тогда
//        Возврат Ложь;
//    КонецЕсли;    
//                   
//    ТекТекст = Сред(Текст, НачПоз + 6);
//    
//    КонПоз = Найти(ТекТекст, "<row n"); 
//    Если КонПоз = 0 Тогда
//        КонПоз = Длина;
//    КонецЕсли;
//     
//    Блок = Сред(Текст, НачПоз, КонПоз);
//    
//    импПолучитьУзелRowВСтрокуТЗ(Блок, тз);
//    
//    Текст = Сред(Текст, НачПоз+КонПоз+4);    
//    
//    Возврат Истина;
//    
//КонецФункции //импПрочитатьУзелList

Функция ЗаполнитьКодПредприятияПоБанковскомуСчету(КодБанковскогоСчета)
    
    КодВладельцаСчета = "";
    
    НазваниеСправочникаСчета = "БанковскиеСчета";
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        НазваниеСправочникаСчета = "БанковскиеСчетаОрганизаций";
    ИначеЕсли ИдКонф = "KUBU" Тогда
        НазваниеСправочникаСчета = "РасчетныеСчета";
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
    |    БанковскиеСчета.Владелец КАК ВладелецСчета
    |ИЗ
    |    Справочник." + НазваниеСправочникаСчета + " КАК БанковскиеСчета
    |ГДЕ
    |    НЕ БанковскиеСчета.ПометкаУдаления
    |    И БанковскиеСчета.НомерСчета = &НомерСчета";
    
    Запрос.УстановитьПараметр("НомерСчета", КодБанковскогоСчета);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        ВладелецСчета = ВыборкаДетальныеЗаписи.ВладелецСчета;
        
        СтруктураСведений = ЗаполнитьСтруктуруСведенийОбОрганизации(ВладелецСчета, ТекущаяДата());
        
        Если ЭтоЮрЛицо(ВладелецСчета) Тогда
            КодВладельцаСчета = СокрЛП(СтруктураСведений.КодПоЕДРПОУ);
        Иначе
            КодВладельцаСчета = СокрЛП(СтруктураСведений.ИНН);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат КодВладельцаСчета;
    
КонецФункции    

//statements/list/row/info/@number - номер платежа
//statements/list/row/info/@postdate - дата и время проводки
//statements/list/row/info/@customerdate - клиентская дата и время
//statements/list/row/info/@ref - банковский референс
//statements/list/row//info/@state - состояние документа (r - проведен, t - сторнирован)
//statements/list/row//info/@flinfo - вид платежа (r - реальный, i - информационный)
//statements/list/row//info/@doctype - тип документа (p - поручение, t - требование, m - мемориальный ордер, x - приходный ордер, r - расходный ордер)
//statements/list/row/amount/@amt - сумма платежа
//statements/list/row/amount/@ccy - валюта платежа
//statements/list/row/debet/account/@name - наименование плательщика
//statements/list/row/debet/account/@number - счет плательщика
//statements/list/row/debet/account/customer/@crf - код ИНН / ЕГРПОУ плательщика
//statements/list/row/debet/account/customer/bank/@code - МФО банка плательщика
//statements/list/row/debet/account/customer/bank/city/text() - наимнование банка плательщика
//statements/list/row/credit/account/@name - наименование получателя
//statements/list/row/credit/account/@number - счет получателя
//statements/list/row/credit/account/customer/@crf - код ИНН / ЕГРПОУ получателя
//statements/list/row/credit/account/customer/bank/@code - МФО банка получателя
//statements/list/row/credit/account/customer/bank/city/text() - наименование банка получателя
//statements/list/row/purpose - назначение платежа
//Процедура импПолучитьУзелRowВСтрокуТЗ(Текст, тзВходящихПлатежей);     
//    
//    // Секция данные платежа ,
//    
//    //ref
//    Референс = спцПрочитатьАтрибут("ref", Текст);  
//    //!ref
//    
//    НомерПлатежа = спцПрочитатьАтрибут("number", Текст);     
//    ДатаВремя = спцПрочитатьАтрибут("postdate", Текст); 
//    
//    СостояниеДока = спцПрочитатьАтрибут("state", Текст);
//    ВидПлатежа = спцПрочитатьАтрибут("flinfo", Текст);
//    ТипДока =  спцПрочитатьАтрибут("doctype", Текст);  
//    
//    СуммаСтрока = спцПрочитатьАтрибут("amt", Текст);
//    Сумма = Число(СуммаСтрока);
//    
//    Валюта = спцПрочитатьАтрибут("ccy", Текст);
//    
//    НазначениеПлатежа = спцПрочитатьУзел("purpose", Текст,,,Истина);
//                                       
//    //дебет                        
//    УзелДебет = спцПрочитатьУзел("debet", Текст);  
//    НаименованиеПлательщика = спцПрочитатьАтрибут("name", УзелДебет);
//    СчетПлательщика = спцПрочитатьАтрибут("number", УзелДебет);
//    КодПлательщика = спцПрочитатьАтрибут("crf", УзелДебет);
//    МФОПлательщика = спцПрочитатьАтрибут("code", УзелДебет);
//    
//    БанкИмяПлательщика = Лев(спцПрочитатьУзел("/city",УзелДебет,,,Истина), Найти(спцПрочитатьУзел("/city",УзелДебет,,,Истина),"</bank>")-1);
//    ГородБанкаПлательщика = спцПрочитатьУзел("city", УзелДебет);
//    
//    //кредит                                  
//    УзелКредит = спцПрочитатьУзел("credit", Текст);  
//    НаименованиеПолучателя = спцПрочитатьАтрибут("name", УзелКредит);
//    СчетПолучателя = спцПрочитатьАтрибут("number", УзелКредит);
//    КодПолучателя = спцПрочитатьАтрибут("crf", УзелКредит);
//    МФОПолучателя = спцПрочитатьАтрибут("code", УзелКредит);   
//    
//    БанкИмяПолучателя = Лев(спцПрочитатьУзел("/city",УзелКредит,,,Истина), Найти(спцПрочитатьУзел("/city",УзелКредит,,,Истина),"</bank>")-1);
//    ГородБанкаПолучателя = спцПрочитатьУзел("city", УзелКредит);
//    
//    // определение кто контрагент и наш р. счет
//    Если Сумма >= 0 И (КодПлательщика <> КодПолучателя ИЛИ КодПолучателя = "000000000" ИЛИ (КодПлательщика = КодПолучателя И ЭтоТранзитныйСчет(СчетПлательщика))) Тогда
//    //Если Сумма >= 0 ИЛИ КодПолучателя = "000000000" Тогда  
//        РСчет = СчетПолучателя;         
//        
//        СчетКонтрагента = СчетПлательщика;   
//        НаименованиеКонтрагента = НаименованиеПлательщика;   
//        КодКонтрагента = КодПлательщика; 
//        
//        НаимБанкаКонтр = БанкИмяПлательщика;
//        ГородБанкаКонтр = ГородБанкаПлательщика;
//        
//        НаименованиеНаше = НаименованиеПолучателя;
//        КодНаш = КодПолучателя;  
//        
//        НаимБанкаНаше = БанкИмяПолучателя;
//        ГородБанкаНаш = ГородБанкаПолучателя; 
//        
//        ЭтоПриход = Истина;
//        МФОКонтрагента = МФОПлательщика;
//        МФОНаш = МФОПолучателя;
//        
//    Иначе    
//        
//        РСчет = СчетПлательщика;   
//        
//        СчетКонтрагента = СчетПолучателя;      
//        НаименованиеКонтрагента = НаименованиеПолучателя;
//        КодКонтрагента = КодПолучателя; 
//        
//        НаимБанкаКонтр = БанкИмяПолучателя;
//        ГородБанкаКонтр = ГородБанкаПолучателя;

//        
//        НаименованиеНаше = НаименованиеПлательщика;
//        КодНаш = КодПлательщика;  
//        МФОКонтрагента = МФОПолучателя;
//        МФОНаш = МФОПлательщика;
//        
//        НаимБанкаНаше = БанкИмяПлательщика;
//        ГородБанкаНаш = ГородБанкаПлательщика;
//        
//        Если Сумма < 0 Тогда
//            Сумма = Сумма * (-1);
//        КонецЕсли;    
//        
//        ЭтоПриход = Ложь;
//        
//    КонецЕсли;       
//    
//    Если КодНаш = "000000000" Тогда //валютная операция
//        
//        КодНаш = ЗаполнитьКодПредприятияПоБанковскомуСчету(РСчет);
//        
//    КонецЕсли;
//    
//    //проверка на фирму
//    Если ПолучитьКодОрганизации() <> КодНаш Тогда
//        
//        Если РежимОтладки Тогда
//            ТекстСообщения = НСтр("ru = ' Платеж ';uk=' Платіж '") + НомерПлатежа +  НСтр("ru = ' пропущен, т.к. не относится к выбранной организации. ';uk=' пропущений, тому що не відноситься до обраної організації.'");
//            СообщениеПользователю(ТекстСообщения, Ложь);
//        КонецЕсли;    
//        
//        Возврат;
//        
//    КонецЕсли;
//    
//    СтруктураПоиска = Новый Структура;
//    
//    СтруктураПоиска.Вставить("Референс", Референс);
//    СтруктураПоиска.Вставить("ТипДока", ТипДока);
//        
//    МассивПЛ = тзВходящихПлатежей.НайтиСтроки(СтруктураПоиска);
//    
//    Если МассивПЛ.Количество() <> 0 И ИдКонф <> "KUBU" Тогда //если такой платеж уже есть - то это перемещение между счетами
//        СтрокаТЗ = МассивПЛ[0];
//        //меняем местами расчетные счета
//        темпРСчет = СтрокаТЗ.РСчет;
//        СтрокаТЗ.РСчет = СтрокаТЗ.СчетКонтрагента;
//        СтрокаТЗ.СчетКонтрагента = темпРСчет;
//        СтрокаТЗ.ЭтоПеремещение = Истина;
//        Возврат;
//    КонецЕсли;
//    
//    тзНоваятСрока = тзВходящихПлатежей.Добавить();   
//    
//    //ref
//    тзНоваятСрока.Референс = Референс;
//    //!ref      
//    
//    тзНоваятСрока.НаимБанкаКонтр = НаимБанкаКонтр;
//    тзНоваятСрока.ГородБанкаКонтр = ГородБанкаКонтр;

//    тзНоваятСрока.НаимБанкаНаше = НаимБанкаНаше;
//    тзНоваятСрока.ГородБанкаНаш = ГородБанкаНаш;

//    
//    тзНоваятСрока.НомерПлатежа = НомерПлатежа;
//    тзНоваятСрока.ДатаВремя = ДатаВремя;
//    тзНоваятСрока.СостояниеДока = СостояниеДока;
//    тзНоваятСрока.ВидПлатежа = ВидПлатежа;
//    тзНоваятСрока.ТипДока = ТипДока;
//    
//    тзНоваятСрока.Сумма = Сумма;    
//    тзНоваятСрока.ЭтоПриход = ЭтоПриход;
//    тзНоваятСрока.Валюта = Валюта;
//    
//    тзНоваятСрока.РСчет = РСчет;
//    тзНоваятСрока.МФОНаш = МФОНаш;
//    тзНоваятСрока.НаименованиеНаше = НаименованиеНаше;
//    тзНоваятСрока.КодНаш = КодНаш;
//    
//    тзНоваятСрока.СчетКонтрагента = СчетКонтрагента;
//    тзНоваятСрока.МФОКонтрагента = МФОКонтрагента;
//    тзНоваятСрока.НаименованиеКонтрагента = НаименованиеКонтрагента;
//    тзНоваятСрока.КодКонтрагента = КодКонтрагента;
//    
//    тзНоваятСрока.НазначениеПлатежа = НазначениеПлатежа;        
//    
//КонецПроцедуры //импПолучитьУзелRowВСтрокуТЗ()

Функция спцПрочитатьАтрибут(Имя, Текст) 
                            
    УзелТекст = "";
    
    Имя = Имя + "=""";
    ИмяДлина = СтрДлина(Имя);
    ПозНач = Найти(Текст, Имя); 
    
    Если ПозНач = 0 Тогда
        Возврат УзелТекст;
    КонецЕсли;    
    
    ТекТекст = Сред(Текст, ПозНач + ИмяДлина);
    ПозКавычки = Найти(ТекТекст, """");
    УзелТекст = Сред(ТекТекст, 1, ПозКавычки-1);
    УзелТекст = СокрЛП(УзелТекст);        
    
    //Заменяем спецсимволы XML 
    УзелТекст = спцЗаменитьСпецСимволыXML(УзелТекст);
                            
    Возврат УзелТекст;
    
КонецФункции //спцПрочитатьАтрибут

Функция спцПрочитатьУзел(Имя, Текст, АтрибутИЗначение = "", ОкончаниеИмени = ">" , ЗаменятьСпецСимволы = Ложь) 
          
    Если ПустаяСтрока(АтрибутИЗначение) = Ложь Тогда
        ИмяУзла = Имя + " " + АтрибутИЗначение;
        ПозНачИмяУзла = Найти(Текст, ИмяУзла);
        
        ТекТекст = Сред(Текст, ПозНачИмяУзла);  
        
        ПозКонИмяУзла = Найти(ТекТекст, ">");
        
        ИмяУзлаПолное = Сред(Текст, ПозНачИмяУзла, ПозКонИмяУзла-1);
    Иначе
        ИмяУзлаПолное = Имя;
    КонецЕсли;
    
    ИмяУзла = "<" + ИмяУзлаПолное + ОкончаниеИмени;
    ИмяДлина = СтрДлина(ИмяУзла);
    ПозНач = Найти(Текст, ИмяУзла);
    
    ТекТекст = Сред(Текст, ПозНач + ИмяДлина);
    
    ТегКонцаУзла = "</" + Имя + ">";
    ПозКон = Найти(ТекТекст, ТегКонцаУзла);
    Узел = Сред(ТекТекст, 1, ПозКон-1); 
    Узел = СокрЛП(Узел);
    
    //Заменяем спецсимволы XML     
    Если ЗаменятьСпецСимволы Тогда
        Узел = спцЗаменитьСпецСимволыXML(Узел);
    КонецЕсли;    
        
    Возврат Узел;
    
КонецФункции //спцПрочитатьУзел

Функция спцЗаменитьСпецСимволыXML(Стр)          
    
    Стр = СтрЗаменить(Стр, "&quot;","""");    
    Стр = СтрЗаменить(Стр,"&apos;","'");
    Стр = СтрЗаменить(Стр, "&lt;","<");
    Стр = СтрЗаменить(Стр,"&gt;",">");
    Стр = СтрЗаменить(Стр,"&amp;","&");            
    
    Возврат Стр;
    
КонецФункции //спцЗаменитьСпецСимволыXML

//Функция импОтправитьЗапросНаИмпортВыписок(НачДата, КонДата)   
//    
//    ТелоОтвета = "";
//    
//    ДатаНачалаПериода = Формат(НачДата, "ДФ=dd.MM.yyyy");
//    ДатаКонцаПериода = Формат(КонДата, "ДФ=dd.MM.yyyy");
//    
//    Если ЗначениеЗаполнено(БанковскийСчет) Тогда
//        Счет = СокрЛП(БанковскийСчет.НомерСчета);
//    Иначе
//        Счет = "";
//    КонецЕсли;    
//    
//    Если ЗначениеЗаполнено(Счет) Тогда
//        ТекСчет = Счет;
//    Иначе
//        ТекСчет = "%25";
//    КонецЕсли;                              
//    
//    СтрокаЗапроса = "acc=" + ТекСчет 
//        + "&stdate=" + ДатаНачалаПериода
//        + "&endate=" + ДатаКонцаПериода
//        + "&in_time=" + "d" + "&raccount=" + "%25" 
//        + "&type_contractor=" + "ACC"
//        + "&nomenu&nolist&PUREXML=true"; 
//    
//    //    таблица statements
//    РесурсНаСервере = "/c2bstatements";
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        Сессия = Неопределено;
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        Сессия = стРезультат.Cookie;
//        ТелоОтвета = стРезультат.ТелоОтвета;
//    КонецЕсли;
//        
//    // если не успешно сообщим ошибку
//    Если Статус <> 200 Тогда            
//        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на импорт платежных документов!';uk='Помилка надсилання запиту на імпорт платіжних документів'");
//        СообщениеПользователю(ТекстСообщения, Ложь);
//        Возврат "";
//    КонецЕсли;
//    
//    Возврат ТелоОтвета;
//    
//КонецФункции //импОтправитьЗапросНаИмпортВыписок 

Процедура СоздатьИмпортированныеДокументы(НачПериода, КонПериода) Экспорт
    
    //Если ИспользоватьСтароеAPI Тогда
    //    ДействиеАналитики = "ЗагрузкаПлатежей";
    //Иначе
        ДействиеАналитики = "ЗагрузкаПлатежейV3";
    //КонецЕсли;
    
    Если ИдКонф = "UNF" И ПроводитьДокументы Тогда
        
        Если Не ЗначениеЗаполнено(СтатьяДДСВходящий) Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка! Не заполнена статья ДДС (приход).';uk='Помилка! Не заповнена стаття ДДС (прихід).'");
            СообщениеПользователю(ТекстСообщения, Ложь,"Объект.СтатьяДДСВходящий");
            Возврат;
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(СтатьяДДСИсходящий) Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка! Не заполнена статья ДДС (расход).';uk='Помилка! Не заповнена стаття ДДС (витрата).'");
            СообщениеПользователю(ТекстСообщения, Ложь,"Объект.СтатьяДДСИсходящий");
            Возврат;
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(СтатьяДДСПеремещениеДС) Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка! Не заполнена статья ДДС (перемещение).';uk='Помилка! Не заповнена стаття ДДС (переміщення).'");
            СообщениеПользователю(ТекстСообщения, Ложь,"Объект.СтатьяДДСПеремещениеДС");
            Возврат;
        КонецЕсли;
        
    КонецЕсли;
    
    // Загружаем отмеченные секции документов.
    ЕстьОтмеченные = Ложь;
    
    КоличествоПлатежей = 0;
    
    Для каждого СтрокаТЧ Из ИмпортПлатежныеДокументы Цикл
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        ЕстьОтмеченные = Истина;
        Попытка
            Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) Тогда
                // В ИБ не найден документ, необходимо создать новый.
                ОбъектДокумента = Документы[СтрокаТЧ.ИмяДокумента].СоздатьДокумент();
                ЭтоНовыйДокумент = Истина;
                
            ИначеЕсли ПерезаполнятьНайденныеДокументы ИЛИ ИдКонф = "KUBU" Тогда
                
                // В ИБ найден документ, необходимо получить его объект.
                ОбъектДокумента = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();
                ЭтоНовыйДокумент = Ложь;
                
            Иначе
                
                ТекстСообщения = НСтр("ru = 'Платежный документ отмеченный в строке №%Номер% от %Дата% уже есть в базе, и повторно не загружался'; 
                    |uk = 'Платіжний документ зазначений у рядку № %Номер% від %Дата% вже є в базі, і повторно не завантажувався'")
                    + Строка(СтрокаТЧ.СсылкаНаДокумент);
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаТЧ.НомерСтроки);
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаТЧ.Дата);
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                СтрокаТЧ.КартинкаОшибки = 0;
                Продолжить;
                
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетКонтрагента) И ИдКонф <> "KUBU" И ИдКонф <> "OSMD" Тогда //если и контрагент пустой и счет заполнен, скорее всего это перемещение 
                
                ТекстСообщения = НСтр("ru = 'В строке №%Номер% не заполнен контрагент. Строка пропущена.'; 
                |uk = 'У рядку №%Номер% не заповнений контрагент. Рядок пропущено.'");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаТЧ.НомерСтроки);
                СтрокаТЧ.КартинкаОшибки = 0;
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                Продолжить;
                
            КонецЕсли;
            
            //Если ИдКонф = "OSMD" И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЛицевойСчет) И СтрокаТЧ.ИмяДокумента = "ПоступлениеНаСчет" Тогда
            //    
            //    ТекстСообщения = НСтр("ru = 'В строке №%Номер% не заполнен лицевой счет. Строка пропущена.'; 
            //    |uk = 'У рядку №%Номер% не заповнений особовий рахунок. Рядок пропущено.'");
            //    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаТЧ.НомерСтроки);
            //    СтрокаТЧ.КартинкаОшибки = 0;
            //    СообщениеПользователю(ТекстСообщения);
            //    СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            //    Продолжить;
            //    
            //КонецЕсли;
            
            ЗаполнитьРеквизитыПлатежногоДокумента(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
            
            Попытка
                Если ПроводитьДокументы Тогда
                    Попытка
                        ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);    
                        СтрокаТЧ.ИдентификаторКартинки = 0;
                        СтрокаТЧ.ТекстОшибки = "";
                        СтрокаТЧ.КартинкаОшибки = 5;
                    Исключение
                        ТекстСообщения = НСтр("ru = 'Ошибка при проведении документа '; uk='Помилка при проведенні документа '") + ОбъектДокумента + " " + ОписаниеОшибки();
                        СообщениеПользователю(ТекстСообщения);
                        СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                        СтрокаТЧ.КартинкаОшибки = 0;
                        
                        ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
                        СтрокаТЧ.ИдентификаторКартинки = 2;
                    КонецПопытки;    
                Иначе
                    ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
                    СтрокаТЧ.ТекстОшибки = "";
                    СтрокаТЧ.КартинкаОшибки = 5;
                    СтрокаТЧ.ИдентификаторКартинки = 2;
                КонецЕсли;
                СтрокаТЧ.Номер = ОбъектДокумента.Номер;
                СтрокаТЧ.СсылкаНаДокумент = ОбъектДокумента.Ссылка;
                
                КоличествоПлатежей = КоличествоПлатежей + 1;
                
                ДозаполнитьРеквизитыДокумента(ОбъектДокумента);                
                
            Исключение
                ТекстСообщения = НСтр("ru = 'Ошибка при записи документа '; uk='Помилка при запису документа '") + ОбъектДокумента + " " + ОписаниеОшибки();
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                СтрокаТЧ.КартинкаОшибки = 0;
                СообщениеПользователю(ТекстСообщения);
            КонецПопытки;    
            
        Исключение
            ТекстОписаниеОшибки = ОписаниеОшибки();
            ТекстСообщения = НСтр("ru = 'Платежный документ отмеченный в строке №%Номер% от %Дата% не может быть загружен'; 
                |uk = 'Платіжний документ зазначений у рядку № %Номер% від %Дата% не може бути завантажений'");
            ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'по причине: '; uk='по причині: '") + ТекстОписаниеОшибки;
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаТЧ.НомерСтроки);
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаТЧ.Дата);
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            СтрокаТЧ.КартинкаОшибки = 0;
            СообщениеПользователю(ТекстСообщения, Ложь);    
        КонецПопытки;    
        
    КонецЦикла;
    
    Если ИдКонф = "UT_3" И Метаданные.Документы.Найти("ВыпискаПоРасчетномуСчету") <> Неопределено Тогда
        UT_3_ЗаполнитьБанковскуюВыписку(НачПериода, КонПериода);
    КонецЕсли;    
    
    Если НЕ ЕстьОтмеченные Тогда
        ТекстСообщения = НСтр("ru = 'Нет отмеченных платежных документов для сохранения в базу!'; uk = 'Немає відмічених платіжних документів для збереження в базу!'");
        СообщениеПользователю(ТекстСообщения, Ложь);
    Иначе
        
        Если ИспользоватьСтароеAPI Тогда
            ДействиеАналитики = "ЗагрузкаПлатежей";
        Иначе
            ДействиеАналитики = "ЗагрузкаПлатежейV3";
        КонецЕсли;
        
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики ,,,"КоличествоПлатежей", Формат(КоличествоПлатежей, "ЧГ=0"));
        
        ТекстСообщения = НСтр("ru = 'Запись документов завершена.'; uk = 'Запис документів завершено.'");
        СообщениеПользователю(ТекстСообщения);
        
    КонецЕсли;
     
КонецПроцедуры //СоздатьИмпортированныеДокументы    

Процедура UT_3_ЗаполнитьБанковскуюВыписку(НачПериода, КонПериода)
    
    ТаблицаДляВыписки = ИмпортПлатежныеДокументы.ВыгрузитьКолонки();
    
    ТаблицаДляВыписки.Колонки.Добавить("ДатаПроведения");
    
    Для Каждого СтрокаТЧ Из ИмпортПлатежныеДокументы Цикл
        
        Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) ИЛИ НЕ СтрокаТЧ.СсылкаНаДокумент.Проведен  Тогда
            Продолжить;    
        КонецЕсли;
        
        НоваяСтрока = ТаблицаДляВыписки.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);    
        
        НоваяСтрока.ДатаПроведения = СтрокаТЧ.СсылкаНаДокумент.Дата;
        
    КонецЦикла;     
    
    ТабСчетов = ТаблицаДляВыписки.Скопировать(, "БанковскийСчет");
    
    ТабСчетов.Свернуть("БанковскийСчет");
    
    СтруктураПоиска = Новый Структура;
    
    Для Каждого СтрокаТЧ Из ТабСчетов Цикл
        
        СтруктураПоиска.Вставить("БанковскийСчет", СтрокаТЧ.БанковскийСчет);
        
        МассивДок = ТаблицаДляВыписки.НайтиСтроки(СтруктураПоиска);
        
        UT_3_СоздатьДокументыВыпискаПоРасчетномуСчету(МассивДок, СтрокаТЧ.БанковскийСчет.Владелец, СтрокаТЧ.БанковскийСчет, НачПериода, КонПериода);
        
    КонецЦикла;    
    
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежногоДокумента(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент)
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        Если СтрокаТЧ.ИмяДокумента = "РасходСоСчета" Тогда
            UNF_ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПоступлениеНаСчет" Тогда
            UNF_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПеремещениеДС" Тогда 
            UNF_ЗаполнитьРеквизитыПеремещениеДС(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        КонецЕсли;
    ИначеЕсли ИдКонф = "OSMD" Тогда
        Если СтрокаТЧ.ИмяДокумента = "РасходСоСчета" Тогда
            OSMD_ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПоступлениеНаСчет" Тогда
            OSMD_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПеремещениеДенежныхСредств" Тогда 
            OSMD_ЗаполнитьРеквизитыПеремещениеДС(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        КонецЕсли;
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        Если СтрокаТЧ.ИмяДокумента = "СписаниеСРасчетногоСчета" Тогда
            BP_ЗаполнитьРеквизитыСписаниеСоСчета(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
            BP_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        КонецЕсли;
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если СтрокаТЧ.ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
            UT_3_ЗаполнитьРеквизитыСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        ИначеЕсли СтрокаТЧ.ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
            UT_3_ЗаполнитьРеквизитыПоступлениеБезналичныхДенежныхСредств(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
        КонецЕсли;
    ИначеЕсли ИдКонф = "KUBU" Тогда
        KUBU_ЗаполнитьРеквизитыБанковскойВыписки(ОбъектДокумента, СтрокаТЧ, ЭтоНовыйДокумент);
    КонецЕсли;    
    
КонецПроцедуры //ЗаполнитьРеквизитыПлатежногоДокумента

Процедура KUBU_ЗаполнитьРеквизитыБанковскойВыписки(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "РасчетныйСчет", ИсходныеДанные.БанковскийСчет);

    Если ЭтоНовыйДокумент Тогда
        
        ОбъектДокумента.УстановитьНовыйНомер();
        
        Попытка    
            ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            СообщениеПользователю(ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("Дата", ИсходныеДанные.Дата);
        СтруктураПоиска.Вставить("БанковскийСчет", ИсходныеДанные.БанковскийСчет);
        МассивСтрокТЧ = ИмпортПлатежныеДокументы.НайтиСтроки(СтруктураПоиска);
        
        Для Каждого СтрокаМассива Из МассивСтрокТЧ Цикл
            СтрокаМассива.СсылкаНаДокумент = ОбъектДокумента.Ссылка;
        КонецЦикла;
        
    КонецЕсли;

    НоваяСтрока = ОбъектДокумента.Банк.Добавить();
    
    УстановитьСвойство(НоваяСтрока, "ВидОперации", ИсходныеДанные.ВидОперации);    
    УстановитьСвойство(НоваяСтрока, "СтавкаНДС", ИсходныеДанные.СтавкаНДС);
    УстановитьСвойство(НоваяСтрока, "СуммаНДС", ИсходныеДанные.СуммаНДС);
    УстановитьСвойство(НоваяСтрока, "СуммаСНДС", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(НоваяСтрока, "Содержание", ИсходныеДанные.НазначениеПлатежа);
    
КонецПроцедуры    

// Процедура устанавливает свойство объекта.
//
Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства)
    
    Если ЗначениеСвойства <> Неопределено Тогда
        
        Попытка
            Объект[ИмяСвойства] = ЗначениеСвойства;
        Исключение
            ТекстСообщения = НСтр("ru = 'Ошибка при установке свойства %Свойство% объекта %Объект%'; 
                |uk = 'Помилка при установці властивості %Свойство% об'єкта %Объект%'") + ОписаниеОшибки();
             
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Свойство%", ИмяСвойства);
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Объект);
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецПопытки;
        
    КонецЕсли;
    
КонецПроцедуры // УстановитьСвойство()

// Процедура заполняет реквизиты документа РасходСоСчета.
//
Процедура UNF_ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "ВалютаДенежныхСредств", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "Статья", СтатьяДДСИсходящий);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
        Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
            Выполнить("ОбъектДокумента.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(ИсходныеДанные.БанковскийСчет.Владелец, , ИсходныеДанные.Дата)");
        Иначе
            ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
        КонецЕсли;
    КонецЕсли;
    //УстановитьСвойство(ОбъектДокумента, "НалогообложениеНДС" , ?(ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС.Ставка), Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС));
    
    // Заполнение табличной части документа.
    Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
     ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
        
        Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
            УстановитьСвойство(ОбъектДокумента,"СчетКонтрагента",ИсходныеДанные.СчетКонтрагента);
        КонецЕсли;
            
        УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
        
        УстановитьСвойство(СтрокаРасшифровки,"Договор", ИсходныеДанные.ДоговорКонтрагента);
        
        Если ОднаСтрокаВРасшифровкеПлатежа
           И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
        
            СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
            ДатаЗаполнения = ОбъектДокумента.Дата;
            ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
            
            UNF_РассчитатьКурсИСуммуРасчетов(
                СтрокаРасшифровки,
                ВалютаРасчетов,
                ДатаЗаполнения,
                ОбъектДокумента,
                ЭтоНовыйДокумент
            );
            
            Если СтрокаРасшифровки.Курс = 0 Тогда
                
                УстановитьСвойство(СтрокаРасшифровки, "Курс", 1);
                УстановитьСвойство(СтрокаРасшифровки, "Кратность",1);
                УстановитьСвойство(СтрокаРасшифровки, "СуммаРасчетов", СтрокаРасшифровки.СуммаПлатежа);
                
            КонецЕсли;
            
            УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ИсходныеДанные.СтавкаНДС);
            УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", ИсходныеДанные.СуммаНДС);
            
            УстановитьСвойство(СтрокаРасшифровки, "ПризнакАванса", Истина);
            
        КонецЕсли;
    
    Иначе
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
        
        // Заполнение табличной части документа.
        Если ОднаСтрокаВРасшифровкеПлатежа
           И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
            
            СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
            ДатаЗаполнения = ОбъектДокумента.Дата;
            ВалютаРасчетов = ОбъектДокумента.БанковскийСчет.ВалютаДенежныхСредств;
            
            UNF_РассчитатьКурсИСуммуРасчетов(
                СтрокаРасшифровки,
                ВалютаРасчетов,
                ДатаЗаполнения,
                ОбъектДокумента,
                ЭтоНовыйДокумент
            );
            
            Если СтрокаРасшифровки.Курс = 0 Тогда
                
                УстановитьСвойство(СтрокаРасшифровки, "Курс", 1);
                УстановитьСвойство(СтрокаРасшифровки, "Кратность",1);
                УстановитьСвойство(СтрокаРасшифровки, "СуммаРасчетов", СтрокаРасшифровки.СуммаПлатежа);
                
            КонецЕсли;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
            УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ИсходныеДанные.СтавкаНДС);
        Иначе
            УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ПрочитатьСтавкуНДС("БезНДС"));
        КонецЕсли;
        
        УстановитьСвойство(ОбъектДокумента, "Корреспонденция", ПланыСчетов.Управленческий.ПереводыВПути);
        
    КонецЕсли;
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;
    
КонецПроцедуры // UNF_ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа РасходСоСчета.
//
Процедура OSMD_ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ВидВзаиморасчетов", Перечисления.ВидыНоменклатуры.ОсновнаяУслуга);
    УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
    УстановитьСвойство(ОбъектДокумента, "ДоговорКонтрагента", ИсходныеДанные.ДоговорКонтрагента);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
        
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;
    
КонецПроцедуры // OSMD_ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура OSMD_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ЛицевойСчет", ИсходныеДанные.ЛицевойСчет);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
        
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе    
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;    

КонецПроцедуры // OSMD_ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура заполняет реквизиты документа ПеремещениеДС
//
Процедура OSMD_ЗаполнитьРеквизитыПеремещениеДС(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ТипДенежныхСредств", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "ТипДенежныхСредствПолучатель", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчетПолучатель", ИсходныеДанные.СчетКонтрагента);
    УстановитьСвойство(ОбъектДокумента, "Статья", СтатьяДДСПеремещениеДС);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
    
КонецПроцедуры

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура UNF_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "ВалютаДенежныхСредств", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "Статья", СтатьяДДСВходящий);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
        Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
            Попытка
                Выполнить("ОбъектДокумента.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(ИсходныеДанные.БанковскийСчет.Владелец, , ИсходныеДанные.Дата)");
            Исключение
            КонецПопытки;
            Если Не ЗначениеЗаполнено(ОбъектДокумента.НалогообложениеНДС) Тогда
                Если ИсходныеДанные.БанковскийСчет.Владелец.ВидСтавкиНДСПоУмолчанию = Перечисления.ВидыСтавокНДС.БезНДС Тогда
                    ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС
                Иначе
                    ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС
                КонецЕсли
            КонецЕсли
        Иначе
            ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
        КонецЕсли
    КонецЕсли;
    
    // Заполнение табличной части документа.
    Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
     ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
     
        Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
            УстановитьСвойство(ОбъектДокумента,"СчетКонтрагента",ИсходныеДанные.СчетКонтрагента);
        КонецЕсли;
        
        УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
        
        УстановитьСвойство(СтрокаРасшифровки, "Договор", ИсходныеДанные.ДоговорКонтрагента);
        
        // Заполнение табличной части документа.
        Если ОднаСтрокаВРасшифровкеПлатежа
           И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
            
            СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
            ДатаЗаполнения = ОбъектДокумента.Дата;
            ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
            
            UNF_РассчитатьКурсИСуммуРасчетов(
                СтрокаРасшифровки,
                ВалютаРасчетов,
                ДатаЗаполнения,
                ОбъектДокумента,
                ЭтоНовыйДокумент
            );
            
            Если СтрокаРасшифровки.Курс = 0 Тогда
                
                УстановитьСвойство(СтрокаРасшифровки, "Курс", 1);
                УстановитьСвойство(СтрокаРасшифровки, "Кратность",1);
                УстановитьСвойство(СтрокаРасшифровки, "СуммаРасчетов", СтрокаРасшифровки.СуммаПлатежа);
                
            КонецЕсли;
            
            УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ИсходныеДанные.СтавкаНДС);
            УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", ИсходныеДанные.СуммаНДС);
            
            УстановитьСвойство(СтрокаРасшифровки, "ПризнакАванса",Истина);
            
        КонецЕсли;
    Иначе //вид операции "Прочее" 
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
        
        // Заполнение табличной части документа.
        Если ОднаСтрокаВРасшифровкеПлатежа
           И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
            
            СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
            ДатаЗаполнения = ОбъектДокумента.Дата;
            ВалютаРасчетов = ОбъектДокумента.БанковскийСчет.ВалютаДенежныхСредств;
            
            
            Если СтрокаРасшифровки.Курс = 0 Тогда
                
                УстановитьСвойство(СтрокаРасшифровки, "Курс", 1);
                УстановитьСвойство(СтрокаРасшифровки, "Кратность",1);
                УстановитьСвойство(СтрокаРасшифровки, "СуммаРасчетов", СтрокаРасшифровки.СуммаПлатежа);
                
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
                УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ИсходныеДанные.СтавкаНДС);
            Иначе
                УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", ПрочитатьСтавкуНДС("БезНДС"));
            КонецЕсли;
            
        КонецЕсли;

        УстановитьСвойство(ОбъектДокумента, "Корреспонденция", ПланыСчетов.Управленческий.ПереводыВПути);
        
    КонецЕсли;
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе    
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;    

КонецПроцедуры // UNF_ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура заполняет реквизиты документа ПеремещениеДС
//
Процедура UNF_ЗаполнитьРеквизитыПеремещениеДС(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ТипДенежныхСредств", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "ТипДенежныхСредствПолучатель", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчетПолучатель", ИсходныеДанные.СчетКонтрагента);
    УстановитьСвойство(ОбъектДокумента, "ВалютаДенежныхСредств", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "Статья", СтатьяДДСПеремещениеДС);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
    
КонецПроцедуры    

// Процедура заполняет реквизиты документа СписаниеСРасчетногоСчета.
//
Процедура BP_ЗаполнитьРеквизитыСписаниеСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
    
    // Заполнение табличной части документа.

    Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
        УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
    КонецЕсли;
    
    Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
        СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
    Иначе
        СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
    КонецЕсли;
    
    Если ИсходныеДанные.ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
        УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
        УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ИсходныеДанные.ДоговорКонтрагента);
    КонецЕсли;
    
    //СчетБанк
    Если ОбъектДокумента.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
        УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);
    Иначе
        УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте);
    КонецЕсли;
    
    УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", ОбъектДокумента.СчетБанк);
    
    ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
    
    Если ОднаСтрокаВРасшифровкеПлатежа Тогда
        Если ЗначениеЗаполнено(СтатьяДДСИсходящий) Тогда
            Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
                УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтатьяДДСПеремещениеДС);    
            Иначе
                УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтатьяДДСИсходящий);    
            КонецЕсли;    
        КонецЕсли;
        
        СчетаУчета = Неопределено;
        
        Выполнить("СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ИсходныеДанные.БанковскийСчет.Владелец, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента)");
        
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",     СчетаУчета.СчетАвансов);
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов);
        
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС",                 СчетаУчета.СчетУчетаНДСПриобретений);
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный", СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный);
        УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение",         СчетаУчета.НалоговоеНазначениеПриобретений);
        
    КонецЕсли;
    
    //РасшифровкаПлатежа
    ЕстьРасчетыСКонтрагентами = Ложь;
    ЕстьРасчетыПоКредитам = Ложь;
    
    Выполнить("ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ОбъектДокумента.ВидОперации)");
    Выполнить("ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ОбъектДокумента.ВидОперации)");
    
    Если ОбъектДокумента.ЭтоНовый() 
        ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
        
        СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
        
        Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
            BP_РассчитатьКурсИСуммуВзаиморасчетов(
            СтрокаРасшифровки, BP_ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента),
            ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
        КонецЕсли;
        
        лПлательщикНДС = Ложь;
        
        Выполнить("лПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ИсходныеДанные.БанковскийСчет.Владелец, ОбъектДокумента.Дата)");
        
        Если ЕстьРасчетыСКонтрагентами Тогда
            Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
                СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.СтавкаНДС;
            ИначеЕсли НЕ лПлательщикНДС Тогда
                СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
            Иначе
                СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
            КонецЕсли;
            
            ЗначениеСтавкиНДС = Неопределено;
            
            Выполнить("ЗначениеСтавкиНДС          = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС)");
            СтрокаРасшифровки.СуммаНДС = Окр(СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС), 2);
        КонецЕсли;
        
    КонецЕсли;
    
    //Ответственный
    УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь());
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;
    
    Попытка
        //временный костыль, пока не устранят баг в БУХ 2.0
        Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
            УстановитьСвойство(ОбъектДокумента, "НалоговоеНазначениеПриПрочемСписании", Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность);
            УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
            УстановитьСвойство(ОбъектДокумента, "СубконтоДт1", Подразделение);
            УстановитьСвойство(ОбъектДокумента, "СубконтоДт2", СтатьяЗатратПоУмолчанию);
        КонецЕсли;
    Исключение
    КонецПопытки;

КонецПроцедуры // BP_ЗаполнитьРеквизитыСписаниеСоСчета()

Процедура BP_ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
    
    //Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств
    УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
    Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
        СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
    Иначе
        СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
    КонецЕсли;
    
    ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
    УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
        ?(ИсходныеДанные.ДоговорКонтрагента = НСтр("ru='Не найден';uk='Не знайдений'"), Неопределено, ИсходныеДанные.ДоговорКонтрагента));
    
    Если ОднаСтрокаВРасшифровкеПлатежа Тогда
        УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтатьяДДСВходящий);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
        
        СчетаУчета = Неопределено;
        
        Выполнить("СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ИсходныеДанные.БанковскийСчет.Владелец, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента)");
        
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",     СчетаУчета.СчетАвансовПокупателя);
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
        
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС",                 СчетаУчета.СчетУчетаНДСПродаж);
        УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный", СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
        УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение",         СчетаУчета.НалоговоеНазначениеПродаж);
        
    КонецЕсли;
    
    //СчетОрганизации,СчетКонтрагента
    УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.БанковскийСчет);
    Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
        УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
    КонецЕсли;
    
    //ВалютаДокумента
    УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
    
    //СчетБанк
    Если ОбъектДокумента.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
        УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);
    Иначе
        УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте);
    КонецЕсли;
    
    Если ОбъектДокумента.ЭтоНовый()
        ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
        
        СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
        BP_РассчитатьКурсИСуммуВзаиморасчетов(
            СтрокаРасшифровки,
            BP_ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
            
        лПлательщикНДС = Ложь;
        
        Выполнить("лПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ИсходныеДанные.БанковскийСчет.Владелец, ОбъектДокумента.Дата)");
        
        Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
            СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.СтавкаНДС;
        ИначеЕсли НЕ лПлательщикНДС Тогда
            СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
        Иначе
            СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
        КонецЕсли;
        
        ЗначениеСтавкиНДС = Неопределено;
        Выполнить("ЗначениеСтавкиНДС             = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС)");
        СтрокаРасшифровки.СуммаНДС  = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
        
    КонецЕсли;
    
    //Ответственный
    УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь());
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;
    
КонецПроцедуры // BP_ЗаполнитьРеквизитыПоступлениеНаСчет()

Функция BP_ПолучитьВалютуДоговора(ДоговорКонтрагента)
    
    ЗапросПоиска = Новый Запрос;
    ЗапросПоиска.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ДоговорыКонтрагентов.ВалютаВзаиморасчетов
    |ИЗ
    |    Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
    |ГДЕ
    |    ДоговорыКонтрагентов.Ссылка = &Ссылка";
    
    ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
    Выборка = ЗапросПоиска.Выполнить().Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.ВалютаВзаиморасчетов;
    Иначе
        Возврат Константы.ВалютаРегламентированногоУчета.Получить();
    КонецЕсли;
    
КонецФункции

Процедура BP_РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
    
    СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(
        ТекущаяВалютаВзаиморасчетов, ДатаКурса);
    
    УстановитьСвойство(СтрокаПлатеж, "КурсВзаиморасчетов",      СтруктураКурсаВзаиморасчетов.Курс);
    УстановитьСвойство(СтрокаПлатеж, "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
    
    BP_РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент);
    
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура BP_РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент)
    
    Выполнить("УстановитьСвойство(СтрокаПлатеж, ""СуммаВзаиморасчетов"",
        |РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
        |    СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
        |    ОбъектДокумента.ВалютаДокумента,
        |    1, СтрокаПлатеж.КурсВзаиморасчетов,
        |    1, СтрокаПлатеж.КратностьВзаиморасчетов)
        |);");
    
КонецПроцедуры

// Процедура рассчитывает курс и сумму документа.
//
Процедура UNF_РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
    
    СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
    УстановитьСвойство(СтрокаПлатеж, "Курс", СтруктураКурсаРасчетов.Курс);
    УстановитьСвойство(СтрокаПлатеж, "Кратность", СтруктураКурсаРасчетов.Кратность);
    СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
    
    СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
        СтрокаПлатеж.СуммаПлатежа,
        СтруктураКурсаДокумента.Курс,
        СтруктураКурсаРасчетов.Курс,
        СтруктураКурсаДокумента.Кратность,
        СтруктураКурсаРасчетов.Кратность
    );
    
    УстановитьСвойство(СтрокаПлатеж, "СуммаРасчетов", СуммаРасчетов);
    
КонецПроцедуры // UNF_РассчитатьКурсИСуммуРасчетов()

// Возвращает курс валюты на дату.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
    
    Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
    
    Возврат Структура;
    
КонецФункции // ПолучитьКурсВалюты()

// Процедура заполняет реквизиты документа СписаниеБезналичныхДенежныхСредств.
//
Процедура UT_3_ЗаполнитьРеквизитыСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ХозяйственнаяОперация", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "Валюта", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
    
    // Заполнение табличной части документа.
    Если ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
            ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
            ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
        
        Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
            УстановитьСвойство(ОбъектДокумента,"БанковскийСчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
        КонецЕсли;
            
        УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        УстановитьСвойство(СтрокаРасшифровки,"Партнер", ИсходныеДанные.Контрагент.Партнер);
        
        СтрокаРасшифровки.Сумма = ОбъектДокумента.СуммаДокумента;
        
        УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтатьяДДСИсходящий);
        УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Прочие расходы"));
        УстановитьСвойство(СтрокаРасшифровки, "Подразделение", Подразделение);
           УстановитьСвойство(СтрокаРасшифровки, "ВалютаВзаиморасчетов", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
        
    Иначе
            
        УстановитьСвойство(ОбъектДокумента,"БанковскийСчетПолучатель",ИсходныеДанные.СчетКонтрагента);
                
    КонецЕсли;
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;
    
КонецПроцедуры // UT_3_ЗаполнитьРеквизитыСписаниеБезналичныхДенежныхСредств()

// Процедура заполняет реквизиты документа ПоступлениеБезналичныхДенежныхСредств.
//
Процедура UT_3_ЗаполнитьРеквизитыПоступлениеБезналичныхДенежныхСредств(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
    
    // Заполнение шапки документа.
    УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ХозяйственнаяОперация", ИсходныеДанные.ВидОперации);
    УстановитьСвойство(ОбъектДокумента, "Организация", ИсходныеДанные.БанковскийСчет.Владелец);
    УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", ИсходныеДанные.БанковскийСчет);
    УстановитьСвойство(ОбъектДокумента, "Валюта", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
    УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
    УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерПлатежа);
    УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.Дата);
    УстановитьСвойство(ОбъектДокумента, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
    
    Если ЭтоНовыйДокумент Тогда
        ОбъектДокумента.УстановитьНовыйНомер();
    КонецЕсли;
    
    // Заполнение табличной части документа.
    Если ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
            ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика 
            ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
        
        Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
            УстановитьСвойство(ОбъектДокумента,"БанковскийСчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
        КонецЕсли;
            
        УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
        
        Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
        Иначе
            СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
        КонецЕсли;
        
        УстановитьСвойство(СтрокаРасшифровки,"Партнер", ИсходныеДанные.Контрагент.Партнер);
        
        СтрокаРасшифровки.Сумма = ОбъектДокумента.СуммаДокумента;
        
        УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтатьяДДСИсходящий);
        УстановитьСвойство(СтрокаРасшифровки, "СтатьяДоходов", ПланыВидовХарактеристик.СтатьиДоходов.НайтиПоНаименованию("Прочие доходы"));
        УстановитьСвойство(СтрокаРасшифровки, "Подразделение", Подразделение);
           УстановитьСвойство(СтрокаРасшифровки, "ВалютаВзаиморасчетов", ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств);
        
    Иначе
            
        УстановитьСвойство(ОбъектДокумента,"БанковскийСчетПолучатель",ИсходныеДанные.СчетКонтрагента);
                
    КонецЕсли;
    
    УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", ИсходныеДанные.НазначениеПлатежа);
    
    Если НазначениеПлатежаВКомментарий Тогда
        УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа); 
    Иначе
        УстановитьСвойство(ОбъектДокумента, "Комментарий", НСтр("ru='Автоматически создан обработкой ""Модуль обмена Приват24""';uk='Автоматично створений обробкою ""Модуль обміну Приват24""'"));
    КонецЕсли;    

КонецПроцедуры // UNF_ЗаполнитьРеквизитыПоступлениеНаСчет()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//    Сумма         - Число - сумма, которую следует пересчитать.
//     КурсНач       - Число - курс из которого надо пересчитать.
//     КурсКон       - Число - курс в который надо пересчитать.
//     КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
//     КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,    КратностьНач = 1, КратностьКон = 1) Экспорт
    
    Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
        Возврат Сумма;
    КонецЕсли;
    
    Если КурсНач = 0
            ИЛИ КурсКон = 0
            ИЛИ КратностьНач = 0
            ИЛИ КратностьКон = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'; uk = 'Виявлено нульовий курс валюти. Перерахунок не виконаний.' ");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Сумма;
    КонецЕсли;
    
    СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
    
    Возврат СуммаПересчитанная;
    
КонецФункции // ПересчитатьИзВалютыВВалюту()

Процедура ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено) Экспорт
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        UNF_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок, НомерСтроки);
    ИначеЕсли ИдКонф = "OSMD" Тогда
        OSMD_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок, НомерСтроки);
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        BP_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок, НомерСтроки);
    ИначеЕсли ИдКонф = "KUBU" Тогда
        KUBU_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок, НомерСтроки);    
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        UT_3_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок, НомерСтроки);    
    КонецЕсли;
    
КонецПроцедуры // ЗаполнитьСписокПлатежей()

Процедура UNF_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)
    
    //Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
    //    Если СсылкаНаДок.РасшифровкаПлатежа.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Добавление документа невозможно. Проверьте вид операции, и корректность заполнения данных';uk='Додавання документа неможливо. Перевірте вид операції , та коректність заповнення даних'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        СсылкаНаДок = Неопределено;
    //        Возврат;
    //    КонецЕсли;    
    //КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПеремещениеДС.Ссылка КАК СсылкаНаДокумент,
        |    ПеремещениеДС.Номер КАК Номер,
        |    ПеремещениеДС.Дата КАК Дата,
        |    ПеремещениеДС.ТипДенежныхСредств КАК ВидОперации,
        |    ПеремещениеДС.БанковскийСчет КАК БанковскийСчет,
        |    """" КАК Контрагент,
        |    ПеремещениеДС.БанковскийСчетПолучатель КАК СчетКонтрагента,
        |    ПеремещениеДС.СуммаДокумента КАК СуммаДокумента,
        |    ПеремещениеДС.ВалютаДенежныхСредств КАК Валюта,
        |    ПеремещениеДС.Комментарий КАК НазначениеПлатежа,
        |    ""Перемещение ДС"" КАК ВидДокумента,
        |    ""ПеремещениеДС"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    """" КАК НомерВходящегоДокумента,
        |    ПеремещениеДС.Проведен КАК Проведен
        |ИЗ
        |    Документ.ПеремещениеДС КАК ПеремещениеДС
        |ГДЕ " +
        //|    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " ПеремещениеДС.Ссылка = &СсылкаНаДок",    " НЕ ПеремещениеДС.ПометкаУдаления И (ПеремещениеДС.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И ПеремещениеДС.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И ПеремещениеДС.БанковскийСчет = &БанковскийСчет ", "") + 
        " ОБЪЕДИНИТЬ ВСЕ 
        |ВЫБРАТЬ
        |    РасходСоСчета.Ссылка КАК СсылкаНаДокумент,
        |    РасходСоСчета.Номер КАК Номер,
        |    РасходСоСчета.Дата КАК Дата,
        |    РасходСоСчета.ВидОперации КАК ВидОперации,
        |    РасходСоСчета.БанковскийСчет КАК БанковскийСчет,
        |    РасходСоСчета.Контрагент КАК Контрагент,
        |    РасходСоСчета.СчетКонтрагента КАК СчетКонтрагента,
        |    РасходСоСчета.СуммаДокумента КАК СуммаДокумента,
        |    РасходСоСчета.ВалютаДенежныхСредств КАК Валюта,
        |    РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
        |    ""Расх. со счета"" КАК ВидДокумента,
        |    ""РасходСоСчета"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
        |    РасходСоСчета.Проведен КАК Проведен
        |ИЗ
        |    Документ.РасходСоСчета КАК РасходСоСчета
        |ГДЕ " +
        //|    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " РасходСоСчета.Ссылка = &СсылкаНаДок",    " НЕ РасходСоСчета.ПометкаУдаления И (РасходСоСчета.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И РасходСоСчета.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И РасходСоСчета.БанковскийСчет = &БанковскийСчет ", "");

        
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    //Запрос.УстановитьПараметр("Организация", Организация);

    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        //Если ВыборкаДетЗаписи.ИмяДокумента <> "ПеремещениеДС" Тогда
        //    Если ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Количество() = 0 Тогда
        //        Продолжить;
        //    КонецЕсли;
        //КонецЕсли;    
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЭкспортПлатежныеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ЭкспортПлатежныеДокументы.Добавить();
        КонецЕсли;    
            
        НоваяСтрока.БанковскийСчет = ВыборкаДетЗаписи.БанковскийСчет;
        НоваяСтрока.Валюта = ВыборкаДетЗаписи.Валюта;
        НоваяСтрока.ВидДокумента = ВыборкаДетЗаписи.ВидДокумента;
        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        НоваяСтрока.ВидОперации = ВыборкаДетЗаписи.ВидОперации;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        Попытка
            НоваяСтрока.ДоговорКонтрагента = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].Договор;
            НоваяСтрока.СтавкаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].СтавкаНДС;
            НоваяСтрока.СуммаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Итог("СуммаНДС"); 
        Исключение
        КонецПопытки;
        
        НоваяСтрока.ИдентификаторКартинки = ?(ВыборкаДетЗаписи.Проведен, 0, 2);
        НоваяСтрока.Контрагент = ВыборкаДетЗаписи.Контрагент;
        НоваяСтрока.НазначениеПлатежа = ВыборкаДетЗаписи.НазначениеПлатежа;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.НомерПлатежа = ВыборкаДетЗаписи.НомерВходящегоДокумента;
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
            НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС("БезНДС");
        КонецЕсли;    
        
        //НоваяСтрока.СуммаПриход = ВыборкаДетЗаписи.СуммаПриход;
        //НоваяСтрока.СуммаРасход = ВыборкаДетЗаписи.СуммаРасход;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.СчетКонтрагента = ВыборкаДетЗаписи.СчетКонтрагента;
        НоваяСтрока.КартинкаОшибки = 1; //нет ошибки, если 0 - то ошибка отправки
    КонецЦикла;
    
КонецПроцедуры // UNF_ЗаполнитьСписокПлатежей()

Процедура OSMD_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)
    
    //Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
    //    Если СсылкаНаДок.РасшифровкаПлатежа.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Добавление документа невозможно. Проверьте вид операции, и корректность заполнения данных';uk='Додавання документа неможливо. Перевірте вид операції , та коректність заповнення даних'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        СсылкаНаДок = Неопределено;
    //        Возврат;
    //    КонецЕсли;    
    //КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПеремещениеДС.Ссылка КАК СсылкаНаДокумент,
        |    ПеремещениеДС.Номер КАК Номер,
        |    ПеремещениеДС.Дата КАК Дата,
        |    ПеремещениеДС.БанковскийСчет КАК БанковскийСчет,
        |    """" КАК Контрагент,
        |    ПеремещениеДС.БанковскийСчетПолучатель КАК СчетКонтрагента,
        |    ПеремещениеДС.СуммаДокумента КАК СуммаДокумента,
        |    ПеремещениеДС.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
        |    ПеремещениеДС.Комментарий КАК НазначениеПлатежа,
        |    ""Перемещение ДС"" КАК ВидДокумента,
        |    ""ПеремещениеДенежныхСредств"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    """" КАК НомерВходящегоДокумента,
        |    ПеремещениеДС.Проведен КАК Проведен
        |ИЗ
        |    Документ.ПеремещениеДенежныхСредств КАК ПеремещениеДС
        |ГДЕ
        |    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " ПеремещениеДС.Ссылка = &СсылкаНаДок",    " НЕ ПеремещениеДС.ПометкаУдаления И (ПеремещениеДС.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И ПеремещениеДС.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И ПеремещениеДС.БанковскийСчет = &БанковскийСчет ", "") + 
        " ОБЪЕДИНИТЬ ВСЕ 
        |ВЫБРАТЬ
        |    РасходСоСчета.Ссылка КАК СсылкаНаДокумент,
        |    РасходСоСчета.Номер КАК Номер,
        |    РасходСоСчета.Дата КАК Дата,
            |    РасходСоСчета.БанковскийСчет КАК БанковскийСчет,
        |    РасходСоСчета.Контрагент КАК Контрагент,
        |    РасходСоСчета.Контрагент.БанковскийСчетПоУмолчанию КАК СчетКонтрагента,
        |    РасходСоСчета.СуммаДокумента КАК СуммаДокумента,
        |    РасходСоСчета.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
        |    РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
        |    ""Расх. со счета"" КАК ВидДокумента,
        |    ""РасходСоСчета"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
        |    РасходСоСчета.Проведен КАК Проведен
        |ИЗ
        |    Документ.РасходСоСчета КАК РасходСоСчета
        |ГДЕ 
        |    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " РасходСоСчета.Ссылка = &СсылкаНаДок",    " НЕ РасходСоСчета.ПометкаУдаления И (РасходСоСчета.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И РасходСоСчета.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И РасходСоСчета.БанковскийСчет = &БанковскийСчет ", "");

        
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);

    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        //Если ВыборкаДетЗаписи.ИмяДокумента <> "ПеремещениеДС" Тогда
        //    Если ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Количество() = 0 Тогда
        //        Продолжить;
        //    КонецЕсли;
        //КонецЕсли;    
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЭкспортПлатежныеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ЭкспортПлатежныеДокументы.Добавить();
        КонецЕсли;    
            
        НоваяСтрока.БанковскийСчет = ВыборкаДетЗаписи.БанковскийСчет;
        НоваяСтрока.Валюта = ВыборкаДетЗаписи.Валюта;
        НоваяСтрока.ВидДокумента = ВыборкаДетЗаписи.ВидДокумента;
        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        Попытка
            НоваяСтрока.ДоговорКонтрагента = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].Договор;
            НоваяСтрока.СтавкаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].СтавкаНДС;
            НоваяСтрока.СуммаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Итог("СуммаНДС"); 
        Исключение
        КонецПопытки;
        
        НоваяСтрока.ИдентификаторКартинки = ?(ВыборкаДетЗаписи.Проведен, 0, 2);
        НоваяСтрока.Контрагент = ВыборкаДетЗаписи.Контрагент;
        НоваяСтрока.НазначениеПлатежа = ВыборкаДетЗаписи.НазначениеПлатежа;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.НомерПлатежа = ВыборкаДетЗаписи.НомерВходящегоДокумента;
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
            НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС("БезНДС");
        КонецЕсли;    
        
        //НоваяСтрока.СуммаПриход = ВыборкаДетЗаписи.СуммаПриход;
        //НоваяСтрока.СуммаРасход = ВыборкаДетЗаписи.СуммаРасход;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.СчетКонтрагента = ВыборкаДетЗаписи.СчетКонтрагента;
        НоваяСтрока.КартинкаОшибки = 1; //нет ошибки, если 0 - то ошибка отправки
    КонецЦикла;
    
КонецПроцедуры // OSMD_ЗаполнитьСписокПлатежей()

Процедура BP_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)
    
    //Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
    //    Если СсылкаНаДок.РасшифровкаПлатежа.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Добавление документа невозможно. Проверьте вид операции, и корректность заполнения данных';uk='Додавання документа неможливо. Перевірте вид операції , та коректність заповнення даних'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        СсылкаНаДок = Неопределено;
    //        Возврат;
    //    КонецЕсли;    
    //КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    РасходСоСчета.Ссылка КАК СсылкаНаДокумент,
        |    РасходСоСчета.Номер КАК Номер,
        |    РасходСоСчета.Дата КАК Дата,
        |    РасходСоСчета.ВидОперации КАК ВидОперации,
        |    РасходСоСчета.СчетОрганизации КАК БанковскийСчет,
        |    РасходСоСчета.Контрагент КАК Контрагент,
        |    РасходСоСчета.СчетКонтрагента КАК СчетКонтрагента,
        |    РасходСоСчета.СуммаДокумента КАК СуммаДокумента,
        |    РасходСоСчета.ВалютаДокумента КАК Валюта,
        |    РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
        |    ""Спис. со счета"" КАК ВидДокумента,
        |    ""СписаниеСРасчетногоСчета"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
        |    РасходСоСчета.Проведен КАК Проведен
        |ИЗ
        |    Документ.СписаниеСРасчетногоСчета КАК РасходСоСчета
        |ГДЕ 
        |    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " РасходСоСчета.Ссылка = &СсылкаНаДок",    " НЕ РасходСоСчета.ПометкаУдаления И (РасходСоСчета.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И РасходСоСчета.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И РасходСоСчета.СчетОрганизации = &БанковскийСчет ", "");

        
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        //Если ВыборкаДетЗаписи.ИмяДокумента <> "ПеремещениеДС" Тогда
        //    Если ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Количество() = 0 Тогда
        //        Продолжить;
        //    КонецЕсли;
        //КонецЕсли;    
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЭкспортПлатежныеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ЭкспортПлатежныеДокументы.Добавить();
        КонецЕсли;    
            
        НоваяСтрока.БанковскийСчет = ВыборкаДетЗаписи.БанковскийСчет;
        НоваяСтрока.Валюта = ВыборкаДетЗаписи.Валюта;
        НоваяСтрока.ВидДокумента = ВыборкаДетЗаписи.ВидДокумента;
        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        НоваяСтрока.ВидОперации = ВыборкаДетЗаписи.ВидОперации;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        Попытка
            НоваяСтрока.ДоговорКонтрагента = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].ДоговорКонтрагента;
            НоваяСтрока.СтавкаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа[0].СтавкаНДС;
            НоваяСтрока.СуммаНДС = ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Итог("СуммаНДС"); 
        Исключение
        КонецПопытки;
        
        НоваяСтрока.ИдентификаторКартинки = ?(ВыборкаДетЗаписи.Проведен, 0, 2);
        НоваяСтрока.Контрагент = ВыборкаДетЗаписи.Контрагент;
        НоваяСтрока.НазначениеПлатежа = ВыборкаДетЗаписи.НазначениеПлатежа;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.НомерПлатежа = ВыборкаДетЗаписи.НомерВходящегоДокумента;
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
            НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС("БезНДС");
        КонецЕсли;    
        
        //НоваяСтрока.СуммаПриход = ВыборкаДетЗаписи.СуммаПриход;
        //НоваяСтрока.СуммаРасход = ВыборкаДетЗаписи.СуммаРасход;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.СчетКонтрагента = ВыборкаДетЗаписи.СчетКонтрагента;
        НоваяСтрока.КартинкаОшибки = 1; //нет ошибки, если 0 - то ошибка отправки
    КонецЦикла;
    
КонецПроцедуры // UNF_ЗаполнитьСписокПлатежей()

Процедура KUBU_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПлатежноеПоручение.Ссылка КАК СсылкаНаДокумент,
        |    ПлатежноеПоручение.Номер КАК Номер,
        |    ПлатежноеПоручение.Дата КАК Дата,
        |    ПлатежноеПоручение.ВидОперации КАК ВидОперации,
        |    ПлатежноеПоручение.РасчетныйСчет КАК БанковскийСчет,
        |    ПлатежноеПоручение.Контрагент КАК Контрагент,
        |    ПлатежноеПоручение.Договор КАК ДоговорКонтрагента,
        |    ПлатежноеПоручение.РасчетныйСчетКонтрагента КАК СчетКонтрагента,
        |    ПлатежноеПоручение.СтавкаНДС КАК СтавкаНДС,
        |    ПлатежноеПоручение.СуммаНДСДокумента КАК СуммаНДС,
        |    ПлатежноеПоручение.СуммаСНДСДокумента КАК СуммаДокумента,
        |    ПлатежноеПоручение.РасчетныйСчет.Валюта КАК Валюта,
        |    ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
        |    ""Платіжне доручення"" КАК ВидДокумента,
        |    ""ПлатежноеПоручение"" КАК ИмяДокумента,
        //|    0 КАК СуммаПриход,
        //|    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    ПлатежноеПоручение.НомерПлатежногоПоручения КАК НомерВходящегоДокумента,
        |    ПлатежноеПоручение.Проведен КАК Проведен
        |ИЗ
        |    Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
        |ГДЕ
        |    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " ПлатежноеПоручение.Ссылка = &СсылкаНаДок",    " НЕ ПлатежноеПоручение.ПометкаУдаления И (ПлатежноеПоручение.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И ПлатежноеПоручение.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И ПлатежноеПоручение.РасчетныйСчет = &БанковскийСчет ", "");

        
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
                
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЭкспортПлатежныеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ЭкспортПлатежныеДокументы.Добавить();
        КонецЕсли;    
            
        НоваяСтрока.БанковскийСчет = ВыборкаДетЗаписи.БанковскийСчет;
        НоваяСтрока.Валюта = ВыборкаДетЗаписи.Валюта;
        НоваяСтрока.ВидДокумента = ВыборкаДетЗаписи.ВидДокумента;
        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        НоваяСтрока.ВидОперации = ВыборкаДетЗаписи.ВидОперации;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        НоваяСтрока.ДоговорКонтрагента = ВыборкаДетЗаписи.ДоговорКонтрагента;
        НоваяСтрока.СтавкаНДС = ВыборкаДетЗаписи.СтавкаНДС;
        НоваяСтрока.СуммаНДС = ВыборкаДетЗаписи.СуммаНДС; 
        НоваяСтрока.ИдентификаторКартинки = ?(ВыборкаДетЗаписи.Проведен, 0, 2);
        НоваяСтрока.Контрагент = ВыборкаДетЗаписи.Контрагент;
        НоваяСтрока.НазначениеПлатежа = ВыборкаДетЗаписи.НазначениеПлатежа;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.НомерПлатежа = ВыборкаДетЗаписи.НомерВходящегоДокумента;
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
            НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС("БезНДС");
        КонецЕсли;    
        
        //НоваяСтрока.СуммаПриход = ВыборкаДетЗаписи.СуммаПриход;
        //НоваяСтрока.СуммаРасход = ВыборкаДетЗаписи.СуммаРасход;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.СчетКонтрагента = ВыборкаДетЗаписи.СчетКонтрагента;
        НоваяСтрока.КартинкаОшибки = 1; //нет ошибки, если 0 - то ошибка отправки
    КонецЦикла;
    
КонецПроцедуры // KUBU_ЗаполнитьСписокПлатежей()

Функция KUBU_ПолучитьКодКонтрагентаОрганизации(ЮрФизЛицо, ДатаСреза, ИмяКода)
    
    СтруктураВозврата = Новый Структура;
    
    Выполнить("СтруктураВозврата = ПолучениеСправочнойИнформации.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаСреза)");
    
    Возврат СокрЛП(СтруктураВозврата[ИмяКода]);
    
КонецФункции

Процедура UT_3_ЗаполнитьСписокПлатежей(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)
    
    //Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
    //    Если СсылкаНаДок.РасшифровкаПлатежа.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Добавление документа невозможно. Проверьте вид операции, и корректность заполнения данных';uk='Додавання документа неможливо. Перевірте вид операції , та коректність заповнення даних'");
    //        Сообщить(ТекстСообщения);
    //        СсылкаНаДок = Неопределено;
    //        Возврат;
    //    КонецЕсли;    
    //КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    РасходСоСчета.Ссылка КАК СсылкаНаДокумент,
        |    РасходСоСчета.Номер КАК Номер,
        |    РасходСоСчета.Дата КАК Дата,
        |    РасходСоСчета.ХозяйственнаяОперация КАК ВидОперации,
        |    РасходСоСчета.БанковскийСчет КАК БанковскийСчет,
        |    РасходСоСчета.Контрагент КАК Контрагент,
        |    ВЫБОР КОГДА РасходСоСчета.БанковскийСчетКонтрагента = Значение(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) Тогда РасходСоСчета.БанковскийСчетПолучатель Иначе РасходСоСчета.БанковскийСчетКонтрагента КОНЕЦ КАК СчетКонтрагента,
        |    РасходСоСчета.СуммаДокумента КАК СуммаДокумента,
        |    РасходСоСчета.Валюта КАК Валюта,
        |    РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
        |    ""Спис. со счета"" КАК ВидДокумента,
        |    ""СписаниеБезналичныхДенежныхСредств"" КАК ИмяДокумента,
        |    0 КАК СуммаПриход,
        |    РасходСоСчета.СуммаДокумента КАК СуммаРасход,
        |    РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
        |    РасходСоСчета.Проведен КАК Проведен
        |ИЗ
        |    Документ.СписаниеБезналичныхДенежныхСредств КАК РасходСоСчета
        |ГДЕ 
        |    Организация = &Организация И " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " РасходСоСчета.Ссылка = &СсылкаНаДок",    " НЕ РасходСоСчета.ПометкаУдаления И (РасходСоСчета.Проведен " + ?(ВыгружатьНеПроведенныеПлатежи, "ИЛИ Истина)", ")") + " И РасходСоСчета.Дата МЕЖДУ &НачДата И &КонДата") + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И РасходСоСчета.БанковскийСчет = &БанковскийСчет ", "");

        
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        //Если ВыборкаДетЗаписи.ИмяДокумента <> "ПеремещениеДС" Тогда
        //    Если ВыборкаДетЗаписи.СсылкаНаДокумент.РасшифровкаПлатежа.Количество() = 0 Тогда
        //        Продолжить;
        //    КонецЕсли;
        //КонецЕсли;    
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЭкспортПлатежныеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ЭкспортПлатежныеДокументы.Добавить();
        КонецЕсли;    
            
        НоваяСтрока.БанковскийСчет = ВыборкаДетЗаписи.БанковскийСчет;
        НоваяСтрока.Валюта = ВыборкаДетЗаписи.Валюта;
        НоваяСтрока.ВидДокумента = ВыборкаДетЗаписи.ВидДокумента;
        НоваяСтрока.ВидДокумента = ЛокализироватьВидДокумента(НоваяСтрока.ВидДокумента);
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        НоваяСтрока.ВидОперации = ВыборкаДетЗаписи.ВидОперации;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        
        НоваяСтрока.ИдентификаторКартинки = ?(ВыборкаДетЗаписи.Проведен, 0, 2);
        НоваяСтрока.Контрагент = ВыборкаДетЗаписи.Контрагент;
        НоваяСтрока.НазначениеПлатежа = ВыборкаДетЗаписи.НазначениеПлатежа;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.НомерПлатежа = ВыборкаДетЗаписи.НомерВходящегоДокумента;
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
            НоваяСтрока.СтавкаНДС = ПрочитатьСтавкуНДС("БезНДС");
        КонецЕсли;    
        
        //НоваяСтрока.СуммаПриход = ВыборкаДетЗаписи.СуммаПриход;
        //НоваяСтрока.СуммаРасход = ВыборкаДетЗаписи.СуммаРасход;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.СчетКонтрагента = ВыборкаДетЗаписи.СчетКонтрагента;
        НоваяСтрока.КартинкаОшибки = 1; //нет ошибки, если 0 - то ошибка отправки
        
    КонецЦикла;
    
КонецПроцедуры // UNF_ЗаполнитьСписокПлатежей()

Процедура UT_3_СоздатьДокументыВыпискаПоРасчетномуСчету(ДокументыКИмпорту, Организация, БанковскийСчет, ДатаНачала, ДатаКонца)
    
    //копия процедуры из обработки "ОбменСБанком" 
    
    ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   ВыпискаПоРасчетномуСчету.Ссылка КАК Ссылка,
    |   ВыпискаПоРасчетномуСчету.Проведен КАК Проведен,
    |    КОНЕЦПЕРИОДА(ВыпискаПоРасчетномуСчету.Дата, День) КАК ДатаДок,
    |    ВыпискаПоРасчетномуСчету.Организация КАК Организация,
    |    ВыпискаПоРасчетномуСчету.БанковскийСчет КАК БанковскийСчет
    |ИЗ
    |    Документ.ВыпискаПоРасчетномуСчету КАК ВыпискаПоРасчетномуСчету
    |ГДЕ
    |   БанковскийСчет = &БанковскийСчет
    |    И Дата >= &ДатаНачала
    |    И Дата <= &ДатаКонца
    |";
    
    ЗапросВыписокПоРасчетномуСчету = Новый Запрос(ТекстЗапроса);
    //ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("Организация", Организация);
    ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
    ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца));
    ВыборкаИзРезультатовЗапроса = ЗапросВыписокПоРасчетномуСчету.Выполнить().Выгрузить();
        
    Для Каждого Выписка Из ВыборкаИзРезультатовЗапроса Цикл
        
        ОбъектДокументаВыпискаПоРасчетномуСчету         = Выписка.Ссылка.ПолучитьОбъект();
                
        ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Очистить();
        ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Очистить();
        Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПометкаУдаления Тогда
            ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьПометкуУдаления(Ложь);
        КонецЕсли;
        
        Попытка
            
            ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Запись);
            ДозаполнитьРеквизитыДокумента(ОбъектДокументаВыпискаПоРасчетномуСчету);

        Исключение
            
            Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='Документ ""Выписка по банковскому счету"" № %1 от %2 не очищен! Произошли ошибки при записи!';uk='Документ ""Виписка з банківського рахунку"" № %1 від %2 не очищений! Сталися помилки при запису!'"), 
                    ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                    ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
            СообщениеПользователю(Текст, Ложь);
            СообщениеПользователю(ОписаниеОшибки(), Ложь);
            Продолжить;
            
        КонецПопытки;
                        
    КонецЦикла;
        
    ТаблицаДокументовКИмпорту = ДокументыКИмпорту;
    //ТаблицаДокументовКИмпорту.Сортировать("ДатаПроведения");
                
    Пока ТаблицаДокументовКИмпорту.Количество() > 0 Цикл
        
        ДатаПроведения = ТаблицаДокументовКИмпорту[0].ДатаПроведения;
        
        Если НЕ ЗначениеЗаполнено(ДатаПроведения) Тогда
            
            Если НачалоДня(ДатаНачала) =  НачалоДня(ДатаКонца) И ЗначениеЗаполнено(ДатаНачала) Тогда
                ДатаПроведения = КонецДня(ДатаНачала); 
            Иначе
                Текст = НСтр("ru='Обнаружена пустая дата для создания банковской выписки. Документ пропущен. ';uk='Виявлена порожня дата для створення банківської виписки. Документ пропущений.'");
                СообщениеПользователю(Текст, Ложь);
                Продолжить;
            КонецЕсли;
                    
        КонецЕсли;
        
        СтрокаТаблЗнач = ВыборкаИзРезультатовЗапроса.Найти(КонецДня(ДатаПроведения), "ДатаДок");
        
        Если СтрокаТаблЗнач = Неопределено Тогда
            
            ОбъектДокументаВыпискаПоРасчетномуСчету = Документы["ВыпискаПоРасчетномуСчету"].СоздатьДокумент();
            ОбъектДокументаВыпискаПоРасчетномуСчету.Организация    = БанковскийСчет.Владелец;
            ОбъектДокументаВыпискаПоРасчетномуСчету.БанковскийСчет = БанковскийСчет;
            ОбъектДокументаВыпискаПоРасчетномуСчету.Дата           = КонецДня(ДатаПроведения);
            
            ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьНовыйНомер();
            
            СозданНовыйДокумент = Истина;
            
        Иначе
            
            ОбъектДокументаВыпискаПоРасчетномуСчету         = СтрокаТаблЗнач.Ссылка.ПолучитьОбъект();
            
            СозданНовыйДокумент = Ложь;
            
        КонецЕсли;
        
        Пока ТаблицаДокументовКИмпорту[0].ДатаПроведения = ДатаПроведения Цикл
            
            Если ТаблицаДокументовКИмпорту[0].ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
                ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи;
                
            ИначеЕсли ТаблицаДокументовКИмпорту[0].ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
                ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи;
                
            ИначеЕсли ТаблицаДокументовКИмпорту[0].ВидОперации 
                        = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
                    ИЛИ ТаблицаДокументовКИмпорту[0].ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
                ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи;
                
            ИначеЕсли ТаблицаДокументовКИмпорту[0].ВидОперации
                        = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту
                    ИЛИ ТаблицаДокументовКИмпорту[0].ВидОперации 
                     = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
                ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи;
                
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ТаблицаДокументовКИмпорту[0].СсылкаНаДокумент) Тогда
                
                СтрокаОбъектДокументаВыпискаПоРасчетномуСчету = ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть.Добавить();
                СтрокаОбъектДокументаВыпискаПоРасчетномуСчету.ПлатежныйДокумент = ТаблицаДокументовКИмпорту[0].СсылкаНаДокумент;
                
                СтрокаОбъектДокументаВыпискаПоРасчетномуСчету.Сумма = ТаблицаДокументовКИмпорту[0].СуммаДокумента;
                
            КонецЕсли;
            
            ТаблицаДокументовКИмпорту.Удалить(0);
            
            Если ТаблицаДокументовКИмпорту.Количество() = 0 Тогда
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
                
        Если ОбъектДокументаВыпискаПоРасчетномуСчету.Модифицированность()
                И (ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Количество() > 0
                ИЛИ ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Количество() > 0) Тогда    
            
            Попытка
                
                ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Запись);
                ДозаполнитьРеквизитыДокумента(ОбъектДокументаВыпискаПоРасчетномуСчету);                    
                Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='%1 документ ""Выписка по банковскому счету"" № %2 от %3.';uk='%1 документ ""Виписка за банківським рахунком"" № %2 від %3.'"), 
                    ?(СозданНовыйДокумент, "Создан", "Перезаписан"), 
                ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
                СообщениеПользователю(Текст, Ложь);

            Исключение

                Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                                    НСтр("ru='Документ ""Выписка по банковскому счету"" № %1 от %2 не %3! Произошли ошибки при записи!';uk='Документ ""Виписка по банківському рахунку"" № %1 від % 2 не %3! Сталися помилки при запису!'"), 
                                    ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                                    ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, 
                                    ?(СозданНовыйДокумент, "создан", "перезаписан"));
                СообщениеПользователю(Текст, Ложь);
                СообщениеПользователю(ОписаниеОшибки(), Ложь)
            КонецПопытки;
            
            Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПометкаУдаления Тогда
                ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьПометкуУдаления(Ложь);
            КонецЕсли;
            
            Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПроверитьЗаполнение()
                    И ОбъектДокументаВыпискаПоРасчетномуСчету.Дата <= КонецДня(ТекущаяДата()) Тогда
                
                Попытка
                    
                    ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Проведение);
                    ДозаполнитьРеквизитыДокумента(ОбъектДокументаВыпискаПоРасчетномуСчету);    
                    
                    Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                        НСтр("ru='%1 документ ""Выписка по банковскому счету"" № %2 от %3.';uk='%1 документ ""Виписка за банківським рахунком"" № %2 від %3.'"), 
                        ?(СозданНовыйДокумент, "Проведен", "Перепроведен"), 
                    ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                    ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
                    
                    СообщениеПользователю(Текст, Ложь);
                                        
                Исключение
                    
                    Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                                        НСтр("ru='Документ ""Выписка по банковскому счету"" № %1 от %2 не %3! Произошли ошибки при проведении!';uk='Документ ""Виписка з банківського рахунку"" № %1 від % 2 не %3! Сталися помилки при проведенні!'"),
                                        ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                                        ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, 
                                        ?(СозданНовыйДокумент, "проведен", "перепроведен"));
                    
                    СообщениеПользователю(Текст, Ложь);
                    СообщениеПользователю(ОписаниеОшибки(), Ложь)
                КонецПопытки
                
            Иначе    
                
                Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                                    НСтр("ru='Документ ""Выписка по банковскому счету"" № %1 от %2 не %3! Произошли ошибки при проведении!';uk='Документ ""Виписка з банківського рахунку"" № %1 від % 2 не %3! Сталися помилки при проведенні!'"),
                                    ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, 
                                    ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, 
                                    ?(СозданНовыйДокумент, "проведен", "перепроведен"));
                СообщениеПользователю(Текст, Ложь);

            КонецЕсли;
            
        ИначеЕсли НЕ ОбъектДокументаВыпискаПоРасчетномуСчету.Ссылка.Пустая()
                И ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Количество() = 0
                 И ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Количество() = 0 Тогда
            
            ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьПометкуУдаления(Истина);    
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЭкспортПлатежей(КонПериода) Экспорт
    
    //Если Истина Тогда //ВыгрузкаПлатежейВНовыйИнтерфейс
        ДействиеАналитики = "ВыгрузкаПлатежейV3";    
    //Иначе
    //    ДействиеАналитики = "ВыгрузкаПлатежей";
    //КонецЕсли;
    
    ТЗЭкспорт = отпСформироватьТЗИсходящихПлатежей(); //создаем таблицу значений для экспорта
    
    ЕстьОтмеченные = Ложь;
    Для Каждого СтрокаТЧ Из ЭкспортПлатежныеДокументы Цикл 
        
        Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) Тогда
            Продолжить;    
        КонецЕсли;
        
        Если СтрокаТЧ.Флажок Тогда
            
            Если Не ЗначениеЗаполнено(СтрокаТЧ.НазначениеПлатежа) Тогда
                ТекстСообщения = НСтр("ru = 'Внимание! В строке №%НомерСтроки% не заполнено назначение платежа. Документ не выгружен.' ; uk = 'Увага! У рядку №%НомерСтроки% не заповнено призначення платежу. Документ не вивантажено.' ");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.КартинкаОшибки = 0;
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                Продолжить;
            КонецЕсли;

            ДлинаНазначениеПлатежа = СтрДлина(СтрокаТЧ.НазначениеПлатежа);
            Если ДлинаНазначениеПлатежа < 5 Или ДлинаНазначениеПлатежа > 420 Тогда
                ТекстСообщения = НСтр("ru = 'Внимание! В строке №%НомерСтроки% длина назначения платежа должна быть в диапазоне от 5 до 420 символов. Документ не выгружен.' ; uk = 'Увага! У рядку №%НомерСтроки% довжина призначення платежу повинна бути в діапазоні від 5 до 420 символів. Документ не вивантажено.' ");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.КартинкаОшибки = 0;
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                Продолжить;
            КонецЕсли;

            Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетКонтрагента) Тогда
                ТекстСообщения = НСтр("ru = 'Внимание! В строке №%НомерСтроки% не заполнен расчетный счет. Документ не выгружен.' ; uk = 'Увага! У рядку №%НомерСтроки% не заповнений розрахунковий рахунок. Документ не вивантажено.' ");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.КартинкаОшибки = 0;
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                Продолжить;
            КонецЕсли;
            
            Если (НЕ СчетВФорматеIBAN(СтрокаТЧ.СчетКонтрагента.НомерСчета) И НЕ ЭтоКарта(СтрокаТЧ.СчетКонтрагента.НомерСчета)) ИЛИ (НЕ СчетВФорматеIBAN(СтрокаТЧ.БанковскийСчет.НомерСчета) И НЕ ЭтоКарта(СтрокаТЧ.БанковскийСчет.НомерСчета)) Тогда
                
                ТекстСообщения = НСтр("ru = 'Внимание! В строке №%НомерСтроки% обнаружен расчетный счет не в формате IBAN. Документ не выгружен.' ; uk = 'Увага! У рядку №%НомерСтроки% виявлений розрахунковий рахунок не в форматі IBAN. Документ не вивантажено.' ");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СообщениеПользователю(ТекстСообщения, Ложь);
                СтрокаТЧ.КартинкаОшибки = 0;
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                Продолжить;
            КонецЕсли;
            
            ЕстьОтмеченные = Истина;
            
            НоваяСтрока = ТЗЭкспорт.Добавить();
            отпДобавитьДокВТЗИсходящихПлатежей(СтрокаТЧ, НоваяСтрока); //заполнение таблицы экспорта
            
        КонецЕсли;    
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        ТекстСообщения = НСтр("ru = 'Нет отмеченных платежных документов для экспорта!'; uk = 'Немає відмічених платіжних документів для експорту!'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат;
    КонецЕсли;

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат;
    КонецЕсли;

    ЕстьОшибки = Ложь;
    //теперь отправка каждого документа отдельно
    КоличествоПлатежей = 0;
    Для Каждого СтрокаТЗ Из ТЗЭкспорт Цикл
        Попытка
            ВсеОК = отпОтправитьОдинПлатеж(СтрокаТЗ);
            Если НЕ ВсеОК Тогда
                ЕстьОшибки = Истина;
            Иначе
                КоличествоПлатежей = КоличествоПлатежей + 1;
            КонецЕсли;
        Исключение
            ТекстСообщения = НСтр("ru = 'Ошибка при отправке платежа в строке №'; uk = 'Помилка при відправці платежу в рядку №' ") + СтрокаТЗ.НомерСтрокиЭкспорта;
            СообщениеПользователю(ТекстСообщения, Ложь);
            СообщениеПользователю(ОписаниеОшибки(), Ложь);
            ЭкспортПлатежныеДокументы[СтрокаТЗ.НомерСтрокиЭкспорта-1].КартинкаОшибки = 0;
            ЭкспортПлатежныеДокументы[СтрокаТЗ.НомерСтрокиЭкспорта-1].ТекстОшибки = ТекстСообщения;
        КонецПопытки;    
    КонецЦикла;
    
    Если ЕстьОшибки Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при отправке платежей! Все проблемные строки отмечены в списке.'; uk = 'Помилка при відправці платежів! Всі проблемні рядки відзначені в списку.' ");
        СообщениеПользователю(ТекстСообщения, Ложь);
    Иначе
        
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики ,,,"КоличествоПлатежей", Формат(КоличествоПлатежей, "ЧГ=0"));

        ТекстСообщения = НСтр("ru = 'Все отмеченные документы успешно выгружены.'; uk = 'Всі відзначені документи успішно вивантажені.' ");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    //ОбновитьОстаткиПоСчетам(КонецДня(КонПериода));
    
КонецПроцедуры // ЭкспортПлатежей()

Функция отпСформироватьТЗИсходящихПлатежей()
    
    тзИсхПлатежей = Новый ТаблицаЗначений;  
    
    тзИсхПлатежей.Колонки.Добавить("НомерСтрокиЭкспорта");
    
    тзИсхПлатежей.Колонки.Добавить("НомерСчета");
    
    тзИсхПлатежей.Колонки.Добавить("НомерСчетаКонтрагента");
    тзИсхПлатежей.Колонки.Добавить("КодБанкаКонтрагента");
    тзИсхПлатежей.Колонки.Добавить("КодКонтрагента");
    тзИсхПлатежей.Колонки.Добавить("НаименованиеКонтрагента");
    
    тзИсхПлатежей.Колонки.Добавить("ДатаПлатежа");
    тзИсхПлатежей.Колонки.Добавить("НазначениеПлатежа");
    
    тзИсхПлатежей.Колонки.Добавить("НомерПоручения");
    тзИсхПлатежей.Колонки.Добавить("Сумма");
    тзИсхПлатежей.Колонки.Добавить("Валюта");
    
    Возврат тзИсхПлатежей;
    
КонецФункции // отпСформироватьТЗИсходящихПлатежей()

Процедура отпДобавитьДокВТЗИсходящихПлатежей(СтрокаЭкспорта, СтрокаПлатежа)
    
    СтрокаПлатежа.НомерСтрокиЭкспорта = СтрокаЭкспорта.НомерСтроки;
    БСчет = ?(ЗначениеЗаполнено(СтрокаЭкспорта.СчетКонтрагента), СтрокаЭкспорта.СчетКонтрагента, СтрокаЭкспорта.БанковскийСчет);
    СтрокаПлатежа.НомерСчета = СокрЛП(СтрокаЭкспорта.БанковскийСчет.НомерСчета);
    СтрокаПлатежа.НомерСчетаКонтрагента = СокрЛП(БСчет.НомерСчета);
    СтрокаПлатежа.КодБанкаКонтрагента = СокрЛП(БСчет.Банк.Код);
    
    //Контр = СтрокаЭкспорта.Контрагент;
    Контр = БСчет.Владелец;
    КодКонтр = "";
    
    Если ТипЗнч(Контр) = Тип("СправочникСсылка.Контрагенты") И НЕ ЭтоЮрЛицо(Контр) Тогда 
        
        Если ИдКонф = "KUBU" Тогда
            КодКонтр = KUBU_ПолучитьКодКонтрагентаОрганизации(Контр, СтрокаЭкспорта.Дата, "ИНН");
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            КодКонтр = Контр.ИННПлательщикаНДС;    
        Иначе    
            КодКонтр = Контр.ИНН;
        КонецЕсли;
        
        Если НЕ ЗначениеЗаполнено(КодКонтр) ИЛИ КодКонтр = "400000000000" Тогда
            Если ИдКонф = "KUBU" Тогда
                КодКонтр = KUBU_ПолучитьКодКонтрагентаОрганизации(Контр, СтрокаЭкспорта.Дата, "КодПоЕГРПОУ");        
            Иначе    
                КодКонтр = Контр.КодПоЕДРПОУ;
            КонецЕсли;    
        КонецЕсли;

    Иначе
        
        Если ИдКонф = "KUBU" Тогда
            КодКонтр = KUBU_ПолучитьКодКонтрагентаОрганизации(Контр, СтрокаЭкспорта.Дата, "КодПоЕГРПОУ");        
        Иначе
            Попытка
                КодКонтр = Контр.КодПоЕДРПОУ;
            Исключение
                Попытка
                    КодКонтр = Контр.КодПоДРФО; //это спр. физ. лиц?
                Исключение
                КонецПопытки;
                
            КонецПопытки;            
            
        КонецЕсли;
                
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(КодКонтр) Тогда 
        ТекстСообщения = НСтр("ru='Внимание! По строке №%НомерСтроки% не заполнен код контрагента. Документ не может быть отправлен.'; uk='Увага! По рядку №%НомерСтроки% не заповнений код контрагента. Документ не може бути відправлений.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаЭкспорта.НомерСтроки);
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
                
    СтрокаПлатежа.КодКонтрагента = СокрЛП(КодКонтр);
    
    СтрокаПлатежа.НаименованиеКонтрагента = СокрЛП(Контр.Наименование);
    СтрокаПлатежа.ДатаПлатежа = Формат(СтрокаЭкспорта.Дата, "ДФ=дд.ММ.гггг");
    СтрокаПлатежа.НазначениеПлатежа =  СокрЛП(СтрокаЭкспорта.НазначениеПлатежа);
    СтрокаПлатежа.НомерПоручения = Прав(СокрЛП(?(СтрДлина(СтрокаЭкспорта.Номер) > 10,СтрЗаменить(СтрокаЭкспорта.Номер,"-",""),СтрокаЭкспорта.Номер)),10);
    СтрокаПлатежа.Сумма = Формат(СтрокаЭкспорта.СуммаДокумента, "ЧГ=0;ЧДЦ=2;ЧРД=.");
    СтрокаПлатежа.Валюта = "UAH";
    
КонецПроцедуры // отпДобавитьДокВТЗИсходящихПлатежей()

Функция отпОтправитьОдинПлатеж(СтрокаЭкспорта)
    
    //Если Истина Тогда //ВыгрузкаПлатежейВНовыйИнтерфейс
        
        Результат = ОтправитьПлатежЧерезАвтоклиент(СтрокаЭкспорта);
        
    //Иначе    
    //    
    //    СтрокаЗапроса = отпСформироватьСтрокуЗапросаДляОтправкиПлатежа(СтрокаЭкспорта); //заполнили строку запроса параметрами
    //    
    //    //получим адрес для отправки
    //    РесурсНаСервере = "/c2b_nbu_payment_new";
    //    //АдресДляОтправки = ИнтернетАдресДляСоединения + РесурсНаСервере;
    //    
    //    UserAgentHeaders = ОпределитьUserAgentHeaders();
    //    
    //    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
    //    
    //    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
    //        Сессия = Неопределено;
    //        Возврат Ложь;
    //    Иначе
    //        Статус = стРезультат.Статус;
    //        Сессия = стРезультат.Cookie;
    //        ТелоОтвета = стРезультат.ТелоОтвета;
    //    КонецЕсли;
    //    
    //    // если не успешно сообщим ошибку
    //    Если Статус <> 200 Тогда            
    //        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на экспорт платежных документов!';uk='Помилка надсилання запиту на експорт платіжних документів!'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        Возврат Ложь;
    //    КонецЕсли;
    //    
    //    Результат = отпПрочитатьXMLОтветНаОтправку(ТелоОтвета);
    //КонецЕсли;
    
    //ДатаПлатежа = СтрокаЭкспорта.ДатаПлатежа;
    Если Результат = Истина Тогда
        //ТекстСообщения = НСтр("ru='Отправлен платеж по строке № ';uk='Відправлений платіж по рядку № '") + СтрокаЭкспорта.НомерСтрокиЭкспорта;
        //СообщениеПользователю(ТекстСообщения);
    Иначе 
        ТекстСообщения = НСтр("ru='Ошибка отправки платежа по строке № ';uk='Помилка відправлення платежу по рядку № '") + СтрокаЭкспорта.НомерСтрокиЭкспорта;
        СообщениеПользователю(ТекстСообщения, Ложь);
        ЭкспортПлатежныеДокументы[СтрокаЭкспорта.НомерСтрокиЭкспорта-1].ТекстОшибки = ТекстСообщения;
        ЭкспортПлатежныеДокументы[СтрокаЭкспорта.НомерСтрокиЭкспорта-1].КартинкаОшибки = 0;
    КонецЕсли;    

    Возврат Результат;
    
КонецФункции // отпОтправитьОдинПлатеж()

Функция ЭкранироватьJSON(Знач Стр)
    
    Стр = СтрЗаменить(Стр,"\","\\");
    Стр = СтрЗаменить(Стр,Символы.ПС,"\n");
    Стр = СтрЗаменить(Стр,Символы.ВК,"\r");
    Стр = СтрЗаменить(Стр,Символы.Таб,"\t");
    Стр = СтрЗаменить(Стр,"/","\/");
    Стр = СтрЗаменить(Стр,"""","\""");
    Возврат Стр;
    
КонецФункции

Функция ПолучитьПараметрСчетаАК(НомерСчета)
    
    Если ЭтоКарта(НомерСчета)  Тогда 
        Возврат """recipient_card"":""" + НомерСчета + """,";
    Иначе        
        Возврат """recipient_account"":""" + НомерСчета + """,";
    КонецЕсли;
    
КонецФункции

Функция ЭтоКарта(НомерСчета) 
    
    КопияСчета = ПреобразоватьНомерСчетаИзФорматаIBAN(НомерСчета);
    
    //Если Найти("2605,2655,2260,2265,9992,5169,5329", Лев(КопияСчета, 4)) > 0 Тогда  //2924,

    Если Найти("516933,558424,532957,424600", Лев(КопияСчета, 6)) > 0 Тогда 
        Возврат Истина;
    Иначе        
        Возврат Ложь;
    КонецЕсли;

КонецФункции

Функция ОтправитьПлатежЧерезАвтоклиент(СтрокаЭкспорта)
    
    Назначение = ЭкранироватьJSON((СтрокаЭкспорта.НазначениеПлатежа));
    НаимКонтрагента = ЭкранироватьJSON((СтрокаЭкспорта.НаименованиеКонтрагента));
    
    СтрокаЗапроса = "{""document_number"":""" + ЭкранироватьJSON(ЗаменитьСС(СтрокаЭкспорта.НомерПоручения)) + """, " 
        + ПолучитьПараметрСчетаАК(СтрокаЭкспорта.НомерСчетаКонтрагента)
        + """recipient_nceo"":""" + СтрокаЭкспорта.КодКонтрагента
        + """, ""payment_naming"":""" + НаимКонтрагента
        + """, ""payment_amount"":""" + СтрокаЭкспорта.Сумма
        + """, ""recipient_ifi"":""" + СтрокаЭкспорта.КодБанкаКонтрагента
        //+ """, ""recipient_ifi_text"":""" + ЗаменитьСС(СокрЛП(СчетКонтрагента.Банк.Наименование))
        + """, ""payment_destination"":""" + Назначение
        + """, ""payer_account"":""" + СтрокаЭкспорта.НомерСчета
        + """, ""payment_ccy"":""" + "UAH"
        + """, ""document_type"":""cr"", ""payment_date"":""" + СтрокаЭкспорта.ДатаПлатежа
        + """, ""payment_accept_date"":""" + СтрокаЭкспорта.ДатаПлатежа + """}";

    ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(СтрокаЗапроса);
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ПС, "");
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ВК, "");

    //получим адрес для отправки
    РесурсНаСервере = "/api/proxy/payment/create";

    Кодировка = КодировкаТекста.UTF8;
    УдалитьBOM = Истина;
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    //Если ЗначениеЗаполнено(ИдАК) Тогда
    //    НоваяСтрока = Заголовки.Добавить();
    //    НоваяСтрока.Заголовок = "id";
    //    НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    //КонецЕсли;

    //НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "token";
    //НоваяСтрока.ЗначениеЗаголовка = ТокенАК;

    //НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "Content-Type";
    //НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";

    Post = Истина;

    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", , Заголовки,
        Кодировка,, Post,,, УдалитьBOM, ТелоЗапросаКурл);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат Ложь;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
    
    // если не успешно сообщим ошибку
    Если Статус <> 201 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на экспорт платежных документов!';uk='Помилка надсилання запиту на експорт платіжних документів!'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;
    
    Возврат Истина; 
          
КонецФункции

//Функция отпПрочитатьXMLОтветНаОтправку(Ответ)  
//    
//    Ответ = Нрег(Ответ);              
//    ОшибокНет = Истина;     
//    ТекстСообщения = ""; 
//    
//    КодОшибки = спцПрочитатьАтрибут("error", Ответ);
//    Ссылка = спцПрочитатьАтрибут("ref", Ответ);     
//    Тип = спцПрочитатьАтрибут("type", Ответ); 
//    Сообщение = спцПрочитатьАтрибут("message", Ответ); 
//    Поле = спцПрочитатьАтрибут("err_fld", Ответ); 
//    Описание = спцПрочитатьАтрибут("err_descr", Ответ);    
//    
//    Если Найти(Ответ, "<c2b") = 0 Тогда
//        ТекстСообщения = "Ошибка ""c2b""; ";
//        ОшибокНет = Ложь;
//    КонецЕсли;

//    Если Найти(Ответ, "<error") = 1 Тогда  
//        ТекстСообщения = ТекстСообщения + "Ошибка ""ERROR"", тип : " + Тип + ", текст : " + Сообщение + "; ";
//        ОшибокНет = Ложь;
//    КонецЕсли;    
//    
//    Если ЗначениеЗаполнено(КодОшибки) И (КодОшибки <> "0") Тогда  
//        ТекстСообщения = ТекстСообщения + "Ошибка ""PAYMENT.error"" : " + КодОшибки + "; ";    
//        ОшибокНет = Ложь;
//    КонецЕсли;    
//                                                                                               
//    Если ЗначениеЗаполнено(Поле) Тогда                                    
//        
//        Если ВРег(Поле) = "A_CRF" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Код ЕДРПОУ организации';uk='Код ЄДРПОУ організації'") + " (A_CRF)"
//        ИначеЕсли ВРег(Поле) = "B_CRF" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Код ЕДРПОУ контрагента';uk='Код ЄДРПОУ контрагента'") + " (B_CRF)"
//            + НСтр("ru=' или номер счета контрагента';uk=' або номер рахунку контрагента'") + " (B_ACC)";
//        ИначеЕсли ВРег(Поле) = "A_ACC" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Номер счета организации';uk='Номер рахунку організації'") + " (A_ACC)"
//        ИначеЕсли ВРег(Поле) = "B_ACC" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Номер счета или МФО контрагента';uk='Номер рахунку або МФО контрагента '") + " (B_ACC)"
//        ИначеЕсли ВРег(Поле) = "B_BIC" Тогда
//            ОшибочныйРеквизит = НСтр("ru='МФО (код) банка контрагента';uk='МФО (код) банку контрагента'") + " (B_BIC)"
//        ИначеЕсли ВРег(Поле) = "B_NAME" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Полное наименование контрагента';uk='Повне найменування контрагента'") + " (B_NAME)"
//        ИначеЕсли ВРег(Поле) = "DAT_CUS" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Дата платежа';uk='Дата платежу'") + " (DAT_CUS)"
//        ИначеЕсли ВРег(Поле) = "DAT_VAL" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Дата платежа';uk='Дата платежу'") + " (DAT_VAL)"
//        ИначеЕсли ВРег(Поле) = "DETAILS" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Назначение платежа';uk='Призначення платежу'") + " (DETAILS)"
//        ИначеЕсли ВРег(Поле) = "MUR" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Номер поручения';uk='Номер доручення'") + " (MUR)"
//        ИначеЕсли ВРег(Поле) = "AMT" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Сумма документа';uk='Сумма документа'") + " (amt)"
//        ИначеЕсли ВРег(Поле) = "CCY" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Валюта';uk='Валюта'") + " (ccy)"
//        ИначеЕсли ВРег(Поле) = "ENDATE" Тогда
//            ОшибочныйРеквизит = НСтр("ru='Дата платежа';uk='Дата платежу'") + " (endate)"
//        Иначе
//            ОшибочныйРеквизит = Поле;
//        КонецЕсли;
//        ТекстСообщения = ТекстСообщения + НСтр("ru='Ошибка заполнения реквизита ';uk='Помилка заповнення реквізиту '") + ОшибочныйРеквизит;
//        
//        ОшибокНет = Ложь;
//    КонецЕсли;
//    
//    Если ЗначениеЗаполнено(Описание) Тогда                                    
//        ТекстСообщения = ТекстСообщения + "Описание ошибки : " + Описание + ".";
//    КонецЕсли;
//    
//    Если ЗначениеЗаполнено(ТекстСообщения) Тогда
//        СообщениеПользователю(ТекстСообщения, Ложь); 
//    КонецЕсли;    
//    
//    Возврат ОшибокНет;
//КонецФункции // отпПрочитатьXMLОтветНаОтправку()

//Функция отпСформироватьСтрокуЗапросаДляОтправкиПлатежа(СтрокаЭкспорта)   
//                                 
//    Назначение = EncodeURL(ЗаменитьСС(СтрокаЭкспорта.НазначениеПлатежа));
//    //ДатаПлатежа = СтрокаЭкспорта.ДатаПлатежа;    
//    НаимКонтрагента = EncodeURL(ЗаменитьСС(СтрокаЭкспорта.НаименованиеКонтрагента));      
//    
//    СтрокаЗапроса = 
//                "A_ACC=" + СтрокаЭкспорта.НомерСчета 
//                + "&amt=" + СтрокаЭкспорта.Сумма
//                + "&B_ACC=" + СтрокаЭкспорта.НомерСчетаКонтрагента
//                + "&B_BIC=" + СтрокаЭкспорта.КодБанкаКонтрагента
//                + "&B_CRF=" + СтрокаЭкспорта.КодКонтрагента
//                + "&B_NAME=" + НаимКонтрагента
//                + "&DAT_INP=" + СтрокаЭкспорта.ДатаПлатежа                            
//                + "&DAT_VAL=" + СтрокаЭкспорта.ДатаПлатежа
//                + "&DETAILS=" + Назначение
//                + "&MUR=" + EncodeURL(ЗаменитьСС(СтрокаЭкспорта.НомерПоручения))
//                + "&type=cr"                                       
//                + "&PUREXML=true";
//                    
//    Возврат СтрокаЗапроса;
//КонецФункции //отпСформироватьСтрокуЗапросаДляОтправкиПлатежа()

Процедура ПолучитьЗарплатныеПроектыРЛ() Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    ДействиеАналитики = "ПолучениеСпискаЗППроектовДляРЛ";
    
    РесурсНаСервере = "/api/paysheets/journal";
    СтрокаЗапроса = "";
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    POST = Ложь;
    //УдалитьBOM = Истина;
    
    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        ТекстСообщения = НСтр("ru='Получение списка доступных зарплатных проектов для расчетных листов не выполнено.';uk='Отримання списку доступних зарплатних проектів для розрахункових листів не виконано.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка доступных зарплатных проектов для расчетных листов!';uk='Помилка відправки запиту на отримання списку доступних зарплатних проектів для розрахункових листів!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    ТЧ_ЗПРЛ.Очистить();
    
    ПрочитатьТекстОтветаСпискаЗПРЛ(ТелоОтвета);
    
    Если ТЧ_ЗПРЛ.Количество() = 0  Тогда
        ТекстСообщения = НСтр("ru='Отсутствуют доступные зарплатные проекты для расчетных листов.';uk='Відсутні доступні зарплатні проекти для розрахункових листів.'");
        СообщениеПользователю(ТекстСообщения);
    КонецЕсли;

    ТекущийЗПРЛ = "";

    //Если ЗначениеЗаполнено(ТекущийЗПРЛ) Тогда
    //    Если ТЧ_ЗПРЛ.Найти(ТекущийЗПРЛ) = Неопределено Тогда
    //        ТекущийЗПРЛ = "";
    //    КонецЕсли;
    //КонецЕсли;
    //СписокЗПРЛ.Очистить();

    Для Каждого СтрокаТЗ Из ТЧ_ЗПРЛ Цикл

        Если НЕ ЗначениеЗаполнено(ТекущийЗПРЛ) тогда
            ТекущийЗПРЛ = СтрокаТЗ.BPP_REF;
        КонецЕсли;
        //СписокЗПРЛ.Добавить(СтрокаТЗ.BPP_REF, СтрокаТЗ.BPP_PPD);

    КонецЦикла;

КонецПроцедуры // ПолучитьЗарплатныеПроекты()

Функция ПрочитатьТекстОтветаСпискаЗПРЛ(Текст)
    
    стРезультат = Новый Структура;

    СтруктураЗП = jsonПрочитатьИнициализация(Текст);
    стРезультат = ВыводОшибкиЗапросаЗП(СтруктураЗП);
    РезультатВозврата = стРезультат.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураЗП) Тогда
        ТекстСообщения = стРезультат.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат 0
    КонецЕсли;

    СписокЗПРЛ.Очистить();

    i = 0;
    Для каждого ЭлементЗП Из СтруктураЗП Цикл
        НоваяСтрокаТЧ_ЗПРЛ = ТЧ_ЗПРЛ.Добавить();
        НоваяСтрокаТЧ_ЗПРЛ.BPP_REF = ЭлементЗП.project.reference;//референс ЗП проекта
        НоваяСтрокаТЧ_ЗПРЛ.BPP_PPD = ЭлементЗП.project.name;//имя ЗП проекта//полное наименование предприятия
        ПериодНачисления = Лев(ЭлементЗП.reportYm, 4) + "." + Сред(ЭлементЗП.reportYm, 5);
        НоваяСтрокаТЧ_ЗПРЛ.BPP_PP = ПериодНачисления;//период начисления ЗП проекта
        СписокЗПРЛ.Добавить(ЭлементЗП.project.reference, ЭлементЗП.project.name + ", " + ПериодНачисления);
        i = i + 1
    КонецЦикла;    
    
    Возврат 1;
    
КонецФункции // ПрочитатьТекстОтветаСпискаЗП()

Процедура ПолучитьЗарплатныеПроекты() Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    ДействиеАналитики = "ПолучениеСпискаЗП";
    
    РесурсНаСервере = "/api/pay/mp/list-groups";
    СтрокаЗапроса = "";
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    POST = Ложь;
    
    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка доступных зарплатных проектов!';uk='Помилка відправки запиту на отримання списку доступних зарплатних проектів!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    ТЧ_ЗП.Очистить();
    
    ПрочитатьТекстОтветаСпискаЗП(ТелоОтвета);
    
    Если ТЧ_ЗП.Количество() = 0  Тогда
        ТекстСообщения = НСтр("ru='Отсутствуют доступные зарплатные проекты.';uk='Відсутні доступні зарплатні проекти.'");
        СообщениеПользователю(ТекстСообщения);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ТекущийЗП) Тогда
        
        Если ТЧ_ЗП.Найти(ТекущийЗП) = Неопределено Тогда
            ТекущийЗП = "";
        КонецЕсли;
        
    КонецЕсли;
    
    СписокЗП.Очистить();
    
    Для Каждого СтрокаТЗ Из ТЧ_ЗП Цикл
        
        Если НЕ ЗначениеЗаполнено(ТекущийЗП) тогда
            ТекущийЗП = СтрокаТЗ.BPP_PP//BPP_REF;
        КонецЕсли;
        
        //СписокЗП.Добавить(СтрокаТЗ.BPP_REF, СтрокаТЗ.BPP_PPD);
        СписокЗП.Добавить(СтрокаТЗ.BPP_PP, СтрокаТЗ.BPP_PPD)
    КонецЦикла;
    
КонецПроцедуры // ПолучитьЗарплатныеПроекты()

Процедура ПрочитатьТекстОтветаСпискаЗП(Текст)

    стРезультат = Новый Структура;

    СтруктураЗП = jsonПрочитатьИнициализация(Текст);
    стРезультат = ВыводОшибкиЗапросаЗП(СтруктураЗП);
    РезультатВозврата = стРезультат.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураЗП) Тогда
        ТекстСообщения = стРезультат.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат
    КонецЕсли;

    Попытка
        СтруктураЗПdata = СтруктураЗП.data
    Исключение
        ТекстОписаниеОшибки = ОписаниеОшибки();
        ТекстСообщения = ТекстОписаниеОшибки + Символы.ПС
            + НСтр("ru='Парсинг при получении списка доступных зарплатных проектов не выполнен.';uk='Парсинг при отриманні списку доступних зарплатних проектів не виконаний.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат
    КонецПопытки;

    сзЗП = Новый СписокЗначений;
    мЗП = Новый Массив(Макс(СтруктураЗПdata.Количество(), 1), 3);
    i = 0;
    Для каждого ЭлементЗП Из СтруктураЗПdata Цикл
        //MASSPAYMENTS - проект типа X, STUDENT - проект типа S, HESED - проект типа H, SALARY - прочие З\П проекты
        //Если Найти("Х,P,Z,H,x,p,z,h", СтрокаТз.BPP_PPTYPE) > 0 Тогда//Х (массовые), P (пенсы), Z (соцы), H (хеседы)
        Если Найти("STUDENT,SALARY", ЭлементЗП.type) = 0 Тогда
            Продолжить
        КонецЕсли;
        //мЗП[i][0] = ЭлементЗП.type;//код проекта//BPP_PP;
        //мЗП[i][1] = ЭлементЗП.name;//имя проекта//BPP_PPD;    //    полное наименование предприятия
        //мЗП[i][2] = ЭлементЗП.rko;//справочный % комиссии//BPP_PPDR;    //    сокращенное наименование предприятия
        //сзЗП.Добавить(ЭлементЗП.name, ЭлементЗП.name + ", " + ЭлементЗП.type + ", " + ЭлементЗП.rko + "%");
        //i = i + 1

        НоваяСтрока = ТЧ_ЗП.Добавить();
        НоваяСтрока.BPP_PPD = ЭлементЗП.name;//имя проекта
        НоваяСтрока.BPP_PP = ЭлементЗП.type;//код проекта
        НоваяСтрока.BPP_PPDR = ЭлементЗП.rko;//справочный % комиссии
        //НоваяСтрока.BAG_AG = ;
        //НоваяСтрока.BPP_REF = ;

    КонецЦикла;    
    
    Возврат
    
КонецПроцедуры // ПрочитатьТекстОтветаСпискаЗП()

Функция ВыводОшибкиЗапросаЗП(СтруктураСчетов) Экспорт//***временно удалить

    стРезультат = Новый Структура;
    ТекстСообщения = "";
    РезультатВозврата = Ложь;
    Попытка
        Если СтруктураСчетов.code = "400" Тогда
            ТекстСообщения = "code=" + СтруктураСчетов.code;
            РезультатВозврата = Истина
        КонецЕсли
    Исключение
    КонецПопытки;

    Попытка
        Если СтруктураСчетов.status    = "ERROR" Тогда
            ТекстСообщения = " status=" + СтруктураСчетов.status + " message=" + СтруктураСчетов.message;
            Попытка
                Для каждого эмdata Из СтруктураСчетов.data Цикл
                    ТекстСообщения = Символы.ПС + НСтр("ru='Группа ';uk='Група '") + эмdata.group
                        + НСтр("ru=', референс записи  ';uk=', референс запису '") + эмdata.id
                        + НСтр("ru=', номер карты ';uk=', номер картки '") + эмdata.pan
                        + НСтр("ru=', табельный номер ';uk=', табельний номер '") + эмdata.tabn
                        + НСтр("ru=', ИНН ';uk=', ІПН '") + эмdata.inn + НСтр("ru=', ФИО';uk=', ПІБ'");
                    Для каждого эмfio Из эмdata.fio Цикл
                        ТекстСообщения = ТекстСообщения + " " + эмfio
                    КонецЦикла
                КонецЦикла
            Исключение
            КонецПопытки;
            РезультатВозврата = Истина
        КонецЕсли
    Исключение
    КонецПопытки;

    стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
    стРезультат.Вставить("РезультатВозврата", РезультатВозврата);
    Возврат стРезультат

КонецФункции

Функция ПрочитатьРеквизитЗП(Текст, ИмяРеквизита)
    
    ПозРекв = Найти(Текст, ИмяРеквизита);
    
    Если ПозРекв = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при чтении реквизитов файла-ответа.';uk='Помилка при читанні реквізитів файла-відповіді.'");
        СообщениеПользователю(ТекстСообщения);
    КонецЕсли;
    
    СтрРек = Сред(Текст, ПозРекв, Найти(Текст, "</col>") - ПозРекв);
    СтрРек = Прав(СтрРек, СтрДлина(СтрРек) - Найти(СтрРек,">"));  
    Текст = Сред(Текст,Найти(Текст, "</col>") + 6);
    
    //Заменяем спецсимволы XML 
    Текст = спцЗаменитьСпецСимволыXML(Текст);
    
    Возврат СтрРек;
    
КонецФункции // ПрочитатьРеквизитЗП()

Процедура ПолучитьСписокКарт() Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    ДействиеАналитики = "СписокКарт";

    тзСписокКарт = Новый ТаблицаЗначений;

    СписокКарт.Очистить();
    ТабличноеПолеДобавлениеСотрудниковЗП.Очистить();

    СтрокаЗП = ПолучитьСтрокуЗП();
    
    Если СтрокаЗП = Неопределено Тогда
        Возврат;
    КонецЕсли;    

    РазмерСтраницыОтвета = 100;
    Номерpage = 0;

    Пока Истина Цикл

        РесурсНаСервере = "/api/pay/mp/list-receivers?group=" + ТекущийЗП + "&page=" + Строка(Номерpage)
            + "&page-size=" + РазмерСтраницыОтвета
            + ?(ЗначениеЗаполнено(ПоискПолучателейЗП), "&filter=" + EncodeURL(ЗаменитьСС(ПоискПолучателейЗП)), "");

        СтрокаЗапроса = "";

        POST = Ложь;
        //УдалитьBOM = Истина;
        UserAgentHeaders = ОпределитьUserAgentHeaders();
        
        стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Возврат;
        Иначе
            Статус = стРезультат.Статус;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка зарплатных карт!';uk='Помилка відправки запиту на отримання списку зарплатних карт!'");
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецЕсли;

        СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

        стРезультатПроверкиНаОшибки = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
        РезультатВозврата = стРезультатПроверкиНаОшибки.РезультатВозврата;
        Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
            ТекстСообщения = стРезультатПроверкиНаОшибки.ТекстСообщения;
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат
        КонецЕсли;

        стРезультатЧтения = ПрочитатьФайлОтветПоСпискамКарт(тзСписокКарт, СтруктураОтвета);
        тзСписокКарт = стРезультатЧтения.тзСписокКарт;
        мСписокПолучателей = стРезультатЧтения.мСписокПолучателей;

        Если Истина Тогда //здесь будет условие на отсутствие справочника ЗП карт в конфигурации
            Для Каждого СтрокаТЗ Из тзСписокКарт Цикл
                //    Если Не (СтрокаТЗ.status = "AVIP"
                //        Или СтрокаТЗ.status = "EXPC"
                //        Или СтрокаТЗ.status = "NOAU"
                //        Или СтрокаТЗ.status = "NORM"
                //        Или СтрокаТЗ.status = "NORN"
                //        Или СтрокаТЗ.status = "NRCP"
                //        Или СтрокаТЗ.status = "STLC"
                //        Или СтрокаТЗ.status = "LOST"
                //        Или СтрокаТЗ.status = "NACT"
                //        Или СтрокаТЗ.status = "0"
                //        Или СтрокаТЗ.status = "1"
                //        Или СтрокаТЗ.status = "2"
                //        Или СтрокаТЗ.status = "3"
                //        Или СтрокаТЗ.status = "4"
                //        Или СтрокаТЗ.status = "5"
                //        Или СтрокаТЗ.status = "6"
                //        Или СтрокаТЗ.status = "A"
                //        Или СтрокаТЗ.status = "C"
                //        Или СтрокаТЗ.status = "F") Тогда
                //        Продолжить;
                //    КонецЕсли;
                Если ПоискСотрудниковПоИНН Тогда
                    СписокКарт.Добавить(СтрокаТЗ.inn, СтрокаТЗ.number);
                Иначе
                    СписокКарт.Добавить(СтрокаТЗ.tabn, СтрокаТЗ.number);
                КонецЕсли;
                Если РежимОтладки Тогда
                    ТекстПолучателя = СтрокаТЗ.firstName + НСтр("ru=', табельный номер ';uk=', табельний номер '") + СтрокаТЗ.tabn
                        + НСтр("ru=', ИНН ';uk=', ІПН '") + СтрокаТЗ.inn + НСтр("ru=', номер карты ';uk=', номер картки '") + СтрокаТЗ.number;
                    СообщениеПользователю(ТекстПолучателя, Ложь)
                КонецЕсли
            КонецЦикла;
        КонецЕсли;    

        Если мСписокПолучателей.Количество() < РазмерСтраницыОтвета Тогда
            Прервать
        КонецЕсли;
        Номерpage = Номерpage + 1

    КонецЦикла;

    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
КонецПроцедуры    

Функция ПрочитатьФайлОтветПоСпискамКарт(тзСписокКарт, СтруктураОтвета)//ИмяФайла, ЕстьОшибки)

    стРезультатЧтения = Новый Структура;
    СпрСотр = Справочники.Сотрудники;

    Попытка
        //    данные по зп проекту
        тзСписокКарт.Колонки.Добавить("cardBrnm");
        тзСписокКарт.Колонки.Добавить("cardCardBranch");
        тзСписокКарт.Колонки.Добавить("cardSybrnm");
        тзСписокКарт.Колонки.Добавить("projectCode");
        тзСписокКарт.Колонки.Добавить("projectReference");
        //    данные по карте
        тзСписокКарт.Колонки.Добавить("number");
        тзСписокКарт.Колонки.Добавить("status");
        тзСписокКарт.Колонки.Добавить("type");
        //    данные по владельцу карты
        тзСписокКарт.Колонки.Добавить("clientID");
        тзСписокКарт.Колонки.Добавить("firstName");
        тзСписокКарт.Колонки.Добавить("lastName");
        тзСписокКарт.Колонки.Добавить("middleName");
        тзСписокКарт.Колонки.Добавить("tabn");
        тзСписокКарт.Колонки.Добавить("inn");
    Исключение
    КонецПопытки;

    Попытка
        мСписокПолучателей = СтруктураОтвета.data;

        ТекстСообщения = НСтр("ru='Получено из банка ';uk='Отримано з банку '") + мСписокПолучателей.Количество()
            + НСтр("ru=' сотрудников и карт.';uk=' співробітників і карток.'");
        СообщениеПользователю(ТекстСообщения, Ложь);

        Для каждого Получатель Из мСписокПолучателей Цикл
            fio = "";
            Для каждого ЭлементМассива Из Получатель.fio Цикл
                fio = fio + " " + ЭлементМассива
            КонецЦикла;
            fio = СокрЛП(fio);
            //    Список Карт Из ЗП Банка
            //НоваяСтрокатзСписокПолучателей = тзСписокПолучателей.Добавить();
            //НоваяСтрокатзСписокПолучателей.id = Получатель.id;
            //НоваяСтрокатзСписокПолучателей.pan = Получатель.pan;
            //НоваяСтрокатзСписокПолучателей.fio = fio;
            //НоваяСтрокатзСписокПолучателей.inn = Получатель.inn;
            //НоваяСтрокатзСписокПолучателей.group = Получатель.group;
            //НоваяСтрокатзСписокПолучателей.tabn = Получатель.tabn;
            НоваяСтрокатзСписокКарт = тзСписокКарт.Добавить();
            //    данные по зп проекту
            //НоваяСтрокатзСписокКарт.cardBrnm;
            //НоваяСтрокатзСписокКарт.cardCardBranch;
            //НоваяСтрокатзСписокКарт.cardSybrnm;
            //НоваяСтрокатзСписокКарт.projectCode;
            //НоваяСтрокатзСписокКарт.projectReference;
            //    данные по карте
            НоваяСтрокатзСписокКарт.number = Получатель.pan;
            //НоваяСтрокатзСписокКарт.status;
            НоваяСтрокатзСписокКарт.type = Получатель.group;
            //    данные по владельцу карты
            НоваяСтрокатзСписокКарт.clientID = Получатель.id;
            НоваяСтрокатзСписокКарт.firstName = fio;
            //НоваяСтрокатзСписокКарт.lastName;
            //НоваяСтрокатзСписокКарт.middleName;
            НоваяСтрокатзСписокКарт.tabn = Получатель.tabn;
            Попытка
                Получательinn = Получатель.inn
            Исключение
                //получатель не имеет ИНН
                Получательinn = ""
            КонецПопытки;
            НоваяСтрокатзСписокКарт.inn = Получательinn;

            //    заполнение табличного поля формы
            НоваяСтрокаТзТпДобСотр = ТабличноеПолеДобавлениеСотрудниковЗП.Добавить();
            НайденныйСотрудник = СпрСотр.НайтиПоКоду(Получатель.tabn);
            Если НайденныйСотрудник = Неопределено Или НайденныйСотрудник = СпрСотр.ПустаяСсылка() Тогда
                СпрСотрВыборка = СпрСотр.Выбрать();
                Пока СпрСотрВыборка.Следующий() Цикл
                    Попытка
                        //    
                        Сотр_inn = СпрСотрВыборка.ФизическоеЛицо.КодПоДРФО;
                        Если ЗначениеЗаполнено(Получательinn) И СокрЛП(Сотр_inn) = СокрЛП(Получательinn)
                                Или Не ЗначениеЗаполнено(Получательinn) И СокрЛП(Сотр_inn) = СокрЛП(Получатель.tabn)
                                Тогда
                            НайденныйСотрудник = СпрСотрВыборка.Ссылка
                        КонецЕсли
                    Исключение
                        СообщениеПользователю(ОписаниеОшибки());    
                        Сотр_inn = ""
                    КонецПопытки;
                    Если НайденныйСотрудник = Неопределено Или НайденныйСотрудник = СпрСотр.ПустаяСсылка() Тогда
                        НайденныйСотрудник = СпрСотр.НайтиПоНаименованию(fio)
                    КонецЕсли
                КонецЦикла
            КонецЕсли;
            //Если НайденныйСотрудник = Неопределено Или НайденныйСотрудник = СпрСотр.ПустаяСсылка() Тогда//если понадобится не показывать отсутствующих в локальной базе сотрудников
            //    Продолжить
            //КонецЕсли;
            НоваяСтрокаТзТпДобСотр.КолонкаСотрудник = НайденныйСотрудник.Ссылка;
            НоваяСтрокаТзТпДобСотр.КолонкаФИО = fio;
            НоваяСтрокаТзТпДобСотр.КолонкаТабельныйНомер = Получатель.tabn;
            Попытка
                НоваяСтрокаТзТпДобСотр.КолонкаИНН = Получатель.inn
            Исключение
                НоваяСтрокаТзТпДобСотр.КолонкаИНН = ""
            КонецПопытки;
            Если Найти(Получатель.pan, "*") > 0 Тогда
                ТекстСообщения = НСтр("ru='Номер карты сотрудника ';uk='Номер картки співробітника '") + fio
                    + НСтр("ru=', табельный номер ';uk=', табельний номер '") + Получатель.tabn
                    + НСтр("ru=', ИНН ';uk=', ІПН '") + НоваяСтрокаТзТпДобСотр.КолонкаИНН
                    + НСтр("ru=' содержит маску. Исправьте номер карты.';uk=' містить маску. Виправіть номер картки.'");
                СообщениеПользователю(ТекстСообщения, Ложь)
            КонецЕсли;
            НоваяСтрокаТзТпДобСотр.КолонкаНомерКарты = Получатель.pan
        КонецЦикла;

        ТекстСообщения = НСтр("ru='Количество найденных и добавленных сотрудников и карт ';uk='Кількість знайдених та доданих співробітників і карток '")
            + тзСписокКарт.Количество();
        СообщениеПользователю(ТекстСообщения, Ложь);

    Исключение
        ТекстОписаниеОшибки = ОписаниеОшибки();
        Режим = НСтр("ru='Получение списка карт.';uk='Отримання переліку карт.'");
        ТекстСообщения = Режим + Символы.ПС + ТекстОписаниеОшибки;
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецПопытки;

    стРезультатЧтения.Вставить("тзСписокКарт", тзСписокКарт);
    стРезультатЧтения.Вставить("мСписокПолучателей", мСписокПолучателей);
    
    Возврат стРезультатЧтения

КонецФункции // ПрочитатьФайлОтветПоСпискамКарт()

Функция ПолучитьСтрокуЗП()
    
    СтрокаЗП = Неопределено;
    
    Если НЕ ЗначениеЗаполнено(ТекущийЗП) Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка! Не выбран текущий зарплатный проект.';uk='Помилка! Не вибран поточний зарплатний проект.'");
        СообщениеПользователю(ТекстСообщения,,"Объект.ТекущийЗП");
        Возврат СтрокаЗП;
    КонецЕсли;    
    
    Если ТЧ_ЗП.Количество() = 0 Тогда
        ПолучитьЗарплатныеПроекты();
    КонецЕсли;    
    
    СтрокаЗП = ТЧ_ЗП.Найти(ТекущийЗП); 
    
    Если СтрокаЗП = Неопределено Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка! Обновите список зарплатных проектов.';uk='Помилка! Оновіть список зарплатних проектів.'");
        СообщениеПользователю(ТекстСообщения,,"Объект.ТекущийЗП");
    КонецЕсли;
    
    Возврат СтрокаЗП;
    
КонецФункции

Процедура ЗаполнитьСписокВедомостей(НачПериода, КонПериода, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено) Экспорт
        
    ТекстЗапроса = "";
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        ТекстЗапроса = UNF_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок);
    ИначеЕсли Найти(ВРег(ПолноеИмяКонфигурации), ВРег("БухгалтерияСельскохозяйственногоПредприятия")) > 0 
            ИЛИ Найти(ВРег(ПолноеИмяКонфигурации), ВРег("КомплексноеРешениеСельскохозяйственногоПредприятия")) > 0
            ИЛИ Найти(ВРег(ПолноеИмяКонфигурации), ВРег("BASАгроБухгалтерия")) > 0
        Тогда
        ТекстЗапроса = ИНАГРО_BP_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок);
    ИначеЕсли ИдКонф = "BP" ИЛИ ИдКонф = "ERP" Или ИдКонф = "BASC" Тогда    
        ТекстЗапроса = BP_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок);
    ИначеЕсли ИдКонф = "KUBU" Тогда    
        ТекстЗапроса = KUBU_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок);
        КонецЕсли;
    
    ВыполнитьЗапросНаПолучениеЗПВедомостей(ТекстЗапроса, НачПериода, КонПериода, СсылкаНаДок, НомерСтроки);
    
КонецПроцедуры

Функция UNF_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок = Неопределено)
    
    Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежнаяВедомость.Ссылка КАК СсылкаНаДокумент,
    |    ПлатежнаяВедомость.Номер КАК Номер,
    |    ПлатежнаяВедомость.Дата КАК Дата,
    |    ПлатежнаяВедомость.ВидОперации КАК ВидВыплаты,
    |    ПлатежнаяВедомость.СтруктурнаяЕдиница КАК Подразделение,
    |    ПлатежнаяВедомость.ПериодРегистрации КАК ПериодРегистрации,
    |    ПлатежнаяВедомость.СуммаДокумента КАК СуммаДокумента,
    |   ""ПлатежнаяВедомость"" КАК ИмяДокумента
    |ИЗ
    |    Документ.ПлатежнаяВедомость КАК ПлатежнаяВедомость
    |ГДЕ" 
    + ?(ЗначениеЗаполнено(СсылкаНаДок), " ПлатежнаяВедомость.Ссылка = &СсылкаНаДок","
    |    НЕ ПлатежнаяВедомость.ПометкаУдаления
    |    И ПлатежнаяВедомость.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода"
    + ?(ЗначениеЗаполнено(Подразделение)," И СтруктурнаяЕдиница = &Подразделение",""));
    
    Возврат Текст;
    
КонецФункции

Функция BP_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок = Неопределено)
    
    Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежнаяВедомость.Ссылка КАК СсылкаНаДокумент,
    |    ПлатежнаяВедомость.Номер КАК Номер,
    |    ПлатежнаяВедомость.Дата КАК Дата,
    |    ПлатежнаяВедомость.СпособВыплаты КАК ВидВыплаты,
    |    ПлатежнаяВедомость.Подразделение КАК Подразделение,
    |    ПлатежнаяВедомость.ПериодРегистрации КАК ПериодРегистрации,
    |    ПлатежнаяВедомость.СуммаПоДокументу КАК СуммаДокумента,
    |   ""ВедомостьНаВыплатуЗарплатыВБанк"" КАК ИмяДокумента
    |ИЗ
    |    Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ПлатежнаяВедомость
    |ГДЕ" 
    + ?(ЗначениеЗаполнено(СсылкаНаДок), " ПлатежнаяВедомость.Ссылка = &СсылкаНаДок","
    |    НЕ ПлатежнаяВедомость.ПометкаУдаления
    |    И ПлатежнаяВедомость.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода"
    + ?(ЗначениеЗаполнено(Подразделение)," И Подразделение = &Подразделение",""));
    
    Возврат Текст;
    
КонецФункции

Функция ИНАГРО_BP_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок = Неопределено)
    
    Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежнаяВедомость.Ссылка КАК СсылкаНаДокумент,
    |    ПлатежнаяВедомость.Номер КАК Номер,
    |    ПлатежнаяВедомость.Дата КАК Дата,
    |    ПлатежнаяВедомость.СпособВыплаты КАК ВидВыплаты,
    |    """" КАК Подразделение,
    |    ПлатежнаяВедомость.ПериодРегистрации КАК ПериодРегистрации,
    |    0 КАК СуммаДокумента,
    |   ""ИНАГРО_ЗарплатаКВыплатеОрганизаций"" КАК ИмяДокумента
    |ИЗ
    |    Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций КАК ПлатежнаяВедомость
    |ГДЕ" 
    + ?(ЗначениеЗаполнено(СсылкаНаДок), " ПлатежнаяВедомость.Ссылка = &СсылкаНаДок","
    |    НЕ ПлатежнаяВедомость.ПометкаУдаления
    |    И ПлатежнаяВедомость.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода"
    + ?(ЗначениеЗаполнено(Подразделение)," И Подразделение = &Подразделение",""));
    
    Возврат Текст;
    
КонецФункции

Функция KUBU_ТекстЗапросаЗаполненияВедомостей(СсылкаНаДок = Неопределено)
    
    Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ПлатежнаяВедомость.Ссылка КАК СсылкаНаДокумент,
    |    ПлатежнаяВедомость.Номер КАК Номер,
    |    ПлатежнаяВедомость.Дата КАК Дата,
    |    ПлатежнаяВедомость.СпособВыплаты КАК ВидВыплаты,
    |    ПлатежнаяВедомость.Подразделение КАК Подразделение,
    |    ПлатежнаяВедомость.ПериодРегистрации КАК ПериодРегистрации,
    |    ПлатежнаяВедомость.СуммаПоДокументу КАК СуммаДокумента,
    |   ""ВедомостьНаВыплатуЗарплатыВБанк"" КАК ИмяДокумента
    |ИЗ
    |    Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ПлатежнаяВедомость
    |ГДЕ" 
    + ?(ЗначениеЗаполнено(СсылкаНаДок), " ПлатежнаяВедомость.Ссылка = &СсылкаНаДок","
    |    НЕ ПлатежнаяВедомость.ПометкаУдаления
    |    И ПлатежнаяВедомость.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода"
    + ?(ЗначениеЗаполнено(Подразделение)," И Подразделение = &Подразделение",""));
    
    Возврат Текст;
    
КонецФункции

Процедура ВыполнитьЗапросНаПолучениеЗПВедомостей(ТекстЗапроса, НачПериода, КонПериода, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено)        
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    
    Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(НачПериода));
    Запрос.УстановитьПараметр("КонПериода", КонПериода);
    Запрос.УстановитьПараметр("Подразделение", Подразделение);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        Попытка 
            Если ЗначениеЗаполнено(Организация) И ВыборкаДетЗаписи.СсылкаНаДокумент.Организация <> Организация Тогда
                Продолжить;
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ЗарплатныеВедомости[НомерСтроки];
        Иначе    
            НоваяСтрока = ЗарплатныеВедомости.Добавить();
        КонецЕсли;
        
        НоваяСтрока.СсылкаНаДокумент = ВыборкаДетЗаписи.СсылкаНаДокумент;
        НоваяСтрока.Номер = ВыборкаДетЗаписи.Номер;
        НоваяСтрока.Дата = ВыборкаДетЗаписи.Дата;
        НоваяСтрока.ВидВыплаты = Строка(ВыборкаДетЗаписи.ВидВыплаты);
        НоваяСтрока.Подразделение = ВыборкаДетЗаписи.Подразделение;
        НоваяСтрока.ПериодРегистрации = ВыборкаДетЗаписи.ПериодРегистрации;
        НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СуммаДокумента;
        НоваяСтрока.ИмяДокумента = ВыборкаДетЗаписи.ИмяДокумента;
        
        Если НоваяСтрока.СуммаДокумента = 0 Тогда
            Попытка
                НоваяСтрока.СуммаДокумента = НоваяСтрока.СсылкаНаДокумент.Зарплата.Итог("Выплата");
            Исключение
            КонецПопытки;
        КонецЕсли;
        
        Если НоваяСтрока.СуммаДокумента = 0 Тогда
            Попытка
                НоваяСтрока.СуммаДокумента = НоваяСтрока.СсылкаНаДокумент.Зарплата.Итог("КВыплате");
            Исключение
            КонецПопытки;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ПереименоватьКолонкуТЗ(ТЗ, СтароеИмя, НовоеИмя) 
        
    ИзменяемаяКолонка = ТЗ.Колонки.Найти(СтароеИмя);
    Если ИзменяемаяКолонка <> Неопределено Тогда
        Попытка
            ИзменяемаяКолонка.Имя = НовоеИмя;
        Исключение
        КонецПопытки;
    КонецЕсли;
    
КонецПроцедуры

Процедура ОтправитьВедомости(ВыгрузкаВФайл = Ложь, бВидВыплаты = "true") Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    Если НЕ ВыгрузкаВФайл Тогда
        ПолучитьСписокКарт();
        Если СписокКарт.Количество() = 0 Тогда
            ТекстСообщения = ТекстСообщения
                + НСтр("ru='Получение списка карт из банка не выполнено.';uk='Отримання списку карток з банку не виконано.'")
        КонецЕсли
    Иначе
        СписокФайлов.Очистить();
    КонецЕсли;
    
    Если СписокКарт.Количество() = 0 И НЕ ВыгрузкаВФайл Тогда
        
        ТекстСообщения = НСтр("ru = 'Ошибка получения списка зарплатных карт!';uk='Помилка отримання списку зарплатних карт!'");
        СообщениеПользователю(ТекстСообщения);

        Возврат;
    КонецЕсли;    
    
    Если Не ВыгрузкаВФайл Тогда
        ДействиеАналитики = "ЗПВедомостьОтправка"
    Иначе
        ДействиеАналитики = "ЗПВедомостьВыгрузкаВФайл"
    КонецЕсли;
    
    СтрукПараметрыВедомости = Новый Структура;
    ИдВСтр = Неопределено;
    СотрВедомости = Неопределено;
    ИдНовойЗаписи = Неопределено;

    ЕстьОтмеченные = Ложь; //хранит признак что есть хотя бы одна отмеченная строка документа
    
    КоличествоСотрудников = 0;
    
    Для Каждого СтрокаТЧ Из ЗарплатныеВедомости Цикл //цикл по всем строкам
        
        Если НЕ СтрокаТЧ.Флажок Тогда //нет отметки - пропускаем строку
            Продолжить;
        КонецЕсли;     
        
        ЕстьОтмеченные = Истина;
        
        Если НЕ ВыгрузкаВФайл Тогда
            Если НЕ ЗначениеЗаполнено(ИДПакетаЗачислений) ИЛИ СоздаватьНовуюВедомостьПоКаждойСтроке Тогда // если ИД ведомости пустая или флаг отправляем запрос на создание новой ведомости
                вДействиеАналитики = ДействиеАналитики;
                ИДПакетаЗачислений = СоздатьПакетЗачислений(бВидВыплаты);
                Если Не ЗначениеЗаполнено(ИДПакетаЗачислений) Тогда
                    ТекстСообщения = НСтр("ru='Ошибка создания ведомости. Ведомость не отправлена в строке ';uk='Помилка створення відомості. Відомість не відправлена в рядку '")
                        + СтрокаТЧ.НомерСтроки;
                    Возврат
                КонецЕсли;
                ДействиеАналитики = вДействиеАналитики
            Иначе //иначе будем искать в структуре информациию по существующей ведомости
                
                ИдВСтр = ПолучитьИзСтруктуры("ИДВедомости", СтрукПараметрыВедомости);
                
                Если ИдВСтр <> ИДПакетаЗачислений Тогда //если в структуре нет инф. по ведомости - добавим ее туда.

                    вДействиеАналитики = ДействиеАналитики;
                    СтрукПараметрыВедомости = ПолучитьСтруктуруПараметровПоВедомости(ИДПакетаЗачислений);
                    ДействиеАналитики = вДействиеАналитики;
                    
                    Если СтрукПараметрыВедомости = Неопределено Тогда
                        Продолжить; 
                    КонецЕсли;
                    
                    ИдВСтр = ИДПакетаЗачислений;
                    
                КонецЕсли;    
                
            КонецЕсли;    
        КонецЕсли;
    
        лИмяТЧ = "";
        Если (Найти(ВРег(ПолноеИмяКонфигурации), ВРег("БухгалтерияСельскохозяйственногоПредприятия")) > 0) 
            ИЛИ (Найти(ВРег(ПолноеИмяКонфигурации), ВРег("BASБух")) > 0 И ПолноеИмяКонфигурации <> "BASБухгалтерия") 
            ИЛИ (Найти(ВРег(ПолноеИмяКонфигурации), ВРег("КомплексноеРешениеСельскохозяйственногоПредприятия")) > 0)
            Тогда            
            лИмяТЧ = "Зарплата";
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда 
                        
            лИмяТЧ = "Зарплата";
            Попытка 
                ТЧ = СтрокаТЧ.СсылкаНаДокумент[лИмяТЧ];
            Исключение
                лИмяТЧ = "ЗарплатаПодробно";
            КонецПопытки;
            
        ИначеЕсли ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда    
            лИмяТЧ = "Сотрудники";
        ИначеЕсли ИдКонф = "ERP" ИЛИ ИдКонф = "KUBU" Тогда    
            лИмяТЧ = "Зарплата";
        КонецЕсли;    
        
        ТЗДанныеДок = СтрокаТЧ.СсылкаНаДокумент[лИмяТЧ].Выгрузить();
        ПереименоватьКолонкуТЗ(ТЗДанныеДок, "ФизическоеЛицо", "Сотрудник");
        ПереименоватьКолонкуТЗ(ТЗДанныеДок, "Выплата", "КВыплате");
        ПереименоватьКолонкуТЗ(ТЗДанныеДок, "СуммаПлатежа", "КВыплате");    
        
        Попытка
            ТЗДанныеДок.Свернуть("Сотрудник, ФизическоеЛицо","КВыплате");
        Исключение
            Если Найти(ВРег(ПолноеИмяКонфигурации), ВРег("BASАгроБухгалтерия")) > 0 Тогда
                ТЗДанныеДок.Свернуть("Сотрудник","Выплата")
            Иначе
                ТЗДанныеДок.Свернуть("Сотрудник","КВыплате")
            КонецЕсли
        КонецПопытки;
        
        Если ВыгрузкаВФайл Тогда
            
            тзСписокСотр = Новый ТаблицаЗначений;
            тзСписокСотр.Колонки.Добавить("tabn");
            тзСписокСотр.Колонки.Добавить("amount");
            
        КонецЕсли;

        //ИДЗаписи = "";

        Для Каждого СтрокаДок Из ТЗДанныеДок Цикл //цикл по ТЧ ведомости            
            
            КоличествоСотрудников = КоличествоСотрудников  + 1;    

            ИДЗаписи = "";

            ТекСотр = СтрокаДок.Сотрудник; 
                    
            лФИзЛицо = Неопределено;
            
            Попытка
                Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
                    Если НЕ ЗначениеЗаполнено(ТекСотр) Тогда
                        лФИзЛицо = СтрокаДок.ФизическоеЛицо;    
                    КонецЕсли;
                Иначе
                    Если НЕ ЗначениеЗаполнено(ТекСотр) Тогда
                        ТекстСообщения = НСтр("ru = 'В документе не заполнено поле сотрудник. Строка № ';uk='У документі не заповнено поле співробітник. Строка № '") + СтрокаДок.НомерСтроки;
                        СообщениеПользователю(ТекстСообщения);
                        Продолжить;    
                    КонецЕсли;
                КонецЕсли;
            Исключение
            КонецПопытки;
            
            Попытка
                Если лФИзЛицо = Неопределено И ТипЗнч(ТекСотр) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
                    лФИзЛицо = ТекСотр;    
                КонецЕсли;
            Исключение
            КонецПопытки;
            
            СтруктураПарамСотр = ЗаполнитьСтруктуруПараметровСотрудника(ТекСотр, СтрокаТЧ.ПериодРегистрации, лФИзЛицо, ВыгрузкаВФайл); //формируем необходимые параметы сотрудника

            Попытка
                лСумма = СтрокаДок.КВыплате
            Исключение
                лСумма = СтрокаДок.Выплата
            Конецпопытки;
            
            //Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            //    лСумма = СтрокаДок.СуммаПлатежа;
            //ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "KUBU" Тогда
            //    Попытка
            //        лСумма = СтрокаДок.Выплата;
            //    Исключение
            //    КонецПопытки;
            //    
            //    Если лСумма = 0 Тогда
            //        лСумма = СтрокаДок.КВыплате;
            //    КонецЕсли;
            //КонецЕсли;    
                                        
            Если СтруктураПарамСотр.Количество() = 0 Тогда
                ТекстСообщения = НСтр("ru = 'Не удалось заполнить структуру параметров отправки по сотруднику ';uk='Не вдалося заповнити структуру параметрів відправки по співробітнику '") + ТекСотр;
                СообщениеПользователю(ТекстСообщения);
                Продолжить;
            КонецЕсли;    
            
            Если лСумма = 0 Тогда
                ТекстСообщения = НСтр("ru = 'Обнаружена нулевая сумма выплаты по сотруднику ';uk='Виявлена нульова сума виплати по співробітнику '") + ТекСотр;
                СообщениеПользователю(ТекстСообщения);
                Продолжить;
            КонецЕсли;
            
            Если ВыгрузкаВФайл Тогда
                
                НоваяСтрока = тзСписокСотр.Добавить();
                НоваяСтрока.tabn = СтруктураПарамСотр.ТабНомер;
                НоваяСтрока.amount = лСумма;
                
                Продолжить;
                
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ИдВСтр) Тогда  //если есть строки в добавляемой ведомости, будем искать там сотдрудника
                
                СписокСотр = ПолучитьИзСтруктуры("СписокСотр", СтрукПараметрыВедомости);
                СотрВедомости = СписокСотр.Найти(СтруктураПарамСотр.ТабНомер); //поиск сотрудника на дублирование
                
                Если СотрВедомости = Неопределено Тогда //просто добавим в существующий спискок
                    НоваяСтрока = СписокСотр.Добавить();
                    НоваяСтрока.tabn = СтруктураПарамСотр.ТабНомер;
                    НоваяСтрока.amount = лСумма;
                ИначеЕсли НеОбновлятьДанныеВСуществующихВедомостях = Ложь Тогда //сначала удалим из ведомости, а потом добавим заново
                    
                    ТекстСообщения = НСтр("ru = 'При добавлении данных в ведомость обнаружены дубли строк по сотруднику ';uk='При додаванні даних у відомість виявлені дублі рядків по співробітнику '") + ТекСотр;
                    СообщениеПользователю(ТекстСообщения, Ложь);

                    вДействиеАналитики = ДействиеАналитики;
                    УспешноУдален = УдалитьСотрудникаИзВедомости(ИДПакетаЗачислений, СтруктураПарамСотр, СотрВедомости.fileId); // попытаемся удалить дубли строк
                    ДействиеАналитики = вДействиеАналитики;
                    
                    Если УспешноУдален Тогда
                        ТекстСообщения = НСтр("ru = 'Дубли строк успешно удалены.';uk='Дублі рядків успішно видалені.'");
                        СообщениеПользователю(ТекстСообщения, Ложь);
                    Иначе
                        ТекстСообщения = НСтр("ru = 'Внимание! Не удалось удалить дубли строк!';uk='Увага! Не вдалося видалити дублі рядків!'");
                        СообщениеПользователю(ТекстСообщения);
                    КонецЕсли;
                    
                    СотрВедомости.amount = лСумма;
                    
                Иначе
                    
                    ТекстСообщения = НСтр("ru = 'При добавлении данных в ведомость обнаружены дубли строк по сотруднику ';uk='При додаванні даних у відомість виявлені дублі рядків по співробітнику '") + ТекСотр;
                    СообщениеПользователю(ТекстСообщения, Ложь);
                    
                    ТекстСообщения = НСтр("ru = 'Добавление строки отменено.';uk='Додавання рядка скасовано'");
                    СообщениеПользователю(ТекстСообщения, Ложь);
                    
                    Продолжить;
                КонецЕсли;
                
            КонецЕсли;

            стРезультат = НайтиПолучитьРеференсЗаписиИСотрудника(ИДЗаписи, СтруктураПарамСотр);
            ТекстСообщения = стРезультат.ТекстСообщения;
            Если ЗначениеЗаполнено(ТекстСообщения) Тогда
                СообщениеПользователю(ТекстСообщения, Ложь)
            КонецЕсли;
            Успешно = стРезультат.Успешно;
            Если Не Успешно Тогда
                Возврат
            КонецЕсли;
            ФлагПродолжить = стРезультат.ФлагПродолжить;
            Если ФлагПродолжить = Истина Тогда
                Продолжить
            КонецЕсли;

            вДействиеАналитики = ДействиеАналитики;
            ИдНовойЗаписи = ДобавитьСотрудникаВПакетЗачислений(ИДПакетаЗачислений, ИДЗаписи, СтруктураПарамСотр, лСумма);
            ДействиеАналитики = вДействиеАналитики;
            
            СтрокаТЧ.ВедомостьВПриват24 = ИДПакетаЗачислений;
            Если ЗначениеЗаполнено(ИдВСтр) И ЗначениеЗаполнено(ИдНовойЗаписи) Тогда
                
                Если СотрВедомости = Неопределено Тогда
                    НоваяСтрока.fileId = ИдНовойЗаписи;
                КонецЕсли;    
                
                СтрукПараметрыВедомости.Вставить("СписокСотр", СписокСотр);
            КонецЕсли;    
            
        КонецЦикла;
        
        //Если тзСписокСотр.Количество() > 0 Тогда//если не показывать пустую ведомость
            
            ТабДок = Новый ТабличныйДокумент;
            
            Макет = ПолучитьМакет("ЗПВедомость");

            ШапкаТабл = Макет.ПолучитьОбласть("ШапкаТабл");
                    
            ТабДок.Вывести(ШапкаТабл);

            Попытка
                Для Каждого СтрокаТЗ Из тзСписокСотр Цикл
                    
                    СтрокаТабл = Макет.ПолучитьОбласть("СтрокаТабл");
                    
                    Если ПоискСотрудниковПоИНН Тогда
                        СтрокаТабл.Параметры.ИНН = СтрокаТЗ.tabn;
                    Иначе
                        СтрокаТабл.Параметры.ТабНомер = СтрокаТЗ.tabn;
                    КонецЕсли;
                    
                    СтрокаТабл.Параметры.Сумма = СтрокаТЗ.amount;                        
                    
                    ТабДок.Вывести(СтрокаТабл);
                КонецЦикла;
            Исключение
            КонецПопытки;

            ИмяФайла = "Doc_" + Формат(СтрокаТЧ.СсылкаНаДокумент.Дата, "ДФ=ддММгггг") + "_" + СтрокаТЧ.СсылкаНаДокумент.Номер + ".XLS";
            
            ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + ИмяФайла;
            
            ТабДок.Записать(ПолноеИмяКонечногоФайла, ТипФайлаТабличногоДокумента.XLS);
            
            АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяКонечногоФайла), Новый УникальныйИдентификатор());
                                    
            НоваяСтрока = СписокФайлов.Добавить();
            НоваяСтрока.АдресФайла = АдресФайла;
            НоваяСтрока.ИмяФайла = ИмяФайла;
            
        //КонецЕсли;
            
    КонецЦикла;

    //    при установленном флаге СоздаватьНовуюВедомостьПоКаждойСтроке созданную ведомость делать выбранной по умолчанию
    //Если НЕ ЗначениеЗаполнено(ИДПакетаЗачислений) ИЛИ СоздаватьНовуюВедомостьПоКаждойСтроке Тогда 
    //    ИДПакетаЗачислений = "";
    //КонецЕсли;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для выгрузки!'; uk = 'Немає відмічених документів для вигрузки!'"), Ложь);
        Возврат;
    Иначе
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики,,,"КоличествоСотрудников", КоличествоСотрудников);
    КонецЕсли;
    
    Если НЕ ВыгрузкаВФайл Тогда
        ТекстСообщения = НСтр("ru = 'Отправка ведомостей завершена.';uk='Відправку відомостей завершено.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
КонецПроцедуры

Функция НайтиПолучитьРеференсЗаписиИСотрудника(recid, СтруктураПарамСотр)//Сотрудник, ТНСотр, inn, ФИО)

    ТекстСообщения = "";
    Успешно = Истина;

    стРезультат = Новый Структура;

    тзСписокПолучателей = тзСписокКарт;

    Сотрудник = СтруктураПарамСотр.Сотрудник;
    ТНСотр = СтруктураПарамСотр.ТабНомер;
    inn = СтруктураПарамСотр.КодПоДРФО;
    Попытка
        НомерКартыСотрудника = СтруктураПарамСотр.НомерКарты
    Исключение
        НомерКартыСотрудника = ""
    КонецПопытки;

    Фамилия = СтруктураПарамСотр.Фамилия;
    Имя = СтруктураПарамСотр.Имя;
    Отчество = СтруктураПарамСотр.Отчество;
    ФИО = Фамилия + " " + Имя + " " + Отчество;

    ТекРефПакЗач = ИДПакетаЗачислений;

    //id - референс пакета зачислений
    //recid - референс записи
    ФлагПродолжить = Ложь;
    Если Не ЗначениеЗаполнено(recid) Тогда
        Если РежимОтладки Тогда
            ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                + НСтр("ru='Референс записи по сотруднику ';uk='Референс запису по співробітнику '") + ФИО
                + НСтр("ru=' не заполнен. ';uk=' не заповнений. '")
        КонецЕсли;
        // сотрудник в этой сессии не удалялся и в ведомости отсутствует,
        //    соответственно ИДЗаписи/recid не заполнен, поищем в списке получателей
        //Если Не ЗначениеЗаполнено(тзСписокПолучателей) Или тзСписокПолучателей.Количество() = 0 Тогда
        //    //    список получателей и карт в текущей сессии не был получен
        //    Если РежимОтладки Тогда
        //        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //            + НСтр("ru='СписокПолучателей не заполнен. Получаем.';uk='СписокОтримувачів не заповнений. Отримуємо.'")
        //    КонецЕсли;
        //    вДействиеАналитики = ДействиеАналитики;
        //    ПолучитьСписокКарт();
        //    ДействиеАналитики = вДействиеАналитики;
        //    //Успешно = стРезультат.Успешно;
        //////КонецЕсли;
        ////Если Не ФлажокНеВестиУчетПоПлатежнымКартам Тогда
        //    Если Не ЗначениеЗаполнено(тзСписокПолучателей) Или тзСписокПолучателей.Количество() = 0 Тогда
        //        //    список получателей и карт пуст или не получен
        //        //Режим = "Получение списка карт для добавления сотрудника в группу ЗП.";
        //        //ТекстСообщения = Режим;
        //        ТекстСообщения = ТекстСообщения
        //            + НСтр("ru='Получение списка карт из банка не выполнено.';uk='Отримання списку карток з банку не виконано.'") + Символы.ПС
        //            + НСтр("ru=' Неудачная попытка добавления сотрудника ';uk='Невдала спроба додавання співробітника '")
        //            + ФИО + НСтр("ru=' в группу ЗП проекта. Сотрудник пропущен.';uk=' в групу ЗП проекта. Співробітник пропущений.'");
        //        //документ ввода банковских карт сотрудников отсутствует
        //        ////    поиск номера карты сотрудника в ИБ для добавления в ЗП банка
        //        //вДействиеАналитики = ДействиеАналитики;
        //        //Если ЗначениеЗаполнено(Организация) Тогда
        //        //    ВыбОрганизация = Организация
        //        //Иначе
        //        //    ВыбОрганизация = СпрОрг.НайтиПоНаименованию(ТекущийЗП[1])
        //        //КонецЕсли;
        //        //стРезультат = ЗапросПолучитьСписокСуществующихКарт(ИБ, ВыбОрганизация, ТекущийЗП[1]);
        //        //ДействиеАналитики = вДействиеАналитики;
        //        ////тзСуществующиеКарты = СтруктураВозврата.тзСуществующиеКарты;
        //        //ПараметрыОтбора = Новый Структура;
        //        //ПараметрыОтбора.Вставить("Сотрудник", Сотрудник);
        //        //Если ПоискСотрудниковПоИНН Тогда
        //        //    ПараметрыОтбора.Вставить("inn", СокрЛП(inn))
        //        //Иначе
        //        //    ПараметрыОтбора.Вставить("ТабельныйНомер", СокрЛП(ТНСотр))
        //        //КонеЕсли;
        //        //мНайденныйСотрудникПЗ = тзСуществующиеКарты.НайтиСтроки(ПараметрыОтбора);
        //        //Если мНайденныйСотрудникПЗ.Количество() = 0 Тогда
        //        //    Для каждого СущКарта Из тзСуществующиеКарты Цикл//пробел в ТН
        //        //        Если СущКарта.Сотрудник = Сотрудник И (ФлажокИННВместоТН И СущКарта.ИНН = inn
        //        //                Или Не ФлажокИННВместоТН И СокрЛП(СущКарта.ТабельныйНомер) = СокрЛП(ТНСотр)) Тогда
        //        //            мНайденныйСотрудникПЗ.Добавить(СущКарта)
        //        //        КонецЕсли
        //        //    КонецЦикла
        //        //КонецЕсли;
        //        //Если мНайденныйСотрудникПЗ.Количество() = 0 Тогда
        //        //    //    в ИБ нет данных по карте сотрудника
        //        //    //НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
        //        //    //НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
        //        //    //НоваяСтрокаТз.КолонкаТабельныйНомер = ТНСотр;
        //        //    //НоваяСтрокаТз.КолонкаИНН = inn;
        //        //    //НоваяСтрокаТз.КолонкаНомерКарты = "";
        //        //    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //        //+ НСтр("ru='Список получателей пуст, не получен или в базе нет информации по карте сотрудника. Сотрудник ';uk='Перелік отримувачів порожній, не отриманий, або в базі немає інформації по картці співробітника. Співробітник '")
        //        //        + НСтр("ru='В базе нет информации по карте и сотруднику ';uk='В базі немає інформації по картці та співробітнику '")
        //        //        + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр// + НСтр("ru=' пропущен.';uk=' пропущений.'");
        //        //    //ФлагПродолжить = Истина
        //        //Иначе
        //        //    //    в ИБ найден сотрудник с картой, проверяем карту
        //        //    ВыбранныйСотрудник1С = Неопределено;
        //        //    Для каждого НайденныйСотрудникПЗ Из мНайденныйСотрудникПЗ Цикл
        //        //        Если НайденныйСотрудникПЗ.ДатаДействия > ТекущаяДата() Тогда
        //        //            ВыбранныйСотрудник1С = НайденныйСотрудникПЗ;
        //        //            Прервать
        //        //        КонецЕсли
        //        //    КонецЦикла;
        //        //    Если ВыбранныйСотрудник1С = Неопределено Тогда
        //        //        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //            + НСтр("ru='По сотруднику ';uk='По співробітнику '") + ФИО
        //        //            + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
        //        //            + НСтр("ru=' не найдено действительных карт. Сотрудник пропущен.';uk=' не знайдено дійсних карт. Співробітник пропущений.'");
        //        //        //НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
        //        //        //НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
        //        //        //НоваяСтрокаТз.КолонкаТабельныйНомер = ТНСотр;
        //        //        //НоваяСтрокаТз.КолонкаИНН = inn;
        //        //        //НоваяСтрокаТз.КолонкаНомерКарты = "";
        //        //        ФлагПродолжить = Истина
        //        //    Иначе
        //        //        НомерКартыСотрудника = ВыбранныйСотрудник1С.НомерКарточки;
        //        //        Если мНайденныйСотрудникПЗ.Количество() > 1 Тогда
        //        //            ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //                + НСтр("ru='По сотруднику ';uk='По співробітнику '") + ФИО
        //        //                + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
        //        //                + НСтр("ru=' найдено ';uk=' знайдено '") + мНайденныйСотрудникПЗ.Количество()
        //        //                + НСтр("ru=' карт. Выбрана карта ';uk=' карток. Обрана картка '")
        //        //                + НомерКартыСотрудника
        //        //        КонецЕсли;
        //        //        //    проверка целостности номера карты
        //        //        ДлинаНомераКарты = СтрДлина(ВыбранныйСотрудник1С.НомерКарточки);
        //        //        Если ДлинаНомераКарты <> 16 Тогда
        //        //            //НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
        //        //            //НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
        //        //            //НоваяСтрокаТз.КолонкаТабельныйНомер = ТНСотр;
        //        //            //НоваяСтрокаТз.КолонкаИНН = inn;
        //        //            //НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
        //        //            ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //                + НСтр("ru='Длина карты сотрудника ';uk='Довжина картки співробітника '") + ФИО
        //        //                + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
        //        //                + НСтр("ru=' в ИБ неверна. Сотрудник пропущен.';uk=' у ІБ невірна. Співробітник пропущений.'");
        //        //            ФлагПродолжить = Истина
        //        //        Иначе
        //        //            КартаВалидна = Истина;
        //        //            Для i = 1 По ДлинаНомераКарты Цикл
        //        //                Если Найти("0123456789", Сред(НомерКартыСотрудника, i, 1)) = 0 Тогда
        //        //                    КартаВалидна = Ложь;
        //        //                    Прервать
        //        //                КонецЕсли
        //        //            КонецЦикла;
        //        //            Если Не КартаВалидна Тогда
        //        //                //НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
        //        //                //НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
        //        //                //НоваяСтрокаТз.КолонкаТабельныйНомер = ТНСотр;
        //        //                //НоваяСтрокаТз.КолонкаИНН = inn;
        //        //                //НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
        //        //                ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //                    + НСтр("ru='Карта ';uk='Картка '") + НомерКартыСотрудника
        //        //                    + НСтр("ru=' сотрудника ';uk=' співробітника '") + ФИО
        //        //                    + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
        //        //                    + НСтр("ru=' содержит не только цифры. Сотрудник пропущен.';uk=' містить не тільки цифри. Співробітник пропущений.'");
        //        //                ФлагПродолжить = Истина
        //        //            КонецЕсли;
        //        //            //// попытка добавления сотрудника в группу
        //        //            //вДействиеАналитики = ДействиеАналитики;
        //        //            ////Успешно = ДобавлениеСотрудникаВГруппу(НомерКартыСотрудника, ТНСотр, inn, ФИО);
        //        //            //ДобавитьСотрудникаВГруппуПоОдному(НомерКартыСотрудника, ТекРефПакЗач, ТНСотр, inn, Фамилия, Имя, Отчество);
        //        //            //стРезультат = ПарсингДобавитьСотрудникаВГруппу(Наименование);
        //        //            //Успешно = стРезультат.Успешно;
        //        //            //ДействиеАналитики = вДействиеАналитики;
        //        //            //Если Успешно = Ложь Тогда
        //        //            //    //    сотрудник не добавлен в группу ЗП проекта
        //        //            //    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
        //        //            //    + НСтр("ru=' Неудачная попытка добавления сотрудника ';uk='Невдала спроба додавання співробітника '")
        //        //            //        + ФИО + НСтр("ru=' в группу ЗП проекта. Сотрудник пропущен.';uk=' в групу ЗП проекта. Співробітник пропущений.'");
        //        //            //    ФлагПродолжить = Истина;
                        ФлагПродолжить = Ложь;
        //        //            ////    Продолжить
        //        //            //КонецЕсли;
        //        //            //// сотрудник найден, карта валидна, получаем recid
        //        //            //recid = РезультатВозврата.ref
        //        //        КонецЕсли;//сотрудник с существующей в ИБ картой найден или не найден
        //        //    КонецЕсли;//Если ДлинаНомераКарты <> 16 Тогда
        //        //КонецЕсли;//Если ВыбранныйСотрудник1С = Неопределено Тогда

        //    КонецЕсли;//После повторного чтения получателей//Если Не ЗначениеЗаполнено(тзСписокПолучателей) Или тзСписокПолучателей.Количество() = 0 Тогда
        //    
        //КонецЕсли;//Если Не ЗначениеЗаполнено(тзСписокПолучателей) Или тзСписокПолучателей.Количество() = 0 Тогда

        //структура тзСписокПолучателей
        //pan, group, id, fio, tabn, inn

        Если Не ФлагПродолжить Тогда
            //    есть данные по сотруднику в ИБ
            //    список получателей и карт заполнен, ищем сотрудника в списке получателей и при отсутствии добавляем
            Если РежимОтладки Тогда
                ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                    + НСтр("ru='СписокПолучателей и карт заполнен. Производим поиск сотрудника ';uk='СписокОтримувачів і карток заповнений. Проводимо пошук співробітника '")
                    + Сотрудник.Наименование
                    + НСтр("ru=' в списке получателей и при отсутствии добавляем.';uk=' в списку отримувачів та при відсутності додаємо.'")
            КонецЕсли;
            ПараметрыОтбора = Новый Структура;
            //ПараметрыОтбора.Вставить("fio", СокрЛП(Сотрудник.Наименование));
            Если ПоискСотрудниковПоИНН Тогда
                ПараметрыОтбора.Вставить("inn", СокрЛП(inn))
            Иначе
                ПараметрыОтбора.Вставить("tabn", СокрЛП(ТНСотр))
            КонецЕсли;
            мНайденныйСотрудникПолуч = тзСписокПолучателей.НайтиСтроки(ПараметрыОтбора);
            //Если мНайденныйСотрудникПолуч.Количество() = 0 И ЗначениеЗаполнено(НомерКартыСотрудника) Тогда//в случае ведения учета по картам
            Если мНайденныйСотрудникПолуч.Количество() = 0 Тогда
                //    сотрудник в ЗП проекте не найден
                Если РежимОтладки Тогда
                    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                        + НСтр("ru='Сотрудник ';uk='Співробітник '") + ФИО
                        + НСтр("ru=' в ЗП проекте банка ';uk=' в ЗП проекті банку '")
                        + ?(ПоискСотрудниковПоИНН, НСтр("ru='по ИНН ';uk='по ІПН '") + inn, "по табельному номеру " + ТНСотр)
                        + НСтр("ru=' не найден. Пробуем добавить.';uk=' не знайдений. Спробуємо додати.'");
                    ТекстСообщения = ТекстСообщения + Символы.ПС
                        + НСтр("ru='Содержимое';uk='Вміст'") + " тзСписокПолучателей (id,pan,fio,inn,group,tabn):";
                    Для каждого СтрокатзСписокПолучателей Из тзСписокПолучателей Цикл
                        ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокатзСписокПолучателей.id + "  "
                            + СтрокатзСписокПолучателей.pan + "  " + СтрокатзСписокПолучателей.fio + "  "
                            + СтрокатзСписокПолучателей.inn + "  " + СтрокатзСписокПолучателей.group + "  " + СтрокатзСписокПолучателей.tabn
                    КонецЦикла
                КонецЕсли;
                Если ЗначениеЗаполнено(НомерКартыСотрудника) Тогда
                    //    сотрудник в ЗП проекте не найден, номер карты заполнен, добавляем
                    вДействиеАналитики = ДействиеАналитики;
                    стРезультат = ДобавитьСотрудникаВГруппуПоОдному(НомерКартыСотрудника, ТекРефПакЗач, ТНСотр, inn, Фамилия, Имя, Отчество);
                    Успешно = стРезультат.Успешно;
                    Попытка
                        СтруктураВозврата = стРезультат.СтруктураОтвета
                    Исключение
                        СтруктураВозврата = Новый Структура
                    КонецПопытки;
                    ДействиеАналитики = вДействиеАналитики;
                    Если Успешно = Ложь Тогда
                        //    сотрудник не добавлен в группу ЗП проекта
                        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                            + НСтр("ru='Неудачная попытка добавления сотрудника ';uk='Невдала спроба додавання співробітника '")
                            + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                            + НСтр("ru=' в группу ЗП проекта. Сотрудник пропущен.';uk=' в групу ЗП проекта. Співробітник пропущений.'");
                        НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
                        НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
                        НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
                        НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
                        НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
                        ФлагПродолжить = Истина
                    Иначе
                        // получаем recid
                        Попытка
                            recid = СтруктураВозврата.data.ref
                        Исключение
                            //    сотрудник не добавлен в группу ЗП проекта
                            ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                                + НСтр("ru=' Неудачная попытка добавления сотрудника ';uk='Невдала спроба додавання співробітника '")
                                + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                                + НСтр("ru=' в группу ЗП проекта. Сотрудник пропущен.';uk=' в групу ЗП проекта. Співробітник пропущений.'");
                            НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
                            НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
                            НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
                            НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
                            НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
                            ФлагПродолжить = Истина
                        КонецПопытки;
                
                        //    сотрудник добавлен, проверяем его наличие в ЗП банка
                        вДействиеАналитики = ДействиеАналитики;
                        ПолучитьСписокКарт();
                        ДействиеАналитики = вДействиеАналитики;
                        Успешно = Истина;
                        Если Не Успешно Или Не ЗначениеЗаполнено(тзСписокПолучателей) Или тзСписокПолучателей.Количество() = 0 Тогда
                            ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                                + НСтр("ru='Список получателей пуст или не получен. Сотрудник ';uk='Перелік отримувачів порожній або не отриманий. Співробітник '")
                                + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                                + НСтр("ru=' не добавлен в группу и пропущен.';uk=' не доданий в группу та пропущений.'");
                            НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
                            НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
                            НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
                            НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
                            НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
                            ФлагПродолжить = Истина
                        Иначе
                            ПараметрыОтбора = Новый Структура;
                            Если ПоискСотрудниковПоИНН Тогда
                                ПараметрыОтбора.Вставить("inn", СокрЛП(inn))
                            Иначе
                                ПараметрыОтбора.Вставить("tabN", СокрЛП(ТНСотр));//tabNo
                            КонецЕсли;
                            мНайденныйСотрудникПЗ = тзСписокПолучателей.НайтиСтроки(ПараметрыОтбора);
                            Если мНайденныйСотрудникПЗ.Количество() = 0 Тогда
                                // сотрудник по ТН не найден
                                ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                                    + НСтр("ru='Сотрудник не добавлен в группу. Сотрудник ';uk='Співробітник не доданий в группу. Співробітник '")
                                    + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                                    + НСтр("ru=' пропущен.';uk=' пропущений.'");
                                НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
                                НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
                                НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
                                НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
                                НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
                                ФлагПродолжить = Истина
                            КонецЕсли
                        КонецЕсли
                    КонецЕсли
                Иначе//Если Не ЗначениеЗаполнено(НомерКартыСотрудника) Тогда
                        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                            + НСтр("ru='Отсутствует номер карты сотрудника ';uk='Відсутній номер картки співробітника '") + ФИО
                            + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                            + НСтр("ru='. Сотрудник не может быть добавлен в группу ЗП проекта. Сотрудник пропущен.';uk='. Співробітник не може бути доданий в групу ЗП проекта. Співробітник пропущений.'");
                        ФлагПродолжить = Истина
                КонецЕсли
            КонецЕсли;

            //Иначе//Если мНайденныйСотрудникПолуч.Количество() = 0 И ЗначениеЗаполнено(НомерКартыСотрудника) Тогда
            Если мНайденныйСотрудникПолуч.Количество() > 0 Тогда
                Если мНайденныйСотрудникПолуч.Количество() > 1 Тогда
                    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                        + НСтр("ru='По сотруднику ';uk='По співробітнику '") + ФИО
                        + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                        + НСтр("ru=' найдено ';uk=' знайдено '") + мНайденныйСотрудникПолуч.Количество()
                        + НСтр("ru=' записей в группе ЗП проекта. Выбрана первая запись.';uk=' записів у групі ЗП проекту. Обраний перший запис.'")
                КонецЕсли;
                Попытка
                    recid = мНайденныйСотрудникПолуч[0].id
                Исключение
                    Попытка
                        recid = мНайденныйСотрудникПолуч[0].clientID
                    Исключение
                        //    сотрудник не добавлен в группу ЗП проекта
                        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                            + НСтр("ru=' Неудачная попытка получения id сотрудника ';uk='Невдала спроба отримання id співробітника '")
                            + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр
                            + НСтр("ru=' . Сотрудник пропущен.';uk=' . Співробітник пропущений.'");
                        //НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
                        //НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
                        //НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
                        //НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
                        //НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
                        ФлагПродолжить = Истина
                    КонецПопытки
                КонецПопытки
            КонецЕсли

        КонецЕсли;//Если Не ФлагПродолжить Тогда

    КонецЕсли;//Если Не ЗначениеЗаполнено(recid) Тогда
    
    //Если Не ЗначениеЗаполнено(recid) Тогда
    //    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
    //        + НСтр("ru='id получателя не заполнено. Сотрудник ';uk='id отримувача не заповнено. Співробітник '")
    //        + ФИО + НСтр("ru=', ИНН ';uk=', ІПН '") + inn + ", Табельний номер " + ТНСотр + НСтр("ru=' пропущен.';uk=' пропущений.'");
    //    НоваяСтрокаТз = тзНеДобавленныеСотрудники.Добавить();
    //    НоваяСтрокаТз.КолонкаСотрудник = Сотрудник;
    //    НоваяСтрокаТз.КолонкаТабельныйНомер = СокрЛП(ТНСотр);
    //    НоваяСтрокаТз.КолонкаИНН = СокрЛП(inn);
    //    НоваяСтрокаТз.КолонкаНомерКарты = НомерКартыСотрудника;
    //КонецЕсли;
    тзНеДобавленныеСотрудники.Свернуть("КолонкаСотрудник,КолонкаТабельныйНомер,КолонкаИНН,КолонкаНомерКарты");
    КолНеДобавленныхСотрудниковВГруппуЗППроекта = тзНеДобавленныеСотрудники.Количество();
    Если КолНеДобавленныхСотрудниковВГруппуЗППроекта > 0 Тогда
        //ТабличноеПолеПолучателиЗП = тзНеДобавленныеСотрудники.Выгрузить();//Скопировать();

        Попытка
            //    УПП, ЗУП, КУБУ, ЗиКБУ
            тзСотрудники = Новый ТаблицаЗначений;
            Для каждого Сотр Из Справочники.Сотрудники Цикл
                ДатаПриемаНаРаботу = Сотр.ДатаПриемаНаРаботу;
                ДатаУвольнения = Сотр.ДатаУвольнения;
                НоваяСтрокатзСотрудники = тзСотрудники.Добавить();
                НоваяСтрокатзСотрудники.Сотрудник = Сотр.Ссылка;
                НоваяСтрокатзСотрудники.Физлицо = Сотр.Физлицо;
                НоваяСтрокатзСотрудники.ДатаПриемаНаРаботу = ДатаПриемаНаРаботу;
                НоваяСтрокатзСотрудники.ДатаУвольнения = ДатаУвольнения;
            КонецЦикла;
        Исключение
            //    ББУ
        КонецПопытки;

        ТабличноеПолеПолучателиЗП.Загрузить(тзНеДобавленныеСотрудники.Выгрузить());
        //    проставить сотрудников
        Для каждого СтрокаТЗНДС Из тзНеДобавленныеСотрудники Цикл
            ИндексТЗ = ТабличноеПолеПолучателиЗП.Количество() - (тзНеДобавленныеСотрудники.Количество() - СтрокаТЗНДС.НомерСтроки) - 1;

            //    поиск по ТН
            НайденныйНДСотр = Справочники.Сотрудники.НайтиПоКоду(СтрокаТЗНДС.КолонкаТабельныйНомер);
            Если Не ЗначениеЗаполнено(НайденныйНДСотр) Тогда
                //    поиск по ИНН
                НайденноеФЛ = Справочники.ФизическиеЛица.НайтиПоРеквизиту("КодПоДРФО", СтрокаТЗНДС.КолонкаИНН);
                Если ЗначениеЗаполнено(НайденноеФЛ) Тогда
                    Если тзСотрудники.Количество() > 0 Тогда
                        //    УПП, ЗУП, КУБУ, ЗиКБУ
                        ПараметрыОтбора = Новый Структура();
                        ПараметрыОтбора.Вставить("Физлицо", НайденноеФЛ);
                        мСтрокитзСотрудники = тзСотрудники.НайтиСтроки(ПараметрыОтбора);
                        Если мСтрокитзСотрудники.Количество() = 1 Тогда
                            НайденныйНДСотр = мСтрокитзСотрудники[0].Сотрудник
                        ИначеЕсли мСтрокитзСотрудники.Количество() > 1 Тогда
                            НайденныйНДСотр = Неопределено;
                            вДатаПриема = Дата(1, 1, 1);
                            Для каждого мСтртзСотрудники из мСтрокитзСотрудники Цикл
                                Если НайденныйНДСотр = Неопределено
                                        Или мСтртзСотрудники.ДатаПриемаНаРаботу > вДатаПриема Тогда
                                    НайденныйНДСотр = мСтртзСотрудники.Сотрудник;
                                    вДатаПриема = мСтртзСотрудники.ДатаПриемаНаРаботу
                                КонецЕсли
                            КонецЦикла;
                        КонецЕсли
                    Иначе
                        Попытка
                            //    БУ, УТП, УНФсУФ, КУБУ, ЗиКБУ
                            НайденныйНДСотр = Справочники.Сотрудники.НайтиПоРеквизиту("Физлицо", НайденноеФЛ);
                        Исключение
                            //    УТ, УТсУФ, ББУ
                        КонецПопытки
                    КонецЕсли;
                    Если ЗначениеЗаполнено(НайденныйНДСотр) Тогда
                        ТабличноеПолеПолучателиЗП[ИндексТЗ].КолонкаСотрудник = НайденныйНДСотр.Ссылка
                    КонецЕсли
                Иначе
                    //    поиск по ФИО
                    НайденныйНДСотр = Справочники.Сотрудники.НайтиПоНаименованию(СтрокаТЗНДС.КолонкаСотрудник);
                    Если ЗначениеЗаполнено(НайденныйНДСотр) Тогда
                        ТабличноеПолеПолучателиЗП[ИндексТЗ].КолонкаСотрудник = НайденныйНДСотр.Ссылка
                    Иначе
                        ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
                            + НСтр("ru='Не найден сотрудник ';uk='Не знайдений співробітник '") + СтрокаТЗНДС.КолонкаСотрудник
                    КонецЕсли
                КонецЕсли
            Иначе
                ТабличноеПолеПолучателиЗП[ИндексТЗ].КолонкаСотрудник = НайденныйНДСотр.Ссылка
            КонецЕсли

        КонецЦикла;
        //тзНеДобавленныеСотрудники.Очистить();
        ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru='Существует ';uk='Існує '") + КолНеДобавленныхСотрудниковВГруппуЗППроекта
            + НСтр("ru=' не добавленных сотрудников в группу ЗП проекта. Можете в таблице указать номера их карт и добавить по кнопке `Добавить сотрудника в группу`.';uk=' не доданих співробітників в групу ЗП проекта. Можете в таблиці вказати номера їх карток та додати по кнопці `Додати співробітника в групу`.'")
    КонецЕсли;

    стРезультат.Вставить("Успешно", Успешно);
    стРезультат.Вставить("ФлагПродолжить", ФлагПродолжить);
    стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
    стРезультат.Вставить("recid", recid);
    стРезультат.Вставить("КолНеДобавленныхСотрудниковВГруппуЗППроекта", КолНеДобавленныхСотрудниковВГруппуЗППроекта);
    Возврат стРезультат

КонецФункции

//не используется//статусы старого API
Процедура СообщитьСтатусВедомости(СтатусПакета)

    //    анализ статуса ведомости
    ТекстСообщения = "";
    Если СтатусПакета = "N" Тогда
        ТекстСообщения = НСтр("ru='Ведомость создана.';uk='Відомість створена.'");
    ИначеЕсли СтатусПакета = "P" Тогда
        ТекстСообщения = НСтр("ru='Ведомость на проверке.';uk='Відомість на перевірці.'");
    ИначеЕсли СтатусПакета = "O" Тогда
        ТекстСообщения = НСтр("ru='Ведомость проверена.';uk='Відомість перевірена.'");
    ИначеЕсли СтатусПакета = "T" Тогда
        ТекстСообщения = НСтр("ru='Ведомость проверена с ошибками.';uk='Відомість перевірена з помилками.'");
    ИначеЕсли СтатусПакета = "W" Тогда
        ТекстСообщения = НСтр("ru='Ведомость проверена: ожидает проводки.';uk='Відомість перевірена: очікує проводки.'");
    ИначеЕсли СтатусПакета = "E" Тогда
        ТекстСообщения = НСтр("ru='Ведомость проверена: задолженность по РКО.';uk='Відомість перевірена: заборгованість по РКО.'");
    ИначеЕсли СтатусПакета = "H" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: перепроверка.';uk='Відомість в обробці: повторна перевірка.'");
    ИначеЕсли СтатусПакета = "B" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: создание проводок.';uk='Відомість в обробці: створення проводок.'");
    ИначеЕсли СтатусПакета = "C" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: выгрузка зачислений.';uk='Відомість в обробці: вивантаження зарахувань.'");
    ИначеЕсли СтатусПакета = "K" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: возврат зачислений.';uk='Відомість в обробці: повернення зарахувань.'");
    ИначеЕсли СтатусПакета = "L" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: выгружена.';uk='Відомість в обробці: вивантажена.'");
    ИначеЕсли СтатусПакета = "A" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: выгружена online.';uk='Відомість в обробці: вивантажена online.'");
    ИначеЕсли СтатусПакета = "M" Тогда
        ТекстСообщения = НСтр("ru='Ведомость в обработке: выгружена с ошибками.';uk='Відомість в обробці: вивантажена з помилками.'");
    ИначеЕсли СтатусПакета = "F" Тогда
        ТекстСообщения = НСтр("ru='Ведомость обработана.';uk='Відомість оброблена.'");
    ИначеЕсли СтатусПакета = "R" Тогда
        ТекстСообщения = НСтр("ru='Ведомость обработана с возвратами.';uk='Відомість оброблена з поверненнями.'");
    ИначеЕсли СтатусПакета = "S" Тогда
        ТекстСообщения = НСтр("ru='Ведомость на подписи.';uk='Відомість на підписі.'");
    ИначеЕсли СтатусПакета = "D" Тогда
        ТекстСообщения = НСтр("ru='Ведомость удалена.';uk='Відомість видалена.'");
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ТекстСообщения) Тогда
        СообщениеПользователю(ТекстСообщения, Ложь)
    КонецЕсли;
    
КонецПроцедуры    

//***не используется//статусы старого API
Процедура СообщитьСтатусЗаписиВедомости(СтатусЗаписи, ТабНомер)
    
    ТекстСообщения = "";
    
    Если СтатусЗаписи = "B" Тогда
        ТекстСообщения = НСтр("ru='В записи ошибок нет: ';uk='У записі помилок немає: '")
    ИначеЕсли СтатусЗаписи = "C" Тогда
        ТекстСообщения = НСтр("ru='Табельный номер не существует: ';uk='Табельний номер не існує: '")
    ИначеЕсли СтатусЗаписи = "D" Тогда
        ТекстСообщения = НСтр("ru='Дублирование сумм по табельному: ';uk='Дублювання сум з табельного: '")
    ИначеЕсли СтатусЗаписи = "E" Тогда
        ТекстСообщения = НСтр("ru='Не положительная сумма: ';uk='Не позитивна сума: '")
    ИначеЕсли СтатусЗаписи = "F" Тогда
        ТекстСообщения = НСтр("ru='Карта не существует: ';uk='Карта не існує: '")
    ИначеЕсли СтатусЗаписи = "G" Тогда
        ТекстСообщения = НСтр("ru='Валюта карты не совпадает с валютой пакета: ';uk='Валюта картки не збігається з валютою пакету: '")
    ИначеЕсли СтатусЗаписи = "H" Тогда
        ТекстСообщения = НСтр("ru='Статус карты не допускает зачисления: ';uk='Статус карти не допускає зарахування: '")
    ИначеЕсли СтатусЗаписи = "I" Тогда
        ТекстСообщения = НСтр("ru='Недопустимый зарплатный проект: ';uk='Неприпустимий зарплатний проект: '")
    ИначеЕсли СтатусЗаписи = "J" Тогда
        ТекстСообщения = НСтр("ru='Более 2-х раз дублирование по сумме зачислений в Prime: ';uk='Більше 2-х раз дублювання за сумою зарахувань до Prime: '")
    ИначеЕсли СтатусЗаписи = "K" Тогда
        ТекстСообщения = НСтр("ru='При выгрузке зачисления произошла ошибка: ';uk='При вивантаженні зарахування сталася помилка: '")
    ИначеЕсли СтатусЗаписи = "L" Тогда
        ТекстСообщения = НСтр("ru='Зачисление забраковано в карт.комплексе: ';uk='Зарахування забраковано в карт.комплексе: '")
    ИначеЕсли СтатусЗаписи = "M" Тогда
        ТекстСообщения = НСтр("ru='Зачислено: ';uk='Зараховано: '")
    ИначеЕсли СтатусЗаписи = "N" Тогда
        ТекстСообщения = НСтр("ru='Найдено более 1 активной карты: ';uk='Знайдено більше 1 активної карти: '")
    ИначеЕсли СтатусЗаписи = "U" Тогда
        ТекстСообщения = НСтр("ru='Выгружено: ';uk='Вивантажено:'")
    ИначеЕсли СтатусЗаписи = "Z" Тогда
        ТекстСообщения = НСтр("ru='Выгружено online: ';uk='Вивантажено на сайті: '")
    ИначеЕсли СтатусЗаписи = "O" Тогда
        ТекстСообщения = НСтр("ru='Более 2-х раз дублирование по сумме зачислений на карту в комплексе: ';uk='Більше 2-х раз дублювання за сумою зарахувань на карту в комплексі: '")
    ИначеЕсли СтатусЗаписи = "P" Тогда
        ТекстСообщения = НСтр("ru='2-й раз зачисление на сумму более n в Prime: ';uk='2-й раз зарахування на суму понад п в Prime: '")
    ИначеЕсли СтатусЗаписи = "R" Тогда
        ТекстСообщения = НСтр("ru='2-й раз зачисление на одинаковую сумму: ';uk='2-й раз зарахування на однакову суму: '")
    ИначеЕсли СтатусЗаписи = "S" Тогда
        ТекстСообщения = НСтр("ru='2-й раз зачисление на одинаковую сумму в Prime: ';uk='2-й раз зарахування на однакову суму в Prime:'")
    ИначеЕсли СтатусЗаписи = "T" Тогда
        ТекстСообщения = НСтр("ru='Клиент находится в чёрном списке ЕКБ: ';uk='Клієнт знаходиться в чорному списку ЕКБ: '")
    ИначеЕсли СтатусЗаписи = "V" Тогда
        ТекстСообщения = НСтр("ru='Удалена запись: ';uk='Видалений запис: '")
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ТекстСообщения) Тогда
        ТекстСообщения = ТекстСообщения  + " табельный номер " + ТабНомер;
        СообщениеПользователю(ТекстСообщения, Ложь)
    КонецЕсли;
    
КонецПроцедуры 

Функция ПолучитьЗаголовокПакета(ИДПакетаЗачислений)

    СтруктураПараметров = Новый Структура;
    
    РесурсНаСервере = "/api/pay/maspay/" + ИДПакетаЗачислений + "/header";
    POST = Ложь;
    //УдалитьBOM = Истина;
    СтрокаЗапроса = "";

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        СтруктураПараметров.Вставить("Успешно", Ложь);
        Возврат СтруктураПараметров;
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);

    стРезультатПроверкиНаОшибку = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
    РезультатВозврата = стРезультатПроверкиНаОшибку.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
        ТекстСообщения = стРезультатПроверкиНаОшибку.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения);
        СтруктураПараметров.Вставить("Успешно", Ложь);
        Возврат СтруктураПараметров
    КонецЕсли;

    Попытка
        Если СтруктураОтвета.status = "err" Или ТипЗнч(СтруктураОтвета.error) = Тип("Структура") Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураОтвета.error.code, СтруктураОтвета.error);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                СообщениеПользователю(ТекстОшибки);
                СтруктураПараметров.Вставить("Успешно", Ложь);
                Возврат СтруктураПараметров
            КонецЕсли
        КонецЕсли
    Исключение
        Если СтруктураОтвета.status = "err" Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураОтвета.error.code);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                //СтруктураПараметров.Вставить("ТекстСообщения", ТекстОшибки);
                СообщениеПользователю(ТекстСообщения);
                СтруктураПараметров.Вставить("Успешно", Ложь);
                Возврат СтруктураПараметров//стРезультат
            КонецЕсли
        КонецЕсли
    КонецПопытки;

    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление сотрудника в ведомость!';uk='Помилка відправлення запиту на додавання співробітника у відомість!'");
        СообщениеПользователю(ТекстСообщения);
        СтруктураПараметров.Вставить("Успешно", Ложь);
        Возврат СтруктураПараметров;
    КонецЕсли;

    СтруктураПараметров.Вставить("СтруктураОтвета", СтруктураОтвета);
    СтруктураПараметров.Вставить("Успешно", Истина);
    Возврат СтруктураПараметров

КонецФункции

Функция ПолучитьСтруктуруПараметровПоВедомости(ИДПакетаЗачислений, ПроверятьВозможностьИзменений = Истина)

    Перем СтруктураОтветаИтого;

    //    получение заголовка пакета
    ДействиеАналитики = "ПолучениеЗаголовкаПакета";

    СтруктураПараметров = ПолучитьЗаголовокПакета(ИДПакетаЗачислений);

    Если Не СтруктураПараметров.Успешно Тогда
        Возврат СтруктураПараметров
    КонецЕсли;
    СтруктураОтвета = СтруктураПараметров.СтруктураОтвета;

    //СтруктураОтветаЗаголовка = СтруктураОтвета.data;
    СтатусПакета = СтруктураОтвета.data.status;

    //со статусами    N Создан (Пакет создан, и допускает редактирование),
    //                W Проверен (Пакет прошел успешную проверку, и его можно утвердить, либо отозвать на редактирование)
    Если ПроверятьВозможностьИзменений И Найти("N,W", СтатусПакета) = 0 Тогда
        ТекстСообщения = НСтр("ru='Выбранную ведомость изменять нельзя.';uk='Обрану відомість змінювати не можна.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        СтруктураПараметров.Вставить("Успешно", Ложь);
        Возврат СтруктураПараметров;
    ИначеЕсли РежимОтладки Тогда
        //СообщитьСтатусВедомости(НСтр("ru='Статус ведомости: ';uk='Статус відомості: '") + СтатусПакета);//статусы старого API
        Попытка
            Подстатус = СтатусПакета.substatus
        Исключение
            Подстатус = ""
        КонецПопытки;
        СообщениеПользователю(АнализИВыводСтатусовВедомостейЗПАК(СтатусПакета, Подстатус), Ложь)
    КонецЕсли;

    СтруктураОтветаСодержимого = ПолучитьДанныеПоВедомости();

    тзСписокСотр = Новый ТаблицаЗначений;
    тзСписокСотр.Колонки.Добавить("tabn");
    тзСписокСотр.Колонки.Добавить("amount");
    тзСписокСотр.Колонки.Добавить("fileId");

    //    // чтение атрибутов блока

    //мСтруктураОтветаСодержимого = СтруктураОтветаСодержимого.data;//РезультатСоединения.СтруктураОтветаСодержимого.data;
    мСтруктураОтветаСодержимого = СтруктураОтветаСодержимого;
    Если мСтруктураОтветаСодержимого.Количество() > 0 Тогда
        ТекстСтатуса = "";
        Для каждого ЗаписьВедомости Из мСтруктураОтветаСодержимого Цикл
            ТекстСтатуса = ТекстСтатуса + ?(ЗначениеЗаполнено(ТекстСтатуса), Символы.ПС, "")
                + НСтр("ru='Статус записи ';uk='Статус запису '")
                + АнализИВыводСтатусовЗаписейВедомостейЗПАК(ЗаписьВедомости.status);

            Попытка
                СтатусЗаписи = ЗаписьВедомости.status;//спцПрочитатьАтрибут("status", Блок);
                //Если СтатусЗаписи = "A" ИЛИ СтатусЗаписи = "B" Тогда
                    НоваяСтрока = тзСписокСотр.Добавить();
                    НоваяСтрока.tabn = ЗаписьВедомости.tabn;
                    НоваяСтрока.amount = ЗаписьВедомости.amount;
                    Попытка
                        НоваяСтрока.fileId = ЗаписьВедомости.Id;
                    Исключение
                    КонецПопытки;
                //Иначе
                Если РежимОтладки Тогда
                    //СообщитьСтатусЗаписиВедомости(СтатусЗаписи, ЗаписьВедомости.tabn);//спцПрочитатьАтрибут("tabn", Блок));//не используется//статусы старого API
                    СообщениеПользователю(АнализИВыводСтатусовЗаписейВедомостейЗПАК(ЗаписьВедомости.status), Ложь)
                КонецЕсли;    
            Исключение
                ТекстСообщения = НСтр("ru = 'Ошибка анализа файла-ответа при анализе данных ведомости!';uk='Помилка аналізу файла-відповіді при аналізі даних відомості!'");
                СообщениеПользователю(ТекстСообщения);
            КонецПопытки;

        КонецЦикла
    Иначе
        ТекстСтатуса = НСтр("ru='Ведомость пуста.';uk='Відомість порожня.'")
    КонецЕсли;

    СтруктураПараметров.Вставить("СтруктураОтвета", СтруктураОтвета);
    СтруктураПараметров.Вставить("ИДВедомости", ИДПакетаЗачислений);
    СтруктураПараметров.Вставить("СписокСотр", тзСписокСотр);
    СтруктураПараметров.Вставить("Успешно", Истина);
    
    Возврат СтруктураПараметров;
    
КонецФункции

Функция АнализИВыводСтатусовЗаписейВедомостейЗПАК(КодСтатусаВедомостиЗП) Экспорт

    сзСтатусЗаписиВедомостиЗПИсх = Новый СписокЗначений;
    ТекстСтатуса = НСтр("ru = 'Запись еще не проверялась';uk='Запис ще не перевірявся'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("N", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Запись на проверке';uk='Запис на перевірці'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("N#", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'В записи есть ошибка, которую можно исправить через интерфейс (например 0 сумма)';uk='У записі є помилка, яку можна виправити через інтерфейс (наприклад 0 сума)'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("N$", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Успешно проверена';uk='Успішно перевірена'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("R", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Успешно оплачено';uk='Успішно сплачено'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("M", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Забракована';uk='Забракована'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("E", ТекстСтатуса);

    НайденныйСтатус = сзСтатусЗаписиВедомостиЗПИсх.НайтиПоЗначению(КодСтатусаВедомостиЗП);
    Если НайденныйСтатус <> Неопределено Тогда
        Возврат НайденныйСтатус.Представление
    КонецЕсли;
    ТекстСтатуса = НСтр("ru='Неизвестный статус записи ';uk='Невідомий статус запису '") + КодСтатусаВедомостиЗП;
    СообщениеПользователю(ТекстСтатуса);
    Возврат ТекстСтатуса

КонецФункции

Функция ДобавитьСотрудникаВПакетЗачислений(ИДПакетаЗачислений, ИДЗаписи, СтруктураПарамСотр, СуммаПлатежа)

    ДействиеАналитики = "ДобавлениеСотрудникаВВедомостьЗП";

    //amount - сумма зачисления на карту сотруднику
    //firstName - имя сотрудника
    //inn= - ИНН сотрудника
    //lastName= - отчество сотрудника
    //surName - фамилия сотрудника
    
    recid = ИДЗаписи;//референс записи
    amount = Формат(СуммаПлатежа, "ЧГ=0;ЧРД=.");
    surName = EncodeURL(ЗаменитьСС(СтруктураПарамСотр.Фамилия)); //фамилия
    firstName = EncodeURL(ЗаменитьСС(СтруктураПарамСотр.Имя)); //имя
    lastName = EncodeURL(ЗаменитьСС(СтруктураПарамСотр.Отчество)); //отчество

    СтрокаЗП = ПолучитьСтрокуЗП();
    Если СтрокаЗП = Неопределено Тогда
        Возврат "";
    КонецЕсли;

    Если Не ЗначениеЗаполнено(ИДПакетаЗачислений) Тогда
        ТекстСообщения = НСтр("ru='Ошибка добавления сотрудника в ведомость. Ведомость не отправлена.';uk='Помилка додавання співробітника у відомість. Відомість не відправлена.'");
        Возврат ""
    КонецЕсли;

    РесурсНаСервере = "/api/pay/maspay/" + ИДПакетаЗачислений + "/add";//СтрокаЗП.BPP_REF
    POST = Истина;
    УдалитьBOM = Истина;
    comment = НазначениеЗачисления;//ЗаголовокВедомости;

    СтрокаЗапроса = "{""receiver"": """ + recid + """, ""comment"":""" + comment + """, ""amount"":""" + amount + """}";//референс записи
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",, КодировкаТекста.UTF8,, POST,,, УдалитьBOM);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат "";
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;

    //    парсинг
    СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);

    стРезультатПроверкиНаОшибки = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
    РезультатВозврата = стРезультатПроверкиНаОшибки.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
        ТекстСообщения = стРезультатПроверкиНаОшибки.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения);
        Возврат ""
    КонецЕсли;

    Попытка
        Если СтруктураОтвета.status = "err" Или ТипЗнч(СтруктураОтвета.error) = Тип("Структура") Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураОтвета.error.code, СтруктураОтвета.error);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                СообщениеПользователю(ТекстСообщения);
                Возврат ""
            КонецЕсли
        КонецЕсли
    Исключение
    КонецПопытки;

    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление сотрудника в ведомость!';uk='Помилка відправлення запиту на додавання співробітника у відомість!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат "";
    КонецЕсли;

    ИдНовойЗаписи = СтруктураОтвета.data.ref;

    Возврат ИдНовойЗаписи;
    
КонецФункции    

Функция УдалитьСотрудникаИзВедомости(ИДПакетаЗачислений, СтруктураПарамСотр, ИдСтрокиСотр)

    ДействиеАналитики = "УдалениеСотрудникаИзЗПВедомости";

    //Удаление сотрудника из пакета зачислений
    СтрокаЗП = ПолучитьСтрокуЗП();
    
    Если СтрокаЗП = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    rollid = ИДПакетаЗачислений;//rollid референс пакета зачислений
    recid = ИдСтрокиСотр;//референс записи
    Если Не ЗначениеЗаполнено(recid) Тогда            
        ТекстСообщения = НСтр("ru = 'Отсутствует референс удаляемой строки записи сотрудника в ведомости! Сотрудник не удален из ведомости!';uk='Відсутній референс рядка запису співробітника, що видаляється у відомості! Співробітник не видалений з відомості!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецЕсли;    

    РесурсНаСервере = "/api/pay/maspay/" + rollid + "/remove";
    
    POST = Истина;
    //УдалитьBOM = Истина;
    СтрокаЗапроса = "{""ref"": """ + recid + """}";//референс записи

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат Ложь;
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);

    стРезультатПроверкиНаОшибку = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
    РезультатВозврата = стРезультатПроверкиНаОшибку.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
        ТекстСообщения = стРезультатПроверкиНаОшибку.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь
    КонецЕсли;

    Попытка
        Если СтруктураОтвета.status = "err" Или ТипЗнч(СтруктураОтвета.error) = Тип("Структура") Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураОтвета.error.code, СтруктураОтвета.error);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                Возврат Ложь
            КонецЕсли
        КонецЕсли
    Исключение
    КонецПопытки;

    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на удаление сотрудника из ведомости!';uk='Помилка надсилання запиту на видалення співробітника з відомості!'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецЕсли;    

    Возврат Истина; // успешно удалили
    
КонецФункции

Функция ОбработатьОшибкиПолученияСпискаВедомостейАК(errText, СтруктураОшибки = Неопределено) Экспорт

    ТекстОшибки = "";

    сзОшибкиЗПВедомости = Новый СписокЗначений;
    сзОшибкиЗПВедомости.Добавить("L_ENTITY_NOT_EXISTS", НСтр("ru='Пакет не существует в системе.';uk='Пакет не існує в системі.'"));
    сзОшибкиЗПВедомости.Добавить("L_ACCESS_DENIED", НСтр("ru='Указан пакет другой организации.';uk='Вказаний пакет іншої організациї.'"));
    сзОшибкиЗПВедомости.Добавить("V_BAD_PARAM", НСтр("ru='Ошибка(и) в параметрах запроса с указанием ошибочного параметра.';uk='Помилка(и) в параметрах запиту із зазначенням помилкового параметра.'"));
    сзОшибкиЗПВедомости.Добавить("L_UNABLE_TO_COMPLETE_OPERATION", НСтр("ru='В текущих условиях выполнить запрос не возможно (как правило несоответствие статуса пакета запрашиваемой операции).';uk='У поточних умовах виконати запит неможливо (як правило невідповідність статусу пакета запитуваної операції).'"));
    сзОшибкиЗПВедомости.Добавить("L_UNABLE_TO_START_VALIDATION", НСтр("ru='В текущих условиях выполнить запрос не возможно (как правило несоответствие статуса пакета запрашиваемой операции).';uk='У поточних умовах виконати запит неможливо (як правило невідповідність статусу пакета запитуваної операції).'"));//Логически идентичен L_UNABLE_TO_COMPLETE_OPERATION, только для запуска проверки

    эсзНайденнаяОшибка = сзОшибкиЗПВедомости.НайтиПоЗначению(errText);
    Если эсзНайденнаяОшибка <> Неопределено Тогда
        Если ЗначениеЗаполнено(эсзНайденнаяОшибка.Значение) Тогда
            ТекстОшибки = эсзНайденнаяОшибка.Представление
        Иначе
            ТекстОшибки = эсзНайденнаяОшибка.Значение
        КонецЕсли;
        Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
            Для каждого ЭлементсзОшибкиЗПВедомости Из сзОшибкиЗПВедомости Цикл
                Если Найти(ЭлементсзОшибкиЗПВедомости.Значение, errText) > 0  Тогда
                    эсзНайденнаяОшибка = ЭлементсзОшибкиЗПВедомости
                КонецЕсли;
                Если эсзНайденнаяОшибка <> Неопределено Тогда
                    Если ЗначениеЗаполнено(эсзНайденнаяОшибка.Значение) Тогда
                        ТекстОшибки = ТекстОшибки + ", " + эсзНайденнаяОшибка.Представление
                    Иначе
                        ТекстОшибки = ТекстОшибки + ", " + эсзНайденнаяОшибка.Значение
                    КонецЕсли
                КонецЕсли
            КонецЦикла
        КонецЕсли
    КонецЕсли;

    Если РежимОтладки И ЗначениеЗаполнено(СтруктураОшибки) Тогда
        СписокТиповУниверсальныхКоллекций = Строка(Тип("Структура")) + "," + Строка(Тип("Массив")) + ","
            + Строка(Тип("СписокЗначений")) + "," + Строка(Тип("ТаблицаЗначений"));// + "," + Строка(Тип("КлючИЗначение"));
        Попытка
            Для каждого ЭлементСтруктураОшибки Из СтруктураОшибки Цикл
                Если Найти(СписокТиповУниверсальныхКоллекций, Строка(ТипЗнч(ЭлементСтруктураОшибки.Значение))) > 0 Тогда
                    ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(ТипЗнч(ЭлементСтруктураОшибки.Значение));
                    Для каждого ПодЭлементСтруктураОшибки Из ЭлементСтруктураОшибки.Значение Цикл
                        Попытка
                            ТекстОшибки = ТекстОшибки + ", " + ПодЭлементСтруктураОшибки.Ключ + "=" + ПодЭлементСтруктураОшибки.Значение
                        Исключение
                            ТекстОшибки = ТекстОшибки + ", " + ПодЭлементСтруктураОшибки
                        КонецПопытки
                    КонецЦикла
                Иначе
                    ТекстОшибки = ТекстОшибки + Символы.ПС + ЭлементСтруктураОшибки.Ключ + "=" + ЭлементСтруктураОшибки.Значение
                КонецЕсли
            КонецЦикла
        Исключение
        КонецПопытки
    КонецЕсли;

    Возврат ТекстОшибки

КонецФункции

Функция ИмяПоляТабельногоНомера(ДляЗапроса = Истина)
    
    ИмяПоля = "Код";
    
    Если ПоискСотрудниковПоИНН Тогда
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            ИмяПоля = "Физлицо.КодПоДРФО";
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            ИмяПоля = "ФизическоеЛицо.КодПоДРФО";    
        КонецЕсли;    
            
    КонецЕсли;
    
    Возврат ИмяПоля;
    
КонецФункции

Функция ЗаполнитьСтруктуруПараметровСотрудника(Сотрудник, Дата, ФизЛицо = Неопределено, ВыгрузкаВФайл = Ложь)
    
    СтруктураПарамСотр = Новый Структура;
    
    Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
        //    BASSM
        ТабНомер = СокрЛП(Сотрудник.Код);
        СтруктураПарамСотр.Вставить("Сотрудник", Сотрудник)
    Иначе
        Попытка
            //    БУ, BASC
            НайденныйСотр = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо", Сотрудник.Ссылка);
        Исключение
            //    
            Попытка
                тзСотрудники = Новый ТаблицаЗначений;
                Сотр = Справочники.Сотрудники.Выбрать();
                тзСотрудники.Колонки.Добавить("Сотрудник");
                тзСотрудники.Колонки.Добавить("Физлицо");
                тзСотрудники.Колонки.Добавить("ДатаПриемаНаРаботу");
                тзСотрудники.Колонки.Добавить("ДатаУвольнения");
                Пока Сотр.Следующий() Цикл
                    Попытка
                        СотрФизлицо = Сотр.Физлицо
                    Исключение
                        СотрФизлицо = Сотр.ФизическоеЛицо
                    КонецПопытки;
                    Попытка
                        ДатаПриемаНаРаботу = Сотр.ДатаПриемаНаРаботу
                    Исключение
                        ДатаПриемаНаРаботу = ""
                    КонецПопытки;
                    Попытка
                        ДатаУвольнения = Сотр.ДатаУвольнения
                    Исключение
                        ДатаУвольнения = ""
                    КонецПопытки;
                    НоваяСтрокатзСотрудники = тзСотрудники.Добавить();
                    НоваяСтрокатзСотрудники.Сотрудник = Сотр.Ссылка;
                    НоваяСтрокатзСотрудники.Физлицо = СотрФизлицо;
                    НоваяСтрокатзСотрудники.ДатаПриемаНаРаботу = ДатаПриемаНаРаботу;
                    НоваяСтрокатзСотрудники.ДатаУвольнения = ДатаУвольнения;
                КонецЦикла
            Исключение
                СообщениеПользователю(ОписаниеОшибки(), Ложь);
            КонецПопытки;
            Если тзСотрудники.Количество() > 0 Тогда
                ПараметрыОтбора = Новый Структура();
                ПараметрыОтбора.Вставить("Физлицо", Сотрудник.Ссылка);
                мСтрокитзСотрудники = тзСотрудники.НайтиСтроки(ПараметрыОтбора);
                Если мСтрокитзСотрудники.Количество() = 1 Тогда
                    НайденныйСотр = мСтрокитзСотрудники[0].Сотрудник
                ИначеЕсли мСтрокитзСотрудники.Количество() > 1 Тогда
                    НайденныйСотр = Неопределено;
                    вДатаПриема = Дата(1, 1, 1);
                    Для каждого мСтртзСотрудники из мСтрокитзСотрудники Цикл
                        Если НайденныйСотр = Неопределено
                                Или мСтртзСотрудники.ДатаПриемаНаРаботу > вДатаПриема Тогда
                            НайденныйСотр = мСтртзСотрудники.Сотрудник;
                            вДатаПриема = мСтртзСотрудники.ДатаПриемаНаРаботу
                        КонецЕсли
                    КонецЦикла;
                КонецЕсли
            КонецЕсли
        КонецПопытки;
        СтруктураПарамСотр.Вставить("Сотрудник", НайденныйСотр);//.Ссылка
        Попытка
            ТабНомер = СокрЛП(НайденныйСотр.Код)
        Исключение
            ТабНомер = ""
        КонецПопытки
    КонецЕсли;
    СтруктураПарамСотр.Вставить("ТабНомер", ТабНомер);

    лФизЛицо = Неопределено;
    
    Если ЗначениеЗаполнено(ФизЛицо) Тогда
        лФизЛицо = ФизЛицо;
    ИначеЕсли ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        Попытка
            лФизЛицо = Сотрудник.ФизЛицо;
        Исключение
            лФизЛицо = Сотрудник;
        КонецПопытки;
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "KUBU" Тогда
        Попытка
            лФизЛицо = Сотрудник.ФизическоеЛицо;
        Исключение
            лФизЛицо = Сотрудник;
        КонецПопытки;
        
    КонецЕсли;    

    Если РаботаВМоделиСервисаПБ И (ИдКонф = "BP" Или ИдКонф = "BASC") Тогда
        ПоискСотрудниковПоИНН = Истина;
    КонецЕсли;
    
    Если ПоискСотрудниковПоИНН ИЛИ НЕ ЗначениеЗаполнено(ТабНомер) Тогда
        Если ЗначениеЗаполнено(лФизЛицо) Тогда
            Попытка
                ТабНомер = СокрЛП(лФизЛицо.КодПоДРФО);
            Исключение
                Попытка
                    ТабНомер = СокрЛП(лФизЛицо.ИНН);
                Исключение
                КонецПопытки;
            КонецПопытки;
        КонецЕсли;
    КонецЕсли; 
    
    Если ВыгрузкаВФайл Тогда
        СтруктураПарамСотр.Вставить("ТабНомер", ТабНомер);    
        Возврат СтруктураПарамСотр;    
    КонецЕсли;
    
    ТекКарта = СписокКарт.НайтиПоЗначению(ТабНомер);    
    
    //Если ТекКарта = Неопределено Тогда
    //    ТекстСообщения = НСтр("ru = 'Не найдена зарплатная карта сотрудника ';uk='Не знайдена зарплатна картка співробітника '") + Сотрудник;
    //    СообщениеПользователю(ТекстСообщения);
    //    Возврат СтруктураПарамСотр;
    //КонецЕсли;
        
    СтруктураФИО = ПолучитьФИОФизЛица(лФизЛицо, Дата);
    
    СтруктураПарамСотр.Вставить("Фамилия", СтруктураФИО.Фамилия);
    СтруктураПарамСотр.Вставить("Отчество", СтруктураФИО.Отчество);
    СтруктураПарамСотр.Вставить("Имя", СтруктураФИО.Имя);
    
    Попытка
        СтруктураПарамСотр.Вставить("КодПоДРФО", СокрЛП(лФизЛицо.КодПоДРФО));
    Исключение
        Попытка
            СтруктураПарамСотр.Вставить("КодПоДРФО", СокрЛП(лФизЛицо.ИНН));
            ТабНомер = СокрЛП(лФизЛицо.ИНН);
        Исключение 
            СтруктураПарамСотр.Вставить("КодПоДРФО", "");
            
        КонецПопытки;
    КонецПопытки;

    Если ТекКарта = Неопределено Тогда
        
        ТекстСообщения = НСтр("ru = 'Не найдена зарплатная карта сотрудника ';uk='Не знайдена зарплатна картка співробітника '") + Сотрудник;
        СообщениеПользователю(ТекстСообщения);
        
        Возврат СтруктураПарамСотр;
    КонецЕсли;

    СтруктураПарамСотр.Вставить("НомерКарты", ТекКарта.Представление);
    СтруктураПарамСотр.Вставить("Текст", EncodeURL(ЗаменитьСС(?(ЗначениеЗаполнено(НазначениеЗачисления), НазначениеЗачисления, "Заработная плата"))));
    СтруктураПарамСотр.Вставить("ТабНомер", ТабНомер);
    
    Возврат СтруктураПарамСотр;
    
КонецФункции    

Функция ПолучитьФИОФизЛица(ФизЛицо, Дата)
    
    СтруктураФИО = Новый Структура;
    
    СтруктураФИО.Вставить("Фамилия", "");
    СтруктураФИО.Вставить("Имя",      "");
    СтруктураФИО.Вставить("Отчество", "");
    
    Запрос = Новый Запрос;
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        Запрос.Текст = 
            "ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |    ФИОФизЛицСрезПоследних.Фамилия,
            |    ФИОФизЛицСрезПоследних.Имя,
            |    ФИОФизЛицСрезПоследних.Отчество
            |ИЗ
            |    РегистрСведений.ФИОФизЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
            
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "ERP" ИЛИ ИдКонф = "KUBU" Тогда
        Запрос.Текст = 
            "ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |    ФИОФизЛицСрезПоследних.Фамилия,
            |    ФИОФизЛицСрезПоследних.Имя,
            |    ФИОФизЛицСрезПоследних.Отчество
            |ИЗ
            |    РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
    КонецЕсли;
    
    Запрос.УстановитьПараметр("Период", Дата);
    Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        СтруктураФИО.Вставить("Фамилия",  ВыборкаДетальныеЗаписи.Фамилия);
        СтруктураФИО.Вставить("Имя",       ВыборкаДетальныеЗаписи.Имя);
        СтруктураФИО.Вставить("Отчество", ВыборкаДетальныеЗаписи.Отчество);
        
    КонецЦикла;
    
    Возврат СтруктураФИО;
    
КонецФункции    

Функция СоздатьПакетЗачислений(бВидВыплаты) 
    
    idПакета = "";
    
    РесурсНаСервере = "/api/pay/maspay/create";
    СтрокаЗП = ПолучитьСтрокуЗП();
    
    Если СтрокаЗП = Неопределено Тогда
        Возврат idПакета;
    КонецЕсли;    
    
    group = ТекущийЗП;//СтрокаЗП.BPP_REF;//SALARY|STUDENT""
    salary = бВидВыплаты;//ВидВыплаты: true - целевой, false - нецелевой
    POST = Истина;
    //УдалитьBOM = Истина;
    СтрокаЗапроса = "{""group"": """ + group + """, ""salary"": " + salary// + """"
        + ?(ЗначениеЗаполнено(ЗаголовокВедомости), ", ""packetName"": """ + ЗаголовокВедомости + """", "")
        + "}";
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат idПакета;
    Иначе
        Статус = стРезультат.Статус;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на создание ведомости.';uk='Помилка надсилання запиту на створення відомості.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат idПакета;
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

    стРезультатПроверкиОшибки = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
    РезультатВозврата = стРезультатПроверкиОшибки.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
        ТекстСообщения = стРезультатПроверкиОшибки.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения);
        Возврат idПакета
    КонецЕсли;

    idПакета = СтруктураОтвета.data.reference;

    Возврат idПакета;

КонецФункции

Процедура ПолучитьСписокПакетовЗачислений(НачПериода, КонПериода, СтатусВедомостиЗПСписокВыбора) Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    ДействиеАналитики = "ПолучениеСпискаВедомостей";

    СпискоПакЗач.Очистить();

    Если Не ЗначениеЗаполнено(ТекущийЗП) Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка! Не выбран текущий зарплатный проект.';uk='Помилка! Не вибран поточний зарплатний проект.'");
        СообщениеПользователю(ТекстСообщения,,"Объект.ТекущийЗП");
        Возврат;        
    КонецЕсли;

    стРезультат = Новый Структура;
    Режим = "Выбор пакета зачислений";
    РазмерСтраницыОтвета = 100;
    Номерpage = 0;

    Если СтатусВедомостиЗП = СтатусВедомостиЗПСписокВыбора.Получить(0).Значение Тогда
        statusОтбора = "ALL"
    ИначеЕсли СтатусВедомостиЗП = СтатусВедомостиЗПСписокВыбора.Получить(1).Значение Тогда
        statusОтбора = "V"
    ИначеЕсли СтатусВедомостиЗП = СтатусВедомостиЗПСписокВыбора.Получить(2).Значение Тогда
        statusОтбора = "A"
    ИначеЕсли СтатусВедомостиЗП = СтатусВедомостиЗПСписокВыбора.Получить(3).Значение Тогда
        statusОтбора = "F"
    Иначе//Если СтатусВедомостиЗП = СтатусВедомостиЗПСписокВыбора.Получить(4).Значение Тогда
        statusОтбора = "R"
    КонецЕсли;

    Если Найти("ALL,F,R", statusОтбора) > 0 Тогда
        ПериодЗапроса = "&from=" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "&to=" + Формат(КонПериода, "ДФ=гггг-ММ-дд")
    Иначе
        ПериодЗапроса = ""
    КонецЕсли;

    Пока Истина Цикл

        РесурсНаСервере = "/api/pay/apay24/packets/list?" + ?(ЗначениеЗаполнено(statusОтбора), "status=" + statusОтбора, "")
            + "&page=" + Строка(Номерpage) + "&page-size=" + РазмерСтраницыОтвета + ПериодЗапроса;
        СтрокаЗапроса = "";
            
        UserAgentHeaders = ОпределитьUserAgentHeaders();
        POST = Ложь;
        
        стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Возврат;
        Иначе
            Статус = стРезультат.Статус;
            ИмяФайла = стРезультат.ИмяФайлаРезультата;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка ведомостей.';uk='Помилка відправки запиту на отримання списку відомостей.'");
            СообщениеПользователю(ТекстСообщения);
        КонецЕсли;

        СтруктураСчетов = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

        стРезультатПроверкиНаОшибки = ВыводОшибкиЗапросаЗП(СтруктураСчетов);
        РезультатВозврата = стРезультатПроверкиНаОшибки.РезультатВозврата;
        Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураСчетов) Тогда
            ТекстСообщения = стРезультатПроверкиНаОшибки.ТекстСообщения;
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат
        КонецЕсли;

        Попытка
            мВедомости = СтруктураСчетов.data;
            Для каждого эмВедомость Из мВедомости Цикл
                Попытка
                    НаименованиеПЗ = эмВедомость.packetName
                Исключение
                    НаименованиеПЗ = ""
                КонецПопытки;
                Попытка
                    Подстатус = эмВедомость.substatus
                Исключение
                    Подстатус = ""
                КонецПопытки;
                СтатусВедомостиЗППолученный = АнализИВыводСтатусовВедомостейЗПАК(эмВедомость.status, Подстатус);
                ПозицияРазделителя = Найти(СтатусВедомостиЗППолученный, ".");
                КраткийСтатусВедомостиЗП = Лев(СтатусВедомостиЗППолученный, ПозицияРазделителя - 1);
                ТекстИнфо = ?(ЗначениеЗаполнено(НаименованиеПЗ), НаименованиеПЗ, "");
                ТекстИнфо = ?(ЗначениеЗаполнено(ТекстИнфо), ТекстИнфо + " ", "")
                + ?(ЗначениеЗаполнено(эмВедомость.createdAt), эмВедомость.createdAt, "");
                ТекстИнфо = ?(ЗначениеЗаполнено(ТекстИнфо), ТекстИнфо + " ", "")
                + ?(ЗначениеЗаполнено(КраткийСтатусВедомостиЗП), КраткийСтатусВедомостиЗП, "");
                СпискоПакЗач.Добавить(эмВедомость.reference, ТекстИнфо);
                
                Попытка
                    эмВедомостьerrText = эмВедомость.errText
                Исключение
                    эмВедомостьerrText = ""
                КонецПопытки;
                Если ЗначениеЗаполнено(эмВедомостьerrText) Тогда
                    Попытка
                        ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(эмВедомостьerrText);
                        Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                            стРезультат.Вставить("ТекстСообщения", ТекстОшибки);
                            стРезультат.Вставить("Успешно", Ложь);
                            Возврат
                        КонецЕсли
                    Исключение
                        СообщениеПользователю(ОписаниеОшибки(), Ложь);
                    КонецПопытки
                КонецЕсли
            КонецЦикла
        Исключение
            ТекстОписаниеОшибки = ОписаниеОшибки();
            Режим = НСтр("ru='Получение списка доступных ЗП проектов пользователю не выполнено: ';uk='Отримання переліку доступних ЗП проектів користувачу не виконано: '");
            ТекстСообщения = Режим + ТекстОписаниеОшибки;
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат
        КонецПопытки;

        Если мВедомости.Количество() < РазмерСтраницыОтвета Тогда
            Прервать
        КонецЕсли;
        Номерpage = Номерpage + 1

    КонецЦикла;

    Если СпискоПакЗач.Количество() = 0  Тогда
        ТекстСообщения = НСтр("ru='За выбранный период нет созданных ведомостей. Новая ведомость в Приват24 будет создана автоматически.';uk='За обраний період немає створених відомостей. Нова відомість в Приват24 буде створена автоматично.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    Если СпискоПакЗач.Количество() = 0 Тогда
        Возврат;    
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИДПакетаЗачислений) Тогда
        
        Если СпискоПакЗач.НайтиПоЗначению(ИДПакетаЗачислений) = Неопределено Тогда
            ИДПакетаЗачислений = "";
        КонецЕсли;
    Иначе
        ИДПакетаЗачислений = СпискоПакЗач[0].Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция АнализИВыводСтатусовВедомостейЗПАК(КодСтатусаВедомостиЗП, Подстатус) Экспорт

    сзСтатусВедомостиЗПИсх = Новый СписокЗначений;
    ТекстСтатуса = НСтр("ru = 'Пакет отправлен на проверку.';uk='Пакет відправлений на перевірку.'");
    сзСтатусВедомостиЗПИсх.Добавить("N#", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Создан. Пакет создан и допускает редактирование.';uk='Створений. Пакет створений і дозволяє редагування.'");
    сзСтатусВедомостиЗПИсх.Добавить("N", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Проверен. Пакет прошел успешную проверку и его можно утвердить либо отозвать на редактирование.';uk='Перевірений. Пакет пройшов успішну перевірку і його можна затвердити або відкликати на редагування.'");
    сзСтатусВедомостиЗПИсх.Добавить("W", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Утвержден. Пакет утвержден и может быть подписан либо удален.';uk='Затверджено. Пакет затверджений і може бути підписаний або видалений.'");
    сзСтатусВедомостиЗПИсх.Добавить("S", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Подписан бухгалтером. Пакет ожидает подписи директора.';uk='Підписано бухгалтером. Пакет чекає на підпис директора.'");
    сзСтатусВедомостиЗПИсх.Добавить("SB", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Подписан директором. Пакет ожидает подписи бухгалтера.';uk='Підписаний директором. Пакет очікує підпису бухгалтера.'");
    сзСтатусВедомостиЗПИсх.Добавить("SD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Полностью подписан. Пакет получил все необходимые подписи и может быть отправлен в банк.';uk='Повністю підписаний. Пакет отримав всі необхідні підписи і може бути відправлений в банк.'");
    сзСтатусВедомостиЗПИсх.Добавить("S$", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Отправлен. Пакет отправлен в банк на обработку.';uk='Відправлений. Пакет відправлений в банк на обробку.'");
    сзСтатусВедомостиЗПИсх.Добавить("X", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет на проверке. (N->W, N->N).';uk='Пакет на перевірці. (N->W, N->N).'");
    сзСтатусВедомостиЗПИсх.Добавить("P" + "V", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет на проверке. (N->W, N->N).';uk='Пакет на перевірці. (N->W, N->N).'");
    сзСтатусВедомостиЗПИсх.Добавить("P", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет на проверке.';uk='Пакет на перевірці.'");
    сзСтатусВедомостиЗПИсх.Добавить("P" + "P", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет обрабатывает импорт сырых файлов. (N->N).';uk='Пакет обробляє імпорт сирих файлів. (N->N).'");
    сзСтатусВедомостиЗПИсх.Добавить("P" + "I", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет обработан без ошибок.';uk='Пакет оброблен без помилок.'");
    сзСтатусВедомостиЗПИсх.Добавить("F" + "F", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет обработан без ошибок.';uk='Пакет оброблен без помилок.'");
    сзСтатусВедомостиЗПИсх.Добавить("F", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет обработан с ошибками.';uk='Пакет оброблен з помилками.'");
    сзСтатусВедомостиЗПИсх.Добавить("F" + "R", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет забракован.';uk='Пакет забракований.'");
    сзСтатусВедомостиЗПИсх.Добавить("R", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Пакет удален.';uk='Пакет видалений.'");
    сзСтатусВедомостиЗПИсх.Добавить("D", ТекстСтатуса);

    НайденныйСтатус = сзСтатусВедомостиЗПИсх.НайтиПоЗначению(КодСтатусаВедомостиЗП + Подстатус);
    Если НайденныйСтатус <> Неопределено Тогда
        ТекстСтатуса = НайденныйСтатус.Представление;
        Возврат ТекстСтатуса
    КонецЕсли;

    ТекстСтатуса = НСтр("ru='Неизвестный статус ';uk='Невідомий статус '") + КодСтатусаВедомостиЗП
        + НСтр("ru = '. Пакет на проверке.';uk='. Пакет на перевірці.'");
    СообщениеПользователю(ТекстСтатуса);
    Возврат ТекстСтатуса

КонецФункции

Функция СформироватьПФВедомостиЗП(НачПериода, КонПериода) Экспорт
    
    ТабДокумент = Новый ТабличныйДокумент;
    
    Если НЕ ЗначениеЗаполнено(ИДПакетаЗачислений) Тогда
        
        ТекстСообщения = НСтр("ru = 'Не выбрана ведомость по которой будет осуществляться печать';uk='Не вибрана відомість за якою буде здійснюватися друк'");
        СообщениеПользователю(ТекстСообщения, Ложь,"Объект.ИДПакетаЗачислений");
        Возврат ТабДокумент;
        
    КонецЕсли;
    
    ТЗ_Ведомость = ПолучитьДанныеПоВедомости();
    Если ТЗ_Ведомость = Неопределено Тогда
        Возврат ТабДокумент
    КонецЕсли;

    Макет = ПолучитьМакет("МакетВедомость");
    
    ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ТабДокумент.Вывести(ОбластьШапка);
    
    ИтогоНаСтранице = 0;
    НомерСтроки = 1;
    
    Для каждого СтрокаТЗ Из ТЗ_Ведомость Цикл
        
        ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
        
        ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
        ОбластьСтрока.Параметры.ТабельныйНомер = СтрокаТЗ.tabn;
        Попытка
            ОбластьСтрока.Параметры.Физлицо = СтрокаТЗ.surnameInFile + " " + СтрокаТЗ.firstNameInFile + " " + СтрокаТЗ.lastNameInFile
        Исключение
        КонецПопытки;
        ОбластьСтрока.Параметры.Сумма = СтрокаТЗ.amount;
        ТабДокумент.Вывести(ОбластьСтрока);
        
        ИтогоНаСтранице = ИтогоНаСтранице + СтрокаТЗ.amount;
        НомерСтроки = НомерСтроки + 1;
        
    КонецЦикла;
    
    ОбластьИтогПоЛисту = Макет.ПолучитьОбласть("ИтогПоЛисту");
    ОбластьИтогПоЛисту.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
    ТабДокумент.Вывести(ОбластьИтогПоЛисту);
    
    Подвал = Макет.ПолучитьОбласть("Подвал");
    ТабДокумент.Вывести(Подвал);
    
    ТабДокумент.ТолькоПросмотр = Истина;

    Возврат ТабДокумент;
    
КонецФункции    

Функция ПолучитьДанныеПоВедомости()
    
    ТЗ_Ведомость = Новый ТаблицаЗначений;

    стРезультат = ПолучитьСодержимоеПакета();
    Успешно = стРезультат.Успешно;
    Если Не Успешно Тогда
        Возврат Неопределено
    КонецЕсли;
    СтруктураОтветаСодержимого = стРезультат.СтруктураОтветаСодержимого;

    ЕстьОшибки = Ложь;

    ТЗ_Ведомость = ПрочитатьФайлОтветПоДаннымВедомости(СтруктураОтветаСодержимого, ЕстьОшибки);

    Возврат ТЗ_Ведомость;

КонецФункции

Функция ПолучитьСодержимоеПакета()

    Перем СтруктураОтветаИтого;

    //    получение содержимого пакета
    ДействиеАналитики = "ПолучениеСодержимогоПакета";

    СтруктураОтветаСодержимого = Новый Структура;

    РазмерСтраницыОтвета = 100;
    Номерpage = 0;

    Пока Истина Цикл

        РесурсНаСервере = "/api/pay/maspay/" + ИДПакетаЗачислений + "/content?page=" + Строка(Номерpage) + "&page-size=" + РазмерСтраницыОтвета;
        POST = Ложь;
        //УдалитьBOM = Истина;
        СтрокаЗапроса = "";

        UserAgentHeaders = ОпределитьUserAgentHeaders();

        стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,, POST);

        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            стРезультат.Вставить("Успешно", Ложь);
            стРезультат.Вставить("СтруктураОтветаСодержимого", СтруктураОтветаСодержимого);
            Возврат стРезультат
        Иначе
            Статус = стРезультат.Статус;
            ТелоОтвета = стРезультат.ТелоОтвета;
        КонецЕсли;

        СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);

        стРезультатПроверкиНаОшибку = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
        РезультатВозврата = стРезультатПроверкиНаОшибку.РезультатВозврата;
        Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
            ТекстСообщения = стРезультатПроверкиНаОшибку.ТекстСообщения;
            стРезультат.Вставить("Успешно", Ложь);
            СообщениеПользователю(ТекстСообщения, Ложь);
            стРезультат.Вставить("СтруктураОтветаСодержимого", СтруктураОтветаСодержимого);
            Возврат стРезультат
        КонецЕсли;
        Попытка
            Если СтруктураОтвета.status = "err" Или ТипЗнч(СтруктураОтвета.error) = Тип("Структура") Тогда
                ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураОтвета.error.code, СтруктураОтвета.error);
                Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                    стРезультат.Вставить("Успешно", Ложь);
                    СообщениеПользователю(ТекстОшибки, Ложь);
                    стРезультат.Вставить("СтруктураОтветаСодержимого", СтруктураОтветаСодержимого);
                    Возврат стРезультат
                КонецЕсли
            КонецЕсли
        Исключение
        КонецПопытки;

        Если Не (Статус = 200 И СтруктураОтвета.status = "ok") Тогда
            ТекстСообщения = НСтр("ru='Ошибка при получении содержимого пакета зачислений (ведомости).';uk='Помилка при отриманні вмісту пакета зарахувань (відомості).'");
            стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
            стРезультат.Вставить("Успешно", Ложь);
            стРезультат.Вставить("СтруктураОтветаСодержимого", СтруктураОтветаСодержимого);
            Возврат стРезультат
        КонецЕсли;

        Если Не ЗначениеЗаполнено(СтруктураОтветаИтого) Тогда
            СтруктураОтветаИтого = СтруктураОтвета
        Иначе
            Для каждого ЗаписьВедомости Из СтруктураОтвета.data Цикл
                СтруктураОтвета.data.Вставить(ЗаписьВедомости)
            КонецЦикла
        КонецЕсли;

        Если СтруктураОтвета.data.Количество() < РазмерСтраницыОтвета Тогда
            Прервать;
        КонецЕсли;
        Номерpage = Номерpage + 1
    КонецЦикла;

    СтруктураОтветаСодержимого = СтруктураОтветаИтого;

    стРезультат.Вставить("Успешно", Истина);
    стРезультат.Вставить("СтруктураОтветаСодержимого", СтруктураОтветаСодержимого);
    Возврат стРезультат

КонецФункции

// Функция - Прочитать файл ответ по данным ведомости
//
// Параметры:
//  ТелоОтвета     -      - 
//  ЕстьОшибки     -      - 
// Возвращаемое значение:
//   - 
Функция ПрочитатьФайлОтветПоДаннымВедомости(ТелоОтвета, ЕстьОшибки)
    
    тзВедомость = Новый ТаблицаЗначений;
    тзВедомость.Колонки.Добавить("tabn");
    тзВедомость.Колонки.Добавить("amount");
    тзВедомость.Колонки.Добавить("firstNameInFile");
    тзВедомость.Колонки.Добавить("lastNameInFile");
    тзВедомость.Колонки.Добавить("surnameInFile");
    тзВедомость.Колонки.Добавить("status");

    мСтруктураОтветаСодержимого = ТелоОтвета.data;//СтруктураОтветаСодержимого
    Для каждого ЗаписьВедомости Из мСтруктураОтветаСодержимого Цикл
        Попытка
            НоваяСтрока = тзВедомость.Добавить();
            НоваяСтрока.tabn = ЗаписьВедомости.tabNo;
            НоваяСтрока.amount = ЗаписьВедомости.amount;
            Попытка
                НоваяСтрока.firstNameInFile = ЗаписьВедомости.firstNameInFile;
                НоваяСтрока.lastNameInFile = ЗаписьВедомости.lastNameInFile;
                НоваяСтрока.surnameInFile = ЗаписьВедомости.surnameInFile;
            Исключение
            КонецПопытки;
            НоваяСтрока.status = ЗаписьВедомости.status;
            //НоваяСтрока.fileId = ЗаписьВедомости.Id;
        Исключение
            ТекстОписаниеОшибки = ОписаниеОшибки();
            ТекстСообщения = НСтр("ru = 'Ошибка анализа файла-ответа для печати ведомости! ';uk='Помилка аналізу файла-відповіді для друку відомості! '")
                + ТекстОписаниеОшибки;
            СообщениеПользователю(ТекстСообщения)
        КонецПопытки;
    КонецЦикла;
    
    Возврат тзВедомость;
    
КонецФункции

Функция ПроверитьВедомость() Экспорт

    ДействиеАналитики = "ПроверкаПакетаЗачислений";

    ТабДок = Новый ТабличныйДокумент;

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат ТабДок
    КонецЕсли;

    СтрокаЗП = ПолучитьСтрокуЗП();
    
    Если СтрокаЗП = Неопределено Тогда
        Возврат ТабДок;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ИДПакетаЗачислений) Тогда
        
        ТекстСообщения = НСтр("ru = 'Не выбрана ведомость для проверки.';uk='Не вибрана відомість для перевірки.'");
        СообщениеПользователю(ТекстСообщения, Ложь,"Объект.ИДПакетаЗачислений");
        Возврат ТабДок;
        
    КонецЕсли; 

    //    анализ возможности отправки ведомости maspay на проверку - только для статусов "N" "Создан"
    СтруктураПараметров = ПолучитьЗаголовокПакета(ИДПакетаЗачислений);
    Если Не СтруктураПараметров.Успешно Тогда
        Возврат ТабДок
    КонецЕсли;
    СтруктураОтвета = СтруктураПараметров.СтруктураОтвета;
    СтатусПакета = СтруктураОтвета.data.status;
    Если СтатусПакета <> "N" Тогда
        ТекстСообщения = НСтр("ru='Проверять можно только ведомости (пакеты) со статусом `Создан`.';uk='Перевіряти можна тільки відомості (пакети) зі статусом `Створений`.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат ТабДок
    КонецЕсли;

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    СтрокаЗапроса = "";
    РесурсНаСервере = "/api/pay/maspay/" + ИДПакетаЗачислений + "/validate";
    POST = Истина;//по умолчанию
    //УдалитьBOM = Истина;
    
    стРезультат = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "");
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат ТабДок;
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение данных для проверки ведомости.';uk='Помилка відправки запиту на отримання даних для перевірки відомості.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат ТабДок;
    КонецЕсли;

    СтруктураВедомости = jsonПрочитатьИнициализация(ТелоОтвета);

    стРезультат = ВыводОшибкиЗапросаЗП(СтруктураВедомости);
    РезультатВозврата = стРезультат.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураВедомости) Тогда
        ТекстСообщения = стРезультат.ТекстСообщения;
        СообщениеПользователю(ТекстСообщения);
        Возврат ТабДок
    КонецЕсли;

    Попытка
        Если СтруктураВедомости.status = "err" Или ТипЗнч(СтруктураВедомости.error) = Тип("Структура") Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураВедомости.error.code, СтруктураВедомости.error);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                СообщениеПользователю(ТекстСообщения);
                Возврат ТабДок
            КонецЕсли
        КонецЕсли
    Исключение
        Если СтруктураВедомости.status = "err" Тогда
            ТекстОшибки = ОбработатьОшибкиПолученияСпискаВедомостейАК(СтруктураВедомости.error.code);
            Если ЗначениеЗаполнено(ТекстОшибки) Тогда
                СообщениеПользователю(ТекстСообщения);
                Возврат ТабДок
            КонецЕсли
        КонецЕсли
    КонецПопытки;

    Попытка
        КодСтатусаВедомостиЗП = СтруктураВедомости.data.status;
        ТекстСтатус = НСтр("ru=' Статус ';uk=' Статус '") + КодСтатусаВедомостиЗП + ". "
    Исключение
        ТекстОписаниеОшибки = ОписаниеОшибки();
        ТекстСообщения = НСтр("ru='Ошибка отправки ведомости ';uk='Помилка відправки відомості '")
            + ИДПакетаЗачислений + НСтр("ru=' на проверку. ';uk=' на перевірку. '") + ТекстОписаниеОшибки;
        СообщениеПользователю(ТекстСообщения);
        Возврат ТабДок
    КонецПопытки;

    Попытка
        Подстатус = СтруктураВедомости.data.substatus
    Исключение
        Подстатус = ""
    КонецПопытки;

    //альтернативный вариант проверки
    СтатусПакета = АнализИВыводСтатусовВедомостейЗПАК(КодСтатусаВедомостиЗП, Подстатус);
    СообщениеПользователю(СтатусПакета, Ложь);

    Если Статус = 200 И СтруктураВедомости.status = "ok" Тогда
        Если КодСтатусаВедомостиЗП = "P" Тогда//на проверке//СтруктураВедомости.status
            ТекстСообщения = НСтр("ru='Ведомость ';uk='Відомість '") + ИДПакетаЗачислений
                + НСтр("ru=' отправлена на проверку.';uk=' відправлена на перевірку.'");
            СообщениеПользователю(ТекстСообщения)
        ИначеЕсли Статус = 200 И КодСтатусаВедомостиЗП <> "P" Тогда//не на проверке
            ТекстСообщения = НСтр("ru='Ведомость ';uk='Відомість '") + ИДПакетаЗачислений
                + НСтр("ru=' не отправлена на проверку.';uk=' не відправлена на перевірку.'");
            СообщениеПользователю(ТекстСообщения)
        КонецЕсли
    Иначе
        ТекстСообщения = НСтр("ru='Ошибка отправки ведомости ';uk='Помилка відправки відомості '")
            + ИДПакетаЗачислений + НСтр("ru=' на проверку.';uk=' на перевірку.'");
        СообщениеПользователю(ТекстСтатус + ТекстСообщения);
        Возврат ТабДок
    КонецЕсли;

    ОжиданиеПроверкиВедомости(ИДПакетаЗачислений);

    ТабДок.ТекущаяОбласть.Текст = СтатусПакета;
    
    ОбновитьСтатистикуРаботы("ПроверкаИПечатьВедомостейЗП", "СборДанных");
    
    Возврат ТабДок;
    
КонецФункции

Функция ОжиданиеПроверкиВедомости(ТекРефПакЗач)// Экспорт

    стРезультат = Новый Структура;

    НомерПопыткиЗапроса = 0;
    Пока Истина Цикл//status = "P"//на проверке
        СтруктураОтвета = ПолучитьСтруктуруПараметровПоВедомости(ТекРефПакЗач, Ложь);//ПолучитьЗаголовокПакетаСервер(ТекРефПакЗач);
        Успешно = СтруктураОтвета.Успешно;
        Если Не Успешно Тогда
            Возврат СтруктураОтвета
        КонецЕсли;
        СтруктураОтветаЗаголовка = СтруктураОтвета.СтруктураОтвета.data;
        Если СтруктураОтветаЗаголовка.status <> "P" Или НомерПопыткиЗапроса >= 60 Тогда//прошел проверку или опрос прерван
            Прервать
        КонецЕсли;
        НомерПопыткиЗапроса = НомерПопыткиЗапроса + 1
    КонецЦикла;

    Если НомерПопыткиЗапроса >= 60 Тогда
        ТекстСообщения = НСтр("ru='Опрос процесса проверки прерван из-за истечения времени. Проверьте вручную позже.';uk='Опитування процесу перевірки перерване через закінчення часу. Перевірте вручну пізніше.'");
        стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
        стРезультат.Вставить("Успешно", Ложь);
        Возврат стРезультат
    КонецЕсли;

    Попытка
        Подстатус = СтруктураОтветаЗаголовка.status.substatus
    Исключение
        Подстатус = ""
    КонецПопытки;
    Текстstatus = АнализИВыводСтатусовВедомостейЗПАК(СтруктураОтветаЗаголовка.status, Подстатус);

    ТекстСообщения = "";
    Если СтруктураОтвета.СписокСотр.Количество() = 0 И СтруктураОтвета.СтруктураОтвета.data.Количество() = 0 Тогда
        ТекстСообщения = НСтр("ru='Ведомость пуста.';uk='Відомість порожня.'")
    КонецЕсли;

    стРезультат.Вставить("ТекстСообщения", Текстstatus + Символы.ПС + ТекстСообщения);
    СообщениеПользователю(Текстstatus + Символы.ПС + ТекстСообщения);
    стРезультат.Вставить("Успешно", Истина);
    Возврат стРезультат

КонецФункции

Функция УспешноПройденыАвторизационныеЭтапыВ3()
    
    Если ИспользоватьТокены И ТокеныКомпаний.Количество() = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка. Список компаний доступных для авторизации через токен автоклиента пуст. Пожалуйста, заполните список и повторите операцию.';uk='Помилка. Список компаній доступних для авторизації через токен автоклієнта порожній. Будь ласка, заповніть список і повторіть операцію'");
        СообщениеПользователю(ТекстСообщения);
        
        ИДКлиента = "";
        
        Возврат Ложь;
    КонецЕсли;
    
    Если ИспользоватьТокены И ТокеныКомпаний.Количество() <> 0 Тогда
        
        Для Каждого СтрокаКомпании Из ТокеныКомпаний Цикл
            Если СтрокаКомпании.КодКомпании = КодПоЕДРПОУ ИЛИ СтрокаКомпании.КодКомпании = ИНН Тогда
                
                Если ЗначениеЗаполнено(СтрокаКомпании.ТокенАвтоклиента) Тогда
                    
                    ИдАК = СтрокаКомпании.ИдАвтоклиента;
                    ТокенАК = СтрокаКомпании.ТокенАвтоклиента;
                    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики,, "Быстрая авторизация");
                    Возврат Истина;
                    
                КонецЕсли;
                
            КонецЕсли
        КонецЦикла;
        
        ТекстСообщения = НСтр("ru = 'Ошибка. Выбранная компания не найдена в списке компаний доступных для авторизации через токен автоклиента. Пожалуйста, заполните список и повторите операцию.';uk='Помилка. Обрана компанія не знайдена в списку компаній доступних для авторизації через токен Автоклієнт. Будь ласка, заповніть список і повторіть операцію.'");
        Если Не ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
            ТекстСообщения = ТекстСообщения + Символы.ПС
                + НСтр("ru = 'Не заполнен реквизит Код по ЕДРПОУ в параметрах обмена.';uk='Не заповнений реквізит Код за ЄДРПОУ в параметрах обміну.'")
        КонецЕсли;
        СообщениеПользователю(ТекстСообщения);
        ИДКлиента = "";
        
        Возврат Ложь;
    КонецЕсли;
    
    //ИДКомпанииВ3 = ПолучитьИДКомпанииВ3();
    //
    //Если НЕ ЗначениеЗаполнено(ИДКомпанииВ3) Тогда
    //    Возврат Ложь;    
    //КонецЕсли;
    //
    //АвторизацияАвтоклиента();
    //
    //Если НЕ ЗначениеЗаполнено(СессияАК) Тогда
    //    Возврат Ложь;    
    //КонецЕсли;
    //
    //НайтиСоздатьАвтоклиент();
    
    Если НЕ ЗначениеЗаполнено(ТокенАК) Тогда
        Возврат Ложь;    
    КонецЕсли;
    
    Возврат Истина;
    
КонецФункции

Функция СформироватьВыписку(НачПериода, КонПериода) Экспорт
    
    ТабДок = Новый ТабличныйДокумент;
    
    НачПерГраницы = НачПериода;
    
    Если СтрДлина(XML) = 0 ИЛИ ЗначениеЗаполнено(FollowId) Тогда
        
        Если НЕ ЗначениеЗаполнено(FollowId) Тогда
            ТабВходящихПлатежей.Очистить();
        КонецЕсли;
                
        Если НЕ ИспользоватьСтароеAPI Тогда
            
            //Если НЕ ЗначениеЗаполнено(СессияВ3) И НЕ ИспользоватьТокены Тогда
            //    ПродлитьСессиюПользователя();    
            //КонецЕсли;
            
            Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
                Возврат ТабДок;
            КонецЕсли;
                    
            XML = импОтправитьЗапросНаИмпортВыписокАвтоклиент(НачПериода, КонПериода);
            
            Если XML = "" Тогда
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                Возврат ТабДок;
            КонецЕсли;
            
            ДействиеАналитики = "ВыпискаV3";
            
            Попытка
                ПрочитатьОтветПоИмпортуЧерезАвтоклиент(XML);
            Исключение
                ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа (запрос на импорт платежей через автоклиент)!';uk='Помилка при читанні відповіді (запит на імпорт платежів через автоклієнт)! '");
                СообщениеПользователю(ТекстСообщения);
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                Если РежимОтладки Тогда
                    СообщениеПользователю(ОписаниеОшибки());    
                КонецЕсли;
            КонецПопытки;
            
            Если ЗначениеЗаполнено(FollowId) Тогда
                Возврат Неопределено; //выполнение в цикле    
            КонецЕсли;
                                                       
        //Иначе
        //    
        //    ДействиеАналитики = "Выписка";
        //    //Первый шаг - отправка запроса и получение xml документа
        //    Попытка 
        //        //XML = импОтправитьЗапросНаИмпортВыписок(НачПерГраницы, КонПерГраницы); 
        //        XML = импОтправитьЗапросНаИмпортВыписок(НачПериода, КонПериода); 
        //        
        //        Если XML = "" Тогда
        //            Возврат ТабДок;
        //        КонецЕсли;
        //    
        //    Исключение
        //        ТекстСообщения = НСтр("ru = 'Ошибка при отправки запроса на чтение выписки !';uk='Помилка при відправці запиту на читання виписки! '");
        //        СообщениеПользователю(ТекстСообщения + ОписаниеОшибки());
        //        XML = "";
        //        Возврат ТабДок;
        //    КонецПопытки;
        КонецЕсли;
        
    КонецЕсли;
    
    //Если ИспользоватьСтароеAPI Тогда
    //    //Второй шаг - чтение xml документа
    //    ДействиеАналитики = "Выписка";
    //    
    //    инд = 1;
    //    Попытка
    //        Пока импПрочитатьУзелList(XML, ТабВходящихПлатежей) = Истина И инд < 100 Цикл          
    //            инд = инд + 1;
    //        КонецЦикла;      
    //    Исключение
    //        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа по выписке!';uk='Помилка при читанні відповіді відповіді по виписці!'");
    //        СообщениеПользователю(ТекстСообщения);
    //        XML = "";
    //        Возврат ТабДок;
    //    КонецПопытки;    
    //    
    //    Если импПрочитатьУзелList(XML, ТабВходящихПлатежей) Тогда //если еще есть записи - вернем выполнение в цикл
    //        Возврат Неопределено;
    //    КонецЕсли;
    //    
    //    Если ТабВходящихПлатежей.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Нет данных для формирования выписки.';uk='Немає даних для формування виписки.'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        XML = "";
    //        Возврат ТабДок;
    //    КонецЕсли;

    //КонецЕсли;
    
    FollowId = "";
    ТекущийИДКлиентаГруппыЧП = "";
    
    Макет = ПолучитьМакет("ВыпискаПоСчету");
    
    ТЗСчетов = ТабВходящихПлатежей.Выгрузить();
    ТЗСчетов.Свернуть("РСчет,НаименованиеНаше");
    КоличествоПлатежей = 0;    
    Для Каждого СтрокаСчета Из ТЗСчетов Цикл

        НачОстаток = 0;
        КонОстаток = НачОстаток;

        ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
        
        Если ТабВходящихПлатежей.Количество() > 0 Тогда
            ОбластьЗаголовок.Параметры.НомерНаименованиеСчета =    СтрокаСчета.РСчет + " " + СтрокаСчета.НаименованиеНаше;
            ОбластьЗаголовок.Параметры.Период = "с " + Формат(НачПериода,"ДФ=dd.MM.yyyy") + " по " + Формат(КонПериода,"ДФ=dd.MM.yyyy")
        КонецЕсли;    
        
        ТабДок.Вывести(ОбластьЗаголовок);
        
        ШапкаТабл = Макет.ПолучитьОбласть("ШапкаТабл");
        ТабДок.Вывести(ШапкаТабл);
        
        Для Каждого СтрокаТЗ Из ТабВходящихПлатежей Цикл
            
            Если СтрокаТЗ.РСчет <> СтрокаСчета.РСчет Тогда
                Продолжить;
            КонецЕсли;
            
            КоличествоПлатежей = КоличествоПлатежей + 1;
            
            СтрокаТабл = Макет.ПолучитьОбласть("СтрокаТабл");
            
            СтрокаТабл.Параметры.Номер = СтрокаТЗ.НомерПлатежа;    
            СтрокаТабл.Параметры.ДатаПроводки = Формат(Дата(Сред(СтрокаТЗ.ДатаВремя,1,Найти(СтрокаТЗ.ДатаВремя,"T") - 1)), "ДФ=dd.MM.yyyy");    
            СтрокаТабл.Параметры.ВремяПроводки = Сред(СтрокаТЗ.ДатаВремя,Найти(СтрокаТЗ.ДатаВремя,"T") +1);
            СтрокаТабл.Параметры.Сумма = ?(СтрокаТЗ.ЭтоПриход, СтрокаТЗ.Сумма, -СтрокаТЗ.Сумма);
            СтрокаТабл.Параметры.Валюта = СтрокаТЗ.Валюта;    
            СтрокаТабл.Параметры.НазначениеПлатежа = СтрокаТЗ.НазначениеПлатежа;
            СтрокаТабл.Параметры.ЕГРПОУКонтрагента = СтрокаТЗ.КодКонтрагента;    
            СтрокаТабл.Параметры.НаимеованиеКонтрагента = СтрокаТЗ.НаименованиеКонтрагента;    
            СтрокаТабл.Параметры.СчетКонтрагента = СтрокаТЗ.СчетКонтрагента;    
            СтрокаТабл.Параметры.МФОКонтрагента = СтрокаТЗ.МФОКонтрагента;    
            СтрокаТабл.Параметры.Референс = СтрокаТЗ.Референс;
            
            ТабДок.Вывести(СтрокаТабл);

            КонОстаток = КонОстаток + СтрокаТЗ.Сумма
        КонецЦикла;

        ИтогоТабл = Макет.ПолучитьОбласть("ИтогоТабл");
        ИтогоТабл.Параметры.НачОстаток = НачОстаток;
        ИтогоТабл.Параметры.КонОстаток = КонОстаток;
        ТабДок.Вывести(ИтогоТабл);

        ШапкаТабл = Макет.ПолучитьОбласть("ШапкаТабл");
        ТабДок.Вывести(ШапкаТабл);
    КонецЦикла;
    
    XML = "";
    
    Если ИспользоватьСтароеAPI Тогда
        ДействиеАналитики = "Выписка";
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики,,,"КоличествоПлатежей", КоличествоПлатежей);
    КонецЕсли;
    
    Возврат ТабДок;
    
КонецФункции

//Функция ПолучитьАвторизационныйXML(oper, ПолныйXML = Ложь)    
//    
//    СтруктураВозврата = Новый Структура;
//    СтруктураВозврата.Вставить("АвтXML","");
//    СтруктураВозврата.Вставить("ID_SIGN","");

//    РесурсНаСервере = "/services";
//    СтрокаЗапроса = "oper=" + oper + "&xsltid=service_business.xsl&XMLONLY=true&PUREXML=true";//&test=1"; //FIXME    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        Сессия = Неопределено;
//        Возврат СтруктураВозврата;
//    Иначе
//        Статус = стРезультат.Статус;
//        Сессия = стРезультат.Cookie;
//        ТелоОтвета = стРезультат.ТелоОтвета;
//    КонецЕсли;
//        
//    // если не успешно сообщим ошибку
//    Если Статус <> 200 Тогда            
//        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение авторизационного XML.';uk='Помилка відправки запиту на отримання авторизационного XML.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат СтруктураВозврата;
//    КонецЕсли;
//    
//    ID_SIGN = спцПрочитатьУзел("sign", ТелоОтвета);
//    
//    Если ПолныйXML Тогда
//        АвтXML = "<xmlReport>" + спцПрочитатьУзел("xmlReport", ТелоОтвета) + "</xmlReport>";
//    Иначе
//        АвтXML = спцПрочитатьУзел("xmlReport", ТелоОтвета);
//    КонецЕсли;    
//    
//    //АвтXML = СтрЗаменить(АвтXML, " ", "+");
//    АвтXML = EncodeURL(АвтXML); 
//    
//    СтруктураВозврата.Вставить("АвтXML", АвтXML);
//    СтруктураВозврата.Вставить("ID_SIGN", ID_SIGN);
//    
//    Возврат СтруктураВозврата;
//    
//КонецФункции    

//Функция АвторизацияДок()
//    
//    СтруктураАвторизации = ПолучитьАвторизационныйXML("tax");
//    
//    Если НЕ ЗначениеЗаполнено(СтруктураАвторизации.АвтXML) Тогда
//        Возврат "";    
//    КонецЕсли;    
//    
//    РесурсНаСервере = "/checkP24Sign";

//    ИнтернетАдрес = АдресДокументооборота + "/auth";
//    
//    СтрокаЗапроса = "&PUREXML=1&sign=" + СтруктураАвторизации.ID_SIGN + "&xml=" + СтруктураАвторизации.АвтXML;    

//    UserAgentHeaders = ОпределитьUserAgentHeaders();

//    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "");
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        Сессия = Неопределено;
//        СессияДок = "";
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        ТелоОтвета = стРезультат.ТелоОтвета;
//        СессияДок = стРезультат.Cookie;
//    КонецЕсли;
//        
//    // если не успешно сообщим ошибку
//    Если Статус <> 200 Тогда            
//        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на авторизацию в сервисе doc.pb.ua.';uk='Помилка надсилання запиту на авторизацію в сервісі doc.pb.ua.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат "";
//    КонецЕсли;
//    
//    Возврат СессияДок;
//    
//КонецФункции    

Функция hex(Знач Значение) 
    
    Значение = Число(Значение);
    
    Если Значение <= 0 Тогда 
        Результат = "0";
    Иначе
        Значение = Цел(Значение);
        Результат = "";
        Пока Значение > 0 Цикл
            Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение%16 + 1, 1) + Результат;
            Значение = Цел(Значение/16) ;
        КонецЦикла;
    КонецЕсли;
    
    Если СтрДлина(Результат) < 2 Тогда
    
        Результат = "0" + Результат;
    
    КонецЕсли; 
    
    Возврат "%" + Результат;
    
КонецФункции

Функция EncodeURL(value) Экспорт

    result = "";

    Попытка

        table = "%20,%21,%22,%23,%24,%25,%26,%27,%28,%29,%2a,%2b,%2c,%2d,%2e,%2f";//спецсимволы
        table1 = "%3a,%3b,%3c,%3d,%3e,%3f,%40";//спецсимволы
        table2 = "%5b,%5c,%5d,%5e,%5f,%60";//спецсимволы
        table3 = "%7b,%7c,%7d,%7e";//спецсимволы
        //а-п %D0%B0-%D0%BF
        table4 = "%D0%B0,%D0%B1,%D0%B2,%D0%B3,%D0%B4,%D0%B5,%D0%B6,%D0%B7,%D0%B8,%D0%B9,%D0%Ba,%D0%Bb,%D0%Bc,%D0%Bd,%D0%Be,%D0%Bf";
        //р-я %D1%80-%D1%8F
        table5 = "%D1%80,%D1%81,%D1%82,%D1%83,%D1%84,%D1%85,%D1%86,%D1%87,%D1%88,%D1%89,%D1%8a,%D1%8b,%D1%8c,%D1%8d,%D1%8e,%D1%8f";
        //А-П %D0%90-%D0%9F
        table6 = "%D0%90,%D0%91,%D0%92,%D0%93,%D0%94,%D0%95,%D0%96,%D0%97,%D0%98,%D0%99,%D0%9A,%D0%9B,%D0%9C,%D0%9D,%D0%9E,%D0%9F";
        //Р-Я %%D0%A0-
        table7 = "%D0%A0,%D0%A1,%D0%A2,%D0%A3,%D0%A4,%D0%A5,%D0%A6,%D0%A7,%D0%A8,%D0%A9,%D0%AA,%D0%AB,%D0%AC,%D0%AD,%D0%AE,%D0%AF";

        
        //32-47,58-64,91-96,123-126/спецсимволы
        //48-57 цифры, 65-90 б.лат., 97-122 мал.лат.
        //І    1030    і    1110    Ї    1031    ї    1111    Є    1028    є    1108    Ґ    1168    ґ    1169
        //,160-383,402,506-511,710,711,713,728- не реализовал
        Для i = 1 По СтрДлина(value) Цикл
            symbol = Сред(value, i, 1);
            code = КодСимвола(symbol);
            Если code >= 48 И code <= 57 Или code >= 65 И code <= 90 Или code >= 97 И code <= 122 Тогда//Цифры/Бол.Англ./мал.Англ.
                //передаем как есть
                result = result + symbol
            ИначеЕсли code >= 32 И code <= 47 Тогда//спецсимволы
                //здесь и дальше преобразовываем
                result = result + Сред(table, (code - 31) * 4 - 3, 3)
            ИначеЕсли code >= 58 И code <= 64 Тогда//спецсимволы
                result = result + Сред(table1, (code - 57) * 4 - 3, 3)
            ИначеЕсли code >= 91 И code <= 96 Тогда//спецсимволы
                result = result + Сред(table2, (code - 90) * 4 - 3, 3)
            ИначеЕсли code >= 123 И code <= 126 Тогда//спецсимволы
                result = result + Сред(table3, (code - 122) * 4 - 3, 3)
            ИначеЕсли code >= 1072 И code <= 1087 Тогда//рус.мал.
                result = result + Сред(table4, (code - 1071) * 7 - 6, 6)
            ИначеЕсли code >= 1088 И code <= 1103 Тогда//рус.мал.
                result = result + Сред(table5, (code - 1087) * 7 - 6, 6)
            ИначеЕсли code >= 1040 И code <= 1055 Тогда//рус.бол.
                result = result + Сред(table6, (code - 1039) * 7 - 6, 6)
            ИначеЕсли code >= 1056 И code <= 1071 Тогда//рус.бол.
                result = result + Сред(table7, (code - 1055) * 7 - 6, 6)
            ИначеЕсли code = 1030 Тогда//І    1030
                result = result + "%D0%86"
            ИначеЕсли code = 1110 Тогда//і    1110
                result = result + "%D1%96"
            ИначеЕсли code = 1031 Тогда//Ї    1031
                result = result + "%D0%87"//"%cf"
            ИначеЕсли code = 1111 Тогда//ї    1111
                result = result + "%D1%97"//"%ef"
            ИначеЕсли code = 1031 Тогда//Є    1028
                result = result + "%D0%84"
            ИначеЕсли code = 1031 Тогда//є    1108
                result = result + "%D1%94"
            ИначеЕсли code = 1031 Тогда//Ґ    1168
                result = result + "%D2%90"
            ИначеЕсли code = 1031 Тогда//ґ    1169
                result = result + "%D2%91"
            Иначе
                //не включаем
            КонецЕсли
        КонецЦикла;

    Исключение    

        Выполнить("result = КодироватьСтроку(value, СпособКодированияСтроки.КодировкаURL)");

    КонецПопытки;
    
    Возврат result

КонецФункции    //    EncodeURL(value)

//Процедура ПродлитьСессиюПользователя() Экспорт
//    
//    //запрос передачи кода/пароля
//    //РесурсНаСервере = "/news";
//    РесурсНаСервере = "/payments_light";
//    СтрокаЗапроса = "";

//    ТелоЗапроса = СтрокаЗапроса + "&PUREXML=true"; 
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия);

//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        Сессия = Неопределено;
//        Возврат;
//    Иначе
//        Статус = стРезультат.Статус;
//        Cookie = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка аторизации в процессе получения сессии.';uk='Помилка аторізаціі в процесі отримання сесії.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    КонецЕсли;
//    
//    Сессия = Cookie;
//    
//    Если НЕ ИспользоватьСтароеAPI Тогда
//        АвторизацияВ3(стРезультат.ТелоОтвета);
//    КонецЕсли;
//    
//КонецПроцедуры

//Процедура АвторизацияВ3(ТелоОтвета)
//    
//    ДействиеАналитики = "Авторизация23Редирект";
//    
//    Тег_input = Сред(ТелоОтвета, Найти(ТелоОтвета, "<input "));
//    КлючИмя = спцПрочитатьАтрибут("name", Тег_input);
//    КлючЗначение = спцПрочитатьАтрибут("value", Тег_input);
//    
//    Тег_form = Сред(ТелоОтвета, Найти(ТелоОтвета, "<form "));
//    ПолныйАдресРедиректа = спцПрочитатьАтрибут("action", Тег_form);
//    ПозицияНачалаАдреса = Найти(ПолныйАдресРедиректа, "https://") + 8;
//    ПозицияКонцаРесурса = Найти(ПолныйАдресРедиректа, "?") - 1;
//    ПозицияНачалаРесурса = Найти(Сред(ПолныйАдресРедиректа, ПозицияНачалаАдреса), "/") + 8;
//    ПозицияКонцаАдреса = ПозицияНачалаРесурса - 1;
//    
//    АдресРедиректа = АдресВ3;//Сред(ПолныйАдресРедиректа, ПозицияНачалаАдреса, ПозицияКонцаАдреса - ПозицияНачалаАдреса + 1);
//    РесурсНаСервере = Сред(ПолныйАдресРедиректа, ПозицияНачалаРесурса, ПозицияКонцаРесурса - ПозицияНачалаРесурса + 1);
//    ТелоЗапроса = КлючИмя + "=" + КлючЗначение;
//            
//    Если Не ЗначениеЗаполнено(ТелоЗапроса) Тогда
//        //    редирект не получен - не выполняем
//        Возврат;
//    КонецЕсли;
//    
//    вСессия = Сессия;
//    
//    Заголовки = Новый ТаблицаЗначений;
//    Заголовки.Колонки.Добавить("Заголовок");
//    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept";
//    НоваяСтрока.ЗначениеЗаголовка = "text/html,application/xhtml+xml,application/xml;q=0.9,;q=0.8";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Accept-Language";
//    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Connection";
//    НоваяСтрока.ЗначениеЗаголовка = "keep-alive";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Content-Type";
//    НоваяСтрока.ЗначениеЗаголовка = "application/x-www-form-urlencoded";
//    
//    НоваяСтрока = Заголовки.Добавить();
//    НоваяСтрока.Заголовок = "Upgrade-Insecure-Requests";
//    НоваяСтрока.ЗначениеЗаголовка = "1"; 
//    
//    стРезультат = УстановитьСоединение(АдресРедиректа, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "",Заголовки ,,, Истина);
//    Сессия = вСессия;
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        СессияВ3 = "";
//        ТекстСообщения = НСтр("ru='Ошибка отправки запроса на получение сессии для нового API.';uk='Помилка відправки запиту на отримання сесії для нового API.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    Иначе
//        Статус = стРезультат.Статус;
//        Cookie = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если Статус <> 200 Тогда
//        ТекстСообщения = НСтр("ru='Ошибка авторизации в процессе получения сессии для нового API.';uk='Помилка авторізаціі в процесі отримання сесії для нового API.'");
//        СообщениеПользователю(ТекстСообщения);
//        Возврат;
//    КонецЕсли;
//    
//    СессияВ3 = ПолучитьСессиюV3(Cookie);

//    Если НЕ ЕстьОшибки Тогда
//        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
//    КонецЕсли;
//    
//КонецПроцедуры

//Функция ПолучитьСессиюV3(СессияV3) Экспорт

//    //Возврат СессияV3;

//    ПозицияSESSION_ID = Найти(СессияV3, "SESSION_ID");
//    Если ПозицияSESSION_ID > 0 Тогда
//        СессияV3 = Сред(СессияV3, ПозицияSESSION_ID);
//        ПозицияТсЗ = Найти(СессияV3, ";");
//        Если ПозицияТсЗ > 0 Тогда
//            СессияV3 = Лев(СессияV3, ПозицияТсЗ - 1)
//        КонецЕсли;
//    Иначе
//        ТекстСообщения = НСтр("ru='Ошибка авторизации в процессе чтения сессии.';uk='Помилка авторизації в процесі читання сесії.'");
//        СообщениеПользователю(ТекстСообщения);

//    КонецЕсли;

//    Возврат СессияV3;

//КонецФункции

Процедура АвтоОбмен(НачПериода, КонПериода) Экспорт
    
    ТекстСообщения = НСтр("ru='Начало автоматического обмена.';uk='Початок автоматичного обміну.'");
    СообщениеПользователю(ТекстСообщения, Ложь);    
    
    Если АвтоИмпорт Тогда
        
        ИмпортПлатежныеДокументы.Очистить();
        
        ИмпортПлатежей(НачПериода, КонПериода);
        
        Для Каждого СтрокаТЧ Из ИмпортПлатежныеДокументы Цикл
            СтрокаТЧ.Флажок = Истина;
        КонецЦикла;
        
        СоздатьИмпортированныеДокументы(НачПериода, КонПериода);
        
        ТекстСообщения = НСтр("ru='Выполнен автоматический импорт.';uk='Виконано автоматичний імпорт.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        
    КонецЕсли;
    
    Если АвтоЭкспорт Тогда
        
        ЭкспортПлатежныеДокументы.Очистить();
        
        ЗаполнитьСписокПлатежей(НачПериода, КонПериода);
        
        Для Каждого СтрокаТЧ Из ЭкспортПлатежныеДокументы Цикл
            СтрокаТЧ.Флажок = Истина;
        КонецЦикла;
        
        ЭкспортПлатежей(КонПериода);
        
        ТекстСообщения = НСтр("ru='Выполнен автоматический эспорт.';uk='Виконано автоматичний еспорт.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        
    КонецЕсли;
    
    ТекстСообщения = НСтр("ru='Окончание автоматического обмена.';uk='Закінчення автоматичного обміну.'");
    СообщениеПользователю(ТекстСообщения, Ложь);
    
КонецПроцедуры

Процедура ЗаполнитьСтрокуПоКонтрагенту(Контрагент, НомерСтроки, БанковскийСчет = Неопределено) Экспорт
    
    СтрокаТЧ = Контрагенты[НомерСтроки - 1];
    
    СтрокаТЧ.Контрагент = Контрагент;
    
    Если ИдКонф = "KUBU" Тогда
        СтрокаТЧ.ЕДРПОУ = KUBU_ПолучитьКодКонтрагентаОрганизации(Контрагент, ТекущаяДата(), "КодПоЕГРПОУ");
    Иначе
        //    BSB, BASC, ...
        СтрокаТЧ.ЕДРПОУ = Контрагент.КодПоЕДРПОУ;
    КонецЕсли;
    
    СтрокаТЧ.Наименование = Контрагент.Наименование;
    
    БСчет = ?(ЗначениеЗаполнено(БанковскийСчет), БанковскийСчет, БанковскийСчетПоУмолчанию(Контрагент));

    СтрокаТЧ.НомерСчета = БСчет.НомерСчета;
    СтрокаТЧ.БанковскийСчетВБазе = БСчет;
    СтрокаТЧ.НаименованиеБанка = БСчет.Банк.Наименование; 
    СтрокаТЧ.КодБанка = БСчет.Банк.Код;
    СтрокаТЧ.Банк = БСчет.Банк;
    
КонецПроцедуры

Функция БанковскийСчетПоУмолчанию(Владелец)        
    
    НазваниеСправочникаСчета = "БанковскиеСчета";
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
            НазваниеСправочникаСчета = "БанковскиеСчетаОрганизаций";
        Иначе
            НазваниеСправочникаСчета = "БанковскиеСчетаКонтрагентов";
        КонецЕсли;
    ИначеЕсли ИдКонф = "KUBU" Тогда
        
        Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
            НазваниеСправочникаСчета = "РасчетныеСчета";
        Иначе
            НазваниеСправочникаСчета = "РасчетныеСчетаКонтрагентов";
        КонецЕсли;    
        
    КонецЕсли;
    
    БСчет = Справочники[НазваниеСправочникаСчета].ПустаяСсылка();
    
    Попытка
        БСчет = Владелец.БанковскийСчетПоУмолчанию;
    Исключение    
    КонецПопытки;
    
    Если Не ЗначениеЗаполнено(БСчет) Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |    БанковскиеСчета.Ссылка КАК БанковскийСчет
        |ИЗ
        |    Справочник." + НазваниеСправочникаСчета + " КАК БанковскиеСчета
        |ГДЕ
        |    НЕ БанковскиеСчета.ПометкаУдаления
        |    И БанковскиеСчета.Владелец = &Владелец";
        
        Запрос.УстановитьПараметр("Владелец", Владелец);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            БСчет = ВыборкаДетальныеЗаписи.БанковскийСчет;
        КонецЦикла;
    КонецЕсли;
    
    Возврат БСчет;
    
КонецФункции

//не используется
Процедура ИмпортКонтрагентов() Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    РесурсНаСервере = "/c2b_receivers_list";
    
    СтрокаЗапроса = "&PUREXML";
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка контрагентов(получателей).';uk='Помилка відправки запиту на отримання списку контрагентів (одержувачів).'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;

    ПрочитатьСписокКонтрагентов(ТелоОтвета);
    
    //ОбновитьСтатистикуРаботы("ИмпортКонтрагентов", "СборДанных");
    
КонецПроцедуры

//не используется
Процедура ПрочитатьСписокКонтрагентов(ТелоОтвета)
    
    ТелоОтвета = спцПрочитатьУзел("rs1",ТелоОтвета,,,Истина);
    
    Длина = СтрДлина(ТелоОтвета);
    
    Счетчик = СтрДлина(ТелоОтвета); //запасное условие на выход из цикла
    
    Контрагенты.Очистить();
    
    Пока Длина <> 0 И Счетчик > 0 Цикл  
        
        Счетчик = Счетчик - 1;
        
        // определение очередного блока Row
        БлокRow = "<row " + спцПрочитатьУзел("row",ТелоОтвета,,"",Истина) + Символы.ПС + "</row>";
        
        НоваяСтрока = Контрагенты.Добавить();
        
        НоваяСтрока.ЕДРПОУ = спцПрочитатьУзел("B_CRF",БлокRow);
        НоваяСтрока.НомерСчета = спцПрочитатьУзел("B_ACC",БлокRow);
        
        Если ЗначениеЗаполнено(НоваяСтрока.НомерСчета) Тогда
            НоваяСтрока.БанковскийСчетВБазе = НайтиСоздатьСчет(,,НоваяСтрока.НомерСчета,,,,Ложь);
            
            Если ЗначениеЗаполнено(НоваяСтрока.БанковскийСчетВБазе) Тогда
                НоваяСтрока.Контрагент = НоваяСтрока.БанковскийСчетВБазе.Владелец;
                НоваяСтрока.Банк = НоваяСтрока.Банк;
            КонецЕсли;
            
        КонецЕсли;    
        
        НоваяСтрока.Наименование = спцПрочитатьУзел("B_NAM",БлокRow);
        
        Если ЗначениеЗаполнено(НоваяСтрока.ЕДРПОУ) И НЕ ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("КодКонтрагента", НоваяСтрока.ЕДРПОУ);
            СтруктураПоиска.Вставить("СчетКонтрагента", НоваяСтрока.НомерСчета);
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", НоваяСтрока.Наименование);
            НоваяСтрока.Контрагент = НайтиСоздатьКонтрагента(СтруктураПоиска, Ложь);
        КонецЕсли;
        
        НоваяСтрока.КодБанка = спцПрочитатьУзел("B_BIC",БлокRow);
        
        Если ЗначениеЗаполнено(НоваяСтрока.КодБанка) И НЕ ЗначениеЗаполнено(НоваяСтрока.Банк) Тогда
            НоваяСтрока.Банк = НайтиСоздатьБанк(НоваяСтрока.КодБанка,,,Ложь);
        КонецЕсли;
        
        НоваяСтрока.НаименованиеБанка = спцПрочитатьУзел("B_BANK",БлокRow); 

        ТелоОтвета = СокрЛП(СтрЗаменить(ТелоОтвета, БлокRow, ""));
        Длина = СтрДлина(ТелоОтвета);
        
    КонецЦикла;    
    
КонецПроцедуры

//не используется
Процедура СохранитьСписокКонтрагентов() Экспорт
    
    ЕстьОтмеченные = Ложь; //хранит признак что есть хотя бы одна отмеченная строка документа

    Для Каждого СтрокаТЧ Из Контрагенты Цикл //цикл по всем строкам
        
        Если НЕ СтрокаТЧ.Флажок Тогда //нет отметки - пропускаем строку
            Продолжить;
        КонецЕсли;     
        
        ЕстьОтмеченные = Истина;
        
        Если ЗначениеЗаполнено(СтрокаТЧ.ЕДРПОУ) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
            
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("КодКонтрагента", СтрокаТЧ.ЕДРПОУ);
            СтруктураПоиска.Вставить("СчетКонтрагента", СтрокаТЧ.НомерСчета);
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", СтрокаТЧ.Наименование);
            
            СтрокаТЧ.Контрагент = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина);
            
        ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
            
            ТекстСообщения = НСтр("ru = 'Контрагент, выбранный в строке №%НомерСтроки% уже сохранен в базе. Строка пропущена.';uk='Контрагент , обраний в рядку №%НомерСтроки% вже збережений в базі. Рядок пропущено.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
            
        Иначе
            
            ТекстСообщения = НСтр("ru = 'В строке №%НомерСтроки% не заполнен код ЕДРПОУ. Строка пропущена.';uk='В рядку №%НомерСтроки% не заповнений код ЄДРПОУ. Рядок пропущено.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
            
        КонецЕсли;
        
        Если НЕ ЗначениеЗаполнено(СтрокаТЧ.БанковскийСчетВБазе) И ЗначениеЗаполнено(СтрокаТЧ.НомерСчета) И ЗначениеЗаполнено(СтрокаТЧ.КодБанка) Тогда
            
            СтрокаТЧ.БанковскийСчетВБазе = НайтиСоздатьСчет(СтрокаТЧ.Контрагент, СтрокаТЧ.КодБанка, СтрокаТЧ.НомерСчета, НайтиВалюту("UAH"), СтрокаТЧ.НаименованиеБанка, "", Истина);
            СтрокаТЧ.Банк = СтрокаТЧ.БанковскийСчетВБазе.Банк;
            
        ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.БанковскийСчетВБазе) Тогда
            
            ТекстСообщения = НСтр("ru = 'Недостаточно данных для создания банковского счета контрагента отмеченного в строке №%НомерСтроки%.';uk='Недостатньо даних для створення банківського рахунку контрагента зазначеного у рядку №%НомерСтроки%'"); 
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных контрагентов для записи.'; uk = 'Ні відзазначених контрагентів для запису.'"), Ложь);
        Возврат;
    КонецЕсли;
    
    ТекстСообщения = НСтр("ru = 'Запись завершена.';uk='Запис завершено.'");
    СообщениеПользователю(ТекстСообщения, Ложь);
    
КонецПроцедуры

//не используется
Процедура ЭкспортКонтрагентов() Экспорт
    
    ТекТЧ = Контрагенты.Выгрузить(); //сначала сохраняем выбранных контрагентов
    
    ИмпортКонтрагентов(); //затем получаем список всех контрагентов из ПБ24
    
    КонтрагентыИзПБ = Контрагенты.Выгрузить(); //сохраняем список контрагентов из ПБ24
    
    Контрагенты.Загрузить(ТекТЧ); //восстановили выбранных контрагентов
    
    ЕстьОтмеченные = Ложь; //хранит признак что есть хотя бы одна отмеченная строка документа

    Для Каждого СтрокаТЧ Из Контрагенты Цикл //цикл по всем строкам
        
        Если НЕ СтрокаТЧ.Флажок Тогда //нет отметки - пропускаем строку
            Продолжить;
        КонецЕсли;     
        
        ЕстьОтмеченные = Истина;

        Если Не ЗначениеЗаполнено(СтрокаТЧ.ЕДРПОУ) Тогда
            
            ТекстСообщения = НСтр("ru = 'В строке №%НомерСтроки% не заполнен код ЕДРПОУ. Строка пропущена.';uk='В рядку №%НомерСтроки% не заповнений код ЄДРПОУ. Рядок пропущено.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
            
         КонецЕсли;
        
        Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСчета) Тогда
            
            ТекстСообщения = НСтр("ru = 'В строке №%НомерСтроки% не заполнен номер банковского счета. Строка пропущена.';uk='В рядку №%НомерСтроки% не заповнений номер банківського рахунку. Рядок пропущено.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
            
         КонецЕсли;
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("ЕДРПОУ", СтрокаТЧ.ЕДРПОУ);
        СтруктураПоиска.Вставить("НомерСчета", СтрокаТЧ.НомерСчета);
        
        НайденныеСтроки = КонтрагентыИзПБ.НайтиСтроки(СтруктураПоиска);
        
        Если НайденныеСтроки.Количество() = 0 Тогда //если не нашли в списке, то создаем
            
            //дозаполним структуру
            СтруктураПоиска.Вставить("Наименование", СтрокаТЧ.Наименование);
            СтруктураПоиска.Вставить("Банк", СтрокаТЧ.НаименованиеБанка);
            СтруктураПоиска.Вставить("КодБанка", СтрокаТЧ.КодБанка);
            
            ЕстьОшибки = ЭкспортКонтрагентаВПБ(СтруктураПоиска);
            
            Если ЕстьОшибки Тогда
                
                ТекстСообщения = НСтр("ru = 'Ошибка экспорта контрагента выбранного в строке №%НомерСтроки%.';uk='Помилка експорту контрагента обраного в рядку №%НомерСтроки%.'");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СообщениеПользователю(ТекстСообщения);

            КонецЕсли;
            
        Иначе    
            ТекстСообщения = НСтр("ru = 'Контрагент, выбранный в строке №%НомерСтроки% уже есть в Приват24. Строка пропущена.';uk='Контрагент , обраний в рядку №%НомерСтроки% вже є в Приват24. Рядок пропущено.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЕсли;

    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных контрагентов для экспорта.'; uk = 'Ні відзазначених контрагентів для експорту.'"), Ложь);
        Возврат;
    КонецЕсли;
    
    ТекстСообщения = НСтр("ru = 'Экспорт контрагентов завершен.';uk='Експорт контрагентів завершений.'");
    СообщениеПользователю(ТекстСообщения, Ложь);
    
    //ОбновитьСтатистикуРаботы("ЭкспортКонтрагентов", "СборДанных");
    
КонецПроцедуры

//не используется
Функция ЭкспортКонтрагентаВПБ(СтруктураПараметров)
    
    РесурсНаСервере = "/c2b_receivers_list";
    
    СтрокаЗапроса = "ACC=" + СтруктураПараметров.НомерСчета
        + "&BANK=" + СтруктураПараметров.Банк
        + "&BIC=" + СтруктураПараметров.КодБанка
        + "&CRF=" + СтруктураПараметров.ЕДРПОУ
        + "&NAME=" + СтруктураПараметров.Наименование
        + "&OPER=" + "a" + "&PUREXML";
                    
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат Истина;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на экспорт контрагента.';uk='Помилка відправки запиту на експорт контрагенту.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Истина;
    КонецЕсли;
    
    //теперь проверим добавился ли контрагент
    НомерСчетаВОтвете = Найти(ТелоОтвета, СтруктураПараметров.НомерСчета);
    КодКонтрагентаВОтвете = Найти(ТелоОтвета, СтруктураПараметров.ЕДРПОУ);
    
    Если НомерСчетаВОтвете <> 0 И КодКонтрагентаВОтвете <> 0 Тогда
        //все ок
        Возврат Ложь;
    Иначе
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

Процедура UNF_Загрузка_ПроверитьДублиСтрок(Отказ) Экспорт 
    
    Возврат;
    
    Запрос = Новый Запрос();
    
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СписокЗагрузки.НомерСтроки КАК НомерСтроки,
    |    СписокЗагрузки.Наименование КАК Наименование,
    |    СписокЗагрузки.Код КАК Код,
    |    СписокЗагрузки.ХарактеристикаНоменклатуры КАК Характеристика
    |ПОМЕСТИТЬ ТаблицаДокумента
    |ИЗ
    |    &СписокЗагрузки КАК СписокЗагрузки
    |ГДЕ
    |    СписокЗагрузки.ФлагЗагрузки
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    МАКСИМУМ(СписокЗагрузки1.НомерСтроки) КАК НомерСтроки,
    |    СписокЗагрузки1.Код КАК Код,
    |    СписокЗагрузки1.Наименование КАК Наименование,
    |    СписокЗагрузки1.Характеристика КАК Характеристика
    |ИЗ
    |    ТаблицаДокумента КАК СписокЗагрузки1
    |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК СписокЗагрузки2
    |        ПО СписокЗагрузки1.НомерСтроки <> СписокЗагрузки2.НомерСтроки
    |            И СписокЗагрузки1.Код = СписокЗагрузки2.Код
    |            И СписокЗагрузки1.Характеристика = СписокЗагрузки2.Характеристика 
    |
    |СГРУППИРОВАТЬ ПО
    |    СписокЗагрузки1.Код,
    |    СписокЗагрузки1.Наименование,
    |    СписокЗагрузки1.Характеристика
    |
    |УПОРЯДОЧИТЬ ПО
    |    НомерСтроки";
    
    Запрос.УстановитьПараметр("СписокЗагрузки", СписокЗагрузки);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
        Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
            ТекстСообщения = НСтр(
                "ru = 'Номенклатура ""%Наименование%"" в строке %НомерСтроки%, указана повторно.';
                |uk = 'Номенклатура ""%Наименование%"" в рядку %НомерСтроки%, вказана повторно'"
            );
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаИзРезультатаЗапроса.НомерСтроки);
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", ВыборкаИзРезультатаЗапроса.Наименование);
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЦикла;
        Отказ = Истина;
    КонецЕсли;
    
КонецПроцедуры

//не используется
Процедура ОбновитьОстаткиПоСчетам(Период) Экспорт

    Если ИдКонф = "KUBU" Тогда
        Возврат;    
    КонецЕсли;
    
    ДействиеАналитики = "ПолучениеОстатков";
    
    //считываем остатки из ПБ
    Если ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
        ТабОстПБ = ПолучитьОстатокПоСчетуИзПБ(Период);
    КонецЕсли;
    
    Если ОстаткиПоСчетам.Количество() = 0 И ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда //если таб. ост. пустая - это первый заход в цикл
        //считываем остатки из базы
        ТабОст1С = ПолучитьОстатокИз1С(Период);
        
        ЗаполнитьИнфПоОстаткам(ТабОстПБ, ТабОст1С);
        
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ЗаполнитьИнфПоОстаткам(ТабОстПБ, ТабОст1С)
    
    ОстатокНаСчетеВПБ = ""; //реквизит формы, тип "строка"
    Для Каждого СтрокаТЗ Из ТабОстПБ Цикл
        ОстатокНаСчетеВПБ = ОстатокНаСчетеВПБ + СтрокаТЗ.СуммаОстаток + " " + СтрокаТЗ.Валюта + "; ";    
    КонецЦикла;
    
    ОстатокНаСчетеВ1С = ""; //реквизит формы, тип "строка"
    Для Каждого СтрокаТЗ Из ТабОст1С Цикл
        ОстатокНаСчетеВ1С = ОстатокНаСчетеВ1С + СтрокаТЗ.СуммаОстаток + " " + СтрокаТЗ.Валюта + "; ";    
    КонецЦикла;
    
    ДельтаОстатка = ""; //реквизит формы, тип "строка"
    Для Каждого СтрокаОстПБ Из ТабОстПБ Цикл //расчитываем разницу, т.к. валют не много - цикл в цикле отработает быстро
        
        Дельта = СтрокаОстПБ.СуммаОстаток;
        
        Для Каждого СтрокаОст1С Из ТабОст1С Цикл 
            Если СтрокаОстПБ.Валюта = СтрокаОст1С.Валюта ИЛИ СтрокаОстПБ.КодВалюты = СтрокаОст1С.КодВалюты 
                ИЛИ ((СтрокаОстПБ.КодВалюты = "810" ИЛИ СтрокаОстПБ.КодВалюты = "643") И СтрокаОст1С.КодВалюты = "643") Тогда //доп условие RUR and RUB
                Дельта = СтрокаОстПБ.СуммаОстаток - СтрокаОст1С.СуммаОстаток;
            КонецЕсли;
        КонецЦикла;
        
        Если Дельта <> 0 Тогда 
            ДельтаОстатка = ДельтаОстатка + Дельта + " " + СтрокаОстПБ.Валюта + "; ";        
        КонецЕсли;
        
    КонецЦикла;    
    
    //ДельтаОстатка = ОстатокНаСчетеВПБ - ОстатокНаСчетеВ1С;

КонецПроцедуры

//не используется
Функция ПолучитьОстатокИз1С(Период)
    
    Если ИдКонф = "UNF" Тогда
        ТабОст1С = UNF_ОстатокНаСчете(Период);
    ИначеЕсли ИдКонф = "BSB" Тогда
        ТабОст1С = BSB_ОстатокНаСчете(Период)
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        ТабОст1С = BP_ОстатокНаСчете(Период);
    ИначеЕсли ИдКонф = "OSMD" Тогда    
        ТабОст1С = OSMD_ОстатокНаСчете(Период);
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда     
        ТабОст1С = UT_3_ОстатокНаСчете(Период);    
    КонецЕсли;    
    
    Возврат ТабОст1С;
    
КонецФункции

Функция OSMD_ОстатокНаСчете(Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток,
        |    ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
        |    ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств.Код КАК КодВалюты
        |ИЗ
        |    РегистрНакопления.ДенежныеСредства.Остатки(
        |            &Период,
        |            Организация = &Организация И БанковскийСчетКасса.Банк = &Банк" + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И БанковскийСчетКасса = &БанковскийСчет", "") + "
        |) КАК ДенежныеСредстваОстатки";
    
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Банк", Банк);

    ТабОст1С = Запрос.Выполнить().Выгрузить();
    
    Возврат ТабОст1С;
    
КонецФункции

Функция UNF_ОстатокНаСчете(Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток,
        |    ДенежныеСредстваОстатки.Валюта КАК Валюта,
        |    ДенежныеСредстваОстатки.Валюта.Код КАК КодВалюты
        |ИЗ
        |    РегистрНакопления.ДенежныеСредства.Остатки(
        |            &Период,
        |            БанковскийСчетКасса.Банк = &Банк" + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И БанковскийСчетКасса = &БанковскийСчет", "") + 
        ?(ЗначениеЗаполнено(Организация), " И Организация = &Организация", "") + "
        |) КАК ДенежныеСредстваОстатки";
    
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Банк", Банк);

    ТабОст1С = Запрос.Выполнить().Выгрузить();
    
    Возврат ТабОст1С;
    
КонецФункции

Функция BSB_ОстатокНаСчете(Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ДенежныеСредстваОстатки.Сумма КАК СуммаОстаток,
        |    ДенежныеСредстваОстатки.Валюта КАК Валюта,
        |    ДенежныеСредстваОстатки.Валюта.Код КАК КодВалюты
        |ИЗ
        |    РегистрНакопления.ДенежныеСредства.Остатки(
        |            &Период,
        |            БанковскийСчетКасса.Банк = &Банк" + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И БанковскийСчетКасса = &БанковскийСчет", "") + 
        ?(ЗначениеЗаполнено(Организация), " И Организация = &Организация", "") + "
        |) КАК ДенежныеСредстваОстатки";
    
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Банк", Банк);

    ТабОст1С = Запрос.Выполнить().Выгрузить();
    
    Возврат ТабОст1С;
    
КонецФункции

Функция UT_3_ОстатокНаСчете(Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток,
        |    ДенежныеСредстваОстатки.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
        |    ДенежныеСредстваОстатки.БанковскийСчет.ВалютаДенежныхСредств.Код КАК КодВалюты
        |ИЗ
        |    РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
        |            &Период,
        |            Организация = &Организация И БанковскийСчет.Банк = &Банк" + 
        ?(ЗначениеЗаполнено(БанковскийСчет), " И БанковскийСчет = &БанковскийСчет", "") + "
        |) КАК ДенежныеСредстваОстатки";
    
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Банк", Банк);

    ТабОст1С = Запрос.Выполнить().Выгрузить();
    
    Возврат ТабОст1С;
    
КонецФункции

Функция BP_ОстатокНаСчете(Период)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ХозрасчетныйОстатки.СуммаОстаток,
        |    ХозрасчетныйОстатки.Валюта,
        |    ВЫБОР КОГДА ХозрасчетныйОстатки.Валюта.Код IS NULL Тогда ""980"" ИНАЧЕ ХозрасчетныйОстатки.Валюта.Код КОНЕЦ  КАК КодВалюты
        |ИЗ
        |    РегистрБухгалтерии.Хозрасчетный.Остатки(
        |            &Период,
        |            Счет В ИЕРАРХИИ (&СписокСчетов),
        |            ,
        |            Организация = &Организация И Субконто1.Банк = &Банк " 
        + ?(ЗначениеЗаполнено(БанковскийСчет), " И Субконто1 = &БанковскийСчет", "")
        + " ) КАК ХозрасчетныйОстатки";
        
    СписокСчетов = Новый Массив;
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
    
    Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
    Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Банк", Банк);

    ТабОст1С = Запрос.Выполнить().Выгрузить();
    
    Возврат ТабОст1С;
    
КонецФункции

//не используется
Функция ПолучитьОстатокПоСчетуИзПБ(Период)
    
    Период = Мин(ТекущаяДата(), Период);
    
    ТабОстПБ = Новый ТаблицаЗначений;
    
    Если ОстаткиПоСчетам.Количество() = 0 ИЛИ ЗначениеЗаполнено(FollowId) Тогда //прочитаем с ПБ24 остатки
        
        XML = "";
        
        Если ИспользоватьСтароеAPI Тогда
            
            РесурсНаСервере = "/c2brest";
            
            Если ЗначениеЗаполнено(БанковскийСчет) Тогда
                ТекСчет = "in_time=d&acc=" + БанковскийСчет.НомерСчета;
            Иначе
                ТекСчет = "";
            КонецЕсли;
            
            СтрокаЗапроса = "&stdate=" + Формат(Период, "ДФ=дд.ММ.гггг") + "&endate=" + Формат(Период, "ДФ=дд.ММ.гггг") + ТекСчет + "&PUREXML=true";
            
            UserAgentHeaders = ОпределитьUserAgentHeaders();
            
            стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
            
            Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
                Сессия = Неопределено;
                ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение остатков по счетам.';uk='Помилка відправки запиту на отримання залишків за рахунками.'");
                СообщениеПользователю(ТекстСообщения);
                Возврат ТабОстПБ;
            Иначе
                Статус = стРезультат.Статус;
                Сессия = стРезультат.Cookie;
                XML = стРезультат.ТелоОтвета;
            КонецЕсли;
            
            // если не успешно сообщим ошибку
            Если Статус <> 200 Тогда            
                ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение остатков по счетам.';uk='Помилка відправки запиту на отримання залишків за рахунками.'");
                СообщениеПользователю(ТекстСообщения);
                Возврат ТабОстПБ;
            КонецЕсли;
            
        Иначе

            Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                Возврат ТабОстПБ;
            КонецЕсли;

            ДействиеАналитики = "ПолучениеОстатковV4";
            
            Если ЗначениеЗаполнено(БанковскийСчет) Тогда
                Счет = "&acc=" + СокрЛП(БанковскийСчет.НомерСчета);
            Иначе
                Счет = "";
            КонецЕсли;                                 
            
            ТелоЗапроса = "";     
            
            ДатаНачалаПериода = Формат(Период, "ДЛФ=Д;ДФ=дд-ММ-гггг");
            ДатаКонцаПериода = Формат(Период, "ДЛФ=Д;ДФ=дд-ММ-гггг");
    
            //РесурсНаСервере = "/api/proxy/rest?"
            РесурсНаСервере = "/api/statements/balance?"
                + "&startDate=" + ДатаНачалаПериода
                + "&endDate=" + ДатаКонцаПериода
                + "&limit=100"
                + Счет;
            
            Если ЗначениеЗаполнено(FollowId) Тогда
                РесурсНаСервере = РесурсНаСервере + "&followId=" + FollowId;
            КонецЕсли;
            
            Заголовки = Новый ТаблицаЗначений;
            Заголовки.Колонки.Добавить("Заголовок");
            Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

            Если ЗначениеЗаполнено(ИдАК) Тогда
                НоваяСтрока = Заголовки.Добавить();
                НоваяСтрока.Заголовок = "id";
                НоваяСтрока.ЗначениеЗаголовка = ИдАК;
            КонецЕсли;

            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "token";
            НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
            
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Content-Type";
            НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";
            
            UserAgentHeaders = ОпределитьUserAgentHeaders();
            стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", , Заголовки,,,Ложь);
            
            Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
                Сессия = Неопределено;
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение остатков (автоклиент)!';uk='Помилка відправки запиту на отримання залишків (автоклієнт)'");
                СообщениеПользователю(ТекстСообщения);
                Возврат ТабОстПБ;
            Иначе
                Статус = стРезультат.Статус;
                ТелоОтвета = стРезультат.ТелоОтвета;
            КонецЕсли;
            
            // если не успешно сообщим ошибку
            Если Статус <> 200 Тогда            
                ТекстСообщения = НСтр("ru = 'Ошибка запроса на получение остатков (автоклиент)';uk='Помилка запиту на отримання залишків (автоклієнт)'");
                СообщениеПользователю(ТекстСообщения);
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                Возврат ТабОстПБ;
            КонецЕсли;
            
            Если НЕ ЕстьОшибки Тогда
                ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
            КонецЕсли;
            
            СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);    
            
            Попытка
                Если СтруктураОтвета.exist_next_page И СтруктураОтвета.balances.Количество() > 0 И FollowId <> СтруктураОтвета.next_page_id Тогда
                    FollowId = СтруктураОтвета.next_page_id;
                Иначе
                    FollowId = "";
                КонецЕсли;
            Исключение
                FollowId = "";
            КонецПопытки;
            
            //МассивСтруктурыПлатежей = СтруктураОтвета.balanceResponse;
            МассивСтруктурыПлатежей = СтруктураОтвета.balances;
        
            Попытка
                Для Каждого СтрокаСтруктуры Из МассивСтруктурыПлатежей Цикл
                    ПрочитатьОстаткиПоСчетамАвтоклиент(СтрокаСтруктуры, СтрокаСтруктуры.acc);
                    
                    //Для Каждого ВложеннаяСтрокаСтруктуры Из СтрокаСтруктуры Цикл
                    //    Если ТипЗнч(ВложеннаяСтрокаСтруктуры.Значение) = Тип("Структура") Тогда
                    //        ДанныеПоСчету = ВложеннаяСтрокаСтруктуры.Значение;
                    //        ПрочитатьОстаткиПоСчетамАвтоклиент(ДанныеПоСчету, ВложеннаяСтрокаСтруктуры.Ключ);
                    //    КонецЕсли;
                    //КонецЦикла;
                КонецЦикла;
            Исключение
                ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа на получение остатков (автоклиент): ';uk='Помилка читання відповіді на отримання залишків (автоклієнт): '")
                    + ОписаниеОшибки();
                FollowId = "";
                ТекущийИДКлиентаГруппыЧП = "";
                СообщениеПользователю(ТекстСообщения);
            КонецПопытки;
            
            Если ЗначениеЗаполнено(FollowId) Тогда
                Возврат ТабОстПБ;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    //Если ИспользоватьСтароеAPI Тогда
    //    инд = 1;
    //    
    //    Попытка
    //        Пока ПрочитатьОтветПоОстаткам(XML) = Истина И инд < 300 Цикл          
    //            инд = инд + 1;
    //        КонецЦикла;      
    //    Исключение
    //        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа остатков по счетам! ';uk='Помилка при читанні відповіді залишків за рахунками ! '")
    //            + ОписаниеОшибки();
    //        СообщениеПользователю(ТекстСообщения);
    //        XML = "";
    //        Возврат ТабОстПБ;
    //    КонецПопытки;    
    //    
    //    Если ПрочитатьОтветПоОстаткам(XML) Тогда //если еще есть записи - вернем выполнение в цикл
    //        Возврат ТабОстПБ;
    //    КонецЕсли;
    //КонецЕсли;

    Если ОстаткиПоСчетам.Количество() = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Нет данных для получения остатков.';uk='Немає даних для отримання залишків.'");
        СообщениеПользователю(ТекстСообщения);
        XML = "";
        FollowId = "";
        ТекущийИДКлиентаГруппыЧП = "";
        Возврат ТабОстПБ;
    КонецЕсли;
    
    ОстаткиПоСчетам.Свернуть("Валюта, КодВалюты","СуммаОстаток");
    
    ТабОстПБ = ОстаткиПоСчетам.Выгрузить();
    
    ОстаткиПоСчетам.Очистить();
    
    XML = "";
    FollowId = "";
    ТекущийИДКлиентаГруппыЧП = "";
    
    Возврат ТабОстПБ;
    
КонецФункции    

Процедура ПрочитатьОстаткиПоСчетамАвтоклиент(ДанныеПлатежа, НомерСчета)

    НоваяСтрока = ОстаткиПоСчетам.Добавить();  
    НоваяСтрока.НомерСчета = НомерСчета;
    НоваяСтрока.Валюта = ДанныеПлатежа.currency;
    НоваяСтрока.КодВалюты = "980";
    НоваяСтрока.СуммаОстаток = ДанныеПлатежа.balanceOut;
    
КонецПроцедуры    

////не используется//старое API
//Функция ПрочитатьОтветПоОстаткам(Текст)   
//    
//    Длина = СтрДлина(Текст);
//    Если Длина = 0 Тогда
//        Возврат Ложь;
//    КонецЕсли;    
//                                                           
//    НачПоз = Найти(Текст, "<turn");
//    Если НачПоз = 0 Тогда
//        Возврат Ложь;
//    КонецЕсли;    
//                   
//    ТекТекст = Сред(Текст, НачПоз + 5);
//    
//    КонПоз = Найти(ТекТекст, "<turn"); 
//    Если КонПоз = 0 Тогда
//        КонПоз = Длина;
//    КонецЕсли;
//     
//    Блок = Сред(Текст, НачПоз, КонПоз);
//    
//    ПрочитатьУзелОстВСтроку(Блок);
//    
//    Текст = Сред(Текст, НачПоз+КонПоз+4);    
//    
//    Возврат Истина;
//    
//КонецФункции //импПрочитатьУзелList

//Процедура ПрочитатьУзелОстВСтроку(Текст)
//    
//    ОКПО   = спцПрочитатьАтрибут("crf", Текст); 
//    
//    //проверка на фирму
//    Если ПолучитьКодОрганизации() <> ОКПО Тогда   
//        Возврат;
//    КонецЕсли;
//    
//    НоваяСтрока = ОстаткиПоСчетам.Добавить();  
//    НоваяСтрока.НомерСчета = спцПрочитатьАтрибут("account", Текст);
//    НоваяСтрока.Валюта = спцПрочитатьАтрибут("code", Текст);
//    НоваяСтрока.КодВалюты = спцПрочитатьАтрибут("numcode", Текст);
//    НоваяСтрока.СуммаОстаток = спцПрочитатьУзел("outrest", Текст);
//    
//КонецПроцедуры    

//не используется//старое API
Функция ЗагрузитьДанныеИзБО(СтруктураПараметров) Экспорт
    
    ВыпВЦикле = Ложь;
    
    Если СтруктураПараметров.ФлагКонтрагенты Тогда
        ВыпВЦикле = ЗагрузитьКонтрагентовИзБО();
    КонецЕсли;
    
    Если ВыпВЦикле Тогда
        Возврат Истина;
    Иначе
        СтруктураПараметров.ФлагКонтрагенты = Ложь;
    КонецЕсли;
    
    Если СтруктураПараметров.ФлагНоменклатура Тогда
        ВыпВЦикле = ЗагрузитьНоменклатуруИзБО(СтруктураПараметров);
    КонецЕсли;
    
    Если ВыпВЦикле Тогда
        Возврат Истина;
    КонецЕсли;
    
    //ОбновитьСтатистикуРаботы("ЗагрузкаДанныхИзБО", "СборДанных");
    
    Возврат ВыпВЦикле;
    
КонецФункции    

//не используется//старое API
//Функция АвторизацияБО(СохрCSRFTOKEN = Ложь)        
//    
//    СтруктураАвторизации = ПолучитьАвторизационныйXML("bo_reports", Истина);
//    
//    Если НЕ ЗначениеЗаполнено(СтруктураАвторизации.АвтXML) Тогда
//        Возврат "";    
//    КонецЕсли;
//    
//    //ТелоЗапроса = "";
//    //UserAgentHeaders = ОпределитьUserAgentHeaders();
//    //РесурсНаСервере = "/bookkeepingon?PUREXML";
//    //
//    //стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия);
//    //
//    //Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//    //    Сессия = Неопределено;
//    //Иначе
//    //    Статус = стРезультат.Статус;
//    //    Сессия = стРезультат.Cookie;
//    //    ТелоОтвета = стРезультат.ТелоОтвета;
//    //КонецЕсли;
//    //
//    //// если не успешно сообщим ошибку
//    //Если Статус <> 200 Тогда            
//    //    ТекстСообщения = НСтр("ru = 'Ошибка получения авторизационного XML файла для авторизации в сервисе bo.pb.ua';uk='Помилка отримання авторизационного XML файлу для авторизації у сервісі bo.pb.ua'");
//    //    СообщениеПользователю(ТекстСообщения);
//    //    XML = "";
//    //    Возврат "";
//    //КонецЕсли;
//    //
//    //ID_SIGN = спцПрочитатьУзел("sign",ТелоОтвета);
//    //
//    //АвтXML = спцПрочитатьУзел("xmlReport",ТелоОтвета);
//    //
//    //АвтXML = EncodeURL(АвтXML); 
//    
//    РесурсНаСервере = "/?p24_reports";
//    
//    ИнтернетАдрес = АдресЭО; //"eo.privatbank.ua";
//    
//    СтрокаЗапроса = "&lang=ru&sign=" + СтруктураАвторизации.ID_SIGN + "&xml=" + СтруктураАвторизации.АвтXML + "&oprer=bo_reports" ;    
//    
//    UserAgentHeaders = ОпределитьUserAgentHeaders();
//    
//    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "");
//    
//    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//        Возврат "";
//    Иначе
//        Статус = стРезультат.Статус;
//        ТелоОтвета = стРезультат.ТелоОтвета;
//        СессияДок = стРезультат.Cookie;
//    КонецЕсли;
//    
//    Если ПоддерживаетсяTLS12 И Не ФлажокИспользоватьКурлВсегда Тогда
//        
//        ИнтернетАдрес = АдресЭО; //"bo.privatbank.ua";
//        
//        РесурсНаСервере = "?view=p24&EMPTY_PAGE=";    
//        СтрокаЗапроса = "";
//        UserAgentHeaders = ОпределитьUserAgentHeaders();
//        
//        Заголовки = Новый ТаблицаЗначений;
//        Заголовки.Колонки.Добавить("Заголовок");
//        Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//        
//        НоваяСтрока = Заголовки.Добавить();
//        НоваяСтрока.Заголовок = "Upgrade-Insecure-Requests";
//        НоваяСтрока.ЗначениеЗаголовка = "1";

//        стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", СессияДок, Заголовки,,, Ложь);
//        
//        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//            Возврат "";
//        Иначе
//            Статус = стРезультат.Статус;
//            ТелоОтвета = стРезультат.ТелоОтвета;
//            СессияДок = стРезультат.Cookie;
//        КонецЕсли;
//        
//    КонецЕсли;
//    
//    Если СохрCSRFTOKEN  Тогда
//        
//        Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
//            
//            Попытка                    
//                // путь к временным файлам
//                ПутьКРесурсам = "1c_curl_temp";
//                //temp = КаталогВременныхФайлов();    
//                //ПутьКВременнымФайлам = temp + ПутьКРесурсам;
//                
//                temp = ПеременнаяОкружения("%TEMP%");
//                ПутьКВременнымФайлам = temp + "\" + ПутьКРесурсам;
//                
//                ПутьКФайлу = ПутьКВременнымФайлам + "\" + СессияДок;
//                
//                ФайлКуки = Новый Файл(ПутьКФайлу);
//                
//                Если Не ФайлКуки.Существует() Тогда  
//                    СообщениеПользователю(НСтр("ru='Не найден файл Cookie: ';uk='Не вдалося знайти файл Cookie: '") + ПутьКФайлу);
//                    Возврат "";
//                КонецЕсли;  
//                
//                ФайлКуки = Новый ЧтениеТекста;
//                ФайлКуки.Открыть(ПутьКФайлу);     
//                ТекстФайла = ФайлКуки.Прочитать();
//                
//                XML = Сред(ТекстФайла, Найти(ТекстФайла, "CSRF-TOKEN")+11, 32);
//                
//            Исключение
//                
//                СообщениеПользователю(НСтр("ru='Ошибка открытия файла Cookie: ';uk='Помилка відкриття файлу Cookie: '") + ОписаниеОшибки());
//                Возврат "";
//                
//            КонецПопытки;
//            
//        Иначе
//            XML = Сред(СессияДок, Найти(СессияДок, " CSRF-TOKEN")+12, 32);
//        КонецЕсли;
//        
//    КонецЕсли;
//    
//    // если не успешно сообщим ошибку
//    //Если Найти(СессияДок, "PHPSESSID") = 0 Тогда            
//    //    ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на авторизацию в сервисе bo.pb.ua.';uk='Помилка надсилання запиту на авторизацію в сервісі bo.pb.ua.'");
//    //    СообщениеПользователю(ТекстСообщения);
//    //    Возврат "";
//    //КонецЕсли;
//    
//    Возврат СессияДок;
//    
//КонецФункции

//не используется
Функция ЗагрузитьКонтрагентовИзБО()
    
    Если XML = "" Тогда
        
        //Cookie = АвторизацияБО();
        
        РесурсНаСервере = "/module/money/func/clients.php";

        ИнтернетАдрес = АдресЭО;
        СтрокаЗапроса = "";
        
        UserAgentHeaders = ОпределитьUserAgentHeaders();

        Заголовки = Новый ТаблицаЗначений;
        Заголовки.Колонки.Добавить("Заголовок");
        Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
        
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Upgrade-Insecure-Requests";
        НоваяСтрока.ЗначениеЗаголовка = "1";
        
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Cache-Control";
        НоваяСтрока.ЗначениеЗаголовка = "max-age=0";
                
        стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "", Заголовки,,,Ложь);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Сессия = Неопределено;
            Возврат Ложь;
        Иначе
            Статус = стРезультат.Статус;
            XML = стРезультат.ТелоОтвета;
            //Сессия = Cookie;
        КонецЕсли;
            
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка контрагентов из сервиса bo.pb.ua';uk='Помилка відправки запиту на отримання списку контрагентів з сервісу bo.pb.ua'");
            СообщениеПользователю(ТекстСообщения);
            XML = "";
            Возврат Ложь;
        КонецЕсли;
        
        Если XML = "" Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка получения списка контрагентов из сервиса bo.pb.ua';uk='Помилка отримання списку контрагентів з сервісу bo.pb.ua'");
            СообщениеПользователю(ТекстСообщения);
            Возврат Ложь;
        КонецЕсли;
        
        МассивКонтр = jsonПрочитатьИнициализация(XML);
        
        Если МассивКонтр <> Неопределено И МассивКонтр.Количество() <> 0 Тогда
            XML = ЗначениеВСтрокуВнутр(МассивКонтр);
            Возврат Истина;
        Иначе
            Возврат Ложь;
        КонецЕсли;
    
    КонецЕсли;
    
    МассивКонтр = ЗначениеИзСтрокиВнутр(XML);
    
    Счетчик = 5;
    
    Для Каждого СтрокаМас Из МассивКонтр Цикл
        
        Если Счетчик = 0 Тогда 
            Прервать;
        Иначе
            Счетчик = Счетчик - 1;
        КонецЕсли;
        
        Если СтрДлина(СтрокаМас.id) <> 6 Тогда
            Продолжить;
        КонецЕсли;
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("НаименованиеКонтрагента", СтрокаМас.Name);
        СтруктураПоиска.Вставить("КодКонтрагента", СтрокаМас.kod);
        СтруктураПоиска.Вставить("СчетКонтрагента", СтрокаМас.rs);
        
        Если СтрокаМас.type = "2" Тогда //если поставщик
            Покупатель = Ложь;    
        Иначе    
            Покупатель = Истина;
        КонецЕсли;    
        
        Контр = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, Покупатель);
        НайтиСоздатьСчет(Контр, СтрокаМас.mfo, СтрокаМас.rs, НайтиВалюту("UAH"), СтрокаМас.bank, "", Истина);
        
    КонецЦикла;
    
    Пока Счетчик < 5 Цикл
        МассивКонтр.Удалить(0);
        Счетчик = Счетчик + 1;
    КонецЦикла;    
    
    Если МассивКонтр.Количество() = 0 Тогда
        XML = "";
        Возврат Ложь;
    Иначе
        XML = ЗначениеВСтрокуВнутр(МассивКонтр);
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

//не используется
Функция ЗагрузитьНоменклатуруИзБО(СтруктураПараметров)
    
    Если XML = "" Тогда
        
        //Cookie = АвторизацияБО();
                                                                         
        РесурсНаСервере = "/inc/ajax/nomenclature.php?a=listFile&page=1&start=0&limit=10000000&sort=%5B%7B%22property%22%3A%22text%22%2C%22direction%22%3A%22ASC%22%7D%5D";
        ИнтернетАдрес = АдресЭО; 
        
        СтрокаЗапроса = "";
        
        UserAgentHeaders = ОпределитьUserAgentHeaders();

        стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "", , , , Ложь);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Сессия = Неопределено;
            Возврат Ложь;
        Иначе
            Статус = стРезультат.Статус;
            XML = стРезультат.ТелоОтвета;
            //Сессия = Cookie;
        КонецЕсли;
            
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка номенклатуры из сервиса bo.pb.ua';uk='Помилка відправки запиту на отримання списку номенклатури з сервісу bo.pb.ua'");
            СообщениеПользователю(ТекстСообщения);
            XML = "";
            Возврат Ложь;
        КонецЕсли;
        
        Попытка
            МассивКонтр = jsonПрочитатьИнициализация(XML).data;
        Исключение
            МассивКонтр = Неопределено;
            ТекстСообщения = НСтр("ru = 'Ошибка при чтении списка номенклатуры из сервиса bo.pb.ua';uk='Помилка при читанні списку номенклатури з сервісу bo.pb.ua'")
                + ОписаниеОшибки();
            СообщениеПользователю(ТекстСообщения);
        КонецПопытки;    
        
        Если МассивКонтр <> Неопределено И МассивКонтр.Количество() <> 0 Тогда
            XML = ЗначениеВСтрокуВнутр(МассивКонтр);
            Возврат Истина;
        Иначе
            Возврат Ложь;
        КонецЕсли;
    
    КонецЕсли;
    
    МассивНом = ЗначениеИзСтрокиВнутр(XML);
    
    //Счетчик = 5;
    
    ДокЦен = Неопределено;
    
    Если ИдКонф = "BP" И СтруктураПараметров.ФлагЦены Тогда
        ДокЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
        ДокЦен.Дата = ТекущаяДата();
        ДокЦен.ТипЦен = ЦенаПродажи;
    КонецЕсли;    
    
    Для Каждого СтрокаМас Из МассивНом Цикл
        
        //Если Счетчик = 0 Тогда 
        //    Прервать;
        //Иначе
        //    Счетчик = Счетчик - 1;
        //КонецЕсли;
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("Наименование", СтрокаМас.Name);
        СтруктураПоиска.Вставить("Артикул", СтрокаМас.articul);
        СтруктураПоиска.Вставить("ЕдИзм", СтрокаМас.ed_izm);
        СтруктураПоиска.Вставить("Тип", СтрокаМас.type);
        
        Ном = НайтиСоздатьНоменклатуру(СтруктураПоиска, Истина);
        
        Если СтруктураПараметров.ФлагОстатки И ЗначениеЗаполнено(СтрокаМас.coult) И ЗначениеЗаполнено(Ном) Тогда
            
            ЗаполнитьОстатокНом(Ном, Число(СтрокаМас.coult), Число(СтрокаМас.purchase));
            
        КонецЕсли;
        
        Если СтруктураПараметров.ФлагЦены И ЗначениеЗаполнено(Число(СтрокаМас.cost)) И ЗначениеЗаполнено(Ном) Тогда
            
            ЗаполнитьЦенуНом(Ном, Число(СтрокаМас.cost), ДокЦен);
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если ИдКонф = "BP" Или ИдКонф = "BASC" И СтруктураПараметров.ФлагЦены Тогда
        
        Попытка
            ДокЦен.Записать(РежимЗаписиДокумента.Проведение);
        Исключение    
            ДокЦен.Записать(РежимЗаписиДокумента.Запись);
        КонецПопытки;    
        
        ДозаполнитьРеквизитыДокумента(ДокЦен);    
        
    КонецЕсли;    
    
    //Пока Счетчик < 5 Цикл
    //    МассивНом.Удалить(0);
    //    Счетчик = Счетчик + 1;
    //КонецЦикла;    
    
    //Если МассивНом.Количество() = 0 Тогда
    //    XML = "";
        Возврат Ложь;
    //Иначе
    //    XML = ЗначениеВСтрокуВнутр(МассивНом);
    //    Возврат Истина;
    //КонецЕсли;
    
    
КонецФункции

Процедура ЗаполнитьЦенуНом(Номенклатура, Цена, ДокЦен)
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
 
        НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
        НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
        НаборЗаписей.Прочитать();
        НаборЗаписей.Очистить();
        НоваяЗапись = НаборЗаписей.Добавить();
        НоваяЗапись.Номенклатура = Номенклатура;
        НоваяЗапись.Период = ТекущаяДата();
        НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
        НоваяЗапись.Цена = Цена;
        НоваяЗапись.ВидЦен = ЦенаПродажи;
        НоваяЗапись.Актуальность = Истина;
        
        НаборЗаписей.Записать(Истина);
        
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
        Если ДокЦен.Товары.Найти(Номенклатура) = Неопределено Тогда
            НоваяСтрока = ДокЦен.Товары.Добавить();
            НоваяСтрока.Номенклатура = Номенклатура;
            НоваяСтрока.Цена = Цена;
            НоваяСтрока.Валюта = ЦенаПродажи.ВалютаЦены;
        КонецЕсли;    
        
    КонецЕсли
    
КонецПроцедуры

//не используется (ЗагрузитьНоменклатуруИзБО)
Процедура ЗаполнитьОстатокНом(Номенклатура, Остаток, Цена)
    
    Если ДокументОприходования = Неопределено Тогда 
        
        Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            Док = Документы.ОприходованиеТоваров.СоздатьДокумент();    
            Док.Склад = Склад;
            
        Иначе
            //    BSB, ...
            Док = Документы.ОприходованиеЗапасов.СоздатьДокумент();
            Док.СтруктурнаяЕдиница = Склад;
        КонецЕсли;    
        
        Док.Дата = ТекущаяДата();
        Док.Организация = Организация;
        
        Док.Комментарий = "Создан автоматически при переносе остатков из bo.pb.ua";
        Док.Записать(РежимЗаписиДокумента.Запись);        
        ДокументОприходования = Док.Ссылка;
        
        ДозаполнитьРеквизитыДокумента(Док);    
    КонецЕсли;
    
    Док = ДокументОприходования.ПолучитьОбъект();
    
    Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда    
        НоваяСтрока = Док.Товары.Добавить();
        НоваяСтрока.ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения; 
    Иначе
        //    BSB, ...
        НоваяСтрока = Док.Запасы.Добавить();    
        НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения; 
    КонецЕсли;
    
    НоваяСтрока.Номенклатура = Номенклатура;
    
    НоваяСтрока.Количество = Остаток;
    НоваяСтрока.Цена = Цена;
    НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
    
    Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
        ТекущиеДанные = НоваяСтрока;
        
        ДанныеСтрокиТаблицы    = Новый Структура(
            "Номенклатура, ЕдиницаИзмерения, Коэффициент,
            |Количество, Цена, Сумма, СуммаНУ, 
            |ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
            |СчетУчетаБУ, СчетУчетаЗабалансовый, НалоговоеНазначение, Всего");
        
        ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
        
        ДанныеОбъекта    = Новый Структура(
            "Дата, Организация, Склад, ТипЦен,
            |ТипСклада, УчетВПродажныхЦенах, РазделениеПоСтавкамВРознице, РассчитыватьСуммаВРознице");
        
        ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Док);
        
        ТипСклада = "";
        УчетВПродажныхЦенах = Ложь;
        РазделениеПоСтавкамВРознице = "";
        
        Выполнить("УчетВПродажныхЦенах    = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Док.Организация, Док.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)");

        Выполнить("ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.Склад, ""ТипСклада"")");
        Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
                И УчетВПродажныхЦенах Тогда
            РассчитыватьСуммаВРознице = Истина;
        Иначе
            РассчитыватьСуммаВРознице = Ложь;
        КонецЕсли;
    
        Выполнить("РазделениеПоСтавкамВРознице    = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ()");
        
        ДанныеОбъекта.ТипСклада                      = ТипСклада;
        ДанныеОбъекта.УчетВПродажныхЦенах          = УчетВПродажныхЦенах;
        ДанныеОбъекта.РазделениеПоСтавкамВРознице = РазделениеПоСтавкамВРознице;
        ДанныеОбъекта.РассчитыватьСуммаВРознице      = РассчитыватьСуммаВРознице;
        
        BP_ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
        
        ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
        
    КонецЕсли;    
        
    Док.Записать();
    
КонецПроцедуры

//не используется (ЗагрузитьНоменклатуруИзБО)
Процедура BP_ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

    СведенияОНоменклатуре = Неопределено;
    
    Выполнить("СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта)");
        
    Если СведенияОНоменклатуре = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СтрокаТабличнойЧасти.ЕдиницаИзмерения        = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
    СтрокаТабличнойЧасти.Коэффициент            = СведенияОНоменклатуре.Коэффициент;
    СтрокаТабличнойЧасти.Цена                    = СведенияОНоменклатуре.Цена;
    
    Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
        СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
        Если ДанныеОбъекта.РазделениеПоСтавкамВРознице Тогда
            СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
        КонецЕсли; 
    КонецЕсли;
    
    Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
        ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
    
    Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти)");
    Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти)");
    
    СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.Сумма;

КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере

Функция НайтиСоздатьНоменклатуру(СтруктураПараметров, Создавать = Истина)
    
    Артикул = "";
    Наименование = "";
    
    ЕдИзм = "";
    НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка();
    
    СтруктураПараметров.Свойство("Артикул", Артикул);
    СтруктураПараметров.Свойство("Наименование", Наименование);
    СтруктураПараметров.Свойство("ЕдИзм", ЕдИзм);

    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Номенклатура.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |    НЕ Номенклатура.ПометкаУдаления"+
        ?(ЗначениеЗаполнено(Артикул),"    И Номенклатура.Артикул = &Артикул", " И Номенклатура.Наименование = &Наименование ") + 
        "    И НЕ Номенклатура.ЭтоГруппа";
    
    Запрос.УстановитьПараметр("Артикул", Артикул);
    Запрос.УстановитьПараметр("Наименование", Наименование);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Возврат ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Если Создавать И ЗначениеЗаполнено(Наименование) Тогда
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            НоменклатураСсылка = UNF_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров);
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда    
            НоменклатураСсылка = BP_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров);
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда    
            НоменклатураСсылка = UT_3_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров);    
        КонецЕсли;    
        
    КонецЕсли;    
    
    Возврат НоменклатураСсылка;
    
КонецФункции    

Функция UNF_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров)
    
    НомОб = Справочники.Номенклатура.СоздатьЭлемент();
    НомОб.Наименование = Наименование;
    НомОб.НаименованиеПолное = Наименование;
    НомОб.Артикул = Артикул;
    
    НомОб.СрокПополнения = 0;
    НомОб.ИспользоватьХарактеристики = Ложь;
    НомОб.ИспользоватьПартии = Ложь;
    НомОб.СрокИсполненияЗаказа = 0;
    НомОб.НормаВремени = 0;
    НомОб.МетодОценки = Перечисления.МетодОценкиЗапасов.FIFO;
    
    НомОб.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
    
    НомОб.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
    
    Если СтруктураПараметров.Тип = "Послуга" ИЛИ (СтрЗаменить(НРег(ЕдИзм),".","") = "посл" ИЛИ СтрЗаменить(НРег(ЕдИзм),".","") = "усл") Тогда
        НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
    Иначе    
        НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
    КонецЕсли;    
    
    Если НЕ ЗначениеЗаполнено(НомОб.ТипНоменклатуры)
        ИЛИ НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
        НомОб.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
    КонецЕсли;
    
    ИспользоватьПодсистемуПроизводство = Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить();
    
    Если НЕ ЗначениеЗаполнено(НомОб.ТипНоменклатуры)
        ИЛИ НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
        ИЛИ НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
        ИЛИ НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
        Если ИспользоватьПодсистемуПроизводство Тогда
            НомОб.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
        Иначе
            НомОб.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
        КонецЕсли;
    КонецЕсли;
    
    Если НомОб.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
        НомОб.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
    КонецЕсли;
    
    НомОб.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
    
    НоменклатураСсылка = ЗаписатьНоменклатуру(НомОб);
    
    Возврат НоменклатураСсылка;
    
КонецФункции         

Функция UT_3_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров)
    
    НомОб = Справочники.Номенклатура.СоздатьЭлемент();
    НомОб.Наименование = Наименование;
    НомОб.НаименованиеПолное = Наименование;
    НомОб.Артикул = Артикул;
    
    Если СтруктураПараметров.Тип = "Послуга" ИЛИ (СтрЗаменить(НРег(ЕдИзм),".","") = "посл" ИЛИ СтрЗаменить(НРег(ЕдИзм),".","") = "усл") Тогда
        Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НомОб, UT_3_ВидНоменклатурыПоТипу(Перечисления.ТипыНоменклатуры.Услуга));
    Иначе
        Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НомОб, UT_3_ВидНоменклатурыПоТипу(Перечисления.ТипыНоменклатуры.Товар));
    КонецЕсли;    
    
    //НомОб.БазоваяЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
    
    НоменклатураСсылка = ЗаписатьНоменклатуру(НомОб);
    
    Возврат НоменклатураСсылка;
    
КонецФункции

Функция UT_3_ВидНоменклатурыПоТипу(ТипНом)         

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |    ВидыНоменклатуры.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
        |ГДЕ
        |    ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
        |    И НЕ ВидыНоменклатуры.ПометкаУдаления
        |    И НЕ ВидыНоменклатуры.ЭтоГруппа
        |
        |УПОРЯДОЧИТЬ ПО
        |    Ссылка";
    
    Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНом);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Возврат ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    
    Возврат Справочники.ВидыНоменклатуры.ВидНоменклатурыПоУмолчанию();
    
КонецФункции

Функция BP_СоздатьНомеклатуру(Наименование, Артикул, ЕдИзм, СтруктураПараметров)
    
    НомОб = Справочники.Номенклатура.СоздатьЭлемент();
    НомОб.Наименование = Наименование;
    НомОб.НаименованиеПолное = Наименование;
    НомОб.Артикул = Артикул;
    
    Если СтруктураПараметров.Тип = "Послуга" ИЛИ (СтрЗаменить(НРег(ЕдИзм),".","") = "посл" ИЛИ СтрЗаменить(НРег(ЕдИзм),".","") = "усл") Тогда
        НомОб.Услуга = Истина;
    Иначе    
        НомОб.Услуга = Ложь;
    КонецЕсли;    
    
    НомОб.БазоваяЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
    
    НоменклатураСсылка = ЗаписатьНоменклатуру(НомОб);
    
    Возврат НоменклатураСсылка;
    
КонецФункции

Функция ЗаписатьНоменклатуру(НомОб)
    
    Попытка
        НомОб.Записать();
        ТекстСообщения = НСтр("ru = 'В базе создана новая номенклатура: ';uk='У базі створена нова номенклатура: '") + НомОб.Наименование;
        СообщениеПользователю(ТекстСообщения, Ложь);
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при создании новой номенклатуры: ';uk='Помилка при створенні нової номенклатури: '") + НомОб.Наименование;
        ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
        СообщениеПользователю(ТекстСообщения);
        Возврат Справочники.Номенклатура.ПустаяСсылка();    
    КонецПопытки;    
    
    Возврат НомОб.Ссылка;
    
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(ЕдИзм)        
    
    ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдИзм);
    
    Если ЕдИзмСсылка.Пустая() Тогда
        
        ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СтрЗаменить(ЕдИзм,".",""));
        
        Если ЕдИзмСсылка.Пустая() Тогда
            
            ЕдИмзОб = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
            
            КодЕдИзм = "";
            Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
            
            Если ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
                
                Попытка
                    
                    Дерево = Справочники.КлассификаторЕдиницИзмерения.ПолучитьДеревоКлассификатора();
                    СтрокаДЗ = Дерево.Найти(ЕдИзм, "УсловноеОбозначениеНациональное", Истина);
                    
                    Если СтрокаДЗ <> Неопределено Тогда
                        КодЕдИзм = СтрокаДЗ.КодЧисловой; 
                    КонецЕсли;
                    
                Исключение
                    
                    Если РежимОтладки Тогда
                        СообщениеПользователю(ОписаниеОшибки(), Ложь);
                    КонецЕсли;
                    
                КонецПопытки;
            Иначе    
                
                ОблМакета = Макет.НайтиТекст(ЕдИзм,,,,Истина);
                
                Если ОблМакета <> Неопределено Тогда
                    ОблМакета = Макет.ПолучитьОбласть(ОблМакета.Верх, 2, ОблМакета.Верх, 2);
                    КодЕдИзм = ОблМакета.ТекущаяОбласть.Текст;
                КонецЕсли;
                
            КонецЕсли;
        
            Если КодЕдИзм = "" Тогда
                ГСЧ = Новый ГенераторСлучайныхЧисел;
                ЕдИмзОб.Код = Формат(ГСЧ.СлучайноеЧисло(4000,9999), "ЧГ=0") ;
            Иначе
                ЕдИмзОб.Код = КодЕдИзм;
            КонецЕсли;
            
            ЕдИмзОб.Наименование = ЕдИзм;
            
            Попытка
                ЕдИмзОб.Записать();
                ТекстСообщения = НСтр("ru = 'В базе создана новая единица измерения: ';uk='У базі створена нова одиниця виміру: '") + ЕдИзм;
                СообщениеПользователю(ТекстСообщения, Ложь);
                ЕдИзмСсылка = ЕдИмзОб.Ссылка;
            Исключение
                ТекстСообщения = НСтр("ru = 'Ошибка при создании единицы измерения: ';uk='Помилка при створенні одиниці виміру: '") + ЕдИзм;
                ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
                СообщениеПользователю(ТекстСообщения);
            КонецПопытки;    
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ЕдИзмСсылка;
    
КонецФункции

Процедура ЗаполнитьСписокФинДок(НачДата, КонДата, СсылкаНаДок = Неопределено, НомерСтроки = Неопределено) Экспорт
    
    Если СсылкаНаДок = Неопределено Тогда
        ФинансовыеДокументы.Очистить();
        ПодготовленныеПлатежи.Очистить();
    КонецЕсли;    
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "BSB"  Тогда
        UNF_BP_ЗаполнитьФинДок(НачДата, КонДата, СсылкаНаДок, НомерСтроки);
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        UT_3_ЗаполнитьФинДок(НачДата, КонДата, СсылкаНаДок, НомерСтроки);    
    КонецЕсли;    
    
КонецПроцедуры

Процедура UT_3_ЗаполнитьФинДок(НачДата, КонДата, СсылкаНаДок, НомерСтроки = Неопределено) Экспорт

    лИмяДокумента = ИмяТипаФинДокПоРазделу(ТекВидОперации, Ложь);
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Док.Ссылка КАК СсылкаНаДокумент,
        |    Док.Номер КАК Номер,
        |    Док.Дата КАК Дата,
        |    Док.Контрагент КАК Контрагент,
        |    Док.СуммаДокумента КАК СуммаДокумента,
        |    Док.Валюта КАК ВалютаДокумента,
        |    Док.Комментарий КАК Комментарий,
        |    &ИмяДокумента КАК ИмяДокумента,
        |    10 КАК КартинкаСтатуса,
        |    Док.Проведен КАК Проведен
        |ИЗ
        |    Документ." + лИмяДокумента + " КАК Док
        |ГДЕ
        |    " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " Док.Ссылка = &СсылкаНаДок",    "  Организация = &Организация И Док.Проведен И Док.Дата МЕЖДУ &НачДата И &КонДата") +
        ?(ЗначениеЗаполнено(Контрагент), " И Док.Контрагент = &Контрагент ", "");
        
    
        Если ТекВидОперации = "Акты" Тогда
            Запрос.Текст = Запрос.Текст + " И Док.Услуги.НомерСтроки >=1 ";    
        ИначеЕсли ТекВидОперации = "Счета" Тогда
            //счета в УТ сделанны шедефрально...
        Иначе
            Запрос.Текст = Запрос.Текст + " И Док.Товары.НомерСтроки >=1 ";        
        КонецЕсли;
    
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("ИмяДокумента", лИмяДокумента);

    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ФинансовыеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ФинансовыеДокументы.Добавить();
        КонецЕсли;    
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетЗаписи);
        
        Если ВыборкаДетЗаписи.Проведен Тогда
            НоваяСтрока.ИдентификаторКартинки = 0;
        Иначе
            НоваяСтрока.ИдентификаторКартинки = 2;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура UNF_BP_ЗаполнитьФинДок(НачДата, КонДата, СсылкаНаДок, НомерСтроки = Неопределено) Экспорт

    лИмяДокумента = СтрЗаменить(ИмяТипаФинДокПоРазделу(ТекВидОперации, Ложь), "%", "");
    
    //Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
    //    Если лИмяДокумента = "СчетНаОплату" И СсылкаНаДок.Запасы.Количество() = 0 Тогда
    //        ТекстСообщения = НСтр("ru = 'Добавление документа невозможно. Проверьте вид операции, и корректность заполнения данных';uk='Додавання документа неможливо. Перевірте вид операції , та коректність заповнення даних'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        СсылкаНаДок = Неопределено;
    //        Возврат;
    //    КонецЕсли;    
    //КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Док.Ссылка КАК СсылкаНаДокумент,
        |    Док.Номер КАК Номер,
        |    Док.Дата КАК Дата,
        |    Док.Контрагент КАК Контрагент,
        |    Док.СуммаДокумента КАК СуммаДокумента,
        |    Док.ВалютаДокумента КАК ВалютаДокумента,
        |    Док.Комментарий КАК Комментарий,
        |    &ИмяДокумента КАК ИмяДокумента,
        |    10 КАК КартинкаСтатуса,
        |    Док.Проведен КАК Проведен
        |ИЗ
        |    Документ." + лИмяДокумента + " КАК Док
        |ГДЕ
        |    " + 
        ?(ЗначениеЗаполнено(СсылкаНаДок), " Док.Ссылка = &СсылкаНаДок",    " Док.Проведен И Док.Дата МЕЖДУ &НачДата И &КонДата") +
        ?(ЗначениеЗаполнено(Организация), " И Организация = &Организация ", "") + 
        ?(ЗначениеЗаполнено(Контрагент), " И Док.Контрагент = &Контрагент ", "");
        
        Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            Если ТекВидОперации = "Акты" Тогда
                Запрос.Текст = Запрос.Текст + " И Док.Услуги.НомерСтроки >=1 ";
            //    //    uvp
            ////ИначеЕсли ИдКонф = "BSB" Тогда
            ////    Запрос.Текст = Запрос.Текст + " И Док.РаботыИУслуги.НомерСтроки >=1 "
            //    //    end uvp
            //Иначе
            //    Запрос.Текст = Запрос.Текст + " И Док.Товары.НомерСтроки >=1 ";        
            КонецЕсли;
        ////    //    uvp
        ////ИначеЕсли ИдКонф = "BSB" Тогда
        ////    Если ТекВидОперации = "Акты" Тогда
        ////        Запрос.Текст = Запрос.Текст + " И Док.РаботыИУслуги.НомерСтроки >=1 "
        ////    КонецЕсли
            //    end uvp
        КонецЕсли;    

    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    Запрос.УстановитьПараметр("СсылкаНаДок", СсылкаНаДок);
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("ИмяДокумента", ИмяТипаФинДокПоРазделу(ТекВидОперации, Ложь));

    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = ФинансовыеДокументы[НомерСтроки];
        Иначе    
            НоваяСтрока = ФинансовыеДокументы.Добавить();
        КонецЕсли;    
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетЗаписи);
        
        Если ВыборкаДетЗаписи.Проведен Тогда
            НоваяСтрока.ИдентификаторКартинки = 0;
        Иначе
            НоваяСтрока.ИдентификаторКартинки = 2;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

//Функция по выгрузке счетов в XML
//
Функция СформироватьXML_ФинДок(КонПериода, ОтправкаНаСервис = Ложь, Знач GUID_Формы = Неопределено) Экспорт
    
    ДействиеАналитики = "ФинДокВыгрузка";

    //Проверим существование каталога для выгрузки.
    Если ОтправкаНаСервис И СохрнКаталогВыгрузки = "" Тогда
        СохрнКаталогВыгрузки = КаталогВыгрузки;
        КаталогВыгрузки = КаталогВременныхФайлов();
    КонецЕсли;    
    
    Если НЕ ЕстьОтмеченные Тогда
        Если ПодписыватьФинансовыеДокументыПриОтравке Тогда
            ПодготовленныеПлатежи.Очистить();    
        КонецЕсли;    
    КонецЕсли;
    
    ТабФинДок = СформироватьТаблицуПоСтруктуреXML_COMDOC(); //Заполнение таблицы по схеме
    
    Для каждого СтрокаТЧ из ФинансовыеДокументы Цикл //цикл прерывается каждый раз, и начинается заново для оставшихся строк
        
        Если НЕ СтрокаТЧ.Флажок 
            //ИЛИ (СтрокаТЧ.ИмяДокумента <> "СчетНаОплату%" 
            //И СтрокаТЧ.ИмяДокумента <> "АктВыполненныхРабот"
            //И СтрокаТЧ.ИмяДокумента <> "ЗаказПоставщику"
            //И СтрокаТЧ.ИмяДокумента <> "СчетНаОплатуПокупателю"
            //И СтрокаТЧ.ИмяДокумента <> "РеализацияТоваровУслуг"
            // ) 
         Тогда
            Продолжить;
        КонецЕсли;    
        
        СтрокаТЧ.КартинкаОшибки = 0;
        СтрокаТЧ.ТекстОшибки = "";
        
        ЕстьОтмеченные = Истина;
        
        СтрокаТЧ.Флажок = Ложь;
        
        лКодКонтрагента = "";
        
        Если ИдКонф <> "UT_3" И ИдКонф <> "ERP" Тогда
            
            лКодКонтрагента  = СокрЛП(СтрокаТЧ.Контрагент.ИНН);            
            
            Попытка
                Если НЕ ЗначениеЗаполнено(лКодКонтрагента) Тогда
                    лКодКонтрагента = СокрЛП(СтрокаТЧ.Контрагент.КодПоЕДРПОУ);    
                КонецЕсли;
            Исключение
            КонецПопытки;
            
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            
            лКодКонтрагента  = СокрЛП(СтрокаТЧ.Контрагент.ИННПлательщикаНДС);            
            
            Если НЕ ЗначениеЗаполнено(лКодКонтрагента) Тогда
                лКодКонтрагента = СокрЛП(СтрокаТЧ.Контрагент.КодПоЕДРПОУ);    
            КонецЕсли;
             
        КонецЕсли;    
        
        Если НЕ ЗначениеЗаполнено(лКодКонтрагента) Тогда
            
            ТекстСообщения = НСтр("ru = 'Внимание. В карточке контрагента по строке №%НомерСтроки% не заполнен код. Данный параметр является обязательным. Документ пропущен.'; uk = 'Увага. У картці контрагента по рядку №%НомерСтроки% не заповнений код. Даний параметр є обов`язковим. Документ пропущений.' ");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            
            СообщениеПользователю(ТекстСообщения, Ложь);
            
            СтрокаТЧ.КартинкаОшибки = 1;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            
            ЕстьОшибки = Истина;
            
            Продолжить;
        КонецЕсли;
        
        //Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент.КодПоЕДРПОУ) Тогда
        //    ТекстСообщения = НСтр("ru = 'Внимание. В карточке контрагента по строке №%НомерСтроки% не заполнен код по ЕДРПОУ. Документ пропущен.'; uk = 'Увага. У картці контрагента по рядку №%НомерСтроки% не заповнений код за ЄДРПОУ. Документ пропущений..' ");
        //    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        //    СообщениеПользователю(ТекстСообщения);
        //    СтрокаТЧ.КартинкаОшибки = 1;
        //    СтрокаТЧ.ТекстОшибки = ТекстСообщения;
        //    ЕстьОшибки = Истина;
        //    Продолжить;
        //КонецЕсли;    
        
        ЗаполнитьТабФинДок(ТабФинДок, СтрокаТЧ.СсылкаНаДокумент, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ИмяДокумента);    
        
        Если ТекВидОперации = "Счета" Тогда
            ИмяФайла = НСтр("ru = 'Счет №'; uk = 'Рахунок №'");
        ИначеЕсли ТекВидОперации = "Акты" Тогда
            ИмяФайла = НСтр("ru = 'Акт №'; uk = 'Акт №'"); 
        ИначеЕсли ТекВидОперации = "Заказы" Тогда
            ИмяФайла = НСтр("ru = 'Заказ №'; uk = 'Замов.№'");
        ИначеЕсли ТекВидОперации = "Расходные" Тогда
            ИмяФайла = НСтр("ru = 'Расходная №'; uk = 'Видаткова №'");    
        КонецЕсли;    
        
        ИмяФайла = ИмяФайла + СтрокаТЧ.Номер + " " + лКодКонтрагента + ".xml"; 
        
        Попытка
    
            ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + ИмяФайла;
            
            ЗаписьXML = Новый ЗаписьXML;
            ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов() + ИмяФайла, "UTF-8");
            ЗаписьXML.ЗаписатьОбъявлениеXML();
            ЗаписьXML.ЗаписатьНачалоЭлемента("ЕлектроннийДокумент");
            СформироватьФайлXMLПоСтруктуре(ЗаписьXML, ТабФинДок);
            ЗаписьXML.ЗаписатьКонецЭлемента();
            ЗаписьXML.Закрыть();    
            
            GUID_Формы = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяКонечногоФайла), GUID_Формы);
            
            Если РежимОтладки Тогда
                Текст = Новый ЧтениеТекста(КаталогВременныхФайлов() + ИмяФайла, "UTF-8");
                СообщениеПользователю(Текст.Прочитать());
            КонецЕсли;
            
            НоваяСтрока = СписокФайлов.Добавить();
            НоваяСтрока.АдресФайла = GUID_Формы;
            НоваяСтрока.ИмяФайла = ИмяФайла;
            
        Исключение
            
            СообщениеПользователю(НСтр("ru = 'Ошибка при сохранении XML файла финансового документа!'; uk = 'Помилка при збереженні XML файлу!'"));
            
            ТекстСообщения = НСтр("ru='Не удалось записать файл! Возможно, недостаточно места на диске или диск защищен от записи.';
            |;uk='Не вдалося записати файл! Можливо, недостатньо місця на диску або диск захищений від запису'");
            
            ТекстСообщения = ТекстСообщения + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.';uk='Також, можливо, не підключено розширення для роботи з файлами.'");
            
            СообщениеПользователю(ТекстСообщения);
            СообщениеПользователю(ОписаниеОшибки());
            СтрокаТЧ.КартинкаОшибки = 1;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;

        КонецПопытки;
        
        Если НЕ ОтправкаНаСервис Тогда
            Возврат Истина;    
        КонецЕсли;    
        
        Если ОтправкаНаСервис Тогда
            
            ТабФинДок.Колонки.Добавить("ИмяДокумента");
            ТабФинДок.ЗаполнитьЗначения(ИмяФайла, "ИмяДокумента");
                        
            ОтправитьДокументыНаРегистрацию(ТабФинДок, ФинансовыеДокументы, ЕстьОшибки);
            
            Если ПодписыватьФинансовыеДокументыПриОтравке Тогда
                ПодписатьФинДок(СтрокаТЧ, ТекВидОперации);
            КонецЕсли;
            
        КонецЕсли;
        
        Возврат Истина;
        
    КонецЦикла;    
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для выгрузки!'; uk = 'Немає відмічених документів для вигрузки!'"), Ложь);
        Возврат Ложь;
    КонецЕсли;
    
    Если ЕстьОшибки Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при выгрузке документов! Все проблемные строки отмечены в списке.'; uk = 'Помилка при вивантаженні документів! Всі проблемні рядки відзначені в списку.' ");
        СообщениеПользователю(ТекстСообщения);
    Иначе
        ТекстСообщения = НСтр("ru = 'Все отмеченные документы успешно выгружены.'; uk = 'Всі відзначені документи успішно вивантажені.' ");
        СообщениеПользователю(ТекстСообщения, Ложь);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(СохрнКаталогВыгрузки) Тогда
        КаталогВыгрузки = СохрнКаталогВыгрузки;
        СохрнКаталогВыгрузки = "";
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    ЕстьОшибки = Ложь;
    XML = "";
    СессияДок = "";
    
    Возврат Ложь;
    
КонецФункции

Функция СформироватьТаблицуПоСтруктуреXML_COMDOC()
    
    //При работе используется таблица значений с вложенными таблицами значений
    //получается своего рода структура, сформированная по схеме XML.
    //причина по которой не использовалась структура и механизмы XDTO - необходимость совместимости кода с 7.7
    //для заполнения файла XML по этой ТЗ будет использована универсальная функция.
    
    ТаблицаСчетов = Новый ТаблицаЗначений;
    ТаблицаСчетов_Строка = ТаблицаСчетов.Добавить();
    
    ТаблицаСчетов.Колонки.Добавить("ЕстьДанные");
    ТаблицаСчетов.Колонки.Добавить("НомерСтрокиТЧ");
    ТаблицаСчетов.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("ТаблицаЗначений"));
    
        ТЗ_Заголовок = Новый ТаблицаЗначений;
        Заголок_Строка = ТЗ_Заголовок.Добавить();
        ТЗ_Заголовок.Колонки.Добавить("ЕстьДанные");
        ТЗ_Заголовок.Колонки.Добавить("НомерДокументу");
        ТЗ_Заголовок.Колонки.Добавить("ТипДокументу");
        ТЗ_Заголовок.Колонки.Добавить("КодТипуДокументу");
        ТЗ_Заголовок.Колонки.Добавить("ДатаДокументу");
        ТЗ_Заголовок.Колонки.Добавить("ТермінДії", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_ТермінДії = Новый ТаблицаЗначений;
            ТЗ_ТермінДії.Добавить();
            ТЗ_ТермінДії.Колонки.Добавить("ЕстьДанные");
            ТЗ_ТермінДії.Колонки.Добавить("Початок");
            ТЗ_ТермінДії.Колонки.Добавить("Кінець");
        
        Заголок_Строка.ТермінДії = ТЗ_ТермінДії;
        
        ТЗ_Заголовок.Колонки.Добавить("НомерЗамовлення");
        ТЗ_Заголовок.Колонки.Добавить("ДатаЗамовлення");
        ТЗ_Заголовок.Колонки.Добавить("НомерДоговоруПоставки");
        ТЗ_Заголовок.Колонки.Добавить("ДатаДоговоруПоставки");
        ТЗ_Заголовок.Колонки.Добавить("МісцеСкладання");
        ТЗ_Заголовок.Колонки.Добавить("Коментар", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_Коментар = Новый ТаблицаЗначений;
            ТЗ_Коментар.Добавить();

            ТЗ_Коментар.Колонки.Добавить("ЕстьДанные");
            ТЗ_Коментар.Колонки.Добавить("ІД");
            ТЗ_Коментар.Колонки.Добавить("ІД_Значение");
            
        Заголок_Строка.Коментар = ТЗ_Коментар;
        
        ТЗ_Заголовок.Колонки.Добавить("ДокПідстава", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_ДокПідстава = Новый ТаблицаЗначений;
            ТЗ_ДокПідстава.Добавить();
            ТЗ_ДокПідстава.Колонки.Добавить("ЕстьДанные");
            ТЗ_ДокПідстава.Колонки.Добавить("НомерДокументуПідстави");
            ТЗ_ДокПідстава.Колонки.Добавить("ТипДокументуПідстави");
            ТЗ_ДокПідстава.Колонки.Добавить("КодТипуДокументуПідстави");
            ТЗ_ДокПідстава.Колонки.Добавить("ДатаДокументуПідстави");
            
        Заголок_Строка.ДокПідстава = ТЗ_ДокПідстава;

        ТЗ_Заголовок.Колонки.Добавить("Відповідальний", Новый ОписаниеТипов("ТаблицаЗначений"));
            ТЗ_Відповідальний = Новый ТаблицаЗначений;
            ТЗ_Відповідальний.Добавить();
            ТЗ_Відповідальний.Колонки.Добавить("ЕстьДанные");
            ТЗ_Відповідальний.Колонки.Добавить("ПІБ");
            ТЗ_Відповідальний.Колонки.Добавить("Посада");
        Заголок_Строка.Відповідальний = ТЗ_Відповідальний;


        ТЗ_Заголовок.Колонки.Добавить("Валюта", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_Валюта = Новый ТаблицаЗначений;
            ТЗ_Валюта.Добавить();
            ТЗ_Валюта.Колонки.Добавить("ЕстьДанные");
            ТЗ_Валюта.Колонки.Добавить("КодВалюти");
            ТЗ_Валюта.Колонки.Добавить("КурсВалюти");
            ТЗ_Валюта.Колонки.Добавить("КратністьВалюти");
            
        Заголок_Строка.Валюта = ТЗ_Валюта;
        
    ТаблицаСчетов_Строка.Заголовок = ТЗ_Заголовок;
    
    ТаблицаСчетов.Колонки.Добавить("Сторони", Новый ОписаниеТипов("ТаблицаЗначений"));
    
        ТЗ_Сторони = Новый ТаблицаЗначений;
        Стороны_Строка = ТЗ_Сторони.Добавить();
        ТЗ_Сторони.Колонки.Добавить("ЕстьДанные");
        ТЗ_Сторони.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_Контрагент = Новый ТаблицаЗначений;
            Контрагент_Строка = ТЗ_Контрагент.Добавить();
            ТЗ_Контрагент.Колонки.Добавить("ЕстьДанные");
            ТЗ_Контрагент.Колонки.Добавить("СтатусКонтрагента");
            ТЗ_Контрагент.Колонки.Добавить("ВидОсоби");
            ТЗ_Контрагент.Колонки.Добавить("НазваКонтрагента");
            ТЗ_Контрагент.Колонки.Добавить("КодКонтрагента");
            ТЗ_Контрагент.Колонки.Добавить("ІПН");
            ТЗ_Контрагент.Колонки.Добавить("СвідоцтвоПДВ");
            ТЗ_Контрагент.Колонки.Добавить("МФО");
            ТЗ_Контрагент.Колонки.Добавить("НазваБанку");
            ТЗ_Контрагент.Колонки.Добавить("ПоточРах");
            ТЗ_Контрагент.Колонки.Добавить("Телефон");
            ТЗ_Контрагент.Колонки.Добавить("GUID");
            ТЗ_Контрагент.Колонки.Добавить("GLN");
            ТЗ_Контрагент.Колонки.Добавить("ЮрАдреса", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Адрес = Новый ТаблицаЗначений;
                ТЗ_Адрес.Добавить();
                ТЗ_Адрес.Колонки.Добавить("ЕстьДанные");
                ТЗ_Адрес.Колонки.Добавить("Індекс");
                ТЗ_Адрес.Колонки.Добавить("Область");
                ТЗ_Адрес.Колонки.Добавить("Місто");
                ТЗ_Адрес.Колонки.Добавить("Вулиця");
                
            Контрагент_Строка.ЮрАдреса = ТЗ_Адрес;
            
            ТЗ_Контрагент.Колонки.Добавить("ФактАдреса", Новый ОписаниеТипов("ТаблицаЗначений"));
            Контрагент_Строка.ФактАдреса = ТЗ_Адрес.Скопировать();
            
            ТЗ_Контрагент.Колонки.Добавить("ПоштАдреса", Новый ОписаниеТипов("ТаблицаЗначений"));
            Контрагент_Строка.ПоштАдреса = ТЗ_Адрес.Скопировать(); 

            ТЗ_Контрагент.Колонки.Добавить("Представник", Новый ОписаниеТипов("ТаблицаЗначений"));
                ТЗ_Представник = Новый ТаблицаЗначений;
                ТЗ_Представник.Добавить();
                ТЗ_Представник.Колонки.Добавить("ЕстьДанные");
                ТЗ_Представник.Колонки.Добавить("ПІБ");
                ТЗ_Представник.Колонки.Добавить("Посада");
            Контрагент_Строка.Представник = ТЗ_Представник;

        Стороны_Строка.Контрагент = ТЗ_Контрагент;
        
    ТаблицаСчетов_Строка.Сторони = ТЗ_Сторони;
    
    //Параметры
    ТаблицаСчетов.Колонки.Добавить("Параметри", Новый ОписаниеТипов("ТаблицаЗначений"));
        ТЗ_Параметри = Новый ТаблицаЗначений;
        СтрокаПараметри = ТЗ_Параметри.Добавить();

        ТЗ_Параметри.Колонки.Добавить("ЕстьДанные");
        ТЗ_Параметри.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_Параметр = Новый ТаблицаЗначений;
            ТЗ_Параметр.Добавить();
            ТЗ_Параметр.Колонки.Добавить("ЕстьДанные");
            ТЗ_Параметр.Колонки.Добавить("ІД");
            ТЗ_Параметр.Колонки.Добавить("Атрибут1");
            ТЗ_Параметр.Колонки.Добавить("ЗначениеАтрибута1");
            ТЗ_Параметр.Колонки.Добавить("ІД_Значение"); //здесь значение обязательно должно быть последним, чтобы текст из него был записан последним
            
        СтрокаПараметри.Параметр = ТЗ_Параметр;
            
    ТаблицаСчетов_Строка.Параметри = ТЗ_Параметри;
    
    //Текст
    ТаблицаСчетов.Колонки.Добавить("Текст");
    
    //Таблииця
    ТаблицаСчетов.Колонки.Добавить("Таблиця", Новый ОписаниеТипов("ТаблицаЗначений"));
    
        ТЗ_Таблиця = Новый ТаблицаЗначений;
        Таблиця_Строка = ТЗ_Таблиця.Добавить();
        ТЗ_Таблиця.Колонки.Добавить("ЕстьДанные");
        
        ТЗ_Таблиця.Колонки.Добавить("Рядок", Новый ОписаниеТипов("ТаблицаЗначений"));
        
            ТЗ_Рядок = Новый ТаблицаЗначений;
            Рядок_Строка = ТЗ_Рядок.Добавить();

            ТЗ_Рядок.Колонки.Добавить("ЕстьДанные");
            ТЗ_Рядок.Колонки.Добавить("ІД");
            ТЗ_Рядок.Колонки.Добавить("ІД_Значение");

            ТЗ_Рядок.Колонки.Добавить("НомПоз");
            ТЗ_Рядок.Колонки.Добавить("ВидНоменклатури");
            ТЗ_Рядок.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Штрихкод = Новый ТаблицаЗначений;
                Штрихкод_Строка = ТЗ_Штрихкод.Добавить();
                ТЗ_Штрихкод.Колонки.Добавить("ЕстьДанные");
                ТЗ_Штрихкод.Колонки.Добавить("ІД");
                ТЗ_Штрихкод.Колонки.Добавить("ІД_Значение");
                
            Рядок_Строка.Штрихкод = ТЗ_Штрихкод;
            
            ТЗ_Рядок.Колонки.Добавить("АртикулПокупця");
            ТЗ_Рядок.Колонки.Добавить("АртикулПродавця");
            ТЗ_Рядок.Колонки.Добавить("КодУКТЗЕД");
            ТЗ_Рядок.Колонки.Добавить("Найменування");
            ТЗ_Рядок.Колонки.Добавить("ЗаявленаКількість");
            ТЗ_Рядок.Колонки.Добавить("КількістьПоНакладній");
            ТЗ_Рядок.Колонки.Добавить("ПрийнятаКількість");
            ТЗ_Рядок.Колонки.Добавить("ПоставляємаКількість");
            ТЗ_Рядок.Колонки.Добавить("ОдиницяВиміру");
            ТЗ_Рядок.Колонки.Добавить("БазоваЦіна");
            ТЗ_Рядок.Колонки.Добавить("ПДВ");
            ТЗ_Рядок.Колонки.Добавить("Ціна");
            ТЗ_Рядок.Колонки.Добавить("ЦінаФакт");
            ТЗ_Рядок.Колонки.Добавить("ЦінаПостачальника");
            ТЗ_Рядок.Колонки.Добавить("ЦінаПоДокументу");
            ТЗ_Рядок.Колонки.Добавить("СумаНакладна");
            ТЗ_Рядок.Колонки.Добавить("СумаПрийнято");
            ТЗ_Рядок.Колонки.Добавить("ВсьогоПоРядку", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_ВсьогоПоРядку = Новый ТаблицаЗначений;
                ВсьогоПоРядку_Строка = ТЗ_ВсьогоПоРядку.Добавить();
                ТЗ_ВсьогоПоРядку.Колонки.Добавить("ЕстьДанные");
                ТЗ_ВсьогоПоРядку.Колонки.Добавить("СумаБезПДВ");
                ТЗ_ВсьогоПоРядку.Колонки.Добавить("СумаПДВ");
                ТЗ_ВсьогоПоРядку.Колонки.Добавить("Сума");
                
            Рядок_Строка.ВсьогоПоРядку = ТЗ_ВсьогоПоРядку;
            
            ТЗ_Рядок.Колонки.Добавить("Надлишки", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Надлишки = Новый ТаблицаЗначений;
                Надлишки_Строка = ТЗ_Надлишки.Добавить();
                ТЗ_Надлишки.Колонки.Добавить("ЕстьДанные");
                ТЗ_Надлишки.Колонки.Добавить("Кількісні");
                ТЗ_Надлишки.Колонки.Добавить("Цінові");
                ТЗ_Надлишки.Колонки.Добавить("ПДВ");
                
            Рядок_Строка.Надлишки = ТЗ_Надлишки;
            
            ТЗ_Рядок.Колонки.Добавить("Нестачі", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Нестачі = Новый ТаблицаЗначений;
                Нестачі_Строка = ТЗ_Нестачі.Добавить();
                ТЗ_Нестачі.Колонки.Добавить("ЕстьДанные");
                ТЗ_Нестачі.Колонки.Добавить("Кількісні");
                ТЗ_Нестачі.Колонки.Добавить("Цінові");
                ТЗ_Нестачі.Колонки.Добавить("ПДВ");
                
            Рядок_Строка.Нестачі = ТЗ_Нестачі;
            
            ТЗ_Рядок.Колонки.Добавить("Причина", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Причина = Новый ТаблицаЗначений;
                Причина_Строка = ТЗ_Причина.Добавить();
                ТЗ_Причина.Колонки.Добавить("ЕстьДанные");
                ТЗ_Причина.Колонки.Добавить("Код");
                ТЗ_Причина.Колонки.Добавить("Опис");
                ТЗ_Причина.Колонки.Добавить("Кількість");
                ТЗ_Причина.Колонки.Добавить("ОдиницяВиміру");
                 ТЗ_Причина.Колонки.Добавить("НаСуму");
                
            Рядок_Строка.Причина = ТЗ_Причина;
            
            ТЗ_Рядок.Колонки.Добавить("РозходженняПоРядку", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_РозходженняПоРядку = Новый ТаблицаЗначений;
                РозходженняПоРядку_Строка = ТЗ_РозходженняПоРядку.Добавить();
                ТЗ_РозходженняПоРядку.Колонки.Добавить("ЕстьДанные");
                ТЗ_РозходженняПоРядку.Колонки.Добавить("Ціна");
                ТЗ_РозходженняПоРядку.Колонки.Добавить("Кількість");
                ТЗ_РозходженняПоРядку.Колонки.Добавить("Сума");
                ТЗ_РозходженняПоРядку.Колонки.Добавить("ЦінаНеПрийнята");
                 ТЗ_РозходженняПоРядку.Колонки.Добавить("КількістьНеПрийнята");
                ТЗ_РозходженняПоРядку.Колонки.Добавить("СумаНеПрийнята");
                
            Рядок_Строка.РозходженняПоРядку = ТЗ_РозходженняПоРядку;
            
            ТЗ_Рядок.Колонки.Добавить("ДоПовернення", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_ДоПовернення = Новый ТаблицаЗначений;
                ДоПовернення_Строка = ТЗ_ДоПовернення.Добавить();
                ТЗ_ДоПовернення.Колонки.Добавить("ЕстьДанные");
                ТЗ_ДоПовернення.Колонки.Добавить("Кількість");
                ТЗ_ДоПовернення.Колонки.Добавить("ОдиницяВиміру");
                ТЗ_ДоПовернення.Колонки.Добавить("ПричинаПовернення", Новый ОписаниеТипов("ТаблицаЗначений"));
                
                    ТЗ_ПричинаПовернення = Новый ТаблицаЗначений;
                    ПричинаПовернення_Строка = ТЗ_ПричинаПовернення.Добавить();
                    ТЗ_ПричинаПовернення.Колонки.Добавить("ЕстьДанные");
                    ТЗ_ПричинаПовернення.Колонки.Добавить("Код");
                    ТЗ_ПричинаПовернення.Колонки.Добавить("Опис");
                    
                ДоПовернення_Строка.ПричинаПовернення = ТЗ_ПричинаПовернення;
                
            Рядок_Строка.ДоПовернення = ТЗ_ДоПовернення;
            
            ТЗ_Рядок.Колонки.Добавить("Взаєморозрахунки", Новый ОписаниеТипов("ТаблицаЗначений"));
            
                ТЗ_Взаєморозрахунки = Новый ТаблицаЗначений;
                Взаєморозрахунки_Строка = ТЗ_Взаєморозрахунки.Добавить();
                ТЗ_Взаєморозрахунки.Колонки.Добавить("ЕстьДанные");
                ТЗ_Взаєморозрахунки.Колонки.Добавить("ДатаОперації");
                ТЗ_Взаєморозрахунки.Колонки.Добавить("Дебет");
                ТЗ_Взаєморозрахунки.Колонки.Добавить("Кредит");
                
            Рядок_Строка.Взаєморозрахунки = ТЗ_Взаєморозрахунки;
            
            ТЗ_Рядок.Колонки.Добавить("Текст");
            ТЗ_Рядок.Колонки.Добавить("CтавкаПДВ");
            ТЗ_Рядок.Колонки.Добавить("ВідсотокЗнижки");

        Таблиця_Строка.Рядок = ТЗ_Рядок;
        
    ТаблицаСчетов_Строка.Таблиця = ТЗ_Таблиця;
    
    //ВсьогоПоДокументу
    ТаблицаСчетов.Колонки.Добавить("ВсьогоПоДокументу", Новый ОписаниеТипов("ТаблицаЗначений"));
    
        ТЗ_ВсьогоПоДокументу = Новый ТаблицаЗначений;
        ВсьогоПоДокументу_Строка = ТЗ_ВсьогоПоДокументу.Добавить();
        ТЗ_ВсьогоПоДокументу.Колонки.Добавить("ЕстьДанные");
        ТЗ_ВсьогоПоДокументу.Колонки.Добавить("СумаБезПДВ");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("ПДВ");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("Сума");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("ВсьогоНадлишків");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("ВсьогоНестач");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("Дебет");
           ТЗ_ВсьогоПоДокументу.Колонки.Добавить("Кредит");
        
    ТаблицаСчетов_Строка.ВсьогоПоДокументу = ТЗ_ВсьогоПоДокументу; 
    
    Возврат ТаблицаСчетов;
    
КонецФункции 

Процедура СформироватьФайлXMLПоСтруктуре(ЗаписьXML, ТЗ_XML, ИмяЭлемента = "")
    
    Для Каждого СтрокаТЗ Из ТЗ_XML Цикл
        
        Если СтрокаТЗ.ЕстьДанные <> Истина Тогда
            Продолжить;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
            ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
        КонецЕсли;
                
        Для Каждого КолонкаТЗ Из ТЗ_XML.Колонки Цикл
            
            СтрокаТЗ_ПоКолонке = СтрокаТЗ[КолонкаТЗ.Имя];
            
            Если КолонкаТЗ.Имя = "ЕстьДанные" ИЛИ КолонкаТЗ.Имя = "НомерСтрокиТЧ" Тогда
                Продолжить;    
            ИначеЕсли ТипЗнч(СтрокаТЗ_ПоКолонке) = Тип("ТаблицаЗначений") И СтрокаТЗ_ПоКолонке.Колонки.Найти("ІД") <> Неопределено Тогда
                
                СформироватьФайлXMLПоСтруктуре(ЗаписьXML, СтрокаТЗ_ПоКолонке, КолонкаТЗ.Имя);
                
            ИначеЕсли ТипЗнч(СтрокаТЗ_ПоКолонке) = Тип("ТаблицаЗначений") И СтрокаТЗ_ПоКолонке.Количество() > 0 И СтрокаТЗ_ПоКолонке[0].ЕстьДанные = Истина Тогда
                
                ЗаписьXML.ЗаписатьНачалоЭлемента(КолонкаТЗ.Имя);
                СформироватьФайлXMLПоСтруктуре(ЗаписьXML, СтрокаТЗ_ПоКолонке);
                ЗаписьXML.ЗаписатьКонецЭлемента();
                
            ИначеЕсли КолонкаТЗ.Имя = "ІД" Тогда
                
                //чтобы не заводить доп. колонку в значении ИД хранится сразу и номер и значение, разделены символами "@%$"
                НомерИД = Лев(СтрокаТЗ.ІД_Значение, Найти(СтрокаТЗ.ІД_Значение,"@%$") - 1); 
                
                ЗаписьXML.ЗаписатьАтрибут("ІД", Строка(НомерИД)); 
                
            ИначеЕсли Лев(КолонкаТЗ.Имя, 7) = "Атрибут" Тогда //пришлось вносить колонки атрибутов (для раздела Параметры)
                
                НомерЗначАтрибута = СтрЗаменить(КолонкаТЗ.Имя, "Атрибут", "");
                
                ЗаписьXML.ЗаписатьАтрибут(СтрокаТЗ[КолонкаТЗ.Имя], Строка(СтрокаТЗ["ЗначениеАтрибута" + НомерЗначАтрибута]));
                
            ИначеЕсли КолонкаТЗ.Имя = "ІД_Значение" Тогда
                
                ИДЗнач = Прав(СтрокаТЗ.ІД_Значение, СтрДлина(СтрокаТЗ.ІД_Значение) - Найти(СтрокаТЗ.ІД_Значение,"@%$") - 2);
                
                Если ЗначениеЗаполнено(ИДЗнач) Тогда
                    ЗаписьXML.ЗаписатьТекст(СокрЛП(ИДЗнач));
                КонецЕсли;    
                
            ИначеЕсли Лев(КолонкаТЗ.Имя, 16) = "ЗначениеАтрибута" Тогда
                Продолжить;    
            Иначе    
                
                Если ЗначениеЗаполнено(СтрокаТЗ_ПоКолонке) И ТипЗнч(СтрокаТЗ_ПоКолонке) <> Тип("ТаблицаЗначений") Тогда
                    ЗаписьXML.ЗаписатьНачалоЭлемента(КолонкаТЗ.Имя);
                    ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТЗ_ПоКолонке));
                    ЗаписьXML.ЗаписатьКонецЭлемента();
                КонецЕсли;
                
            КонецЕсли;
        КонецЦикла;    
        
        Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
            ЗаписьXML.ЗаписатьКонецЭлемента();
        КонецЕсли;
    КонецЦикла;
        
КонецПроцедуры

Процедура ЗаполнитьТабФинДок(ТабСчетов, ДокументСсылка, НомерСтроки, ИмяДокумента)
        
    ТабНомераСтрок = Новый ТаблицаЗначений; // техническая таблица, хранит номера строк разделов (для заполнения иерархии таблиц значений)
    ТабНомераСтрок.Колонки.Добавить("Раздел");
    ТабНомераСтрок.Колонки.Добавить("НомерСтроки");
    
    СтруктураДокумента = Новый Структура;
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        СтруктураДокумента = UNF_ЗаполнитьСтруктуруФинДок(ДокументСсылка, ИмяДокумента);    
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда     
        СтруктураДокумента = BP_ЗаполнитьСтруктуруФинДок(ДокументСсылка, ИмяДокумента);
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        СтруктураДокумента = UT_3_ЗаполнитьСтруктуруФинДок(ДокументСсылка, ИмяДокумента);
    Иначе
        Возврат;
    КонецЕсли;
    
    СтрокаШапки = СтруктураДокумента.Шапка[0]; 
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, Строка(НомерСтроки), "НомерСтрокиТЧ");
    
    //Раздел "Заголовок"
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок,"Заголовок", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Номер, "НомерДокументу", "Заголовок");
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, ПолучитьКодТипаДокументаПоСхемеCOMDOC(ТекВидОперации), "КодТипуДокументу", "Заголовок");
    
    Если ТекВидОперации = "Акты" Тогда
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "Акт виконаних робіт", "ТипДокументу", "Заголовок");
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.МестоСоставления, "МісцеСкладання", "Заголовок");
        
    ИначеЕсли ТекВидОперации = "Счета" Тогда     
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "Рахунок-фактура", "ТипДокументу", "Заголовок");
        
    ИначеЕсли ТекВидОперации = "Заказы" Тогда     
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "Заказ", "ТипДокументу", "Заголовок");
        
    ИначеЕсли ТекВидОперации = "Расходные" Тогда     
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "Видаткова накладна", "ТипДокументу", "Заголовок");
        
    КонецЕсли;

    ДобавитьЗначениеВТаблицу(ТабСчетов, Формат(СтрокаШапки.Дата, "ДФ=yyyy-MM-dd"), "ДатаДокументу", "Заголовок");
    
    //"НомерЗамовлення",//"ДатаЗамовлення"
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.НомерДоговора, "НомерДоговоруПоставки", "Заголовок");
    ДобавитьЗначениеВТаблицу(ТабСчетов,    Формат(СтрокаШапки.ДатаДоговора, "ДФ=yyyy-MM-dd"),  "ДатаДоговоруПоставки",  "Заголовок");
    
    //даные по валюте
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Валюта", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.КодВалюты,          "КодВалюти",         "Валюта");
    ДобавитьЗначениеВТаблицу(ТабСчетов, ?(СтрокаШапки.КурсВалюты = 0, 1 , СтрокаШапки.КурсВалюты),      "КурсВалюти",         "Валюта");
    ДобавитьЗначениеВТаблицу(ТабСчетов, ?(СтрокаШапки.КратностьВалюты = 0, 1 , СтрокаШапки.КратностьВалюты), "КратністьВалюти", "Валюта");
    
    Если ЗначениеЗаполнено(СтрокаШапки.Комментарий) Тогда
        
        ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Коментар", 1);
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "Коментар", "ІД", "Коментар");
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, "1@%$" + СтрокаШапки.Комментарий, "ІД_Значение", "Коментар");
        
    КонецЕсли;    

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок,"Відповідальний", 1);
    вОтветственныйФИО = СтрокаШапки.ОтветственныйФИО;
    Если Не ЗначениеЗаполнено(вОтветственныйФИО) Тогда
        вОтветственныйФИО = ФИОПоУмолчанию
    КонецЕсли;
    вОтветственныйДолжность = СтрокаШапки.ОтветственныйДолжность;
    Если Не ЗначениеЗаполнено(вОтветственныйДолжность) Тогда
        вОтветственныйДолжность = ДолжностьПоУмолчанию
    КонецЕсли;
    Если ЗначениеЗаполнено(вОтветственныйФИО) И ЗначениеЗаполнено(вОтветственныйДолжность) Тогда
        ДобавитьЗначениеВТаблицу(ТабСчетов, вОтветственныйФИО,        "ПІБ",        "Відповідальний");
        ДобавитьЗначениеВТаблицу(ТабСчетов, вОтветственныйДолжность, "Посада",    "Відповідальний");
    КонецЕсли;

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Сторони", 1);
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Контрагент", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, "Продавець", "СтатусКонтрагента", "Контрагент");
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ЮрФизЛицо,             "ВидОсоби",         "Контрагент");    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_НаименованиеПолное, "НазваКонтрагента", "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_КодПоЕДРПОУ,         "КодКонтрагента",   "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, ?(ЗначениеЗаполнено(СтрокаШапки.Орг_ИНН),СтрокаШапки.Орг_ИНН, СтрокаШапки.Орг_КодПоЕДРПОУ), "ІПН", "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_НомерСвидетельства, "СвідоцтвоПДВ",     "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.МФО,                     "МФО",                 "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.НазваниеБанка,             "НазваБанку",       "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.НомерСчета,             "ПоточРах",         "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_Телефон,             "Телефон",             "Контрагент"); 
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "ЮрАдреса", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ЮрАдреса_Індекс,  "Індекс",  "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ЮрАдреса_Область, "Область", "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ЮрАдреса_Місто,   "Місто",      "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ЮрАдреса_Вулиця,  "Вулиця",  "ЮрАдреса"); 
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "ФактАдреса", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ФактАдреса_Індекс,  "Індекс",  "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ФактАдреса_Область, "Область", "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ФактАдреса_Місто,   "Місто",   "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ФактАдреса_Вулиця,  "Вулиця",  "ФактАдреса"); 
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "ПоштАдреса", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ПоштАдреса_Індекс,  "Індекс",  "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ПоштАдреса_Область, "Область", "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ПоштАдреса_Місто,   "Місто",   "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Орг_ПоштАдреса_Вулиця,  "Вулиця",  "ПоштАдреса"); 

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок,"Представник", 1);
    ДобавитьЗначениеВТаблицу(ТабСчетов, вОтветственныйФИО,        "ПІБ",        "Представник");
    ДобавитьЗначениеВТаблицу(ТабСчетов, вОтветственныйДолжность, "Посада",    "Представник");

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Контрагент", 2);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, "Покупець", "СтатусКонтрагента", "Контрагент");
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ЮрФизЛицо,           "ВидОсоби",           "Контрагент");    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_НаименованиеПолное, "НазваКонтрагента", "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_КодПоЕДРПОУ,              "КодКонтрагента",   "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, ?(ЗначениеЗаполнено(СтрокаШапки.Контр_ИНН),СтрокаШапки.Контр_ИНН, СтрокаШапки.Контр_КодПоЕДРПОУ), "ІПН", "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_НомерСвидетельства, "СвідоцтвоПДВ",       "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_МФО,                   "МФО",              "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_НазваниеБанка,       "НазваБанку",       "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_НомерСчета,           "ПоточРах",          "Контрагент");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_Телефон,               "Телефон",           "Контрагент");
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ЮрАдреса_Індекс,  "Індекс",  "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ЮрАдреса_Область, "Область", "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ЮрАдреса_Місто,   "Місто",   "ЮрАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ЮрАдреса_Вулиця,  "Вулиця",  "ЮрАдреса"); 
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ФактАдреса_Індекс,  "Індекс",  "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ФактАдреса_Область, "Область", "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ФактАдреса_Місто,   "Місто",   "ФактАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ФактАдреса_Вулиця,  "Вулиця",  "ФактАдреса"); 
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ПоштАдреса_Індекс,  "Індекс",  "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ПоштАдреса_Область, "Область", "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ПоштАдреса_Місто,   "Місто",   "ПоштАдреса"); 
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ПоштАдреса_Вулиця,  "Вулиця",  "ПоштАдреса"); 

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок,"Представник", 1);
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ОтветственныйФИО,        "ПІБ",        "Представник");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.Контр_ОтветственныйДолжность, "Посада",    "Представник");

    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Параметри", 1);
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Параметр", 1);

    //ДобавитьЗначениеВТаблицу(ТабСчетов, "![CDATA[Сформировано с помощью модуля обмена данными Приват24 в сервисе 1c.pb.ua]]", "Текст");
        
    ВыборкаТЧ = СтруктураДокумента.ТабличнаяЧасть;
    
    НомерТЧ = 0;
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Таблиця", 1);
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "ВсьогоПоРядку", 1);
    
    Для Каждого СтрокаВыборки Из ВыборкаТЧ Цикл
        
        НомерТЧ = НомерТЧ + 1;
        
        ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "Рядок", НомерТЧ);
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, Строка(НомерТЧ) + "@%$", "ІД_Значение", "Рядок");
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, Формат(НомерТЧ, "ЧДЦ=; ЧРГ=; ЧГ="), "НомПоз",            "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.Артикул,               "АртикулПродавця",   "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.НаименованиеПолное, "Найменування",        "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.Количество,           "ЗаявленаКількість", "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.ЕдиницаИзмерения,   "ОдиницяВиміру",       "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.ЦенаБезНДС,           "БазоваЦіна",        "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.НДС,                   "ПДВ",                "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.ЦенаСНДС,           "Ціна",                "Рядок");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.ВидНоменклатури,    "ВидНоменклатури",   "Рядок");
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтроковоеПредставлениеСтавкиНДС(СтрокаВыборки.СтавкаНДС), "CтавкаПДВ", "Рядок");
        
        //ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.ПроцентСкидкиНаценки, "ВідсотокЗнижки", "Рядок"); 
        
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.СуммаБезНДС, "СумаБезПДВ", "ВсьогоПоРядку");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.СуммаНДС,    "СумаПДВ",      "ВсьогоПоРядку");
        ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаВыборки.СуммаСНДС,   "Сума",          "ВсьогоПоРядку");
        
        
    КонецЦикла;
    
    ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, "ВсьогоПоДокументу", 1);
    
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.СуммаБезНДС, "СумаБезПДВ", "ВсьогоПоДокументу");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.СуммаНДС,      "ПДВ",        "ВсьогоПоДокументу");
    ДобавитьЗначениеВТаблицу(ТабСчетов, СтрокаШапки.СуммаСНДС,   "Сума",        "ВсьогоПоДокументу");
    
КонецПроцедуры    

Функция ПолучитьКодТипаДокументаПоСхемеCOMDOC(ТипДокумента)
        
    КодТипаДок = "";
    
    СоотвКодовИТиповДок = Новый Соответствие;
    //СоотвКодовИТиповДок.Вставить("АктВыполненныхРабот", "013");
    //СоотвКодовИТиповДок.Вставить("ПриходнаяНакладная", "013");
    //СоотвКодовИТиповДок.Вставить("РеализацияТоваровУслуг", "013");
    //СоотвКодовИТиповДок.Вставить("ПоступлениеТоваровУслуг", "013");
    СоотвКодовИТиповДок.Вставить("Акты", "013");
    
    //СоотвКодовИТиповДок.Вставить("СчетНаОплату%", "016");
    //СоотвКодовИТиповДок.Вставить("СчетНаОплатуПоставщика", "016");
    //СоотвКодовИТиповДок.Вставить("СчетНаОплатуПокупателю", "016");
    СоотвКодовИТиповДок.Вставить("Счета", "016");
    
    //СоотвКодовИТиповДок.Вставить("ЗаказПоставщику", "018");
    //СоотвКодовИТиповДок.Вставить("ЗаказПокупателя", "018");
    СоотвКодовИТиповДок.Вставить("Заказы", "018");
    
    СоотвКодовИТиповДок.Вставить("Расходные", "006");
    
    КодТипаДок = СоотвКодовИТиповДок.Получить(ТипДокумента);
    
    Если КодТипаДок = Неопределено Тогда
        
        КодТипаДок = "";
        
        ТекстСообщения = НСтр("ru='Ошибка при получении кода типа документа установленного схемой выгрузки.';uk='Помилка при отриманні коду типу документа встановленого схемою вивантаження'");
        СообщениеПользователю(ТекстСообщения);
        
    КонецЕсли;
    
    Возврат КодТипаДок;
    
КонецФункции

Процедура ОбновитьЗначениеНомераСтроки(ТабНомераСтрок, ИмяРаздела, НомерСтроки)
    
    СтрокаТаб = ТабНомераСтрок.Найти(ИмяРаздела);
    Если СтрокаТаб = Неопределено Тогда
        СтрокаТаб = ТабНомераСтрок.Добавить();
        СтрокаТаб.Раздел = ИмяРаздела; 
    КонецЕсли;
    СтрокаТаб.НомерСтроки = НомерСтроки;
    
КонецПроцедуры

Функция UNF_ЗаполнитьСтруктуруФинДок(СсылкаНаДокумент, ИмяДокумента)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Док.Номер КАК Номер,
        |    Док.Дата КАК Дата,
        |    Док.Договор.НомерДоговора КАК НомерДоговора,
        |    Док.Договор.ДатаДоговора КАК ДатаДоговора," + 
        
        ?(Метаданные.Справочники.Организации.Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено, 
        "ВЫБОР КОГДА Док.Организация.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Орг_ЮрФизЛицо, ", 
        "ВЫБОР КОГДА Док.Организация.ЮридическоеФизическоеЛицо = Значение(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Орг_ЮрФизЛицо, ") + 
        "    Док.Организация.НаименованиеПолное КАК Орг_НаименованиеПолное,
        |    Док.Организация.КодПоЕДРПОУ КАК Орг_КодПоЕДРПОУ,
        |    Док.Организация.ИНН КАК Орг_ИНН,
        |    Док.Организация.НомерСвидетельства КАК Орг_НомерСвидетельства, " 
        //+ ?(ТекВидОперации = "Акты", " """" КАК МФО, """" КАК НомерСчета, """" КАК НазваниеБанка,", 
        + ?(ТекВидОперации = "Акты", " Док.Организация.БанковскийСчетПоУмолчанию.Банк.Код КАК МФО, Док.Организация.БанковскийСчетПоУмолчанию.НомерСчета КАК НомерСчета, Док.Организация.БанковскийСчетПоУмолчанию.Банк.Наименование КАК НазваниеБанка,", 
        //Док.Организация.БанковскийСчетПоУмолчанию.Банк.Код
        "Док.БанковскийСчет.Банк.Код КАК МФО, Док.БанковскийСчет.НомерСчета КАК НомерСчета, Док.БанковскийСчет.Банк.Наименование КАК НазваниеБанка,") +
        ?(Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ВидКонтрагента") = Неопределено, "  ВЫБОР КОГДА Док.Контрагент.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Контр_ЮрФизЛицо,  ",
        "    ВЫБОР КОГДА Док.Контрагент.ВидКонтрагента = Значение(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Контр_ЮрФизЛицо, ") + 
        "    Док.Контрагент.НаименованиеПолное КАК Контр_НаименованиеПолное,
        |    Док.Контрагент.КодПоЕДРПОУ КАК Контр_КодПоЕДРПОУ,
        |    Док.Контрагент.ИНН КАК Контр_ИНН,
        |    Док.Контрагент.НомерСвидетельства КАК Контр_НомерСвидетельства,
        |   Док.Контрагент.БанковскийСчетПоУмолчанию.НомерСчета КАК Контр_НомерСчета,
        |   Док.Контрагент.БанковскийСчетПоУмолчанию.Банк.Код КАК Контр_МФО,
        |   Док.Контрагент.БанковскийСчетПоУмолчанию.Банк.Наименование КАК Контр_НазваниеБанка,
        |    Док.Комментарий КАК Комментарий,
        |    Док.Ответственный КАК ОтветственныйФИО,
        |    """" КАК ОтветственныйДолжность,
        |    Док.Контрагент.Ответственный КАК Контр_ОтветственныйФИО,
        |    """" КАК Контр_ОтветственныйДолжность,
        |    Док.ВалютаДокумента.Код КАК КодВалюты,
        |    Док.Курс КАК КурсВалюты,
        |    Док.Кратность КАК КратностьВалюты,
        |    0 КАК СуммаБезНДС,
        |    0 КАК СуммаНДС,
        |    0 КАК СуммаСНДС," 
        + ?(ТекВидОперации = "Акты", "Док.МестоСоставленияДокумента", " """" ") + " КАК МестоСоставления,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Область, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Індекс, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Місто, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Вулиця
        |ИЗ
        |    Документ." + СтрЗаменить(ИмяДокумента, "%","") + " КАК Док
        |ГДЕ
        |    Док.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
        
    ШапкаДок = Запрос.Выполнить().Выгрузить();
    
    UNF_ЗаполнитьКИДляCOMDOC(ШапкаДок, СсылкаНаДокумент);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.Артикул = """" Тогда ДокЗапасы.Номенклатура.Код ИНАЧЕ ДокЗапасы.Номенклатура.Артикул КОНЕЦ КАК Артикул,
        //|    ДокЗапасы.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
        |    ВЫБОР КОГДА ВЫРАЗИТЬ(ДокЗапасы.Содержание КАК СТРОКА (150)) = """" ТОГДА Номенклатура.НаименованиеПолное ИНАЧЕ ДокЗапасы.Содержание КОНЕЦ КАК НаименованиеПолное,
        |    ДокЗапасы.Количество КАК Количество,
        |    ДокЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |    ВЫРАЗИТЬ (ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК Число(15,2)) КАК НДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Цена - ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    ИНАЧЕ
        |        ДокЗапасы.Цена
        |    КОНЕЦ КАК ЦенаБезНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |          ДокЗапасы.Цена
        |    ИНАЧЕ
        |        ДокЗапасы.Цена + ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    КОНЕЦ КАК ЦенаСНДС,
        |    ДокЗапасы.СуммаНДС КАК СуммаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма - ДокЗапасы.СуммаНДС
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма 
        |    КОНЕЦ КАК СуммаБезНДС, 
        //|" 
        //+ ?(ТекВидОперации = "АктВыполненныхРабот", "0", "ДокЗапасы.ПроцентСкидкиНаценки") + " КАК ПроцентСкидкиНаценки, 
        |    ДокЗапасы.СтавкаНДС КАК СтавкаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма + ДокЗапасы.СуммаНДС 
        |    КОНЕЦ КАК СуммаСНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Запас) ИЛИ &ТекВидОперации = ""Акты"" Тогда ""Послуга"" ИНАЧЕ  ""Товар"" КОНЕЦ КАК ВидНоменклатури
        |ИЗ
        |    Документ." + СтрЗаменить(ИмяДокумента, "%","")
        + ?(ТекВидОперации = "Акты", ".РаботыИУслуги", ".Запасы") + " КАК ДокЗапасы
        |ГДЕ
        |    ДокЗапасы.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
    Запрос.УстановитьПараметр("ТекВидОперации", ТекВидОперации); 
    
    ТЧДок = Запрос.Выполнить().Выгрузить();
    
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаБезНДС"), "СуммаБезНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаНДС"), "СуммаНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаСНДС"), "СуммаСНДС");
    

    СтруктураВозврата = Новый Структура;
    
    СтруктураВозврата.Вставить("Шапка", ШапкаДок);
    СтруктураВозврата.Вставить("ТабличнаяЧасть", ТЧДок);
    
    Возврат СтруктураВозврата;
    
КонецФункции    

Процедура UNF_ЗаполнитьКИДляCOMDOC(ТабДанных, СсылкаНаДокумент)    
    
    Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
    ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
    ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
    ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;

    Попытка
        Выполнить("ТабДанных.ЗаполнитьЗначения(УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(СсылкаНаДокумент.Организация, Телефон), ""Орг_Телефон"")");
    Исключение
        // BSB
        Выполнить("ТабДанных.ЗаполнитьЗначения(ПечатьДокументовУНФ.КонтактнаяИнформация(СсылкаНаДокумент.Организация, Телефон), ""Орг_Телефон"")")
    КонецПопытки;
    
    СписокПолейАдреса = "";
    Адрес = Новый Структура;
    
    Попытка
        
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Организация, ЮрАдрес)");
        
    Исключение
        
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ЮрАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ЮрАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ЮрАдрес)).ЗначенияПолей");
                //Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.XSLT_СписокЗначенийВСтруктуру(СписокПолейАдреса))")
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;

    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Орг_ЮрАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Орг_ЮрАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Орг_ЮрАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Орг_ЮрАдреса_Вулиця");
    КонецЕсли;
    
    Попытка
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Организация, ФактАдрес)");
    Исключение
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ФактАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ФактАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ФактАдрес)).ЗначенияПолей");
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;
    
    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Орг_ФактАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Орг_ФактАдреса_Область"); 
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Орг_ФактАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Орг_ФактАдреса_Вулиця");
    КонецЕсли;
    
    Попытка
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Организация, ПочтАдрес)");
    Исключение
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ПочтАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ПочтАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ПочтАдрес)).ЗначенияПолей");
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;
    
    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Орг_ПоштАдреса_Індекс"); 
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Орг_ПоштАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Орг_ПоштАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Орг_ПоштАдреса_Вулиця");
    КонецЕсли;
    
    Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
    ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
    ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
    ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;

    Попытка
        Выполнить("ТабДанных.ЗаполнитьЗначения(УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(СсылкаНаДокумент.Контрагент, Телефон), ""Контр_Телефон"")");
    Исключение
        // BSB
        Выполнить("ТабДанных.ЗаполнитьЗначения(ПечатьДокументовУНФ.КонтактнаяИнформация(СсылкаНаДокумент.Организация, Телефон), ""Орг_Телефон"")")
    КонецПопытки;

    Попытка
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Контрагент, ЮрАдрес)");
    Исключение
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ЮрАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ЮрАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ЮрАдрес)).ЗначенияПолей");
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;
    
    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Контр_ЮрАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Контр_ЮрАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение",  Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Контр_ЮрАдреса_Місто"); 
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Контр_ЮрАдреса_Вулиця");
    КонецЕсли;
    
    Попытка
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Контрагент, ФактАдрес)");
    Исключение
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ФактАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ФактАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ФактАдрес)).ЗначенияПолей");
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;

    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Контр_ФактАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Контр_ФактАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", ?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение"), ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Контр_ФактАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Контр_ФактАдреса_Вулиця");
    КонецЕсли;
    
    Попытка
        Выполнить("Адрес = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СсылкаНаДокумент.Контрагент, ПочтАдрес)");
    Исключение
        Попытка
            Выполнить("СписокПолейАдреса = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ПочтАдрес)).ЗначенияПолей");
            Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
        Исключение
            Попытка
                Выполнить("СписокПолейАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Контрагент, ПочтАдрес)).ЗначенияПолей");
                Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СписокПолейАдреса))");
            Исключение
                // BSB
                Выполнить("СписокПолейАдреса = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(ПолучитьЗначенияПолейКонтактнойИнформации(СсылкаНаДокумент.Организация, ПочтАдрес)).ЗначенияПолей");
                Адрес = Новый Структура;
                Для каждого ПолеАдреса Из СписокПолейАдреса Цикл
                    Если ЗначениеЗаполнено(ПолеАдреса.Представление) Тогда
                        Адрес.Вставить(ПолеАдреса.Представление, ПолеАдреса.Значение);
                    КонецЕсли
                КонецЦикла;
                Адрес = ЗаполнитьПустыеЗначениеXMLТипом(Адрес)
            КонецПопытки
        КонецПопытки;
    КонецПопытки;

    Если Адрес.Свойство("Представление") И ЗначениеЗаполнено(Адрес.Представление) И Адрес.Количество() > 3 Тогда
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Контр_ПоштАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Контр_ПоштАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Контр_ПоштАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Контр_ПоштАдреса_Вулиця");
    КонецЕсли;
    
КонецПроцедуры

Функция BP_ЗаполнитьСтруктуруФинДок(СсылкаНаДокумент, ИмяДокумента)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Док.Номер КАК Номер,
        |    Док.Дата КАК Дата,
        |    Док.ДоговорКонтрагента.Номер КАК НомерДоговора,
        |    Док.ДоговорКонтрагента.Дата КАК ДатаДоговора,
        |    ВЫБОР КОГДА Док.Организация.ЮридическоеФизическоеЛицо = Значение(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Орг_ЮрФизЛицо,
        |    Док.Организация.НаименованиеПолное КАК Орг_НаименованиеПолное,
        |    Док.Организация.КодПоЕДРПОУ КАК Орг_КодПоЕДРПОУ,
        |    КодыОрганизаций.ИНН КАК Орг_ИНН,
        |    КодыОрганизаций.НомерСвидетельства КАК Орг_НомерСвидетельства,"
        + ?(ТекВидОперации = "Акты" ИЛИ ТекВидОперации = "Расходные", "Док.БанковскийСчетОрганизации.Банк.Код КАК МФО, Док.БанковскийСчетОрганизации.НомерСчета КАК НомерСчета, Док.БанковскийСчетОрганизации.Банк.Наименование КАК НазваниеБанка,", "
        |    Док.СтруктурнаяЕдиница.Банк.Код КАК МФО, Док.СтруктурнаяЕдиница.НомерСчета КАК НомерСчета, Док.СтруктурнаяЕдиница.Банк.Наименование КАК НазваниеБанка,") + "
        |    ВЫБОР КОГДА Док.Контрагент.ЮридическоеФизическоеЛицо = Значение(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Контр_ЮрФизЛицо,
        |    Док.Контрагент.НаименованиеПолное КАК Контр_НаименованиеПолное,
        |    Док.Контрагент.КодПоЕДРПОУ КАК Контр_КодПоЕДРПОУ,
        |    Док.Контрагент.ИНН КАК Контр_ИНН,
        |    Док.Контрагент.НомерСвидетельства КАК Контр_НомерСвидетельства,
        |   Док.Контрагент.ОсновнойБанковскийСчет.НомерСчета КАК Контр_НомерСчета,
        |   Док.Контрагент.ОсновнойБанковскийСчет.Банк.Код КАК Контр_МФО,
        |   Док.Контрагент.ОсновнойБанковскийСчет.Банк.Наименование КАК Контр_НазваниеБанка,
        |    Док.Комментарий КАК Комментарий,
        |    Док.Ответственный КАК ОтветственныйФИО,
        |    """" КАК ОтветственныйДолжность,
        |    ОтветственныеЛицаКонтрагентов.КонтактноеЛицо КАК Контр_ОтветственныйФИО,
        |    """" КАК Контр_ОтветственныйДолжность,
        |    Док.ВалютаДокумента.Код КАК КодВалюты,
        |    Док.КурсВзаиморасчетов КАК КурсВалюты,
        |    Док.КратностьВзаиморасчетов КАК КратностьВалюты,
        |    0 КАК СуммаБезНДС,
        |    0 КАК СуммаНДС,
        |    0 КАК СуммаСНДС," 
        + ?(ТекВидОперации = "Акты", "Док.МестоСоставленияДокумента", " """" ") + " КАК МестоСоставления,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Область, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Індекс, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Місто, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Вулиця
        |ИЗ
        |    Документ." + ИмяДокумента + " КАК Док
        |    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&Дата) КАК КодыОрганизаций
        |        ПО КодыОрганизаций.Организация = Док.Организация
        |    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних(&Дата) КАК ОтветственныеЛицаКонтрагентов
        |        ПО ОтветственныеЛицаКонтрагентов.Контрагент = Док.Контрагент
        |            И ОтветственныеЛицаКонтрагентов.ОтветственноеЛицо = Значение(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
        |ГДЕ
        |    Док.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
    Запрос.УстановитьПараметр("Дата", СсылкаНаДокумент.Дата);

    ШапкаДок = Запрос.Выполнить().Выгрузить();
        
    BP_ЗаполнитьКИДляCOMDOC(ШапкаДок, СсылкаНаДокумент);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.Артикул = """" Тогда ДокЗапасы.Номенклатура.Код ИНАЧЕ ДокЗапасы.Номенклатура.Артикул КОНЕЦ КАК Артикул,
        |    ДокЗапасы.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
        |    ДокЗапасы.Количество КАК Количество,
        |    ДокЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |    ВЫРАЗИТЬ (ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК Число(15,2)) КАК НДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Цена - ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    ИНАЧЕ
        |        ДокЗапасы.Цена
        |    КОНЕЦ КАК ЦенаБезНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |          ДокЗапасы.Цена
        |    ИНАЧЕ
        |        ДокЗапасы.Цена + ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    КОНЕЦ КАК ЦенаСНДС,
        |    ДокЗапасы.СуммаНДС КАК СуммаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма - ДокЗапасы.СуммаНДС
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма 
        |    КОНЕЦ КАК СуммаБезНДС, 
        |    ДокЗапасы.СтавкаНДС КАК СтавкаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма + ДокЗапасы.СуммаНДС 
        |    КОНЕЦ КАК СуммаСНДС,
        |    ""Товар"" КАК ВидНоменклатури
        |ИЗ
        |    Документ." + ИмяДокумента + ".Товары КАК ДокЗапасы
        |ГДЕ
        |    ДокЗапасы.Ссылка = &Ссылка
        |ОБЪЕДИНИТЬ ВСЕ
        |ВЫБРАТЬ
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.Артикул = """" Тогда ДокЗапасы.Номенклатура.Код ИНАЧЕ ДокЗапасы.Номенклатура.Артикул КОНЕЦ КАК Артикул,
        //|    ДокЗапасы.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
        |    ВЫБОР КОГДА ВЫРАЗИТЬ(ДокЗапасы.Содержание КАК СТРОКА (150)) = """" ТОГДА Номенклатура.НаименованиеПолное ИНАЧЕ ДокЗапасы.Содержание КОНЕЦ КАК НаименованиеПолное,
        |    ДокЗапасы.Количество КАК Количество,
        |    ДокЗапасы.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |    ВЫРАЗИТЬ (ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК Число(15,2)) КАК НДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Цена - ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    ИНАЧЕ
        |        ДокЗапасы.Цена
        |    КОНЕЦ КАК ЦенаБезНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |          ДокЗапасы.Цена
        |    ИНАЧЕ
        |        ДокЗапасы.Цена + ДокЗапасы.СуммаНДС / ДокЗапасы.Количество
        |    КОНЕЦ КАК ЦенаСНДС,
        |    ДокЗапасы.СуммаНДС КАК СуммаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма - ДокЗапасы.СуммаНДС
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма 
        |    КОНЕЦ КАК СуммаБезНДС, 
        |    ДокЗапасы.СтавкаНДС КАК СтавкаНДС,
        |    ВЫБОР КОГДА ДокЗапасы.Ссылка.СуммаВключаетНДС Тогда 
        |        ДокЗапасы.Сумма
        |    ИНАЧЕ
        |        ДокЗапасы.Сумма + ДокЗапасы.СуммаНДС 
        |    КОНЕЦ КАК СуммаСНДС,
        |    ""Послуга"" КАК ВидНоменклатури
        |ИЗ
        |    Документ." + ИмяДокумента + ".Услуги КАК ДокЗапасы
        |ГДЕ
        |    ДокЗапасы.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
    
    ТЧДок = Запрос.Выполнить().Выгрузить();
    
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаБезНДС"), "СуммаБезНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаНДС"), "СуммаНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаСНДС"), "СуммаСНДС");

    СтруктураВозврата = Новый Структура;
    
    СтруктураВозврата.Вставить("Шапка", ШапкаДок);
    СтруктураВозврата.Вставить("ТабличнаяЧасть", ТЧДок);
    
    Возврат СтруктураВозврата;
    
КонецФункции

Функция КонвертацияАдресаДляБУ20(СтруктураАдреса)

    СтруктураАдреса.Корпус = СтруктураАдреса.Город;
    СтруктураАдреса.Город = СтруктураАдреса.Индекс;
    СтруктураАдреса.Индекс = "";
    //СтруктураАдреса.Страна = "";
    СтруктураАдреса.Дом = СтруктураАдреса.Район;
    СтруктураАдреса.Район = "";
    СтруктураАдреса.Квартира = СтруктураАдреса.НаселенныйПункт;
    СтруктураАдреса.НаселенныйПункт = СтруктураАдреса.Индекс;
    СтруктураАдреса.Район = "";
    СтруктураАдреса.Улица = СтруктураАдреса.Регион;
    СтруктураАдреса.Регион = "";

    Возврат СтруктураАдреса

КонецФункции

Процедура BP_ЗаполнитьКИДляCOMDOC(ТабДанных, СсылкаНаДокумент)    
        
    СведенияОПоставщике = "";
    СтруктураАдреса = "";
    
    //данные по организации
    
    Выполнить("СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СсылкаНаДокумент.Организация, СсылкаНаДокумент.Дата)");
    
    Выполнить("ТабДанных.ЗаполнитьЗначения(СведенияОПоставщике.Телефоны, ""Орг_Телефон"")");
    
    Если ЗначениеЗаполнено(СведенияОПоставщике.ЮридическийАдрес) Тогда    

        Попытка
            СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, , Ложь)[0].ЗначенияПолей)
        Исключение
            Выполнить("СтруктураАдреса = ЗарплатаКадрыОбновлениеСПредыдущейРедакции.РазложитьАдрес(СведенияОПоставщике.ЮридическийАдрес)");
            Если Лев(Метаданные.Версия, 3) = "2.0" Тогда
                СтруктураАдреса = КонвертацияАдресаДляБУ20(СтруктураАдреса)
            КонецЕсли
        КонецПопытки;

        СтруктураАдреса.Вставить("Представление", СведенияОПоставщике.ЮридическийАдрес);
        
        Адрес = СтруктураАдреса;
        //Попытка
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СтруктураАдреса))");
        //Исключение
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СтруктураАдреса))");    
        //КонецПопытки;
        Попытка
            Если Адрес.Количество() > 3 Тогда
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Орг_ЮрАдреса_Індекс");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Орг_ЮрАдреса_Область");
                ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Орг_ЮрАдреса_Місто");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Орг_ЮрАдреса_Вулиця");
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецЕсли;

    Если ЗначениеЗаполнено(СведенияОПоставщике.ФактическийАдрес) Тогда    
        Попытка
            СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, , Ложь)[0].ЗначенияПолей)
        Исключение
            Выполнить("СтруктураАдреса = ЗарплатаКадрыОбновлениеСПредыдущейРедакции.РазложитьАдрес(СведенияОПоставщике.ФактическийАдрес)");
            Если Лев(Метаданные.Версия, 3) = "2.0" Тогда
                СтруктураАдреса = КонвертацияАдресаДляБУ20(СтруктураАдреса)
            КонецЕсли
        КонецПопытки;

        СтруктураАдреса.Вставить("Представление", СведенияОПоставщике.ФактическийАдрес);
        
        Адрес = СтруктураАдреса;
        //Попытка
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СтруктураАдреса))");
        //Исключение
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СтруктураАдреса))");    
        //КонецПопытки;
        Попытка
        Если Адрес.Количество() > 3 Тогда
            ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Орг_ФактАдреса_Індекс");
            ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Орг_ФактАдреса_Область");
            ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Орг_ФактАдреса_Місто");
            ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Орг_ФактАдреса_Вулиця");
        КонецЕсли;
        Исключение
        КонецПопытки;
    КонецЕсли;

    //данные по контрагенту
    СведенияОПоставщике = "";
    СтруктураАдреса = "";
    
    Выполнить("СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СсылкаНаДокумент.Контрагент, СсылкаНаДокумент.Дата)");
    
    Выполнить("ТабДанных.ЗаполнитьЗначения(СведенияОПоставщике.Телефоны, ""Контр_Телефон"")");
    
    Если ЗначениеЗаполнено(СведенияОПоставщике.ЮридическийАдрес) Тогда    
        Попытка
            СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, , Ложь)[0].ЗначенияПолей)
        Исключение
            Выполнить("СтруктураАдреса = ЗарплатаКадрыОбновлениеСПредыдущейРедакции.РазложитьАдрес(СведенияОПоставщике.ЮридическийАдрес)");
            Если Лев(Метаданные.Версия, 3) = "2.0" Тогда
                СтруктураАдреса = КонвертацияАдресаДляБУ20(СтруктураАдреса)
            КонецЕсли
        КонецПопытки;
        
        СтруктураАдреса.Вставить("Представление", СведенияОПоставщике.ЮридическийАдрес);
        
        Адрес = СтруктураАдреса;
        //Попытка
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СтруктураАдреса))");
        //Исключение
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СтруктураАдреса))");    
        //КонецПопытки;
        Попытка
            Если Адрес.Количество() > 3 Тогда
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Контр_ЮрАдреса_Індекс");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Контр_ЮрАдреса_Область");
                ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Контр_ЮрАдреса_Місто");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Контр_ЮрАдреса_Вулиця");
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецЕсли;

    Если ЗначениеЗаполнено(СведенияОПоставщике.ФактическийАдрес) Тогда    
        Попытка
            СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, , Ложь)[0].ЗначенияПолей)
        Исключение
            Выполнить("СтруктураАдреса = ЗарплатаКадрыОбновлениеСПредыдущейРедакции.РазложитьАдрес(СведенияОПоставщике.ФактическийАдрес)");
            Если Лев(Метаданные.Версия, 3) = "2.0" Тогда
                СтруктураАдреса = КонвертацияАдресаДляБУ20(СтруктураАдреса)
            КонецЕсли
        КонецПопытки;
        
        СтруктураАдреса.Вставить("Представление", СведенияОПоставщике.ФактическийАдрес);
        
        Адрес = СтруктураАдреса;
        //Попытка
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(КонтактнаяИнформацияXML.СписокЗначенийВСтруктуру(СтруктураАдреса))");
        //Исключение
        //    Выполнить("Адрес = ЗаполнитьПустыеЗначениеXMLТипом(УправлениеКонтактнойИнформациейСлужебный.СписокЗначенийВСтруктуру(СтруктураАдреса))");    
        //КонецПопытки;
        Попытка
            Если Адрес.Количество() > 3 Тогда
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Индекс"), Адрес.Индекс, "&ПустоеЗначение"), "Контр_ФактАдреса_Індекс");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Район"), Адрес.Район, "&ПустоеЗначение"), "Контр_ФактАдреса_Область");
                ТабДанных.ЗаполнитьЗначения(?(?(Адрес.Свойство("НаселенныйПункт"), Адрес.НаселенныйПункт, "&ПустоеЗначение") <> "&ПустоеЗначение", Адрес.НаселенныйПункт, ?(Адрес.Свойство("Город"), Адрес.Город, "&ПустоеЗначение")), "Контр_ФактАдреса_Місто");
                ТабДанных.ЗаполнитьЗначения(?(Адрес.Свойство("Улица"), Адрес.Улица, "&ПустоеЗначение") + ?(?(Адрес.Свойство("Дом"), Адрес.Дом, "&ПустоеЗначение") <> "&ПустоеЗначение", "," + Адрес.Дом, "") + ?(?(Адрес.Свойство("Корпус"), Адрес.Корпус, "&ПустоеЗначение") <> "&ПустоеЗначение", "," +  Адрес.Корпус, "") , "Контр_ФактАдреса_Вулиця");
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецЕсли;
        
КонецПроцедуры

Функция UT_3_ЗаполнитьСтруктуруФинДок(Знач СсылкаНаДокумент, Знач ИмяДокумента)
    
    ИмяРегистраУП = ?(Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаОрганизаций") = Неопределено, "СистемыНалогообложенияОрганизаций","УчетнаяПолитикаОрганизаций");
    
    Если ИмяДокумента = "СчетНаОплатуКлиенту" ИЛИ ИмяДокумента = "ЗаказПоставщику" Тогда
        ИмяРеквизитаБанковскогоСчета = "БанковскийСчет";    
    Иначе
        ИмяРеквизитаБанковскогоСчета = "БанковскийСчетКонтрагента";    
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Док.Номер КАК Номер,
        |    Док.Дата КАК Дата,
        |    Док.Договор.Номер КАК НомерДоговора,
        |    Док.Договор.Дата КАК ДатаДоговора,
        |    ВЫБОР КОГДА Док.Организация.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Орг_ЮрФизЛицо,
        |    Док.Организация.НаименованиеПолное КАК Орг_НаименованиеПолное,
        |    Док.Организация.КодПоЕДРПОУ КАК Орг_КодПоЕДРПОУ,
        |    КодыОрганизаций.ИННПлательщикаНДС КАК Орг_ИНН,
        |    КодыОрганизаций.НомерСвидетельстваПлательщикаНДС КАК Орг_НомерСвидетельства,"
        + ?(ТекВидОперации = "Акты" ИЛИ ТекВидОперации = "Расходные" ИЛИ ИмяДокумента = "РеализацияТоваровУслуг", "Док.БанковскийСчетОрганизации.Банк.Код КАК МФО, Док.БанковскийСчетОрганизации.НомерСчета КАК НомерСчета, Док.БанковскийСчетОрганизации.Банк.Наименование КАК НазваниеБанка,", 
        "    Док.БанковскийСчет.Банк.Код КАК МФО, Док.БанковскийСчет.НомерСчета КАК НомерСчета, Док.БанковскийСчет.Банк.Наименование КАК НазваниеБанка,") + " 
        |    ВЫБОР КОГДА Док.Контрагент.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) Тогда ""Юридична"" ИНАЧЕ ""Фізична"" КОНЕЦ КАК Контр_ЮрФизЛицо,
        |    Док.Контрагент.НаименованиеПолное КАК Контр_НаименованиеПолное,
        |    Док.Контрагент.КодПоЕДРПОУ КАК Контр_КодПоЕДРПОУ,
        |    Док.Контрагент.ИННПлательщикаНДС КАК Контр_ИНН,
        |    Док.Контрагент.НомерСвидетельстваПлательщикаНДС КАК Контр_НомерСвидетельства,
        |   Док." + ИмяРеквизитаБанковскогоСчета + ".НомерСчета КАК Контр_НомерСчета,
        |   Док." + ИмяРеквизитаБанковскогоСчета + ".Банк.Код КАК Контр_МФО,
        |   Док." + ИмяРеквизитаБанковскогоСчета + ".Банк.Наименование КАК Контр_НазваниеБанка,
        |    Док.Комментарий КАК Комментарий,
        |    Док.Менеджер КАК ОтветственныйФИО,
        |    """" КАК ОтветственныйДолжность,
        |    """" КАК Контр_ОтветственныйФИО,
        |    """" КАК Контр_ОтветственныйДолжность,
        |    Док.Валюта.Код КАК КодВалюты,
        |    1 КАК КурсВалюты,
        |    1 КАК КратностьВалюты,
        |    0 КАК СуммаБезНДС,
        |    0 КАК СуммаНДС,
        |    0 КАК СуммаСНДС," 
        + ?(ТекВидОперации = "Акты", "Док.МестоСоставленияДокумента", " """" ") + " КАК МестоСоставления,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Область, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Індекс, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Орг_ПоштАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_Телефон,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Місто, 
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ЮрАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ФактАдреса_Вулиця,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Індекс,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Область,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Місто,
        |    ВЫРАЗИТЬ ("""" КАК СТРОКА (200)) КАК Контр_ПоштАдреса_Вулиця
        |ИЗ
        |    Документ." + ИмяДокумента + " КАК Док
        |    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраУП + ".СрезПоследних(&Дата) КАК КодыОрганизаций
        |        ПО КодыОрганизаций.Организация = Док.Организация
        |ГДЕ
        |    Док.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
    Запрос.УстановитьПараметр("Дата", СсылкаНаДокумент.Дата);

    ШапкаДок = Запрос.Выполнить().Выгрузить();
    
    UT_3_ЗаполнитьКИДляCOMDOC(ШапкаДок, СсылкаНаДокумент);
    
    Если ИмяДокумента = "СчетНаОплатуКлиенту" Тогда //замена на ТЧ документа основания.
        
        ИмяДокумента = СсылкаНаДокумент.ДокументОснование.метаданные().Имя;
        СсылкаНаДокумент = СсылкаНаДокумент.ДокументОснование;
        
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "" +  ?(ТекВидОперации = "Акты", "" , "ВЫБРАТЬ
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.Артикул = """" Тогда ДокЗапасы.Номенклатура.Код ИНАЧЕ ДокЗапасы.Номенклатура.Артикул КОНЕЦ КАК Артикул,
        |    ДокЗапасы.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
        |    ДокЗапасы.Количество КАК Количество,
        |    ДокЗапасы.Упаковка КАК ЕдиницаИзмерения,
        |    ВЫРАЗИТЬ (ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК Число(15,2)) КАК НДС,
        |    ДокЗапасы.Цена КАК ЦенаБезНДС,
        |    ДокЗапасы.Цена + ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК ЦенаСНДС,
        |    ДокЗапасы.СуммаНДС КАК СуммаНДС,
        |    ДокЗапасы.Сумма КАК СуммаБезНДС, 
        |    ДокЗапасы.СтавкаНДС КАК СтавкаНДС,
        |    ДокЗапасы.СуммаСНДС КАК СуммаСНДС,
        |    ""Товар"" КАК ВидНоменклатури
        |ИЗ
        |    Документ." + ИмяДокумента + ".Товары КАК ДокЗапасы
        |ГДЕ
        |    ДокЗапасы.Ссылка = &Ссылка
        |") + 
        
        ?(ЗначениеЗаполнено(Запрос.Текст), "ОБЪЕДИНИТЬ ВСЕ ", "") +
        
        ?(ТекВидОперации <> "Акты", "" , 
        "ВЫБРАТЬ
        |    ВЫБОР КОГДА ДокЗапасы.Номенклатура.Артикул = """" Тогда ДокЗапасы.Номенклатура.Код ИНАЧЕ ДокЗапасы.Номенклатура.Артикул КОНЕЦ КАК Артикул,
        |    ВЫБОР КОГДА ВЫРАЗИТЬ(ДокЗапасы.Содержание КАК СТРОКА (150)) = """" ТОГДА Номенклатура.НаименованиеПолное ИНАЧЕ ДокЗапасы.Содержание КОНЕЦ КАК НаименованиеПолное,
        |    ДокЗапасы.Количество КАК Количество,
        |    ДокЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |    ВЫРАЗИТЬ (ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК Число(15,2)) КАК НДС,
        |    ДокЗапасы.Цена КАК ЦенаБезНДС,
        |    ДокЗапасы.Цена + ДокЗапасы.СуммаНДС / ДокЗапасы.Количество КАК ЦенаСНДС,
        |    ДокЗапасы.СуммаНДС КАК СуммаНДС,
        |    ДокЗапасы.Сумма КАК СуммаБезНДС, 
        |    ДокЗапасы.СтавкаНДС КАК СтавкаНДС,
        |    ДокЗапасы.СуммаСНДС КАК СуммаСНДС,
        |    ""Послуга"" КАК ВидНоменклатури
        |ИЗ
        |    Документ." + ИмяДокумента + ".Услуги КАК ДокЗапасы
        |ГДЕ
        |    ДокЗапасы.Ссылка = &Ссылка");
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
    
    ТЧДок = Запрос.Выполнить().Выгрузить();
    
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаБезНДС"), "СуммаБезНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаНДС"), "СуммаНДС");
    ШапкаДок.ЗаполнитьЗначения(ТЧДок.Итог("СуммаСНДС"), "СуммаСНДС");

    СтруктураВозврата = Новый Структура;
    
    СтруктураВозврата.Вставить("Шапка", ШапкаДок);
    СтруктураВозврата.Вставить("ТабличнаяЧасть", ТЧДок);
    
    Возврат СтруктураВозврата;
    
КонецФункции

Процедура UT_3_ЗаполнитьКИДляCOMDOC(ТабДанных, СсылкаНаДокумент)    
    
    Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
    ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
    ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
    ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;

    лИндекс = "";
    лРайон = "";
    лНасПункт = "";
    лГород = "";
    лУлица = "";
    лДом = "";
    лКорпус = "";
    
    лОрганизация = СсылкаНаДокумент.Организация;
    
    ТаблицаКонтактнойИнформации = лОрганизация.КонтактнаяИнформация.Выгрузить();

    // юр адрес
    ВидКИ = ЮрАдрес.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
    
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    УКИ = "";
    
    Выполнить("УКИ = УправлениеКонтактнойИнформацией");
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        
        НайденныеСтроки = НайденныеСтроки[0];
        
        СтруткураАдреса = УКИ.ПредыдущаяСтруктураКонтактнойИнформацииXML(НайденныеСтроки.ЗначенияПолей);
        
        Попытка
            лИндекс = СтруткураАдреса.Индекс;
        Исключение
        КонецПопытки;
        
        Попытка
            лРайон = СтруткураАдреса.Район;
        Исключение
        КонецПопытки;
        
        Попытка
            лНасПункт = СтруткураАдреса.НаселенныйПункт;
        Исключение
        КонецПопытки;
        
        Попытка
            лГород = СтруткураАдреса.Город;
        Исключение
        КонецПопытки;
        
        Попытка
            лУлица = СтруткураАдреса.Улица;
        Исключение
        КонецПопытки;
        
        Попытка
            лДом = СтруткураАдреса.Дом;
        Исключение
        КонецПопытки;
        
        Попытка
            лКорпус = СтруткураАдреса.Корпус;
        Исключение
        КонецПопытки;
        
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лИндекс), лИндекс, "&ПустоеЗначение"), "Орг_ЮрАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лРайон), лРайон, "&ПустоеЗначение"), "Орг_ЮрАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лНасПункт), лНасПункт, "") + " " + ?(НЕ ПустаяСтрока(лГород), лГород, "&ПустоеЗначение"), "Орг_ЮрАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лУлица), лУлица, "") + " " + ?(НЕ ПустаяСтрока(лДом), лДом, "") + " " + ?(НЕ ПустаяСтрока(лКорпус), лКорпус, ""),  "Орг_ЮрАдреса_Вулиця");
        
    КонецЕсли;
    
    // факт адрес
    ВидКИ = ФактАдрес.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
    
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        
        НайденныеСтроки = НайденныеСтроки[0];
        
        СтруткураАдреса = УКИ.ПредыдущаяСтруктураКонтактнойИнформацииXML(НайденныеСтроки.ЗначенияПолей);
        
        Попытка
            лИндекс = СтруткураАдреса.Индекс;
        Исключение
        КонецПопытки;
        
        Попытка
            лРайон = СтруткураАдреса.Район;
        Исключение
        КонецПопытки;
        
        Попытка
            лНасПункт = СтруткураАдреса.НаселенныйПункт;
        Исключение
        КонецПопытки;
        
        Попытка
            лГород = СтруткураАдреса.Город;
        Исключение
        КонецПопытки;
        
        Попытка
            лУлица = СтруткураАдреса.Улица;
        Исключение
        КонецПопытки;
        
        Попытка
            лДом = СтруткураАдреса.Дом;
        Исключение
        КонецПопытки;
        
        Попытка
            лКорпус = СтруткураАдреса.Корпус;
        Исключение
        КонецПопытки;
        
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лИндекс), лИндекс, "&ПустоеЗначение"), "Орг_ФактАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лРайон), лРайон, "&ПустоеЗначение"), "Орг_ФактАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лНасПункт), лНасПункт, "") + " " + ?(НЕ ПустаяСтрока(лГород), лГород, "&ПустоеЗначение"), "Орг_ФактАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лУлица), лУлица, "") + " " + ?(НЕ ПустаяСтрока(лДом), лДом, "") + " " + ?(НЕ ПустаяСтрока(лКорпус), лКорпус, ""),  "Орг_ФактАдреса_Вулиця");
        
    КонецЕсли;
    
    // почт адрес
    ВидКИ = ПочтАдрес.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
    
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        
        НайденныеСтроки = НайденныеСтроки[0];
        
        СтруткураАдреса = УКИ.ПредыдущаяСтруктураКонтактнойИнформацииXML(НайденныеСтроки.ЗначенияПолей);
        
        Попытка
            лИндекс = СтруткураАдреса.Индекс;
        Исключение
        КонецПопытки;
        
        Попытка
            лРайон = СтруткураАдреса.Район;
        Исключение
        КонецПопытки;
        
        Попытка
            лНасПункт = СтруткураАдреса.НаселенныйПункт;
        Исключение
        КонецПопытки;
        
        Попытка
            лГород = СтруткураАдреса.Город;
        Исключение
        КонецПопытки;
        
        Попытка
            лУлица = СтруткураАдреса.Улица;
        Исключение
        КонецПопытки;
        
        Попытка
            лДом = СтруткураАдреса.Дом;
        Исключение
        КонецПопытки;
        
        Попытка
            лКорпус = СтруткураАдреса.Корпус;
        Исключение
        КонецПопытки;
        
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лИндекс), лИндекс, "&ПустоеЗначение"), "Орг_ПоштАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лРайон), лРайон, "&ПустоеЗначение"), "Орг_ПоштАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лНасПункт), лНасПункт, "") + " " + ?(НЕ ПустаяСтрока(лГород), лГород, "&ПустоеЗначение"), "Орг_ПоштАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лУлица), лУлица, "") + " " + ?(НЕ ПустаяСтрока(лДом), лДом, "") + " " + ?(НЕ ПустаяСтрока(лКорпус), лКорпус, ""),  "Орг_ПоштАдреса_Вулиця");
        
    КонецЕсли;
    
    // телефон
    ВидКИ = Телефон.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    Если НайденныеСтроки.Количество() > 0 Тогда
        ТабДанных.ЗаполнитьЗначения(НайденныеСтроки[0].НомерТелефона, "Орг_Телефон");
    КонецЕсли;
    
    
    //контрагент
    Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
    ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
    ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
    
    лКонтрагент = СсылкаНаДокумент.Контрагент;
    
    ТаблицаКонтактнойИнформации = лКонтрагент.КонтактнаяИнформация.Выгрузить();

    // юр адрес
    ВидКИ = ЮрАдрес.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
    
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        
        НайденныеСтроки = НайденныеСтроки[0];
        
        СтруткураАдреса = УКИ.ПредыдущаяСтруктураКонтактнойИнформацииXML(НайденныеСтроки.ЗначенияПолей);
        
        Попытка
            лИндекс = СтруткураАдреса.Индекс;
        Исключение
        КонецПопытки;
        
        Попытка
            лРайон = СтруткураАдреса.Район;
        Исключение
        КонецПопытки;
        
        Попытка
            лНасПункт = СтруткураАдреса.НаселенныйПункт;
        Исключение
        КонецПопытки;
        
        Попытка
            лГород = СтруткураАдреса.Город;
        Исключение
        КонецПопытки;
        
        Попытка
            лУлица = СтруткураАдреса.Улица;
        Исключение
        КонецПопытки;
        
        Попытка
            лДом = СтруткураАдреса.Дом;
        Исключение
        КонецПопытки;
        
        Попытка
            лКорпус = СтруткураАдреса.Корпус;
        Исключение
        КонецПопытки;
        
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лИндекс), лИндекс, "&ПустоеЗначение"), "Контр_ЮрАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лРайон), лРайон, "&ПустоеЗначение"), "Контр_ЮрАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лНасПункт), лНасПункт, "") + " " + ?(НЕ ПустаяСтрока(лГород), лГород, "&ПустоеЗначение"), "Контр_ЮрАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лУлица), лУлица, "") + " " + ?(НЕ ПустаяСтрока(лДом), лДом, "") + " " + ?(НЕ ПустаяСтрока(лКорпус), лКорпус, ""),  "Контр_ЮрАдреса_Вулиця");
        
    КонецЕсли;
    
    // факт адрес
    ВидКИ = ФактАдрес.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
    
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        
        НайденныеСтроки = НайденныеСтроки[0];
        
        СтруткураАдреса = УКИ.ПредыдущаяСтруктураКонтактнойИнформацииXML(НайденныеСтроки.ЗначенияПолей);
        
        Попытка
            лИндекс = СтруткураАдреса.Индекс;
        Исключение
        КонецПопытки;
        
        Попытка
            лРайон = СтруткураАдреса.Район;
        Исключение
        КонецПопытки;
        
        Попытка
            лНасПункт = СтруткураАдреса.НаселенныйПункт;
        Исключение
        КонецПопытки;
        
        Попытка
            лГород = СтруткураАдреса.Город;
        Исключение
        КонецПопытки;
        
        Попытка
            лУлица = СтруткураАдреса.Улица;
        Исключение
        КонецПопытки;
        
        Попытка
            лДом = СтруткураАдреса.Дом;
        Исключение
        КонецПопытки;
        
        Попытка
            лКорпус = СтруткураАдреса.Корпус;
        Исключение
        КонецПопытки;
        
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лИндекс), лИндекс, "&ПустоеЗначение"), "Контр_ФактАдреса_Індекс");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лРайон), лРайон, "&ПустоеЗначение"), "Контр_ФактАдреса_Область");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лНасПункт), лНасПункт, "") + " " + ?(НЕ ПустаяСтрока(лГород), лГород, "&ПустоеЗначение"), "Контр_ФактАдреса_Місто");
        ТабДанных.ЗаполнитьЗначения(?(НЕ ПустаяСтрока(лУлица), лУлица, "") + " " + ?(НЕ ПустаяСтрока(лДом), лДом, "") + " " + ?(НЕ ПустаяСтрока(лКорпус), лКорпус, ""),  "Контр_ФактАдреса_Вулиця");
        
    КонецЕсли;

    // телефон
    ВидКИ = Телефон.Ссылка;
    ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
    НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
    Если НайденныеСтроки.Количество() > 0 Тогда
        ТабДанных.ЗаполнитьЗначения(НайденныеСтроки[0].НомерТелефона, "Контр_Телефон");
    КонецЕсли;
    
КонецПроцедуры

Функция ДобавитьЗначениеВТаблицу(ТаблицаXML, ЗначениеРеквиизта, ИмяРеквизита, ИмяРаздела = "")
    
    УспешноЗаполнено = Ложь;
    
    Если Не ЗначениеЗаполнено(ЗначениеРеквиизта) Тогда
        Возврат  УспешноЗаполнено;
    КонецЕсли;    

    Если ЗначениеЗаполнено(ИмяРаздела) Тогда
        
        КолонкаРаздела = ТаблицаXML.Колонки.Найти(ИмяРаздела);
        
        Если КолонкаРаздела <> Неопределено Тогда
            
            СтрокаНомера = ТабНомераСтрок.Найти(ИмяРаздела);
            
            Если СтрокаНомера <> Неопределено Тогда
                СтрокаТаб = Добавить_ПолучитьСтрокуВТабСтруктурыCOMDOC(ТаблицаXML, СтрокаНомера.НомерСтроки); //берем первую строку и идем внутрь таблицы    
            Иначе
                Возврат  УспешноЗаполнено;
            КонецЕсли;
            
            Если ТипЗнч(СтрокаТаб[ИмяРаздела]) = Тип("ТаблицаЗначений") Тогда
                УспешноЗаполнено = УстановитьЗначениеРеквизитаТаблицы(СтрокаТаб[ИмяРаздела], ИмяРеквизита, ЗначениеРеквиизта);
                СтрокаТаб.ЕстьДанные = Истина;
            КонецЕсли;
            
        Иначе
            Для Каждого КолонкаТЗ Из ТаблицаXML.Колонки Цикл
                
                МассивТипов = КолонкаТЗ.ТипЗначения.Типы();
                
                Если МассивТипов.Найти(Тип("ТаблицаЗначений")) = Неопределено Тогда
                    Продолжить;    
                КонецЕсли;
                
                СтрокаНомера = ТабНомераСтрок.Найти(КолонкаТЗ.Имя);
                
                Если СтрокаНомера <> Неопределено Тогда
                    СтрокаТаб = Добавить_ПолучитьСтрокуВТабСтруктурыCOMDOC(ТаблицаXML, СтрокаНомера.НомерСтроки); //берем первую строку и идем внутрь таблицы    
                Иначе
                    Возврат  УспешноЗаполнено;
                КонецЕсли;
                
                Если ТипЗнч(СтрокаТаб[КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда    
                    УспешноЗаполнено = ДобавитьЗначениеВТаблицу(СтрокаТаб[КолонкаТЗ.Имя], ЗначениеРеквиизта, ИмяРеквизита, ИмяРаздела);    
                Иначе    
                    Возврат  УспешноЗаполнено;    
                КонецЕсли;    
            КонецЦикла;
        КонецЕсли;
        
    ИначеЕсли ТаблицаXML.Колонки.Найти(ИмяРеквизита) <> Неопределено Тогда
        
        Если ТипЗнч(ЗначениеРеквиизта) = Тип("Число") Тогда
            ТаблицаXML[0][ИмяРеквизита] = Формат(ЗначениеРеквиизта, "ЧДЦ=2; ЧРД=.; ЧГ=");    
        Иначе
            ТаблицаXML[0][ИмяРеквизита] = СокрЛП(Строка(ЗначениеРеквиизта));
        КонецЕсли;
        
        ТаблицаXML[0].ЕстьДанные = Истина;
        УспешноЗаполнено =  Истина;
        
    КонецЕсли;    
        
    Возврат УспешноЗаполнено;
    
КонецФункции    

Функция УстановитьЗначениеРеквизитаТаблицы(Таблица, ИмяРеквизита, ЗначениеРеквиизта)
    
    Если Таблица.Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;    
    
    Если Таблица.Количество() = 0 Тогда
        СтрокаТаб = Таблица.Добавить();
    Иначе
        СтрокаТаб = Таблица[Таблица.Количество() - 1]; //берем последнюю строку таблицы    
    КонецЕсли;    
    
    Если ЗначениеЗаполнено(СтрокаТаб[ИмяРеквизита]) Тогда //проверяем заполнено ли в ней уже нужное значение
        СтрокаТаб = Таблица.Добавить();
    КонецЕсли;
    
    Если ТипЗнч(ЗначениеРеквиизта) = Тип("Число") Тогда
        СтрокаТаб[ИмяРеквизита] = Формат(ЗначениеРеквиизта, "ЧДЦ=2; ЧРД=.; ЧГ=");    
    ИначеЕсли ЗначениеРеквиизта = "&ПустоеЗначение" Тогда
        СтрокаТаб[ИмяРеквизита] = "";
    Иначе    
        СтрокаТаб[ИмяРеквизита] = СокрЛП(Строка(ЗначениеРеквиизта));
    КонецЕсли;
    
    СтрокаТаб.ЕстьДанные = Истина;
    
    Возврат Истина;
    
КонецФункции

Функция Добавить_ПолучитьСтрокуВТабСтруктурыCOMDOC(ТаблицаXML, НомерСтроки)    
    
    Если ТаблицаXML.Количество() < НомерСтроки Тогда
        
        СтрокаТаб = ТаблицаXML.Добавить();
        
        ПроинициализироватьТаблицыЗначений(СтрокаТаб, ТаблицаXML); 
        
    Иначе
        СтрокаТаб = ТаблицаXML[НомерСтроки - 1];
    КонецЕсли;
    
    Возврат СтрокаТаб;
    
КонецФункции    

Процедура ПроинициализироватьТаблицыЗначений(СтрокаПриемник, ТаблицаИсходник)
    
    //после добавления строки нужно проинициализировать все вложенные таблицы значений, т.е. добавить колонки
    Для Каждого КолонкаТЗ Из ТаблицаИсходник.Колонки Цикл
        Если ТипЗнч(ТаблицаИсходник[0][КолонкаТЗ.Имя]) = Тип("ТаблицаЗначений") Тогда    
            СтрокаПриемник[КолонкаТЗ.Имя] = ТаблицаИсходник[0][КолонкаТЗ.Имя].СкопироватьКолонки();
            ПроинициализироватьТаблицыЗначений(СтрокаПриемник[КолонкаТЗ.Имя].Добавить(), ТаблицаИсходник[0][КолонкаТЗ.Имя]);
        КонецЕсли;    
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначенияПолейКонтактнойИнформации(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
    
    СтруктураПустогоАдреса = Новый Структура;
    СтруктураПустогоАдреса.Вставить("Представление","");
    СтруктураПустогоАдреса.Вставить("Состав",Неопределено);
    
    Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
        
        ТаблицаИсточник = "Организации";
        
    ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
        
        ТаблицаИсточник = "ФизическиеЛица";
        
    ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда
        
        ТаблицаИсточник = "Контрагенты";
        
    Иначе 
        
        Возврат СтруктураПустогоАдреса;
        
    КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
    Запрос.УстановитьПараметр("Вид",    ВидИнформации);
    
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    КонтактнаяИнформация.ЗначенияПолей,
    |    КонтактнаяИнформация.Представление
    |ИЗ
    |    Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
    |ГДЕ
    |    КонтактнаяИнформация.Вид = &Вид
    |    И КонтактнаяИнформация.Ссылка = &Объект";

    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат СтруктураПустогоАдреса;
    Иначе
        ЗначенияПолей = РезультатЗапроса.Выгрузить()[0].ЗначенияПолей;
        
        ЭтоКИ = Ложь;
        Попытка
            Выполнить("ЭтоКИ = КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей)");
        Исключение
            // BASC, ...
            Выполнить("ЭтоКИ = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей)");
        КонецПопытки;    
            
        
        Если ЭтоКИ Тогда
            Возврат ЗначенияПолей;
        Иначе
            СообщениеПользователю(НСтр("ru = 'Внимание! Обнаружен старый формат адреса. Проверьте заполнение - '; uk = 'Увага! Виявлений старий формат адреси. Перевірте заповнення - '", Ложь) + ОбъектКонтактнойИнформации);
            Возврат СтруктураПустогоАдреса;
        КонецЕсли;    
    КонецЕсли;
    
КонецФункции 

Функция ЗаполнитьПустыеЗначениеXMLТипом(Структура)
    
    Для Каждого СтрокаСтр Из Структура Цикл
        
        Если НЕ ЗначениеЗаполнено(СтрокаСтр.Значение) Тогда
            Структура.Вставить(СтрокаСтр.Ключ, "&ПустоеЗначение");
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Структура;
    
КонецФункции

Процедура ПрочитатьДанныеФинДокИзФайла(АдресВременногоХранилища) Экспорт
    
    ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
    // получаем имя временного файла в локальной ФС на сервере
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
    // получаем файл правил для зачитки
    ДвоичныеДанные.Записать(ИмяВременногоФайла);
    ДвоичныеДанные = Неопределено;
    
    СтруктураФинДок = ПолучитьДеревоФинДокПоXML(ИмяВременногоФайла, Истина);
    
    Текст = Новый ТекстовыйДокумент;
    Попытка
        Текст.Прочитать(ИмяВременногоФайла);
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Неправильный формат xml.';uk='Помилка при завантаженні файлу. Невірний формат xml.'")
            + Символы.ПС + ОписаниеОшибки());
        Возврат
    КонецПопытки;
    
    ЗаполнитьСтрокуТаблицыПоФинДокXML(СтруктураФинДок, Текст.ПолучитьТекст());
    
КонецПроцедуры    

Функция ПолучитьДеревоФинДокПоXML(ТекстXML, ЭтоФайл = Ложь)
    
    РезультатДерево = Новый ДеревоЗначений;
    РезультатДерево.Колонки.Добавить("НазваниеУзла");
    РезультатДерево.Колонки.Добавить("ЗначениеУзла");
    
    ЧтениеXML = Новый ЧтениеXML;
    
    Если ЭтоФайл Тогда
        ЧтениеXML.ОткрытьФайл(ТекстXML);
    Иначе    
        ЧтениеXML.УстановитьСтроку(ТекстXML);
    КонецЕсли;
    
    Попытка
        ЧтениеXML.Прочитать();
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Неправильный формат xml.';uk='Помилка при завантаженні файлу. Невірний формат xml.'")
            + Символы.ПС + ОписаниеОшибки());
        Возврат РезультатДерево;
    КонецПопытки;    
    
    МассивОткрытыхСтрок = Новый Массив;
    ПоследняяОткрытаяСтрока = Неопределено;

    Попытка

        Пока ЧтениеXML.Прочитать() Цикл
            
            Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
                  Если МассивОткрытыхСтрок.Количество() Тогда
                      Родитель = МассивОткрытыхСтрок[МассивОткрытыхСтрок.Количество()-1];
                Иначе
                      Родитель = РезультатДерево;
                КонецЕсли;
                ПоследняяОткрытаяСтрока = Родитель.Строки.Добавить();
                ПоследняяОткрытаяСтрока.НазваниеУзла = ЧтениеXML.Имя;
                МассивОткрытыхСтрок.Добавить(ПоследняяОткрытаяСтрока);
                
                Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
                    Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
                        
                        Если ЧтениеXML.Имя = "ІД" Тогда 
                            Продолжить;
                        КонецЕсли;
                        
                        ПоследняяОткрытаяСтрока.НазваниеУзла = ПоследняяОткрытаяСтрока.НазваниеУзла + "@%$" + ЧтениеXML.Имя + "=" + ЧтениеXML.Значение; 
                    КонецЦикла;
                КонецЕсли;
                
            ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
                  ПоследняяОткрытаяСтрока.ЗначениеУзла = ЧтениеXML.Значение;
            ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
                  Если МассивОткрытыхСтрок.Количество() Тогда
                      МассивОткрытыхСтрок.Удалить(МассивОткрытыхСтрок.Количество()-1);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;

    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Неправильный формат xml.';uk='Помилка при завантаженні файлу. Невірний формат xml.'")
            + Символы.ПС + ОписаниеОшибки());
        Возврат РезультатДерево
    КонецПопытки;

    Возврат РезультатДерево;
    
КонецФункции

Процедура ЗаполнитьСтрокуТаблицыПоФинДокXML(СтруктураФинДок, ТекстXML)
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураФинДок.Строки.НайтиСтроки(ПараметрыПоиска);
    
    Если НайденныеСтроки.Количество() = 0 Тогда //если данных в заголовке нет - прерываем функцию
        Возврат;
    КонецЕсли;    
    
    ТекСтрокиДЗ = НайденныеСтроки[0];
    
    КодТипаДокумента = ПолучитьЗначениеПоДеревуИзXML("КодТипуДокументу", ТекСтрокиДЗ);
    
    Если НЕ ЗначениеЗаполнено(КодТипаДокумента) Тогда
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Возможно выбран файл неверной структуры.';uk='Помилка при завантаженні файлу. Можливо, вибрано файл невірної структури'"));
        Возврат;
    КонецЕсли;    
    
    Если ПолучитьКодТипаДокументаПоСхемеCOMDOC(ТекВидОперации) <> КодТипаДокумента Тогда
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Неверный тип документа.';uk='Помилка при завантаженні файлу.Невірний тип документа'"));
        Возврат;
    КонецЕсли;
    
    НоваяСтрока = ФинансовыеДокументы.Добавить();
    ТипФинДок = СтрЗаменить(ИмяТипаФинДокПоРазделу(ТекВидОперации, Истина), "%", "");    
    
    НоваяСтрока.ИмяДокумента = ТипФинДок; 
    НоваяСтрока.XML = ТекстXML;
    НоваяСтрока.ИдентификаторКартинки = 5; //такой картинки нет, так надо
    
    НоваяСтрока.ВходящийНомер = ПолучитьЗначениеПоДеревуИзXML("НомерДокументу", ТекСтрокиДЗ);
    НоваяСтрока.Комментарий   = ПолучитьЗначениеПоДеревуИзXML("Коментар",         ТекСтрокиДЗ);    
    НоваяСтрока.Дата          = Дата(СтрЗаменить(ПолучитьЗначениеПоДеревуИзXML("ДатаДокументу",    ТекСтрокиДЗ),"-",""));
    
    НоваяСтрока.ВалютаДокумента = НайтиВалюту(ПолучитьЗначениеПоДеревуИзXML("КодВалюти", ПолучитьЗначениеПоДеревуИзXML("Валюта", ТекСтрокиДЗ, Истина)));
    
    лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", ТекСтрокиДЗ);
    лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", ТекСтрокиДЗ);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Контрагент");
    НайденныеСтроки = СтруктураФинДок.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        Если ПолучитьЗначениеПоДеревуИзXML("СтатусКонтрагента", СтрокаДЗ) = "Продавець" Тогда
            
            СтруктураПоиска = Новый Структура;
            
            КодКонтрагента = "";
            КодКонтрагента = ПолучитьЗначениеПоДеревуИзXML("КодКонтрагента", СтрокаДЗ);
            СтруктураПоиска.Вставить("КодПоЕДРПОУ", КодКонтрагента);
            
            Если КодКонтрагента = "" Тогда 
                КодКонтрагента = ПолучитьЗначениеПоДеревуИзXML("ІПН", СтрокаДЗ);
                СтруктураПоиска.Вставить("КодИНН", КодКонтрагента);
            КонецЕсли;    
            
            СтруктураПоиска.Вставить("КодКонтрагента", КодКонтрагента);
            СтруктураПоиска.Вставить("СчетКонтрагента", ПолучитьЗначениеПоДеревуИзXML("ПоточРах", СтрокаДЗ));
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", ПолучитьЗначениеПоДеревуИзXML("НазваКонтрагента", СтрокаДЗ));
            
            СтруктураПоиска.Вставить("ЮрФиз", ПолучитьЗначениеПоДеревуИзXML("ВидОсоби", СтрокаДЗ));
            
            СтруктураПоиска.Вставить("НомерСвидетельства", ПолучитьЗначениеПоДеревуИзXML("СвідоцтвоПДВ", СтрокаДЗ));
            
            ТаблицаКИ = Новый ТаблицаЗначений;
            
            ТаблицаКИ.Колонки.Добавить("Вид");
            ТаблицаКИ.Колонки.Добавить("Вулиця");
            ТаблицаКИ.Колонки.Добавить("Місто");
            ТаблицаКИ.Колонки.Добавить("Область");
            ТаблицаКИ.Колонки.Добавить("Індекс");
            
            //юр. адрес
            ЮрАдр = ПолучитьЗначениеПоДеревуИзXML("ЮрАдреса", СтрокаДЗ);
            
            Если ЗначениеЗаполнено(ЮрАдр) Тогда
                Вулиця = ПолучитьЗначениеПоДеревуИзXML("Вулиця", ЮрАдр);
                Місто = ПолучитьЗначениеПоДеревуИзXML("Місто", ЮрАдр);
                Область = ПолучитьЗначениеПоДеревуИзXML("Область", ЮрАдр);
                Індекс = ПолучитьЗначениеПоДеревуИзXML("Індекс", ЮрАдр);
            КонецЕсли;    
            
            Если ЗначениеЗаполнено(Вулиця) Тогда
                
                НоваяСтрокаКИ = ТаблицаКИ.Добавить();
                НоваяСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
                
                НоваяСтрокаКИ.Вулиця = Вулиця;
                НоваяСтрокаКИ.Місто = Місто;
                НоваяСтрокаКИ.Область = Область;
                НоваяСтрокаКИ.Індекс = Індекс;

            КонецЕсли;
            
            //факт. адрес
            ФактАдр = ПолучитьЗначениеПоДеревуИзXML("ФактАдреса", СтрокаДЗ);
            
            Если ЗначениеЗаполнено(ФактАдр) Тогда
                Вулиця = ПолучитьЗначениеПоДеревуИзXML("Вулиця", ФактАдр);
                Місто = ПолучитьЗначениеПоДеревуИзXML("Місто", ФактАдр);
                Область = ПолучитьЗначениеПоДеревуИзXML("Область", ФактАдр);
                Індекс = ПолучитьЗначениеПоДеревуИзXML("Індекс", ФактАдр);
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Вулиця) Тогда
                
                НоваяСтрокаКИ = ТаблицаКИ.Добавить();
                НоваяСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
                
                НоваяСтрокаКИ.Вулиця = Вулиця;
                НоваяСтрокаКИ.Місто = Місто;
                НоваяСтрокаКИ.Область = Область;
                НоваяСтрокаКИ.Індекс = Індекс;

            КонецЕсли;
            
            //поч. адрес
            ПочАдр = ПолучитьЗначениеПоДеревуИзXML("ПоштАдреса", СтрокаДЗ);
            
            Если ЗначениеЗаполнено(ПочАдр) Тогда
                Вулиця = ПолучитьЗначениеПоДеревуИзXML("Вулиця", ПочАдр);
                Місто = ПолучитьЗначениеПоДеревуИзXML("Місто", ПочАдр);
                Область = ПолучитьЗначениеПоДеревуИзXML("Область", ПочАдр);
                Індекс = ПолучитьЗначениеПоДеревуИзXML("Індекс", ПочАдр);
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Вулиця) Тогда
                
                НоваяСтрокаКИ = ТаблицаКИ.Добавить();
                НоваяСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
                
                НоваяСтрокаКИ.Вулиця = Вулиця;
                НоваяСтрокаКИ.Місто = Місто;
                НоваяСтрокаКИ.Область = Область;
                НоваяСтрокаКИ.Індекс = Індекс;

            КонецЕсли;
            
            Покупатель = Истина;
            Если ТекВидОперации = "Счета" ИЛИ ТекВидОперации = "Заказы" ИЛИ ТекВидОперации = "Расходные" Тогда
                Покупатель = Истина;        
            ИначеЕсли ТекВидОперации = "Акты" Тогда
                Покупатель = Ложь;    
            КонецЕсли;    
            
            СтруктураДоговора = Новый Структура;
            СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
            СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
            
            НоваяСтрока.Контрагент = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, Покупатель, ТаблицаКИ, СтруктураДоговора);
            
            Если ЗначениеЗаполнено(Контрагент) Тогда //фильтр по выбранному контрагенту
                Если НоваяСтрока.Контрагент <> Контрагент Тогда
                    СообщениеПользователю(НСтр("ru = 'Контрагент по загружаемому документу не совпадает с контрагентом указанном в фильтре для заполнения счетов. Документ не загружен!'; 
                    |uk = 'Контрагент з завантажуваного документу не збігається з контрагентом зазначеному у фільтрі для заповнення рахунків. Документ не завантажений'"), Ложь);
                    
                    ФинансовыеДокументы.Удалить(ФинансовыеДокументы.Количество() - 1);
                    Возврат;
                КонецЕсли;    
            КонецЕсли;
            
        ИначеЕсли ПолучитьЗначениеПоДеревуИзXML("СтатусКонтрагента", СтрокаДЗ) = "Покупець" Тогда
            
            КодКонтрагента = "";
            КодКонтрагента = ПолучитьЗначениеПоДеревуИзXML("КодКонтрагента", СтрокаДЗ);
            Если КодКонтрагента = "" Тогда 
                КодКонтрагента = ПолучитьЗначениеПоДеревуИзXML("ІПН", СтрокаДЗ);
            КонецЕсли;
            
            Если КодКонтрагента <> КодПоЕДРПОУ И КодКонтрагента <> ИНН Тогда
                СообщениеПользователю(НСтр("ru = 'Организация по загружаемому документу не совпадает с организацией указанной в параметрах импорта. Документ не загружен!'; 
                |uk = 'Організація з завантажуваного документу не збігається з організацією зазначеної в параметрах імпорту. Документ не завантажений'"), Ложь);
                
                ФинансовыеДокументы.Удалить(ФинансовыеДокументы.Количество() - 1);
                Возврат;
            КонецЕсли;
             
        КонецЕсли;
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    НайденныеСтроки = СтруктураФинДок.Строки.НайтиСтроки(ПараметрыПоиска);
    
    Если НайденныеСтроки.Количество() = 0 Тогда //если данных в заголовке нет - прерываем функцию
        Возврат;
    КонецЕсли;    
    
    ТекСтрокиДЗ = НайденныеСтроки[0];
    НоваяСтрока.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", ТекСтрокиДЗ);
    
    ЗаполнитьСсылкуНаФинДок(ТипФинДок, НоваяСтрока);
    
КонецПроцедуры        

Процедура ЗаполнитьСсылкуНаФинДок(ТипФинДок, НоваяСтрока)
    
    ДокуменСсылкаВБазе = Неопределено;
    
    СтруктураПоиска = Новый Структура;
    СтруктураПоиска.Вставить("ДатаВходящегоДокумента", НоваяСтрока.Дата);
    СтруктураПоиска.Вставить("НомерВходящегоДокумента", НоваяСтрока.ВходящийНомер);
    СтруктураПоиска.Вставить("СуммаДокумента", НоваяСтрока.СуммаДокумента);
    СтруктураПоиска.Вставить("Контрагент", НоваяСтрока.Контрагент);

    
    Если ТекВидОперации = "Счета" Тогда
        
        Если ИдКонф = "UNF" ИЛИ ИдКонф = "BP" Или ИдКонф = "BASC" Или ИдКонф = "BSB" Тогда
            
            ДокуменСсылкаВБазе = UNF_BP_НайтиСчетПоставщика(СтруктураПоиска);
            
        КонецЕсли;
        
    ИначеЕсли ТекВидОперации = "Акты" ИЛИ ТекВидОперации = "Расходные" Тогда 
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            
            ДокуменСсылкаВБазе = UNF_НайтиПриходнуюНакдадную(СтруктураПоиска);
            
        ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
            ДокуменСсылкаВБазе = BP_НайтиПриходнуюНакдадную(СтруктураПоиска);
            
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
            ДокуменСсылкаВБазе = UT_3_НайтиПриходнуюНакдадную(СтруктураПоиска);
        
        КонецЕсли;
        
    ИначеЕсли ТекВидОперации = "Заказы" Тогда 
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            
            ДокуменСсылкаВБазе = UNF_НайтиЗаказПокупателя(СтруктураПоиска);
            
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
            
            ДокуменСсылкаВБазе = UT_3_НайтиЗаказПокупателя(СтруктураПоиска);
            
        КонецЕсли;
        
    КонецЕсли;
        
    Если ЗначениеЗаполнено(ДокуменСсылкаВБазе) Тогда
        НоваяСтрока.Номер = ДокуменСсылкаВБазе.Номер;
        НоваяСтрока.СсылкаНаДокумент = ДокуменСсылкаВБазе; 
        
        Если ДокуменСсылкаВБазе.Проведен Тогда
            НоваяСтрока.ИдентификаторКартинки = 0;
        ИначеЕсли ДокуменСсылкаВБазе.ПометкаУдаления Тогда
            НоваяСтрока.ИдентификаторКартинки = 1;
        Иначе
            НоваяСтрока.ИдентификаторКартинки = 2;    
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры    

Функция UNF_BP_НайтиСчетПоставщика(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    СчетНаОплатуПоставщика.Ссылка
        |ИЗ
        |    Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
        |ГДЕ
        |    СчетНаОплатуПоставщика.Контрагент = &Контрагент
        |    И СчетНаОплатуПоставщика.СуммаДокумента = &СуммаДокумента
        |    И СчетНаОплатуПоставщика.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |    И СчетНаОплатуПоставщика.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |    И НЕ СчетНаОплатуПоставщика.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция UNF_НайтиПриходнуюНакдадную(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.ПриходнаяНакладная.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПриходнаяНакладная.Ссылка
        |ИЗ
        |    Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
        |ГДЕ
        |    ПриходнаяНакладная.Контрагент = &Контрагент
        |    И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
        |    И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |    И ПриходнаяНакладная.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |    И НЕ ПриходнаяНакладная.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция BP_НайтиПриходнуюНакдадную(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПриходнаяНакладная.Ссылка
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг КАК ПриходнаяНакладная
        |ГДЕ
        |    ПриходнаяНакладная.Контрагент = &Контрагент
        |    И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
        |    И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |    И ПриходнаяНакладная.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |    И НЕ ПриходнаяНакладная.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция UT_3_НайтиПриходнуюНакдадную(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ПриходнаяНакладная.Ссылка
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг КАК ПриходнаяНакладная
        |ГДЕ
        |    ПриходнаяНакладная.Контрагент = &Контрагент
        |    И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
        |    И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |    И ПриходнаяНакладная.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |    И НЕ ПриходнаяНакладная.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция UNF_НайтиЗаказПокупателя(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.ЗаказПокупателя.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ЗаказПокупателя.Ссылка
        |ИЗ
        |    Документ.ЗаказПокупателя КАК ЗаказПокупателя
        |ГДЕ
        |    ЗаказПокупателя.Контрагент = &Контрагент
        |    И ЗаказПокупателя.СуммаДокумента = &СуммаДокумента
        |    И ВЫРАЗИТЬ(ЗаказПокупателя.Комментарий КАК СТРОКА(250)) ПОДОБНО  &НомерВходящегоДокумента
        |    И ЗаказПокупателя.Дата = &ДатаВходящегоДокумента
        |    И НЕ ЗаказПокупателя.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", "%" + СтруктураПоиска.НомерВходящегоДокумента + "%");
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция UT_3_НайтиЗаказПокупателя(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.ЗаказКлиента.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    ЗаказПокупателя.Ссылка
        |ИЗ
        |    Документ.ЗаказКлиента КАК ЗаказПокупателя
        |ГДЕ
        |    ЗаказПокупателя.Контрагент = &Контрагент
        |    И ЗаказПокупателя.СуммаДокумента = &СуммаДокумента
        |    И НомерПоДаннымКлиента = &НомерВходящегоДокумента
        |    И ЗаказПокупателя.Дата = &ДатаВходящегоДокумента
        |    И НЕ ЗаказПокупателя.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция ПолучитьЗначениеПоДеревуИзXML(ИмяСвойства, СтрокиДЗ, ПоискВнутрь = Ложь)
    
    Если НЕ ЗначениеЗаполнено(СтрокиДЗ) Тогда
        Возврат "";
    КонецЕсли;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", ИмяСвойства);
    НайденныеСтроки = СтрокиДЗ.Строки.НайтиСтроки(ПараметрыПоиска);
    
    Если НайденныеСтроки.Количество() <> 0 Тогда
        
        ВозврЗнач = "";
        
        Если НайденныеСтроки[0].ЗначениеУзла = Неопределено Тогда
            Если ПоискВнутрь Тогда
                ВозврЗнач = НайденныеСтроки[0]; //будем искать дальше
            Иначе    
                ВозврЗнач = "";
            КонецЕсли;    
        Иначе
            ВозврЗнач = НайденныеСтроки[0].ЗначениеУзла;            
        КонецЕсли;
        
        Возврат ВозврЗнач;
    Иначе
        Возврат "";
    КонецЕсли;

КонецФункции 

Функция ЗаписатьВходящиеФинДок(ТипДок) Экспорт
    
    ДействиеАналитики = "ФинДокЗагрузка";
    
    Для каждого СтрокаТЧ из ФинансовыеДокументы Цикл //цикл прерывается каждый раз, и начинается заново для оставшихся строк
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        СтрокаТЧ.КартинкаОшибки = 0;
        СтрокаТЧ.ТекстОшибки = "";
        
        ЕстьОтмеченные = Истина;
        
        СтрокаТЧ.Флажок = Ложь;
        
        ВыпВЦикле = Ложь;
        
        Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И НЕ ПерезаполнятьНайденныеДокументы Тогда
            
            ТекстСообщения = НСтр("ru = 'Документ отмеченный в строке №%НомерСтроки% уже был загружен ранее.'; uk = 'Документ зазначений у рядку №%НомерСтроки% вже був завантажений раніше.' ");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            
            СообщениеПользователю(ТекстСообщения, Ложь);
            
            СтрокаТЧ.КартинкаОшибки = 2;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            Продолжить;
            
        КонецЕсли;
        
        Если ТипДок = "Счета" Тогда //входящий счет
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                ВыпВЦикле = Истина;
                UNF_ЗаписатьВходящийСчет(СтрокаТЧ);
                
            ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда     
                
                ВыпВЦикле = Истина;
                BP_ЗаписатьВходящийСчет(СтрокаТЧ);
                    
            КонецЕсли;
            
        ИначеЕсли ТипДок = "Акты" Тогда //входящий Акт
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                ВыпВЦикле = Истина;
                UNF_ЗаписатьПриходнаяНакладная(СтрокаТЧ);
                
            ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
                
                ВыпВЦикле = Истина;
                BP_ЗаписатьПриходнаяНакладная(СтрокаТЧ);
                
            ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                
                ВыпВЦикле = Истина;
                UT_3_ЗаписатьПриходнаяНакладная(СтрокаТЧ);    
                
            КонецЕсли;
            
        ИначеЕсли ТипДок = "Заказы" Тогда //заказ пркупателя
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                ВыпВЦикле = Истина;
                UNF_ЗаписатьЗаказПокупателя(СтрокаТЧ);
                
            ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда 
                
                ВыпВЦикле = Истина;
                UT_3_ЗаписатьЗаказПокупателя(СтрокаТЧ);
                
            КонецЕсли;
            
        ИначеЕсли ТипДок = "Расходные" Тогда //
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                ВыпВЦикле = Истина;
                UNF_ЗаписатьПриходнаяНакладная(СтрокаТЧ, Ложь);
                
            ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
                
                ВыпВЦикле = Истина;
                BP_ЗаписатьПриходнаяНакладная(СтрокаТЧ, Ложь);
                
            ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
                
                ВыпВЦикле = Истина;
                UT_3_ЗаписатьПриходнаяНакладная(СтрокаТЧ);    
                
            КонецЕсли;    
            
        КонецЕсли;
        
        Возврат ВыпВЦикле;
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для записи!'; uk = 'Немає відмічених документів для запису!'"), Ложь);
    Иначе
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);    
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    ЕстьОшибки = Ложь;
    
    Возврат Ложь;
    
КонецФункции    

Процедура UNF_ЗаписатьВходящийСчет(СтрокаТЧ)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();    
    КонецЕсли;
    Попытка
        НовыйДок.Организация = Организация;
    Исключение
    КонецПопытки;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.ВалютаДокумента = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "Валюта");
        НайденныеСтрокиВалюты = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        Для Каждого СтрокаВалюты Из НайденныеСтрокиВалюты Цикл
            НовыйДок.Курс = ПолучитьЗначениеПоДеревуИзXML("КурсВалюти", СтрокаВалюты);
            НовыйДок.Кратность = ПолучитьЗначениеПоДеревуИзXML("КратністьВалюти", СтрокаВалюты); 
        КонецЦикла;
        
        Если НовыйДок.Курс = 0 Тогда
            
            ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовыйДок.Дата, Новый Структура("Валюта", НовыйДок.ВалютаДокумента));
            
            Если ЗначениеЗаполнено(ВалютаКурсКратность.Курс) Тогда
                НовыйДок.Курс = ВалютаКурсКратность.Курс;
                НовыйДок.Кратность = ВалютаКурсКратность.Кратность;    
            Иначе
                НовыйДок.Курс = 1;
                НовыйДок.Кратность = 1;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.Договор = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйДок.Договор.ВидЦенКонтрагента), НовыйДок.Договор.ВидЦенКонтрагента.ЦенаВключаетНДС, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда    
            ЕстьНДС = Истина;
            НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    НовыйДок.Запасы.Очистить();
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        НоваяСтрокаТЧ = НовыйДок.Запасы.Добавить();
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = Неопределено;    
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры);
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        НоваяСтрокаТЧ.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.СуммаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
            
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
            НоваяСтрокаТЧ.Всего = НоваяСтрокаТЧ.Сумма + ?(НовыйДок.СуммаВключаетНДС, 0, НоваяСтрокаТЧ.СуммаНДС);
            
        КонецЦикла;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры    

Процедура UNF_ЗаписатьПриходнаяНакладная(СтрокаТЧ, ЭтоАкт = Истина)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.ПриходнаяНакладная.СоздатьДокумент();    
    КонецЕсли;
    
    Попытка
        НовыйДок.Организация = Организация;
    Исключение
    КонецПопытки;
    НовыйДок.Комментарий = "Загружено из Приват24";
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.ВалютаДокумента = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    НовыйДок.СтруктурнаяЕдиница = Склад;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ); 
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "Валюта");
        НайденныеСтрокиВалюты = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        Для Каждого СтрокаВалюты Из НайденныеСтрокиВалюты Цикл
            НовыйДок.Курс = ПолучитьЗначениеПоДеревуИзXML("КурсВалюти", СтрокаВалюты);
            НовыйДок.Кратность = ПолучитьЗначениеПоДеревуИзXML("КратністьВалюти", СтрокаВалюты); 
        КонецЦикла;
        
        Если НовыйДок.Курс = 0 Тогда
            
            ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовыйДок.Дата, Новый Структура("Валюта", НовыйДок.ВалютаДокумента));
            
            Если ЗначениеЗаполнено(ВалютаКурсКратность.Курс) Тогда
                НовыйДок.Курс = ВалютаКурсКратность.Курс;
                НовыйДок.Кратность = ВалютаКурсКратность.Кратность;    
            Иначе
                НовыйДок.Курс = 1;
                НовыйДок.Кратность = 1;
            КонецЕсли;
            
        КонецЕсли;    

    КонецЦикла;
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.Договор = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйДок.Договор.ВидЦенКонтрагента), НовыйДок.Договор.ВидЦенКонтрагента.ЦенаВключаетНДС, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда
            ЕстьНДС = Истина;
            НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НовыйДок.Расходы.Очистить();
    НовыйДок.Запасы.Очистить();
    
    
    
    ЗначениеНастройки = Неопределено;
    
    Выполнить("ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновноеПодразделение"")");
    
    Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
        ТекПодразделение = ЗначениеНастройки;
    Иначе
        ТекПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;    
    КонецЕсли;
    
    //НовыйДок.Расходы.Очистить();
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        Если ЭтоАкт Тогда
            НоваяСтрокаТЧ = НовыйДок.Расходы.Добавить();
            НоваяСтрокаТЧ.СтруктурнаяЕдиница = ТекПодразделение;
        Иначе    
            НоваяСтрокаТЧ = НовыйДок.Запасы.Добавить();
        КонецЕсли;
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ);
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = ?(ЭтоАкт, "Послуга", "Товар");
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры);
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        НоваяСтрокаТЧ.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.СуммаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
                    
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
            НоваяСтрокаТЧ.Всего = НоваяСтрокаТЧ.Сумма + ?(НовыйДок.СуммаВключаетНДС, 0, НоваяСтрокаТЧ.СуммаНДС);
            
        КонецЦикла;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура BP_ЗаписатьПриходнаяНакладная(СтрокаТЧ, ЭтоАкт = Истина)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();    
    КонецЕсли;
    
    НовыйДок.Организация = Организация;
    НовыйДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
    
    ДанныеЗаполнения = Новый Структура;
    ДанныеЗаполнения.Вставить("ВидОперации", НовыйДок.ВидОперации);
    ДанныеЗаполнения.Вставить("Организация", НовыйДок.Организация);

    Выполнить("ЗаполнениеДокументов.Заполнить(НовыйДок, ДанныеЗаполнения)");
    
    НовыйДок.Комментарий = "Загружено из Приват24";
    НовыйДок.Дата = СтрокаТЧ.Дата;
    
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.ВалютаДокумента = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ); 
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "Валюта");
        НайденныеСтрокиВалюты = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        Для Каждого СтрокаВалюты Из НайденныеСтрокиВалюты Цикл
            НовыйДок.КурсВзаиморасчетов = ПолучитьЗначениеПоДеревуИзXML("КурсВалюти", СтрокаВалюты);
            НовыйДок.КратностьВзаиморасчетов = ПолучитьЗначениеПоДеревуИзXML("КратністьВалюти", СтрокаВалюты); 
        КонецЦикла;
        
        Если НовыйДок.КурсВзаиморасчетов = 0 Тогда
            
            ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовыйДок.Дата, Новый Структура("Валюта", НовыйДок.ВалютаДокумента));
            
            Если ЗначениеЗаполнено(ВалютаКурсКратность.Курс) Тогда
                НовыйДок.КурсВзаиморасчетов = ВалютаКурсКратность.Курс;
                НовыйДок.КратностьВзаиморасчетов = ВалютаКурсКратность.Кратность;    
            Иначе
                НовыйДок.КурсВзаиморасчетов = 1;
                НовыйДок.КратностьВзаиморасчетов = 1;
            КонецЕсли;
            
        КонецЕсли;    

    КонецЦикла;
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.ДоговорКонтрагента = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйДок.ДоговорКонтрагента.ТипЦен), НовыйДок.ДоговорКонтрагента.ТипЦен.ЦенаВключаетНДС, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда
            ЕстьНДС = Истина;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(НовыйДок);
    
    НовыйДок.Услуги.Очистить(); 
    НовыйДок.Товары.Очистить();
    
    ЗначениеНастройки = Неопределено;
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = ?(ЭтоАкт, "Послуга", "Товар");
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры); 
        
        Если ТипНоменклатуры = "Послуга" Тогда
            
            НоваяСтрокаТЧ = НовыйДок.Услуги.Добавить();    
            
        Иначе
            
            НоваяСтрокаТЧ = НовыйДок.Товары.Добавить();    
            
            НоваяСтрокаТЧ.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);    
            
        КонецЕсли;
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.СуммаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
                        
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
        КонецЦикла;
        
        СведенияОНоменклатуре = "";
        
        ДанныеОбъекта = Новый Структура(                                      
        "Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС, Ссылка,
        |ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
        |РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия");
        ЗаполнитьЗначенияСвойств(ДанныеОбъекта, НовыйДок);
        
        ДанныеОбъекта.РассчитыватьСуммаВРознице  = Ложь;
        ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице = Ложь;
        ДанныеОбъекта.ЭтоКомиссия                = Ложь;
            
        Выполнить("СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(НоваяСтрокаТЧ.Номенклатура, ДанныеОбъекта)");
        
        Если ТипНоменклатуры = "Послуга" Тогда
            Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, НоваяСтрокаТЧ, "Услуги", СведенияОНоменклатуре);
        Иначе
            Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, НоваяСтрокаТЧ, "Товары", СведенияОНоменклатуре);        
        КонецЕсли;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура UT_3_ЗаписатьПриходнаяНакладная(СтрокаТЧ, ЭтоАкт = Истина)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();    
    КонецЕсли;
    
    НовыйДок.Организация = Организация;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.Валюта = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.ВалютаВзаиморасчетов = НовыйДок.Валюта; 
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    НовыйДок.Партнер = НовыйДок.Контрагент.Партнер;
    НовыйДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
    НовыйДок.ЗаполнитьУсловияЗакупокПоУмолчанию();
    НовыйДок.ДатаПлатежа = ТекущаяДатаСеанса();
    
    НовыйДок.Комментарий = "Загружено из Приват24";
    
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ); 

    КонецЦикла;
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.Договор = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда
            ЕстьНДС = Истина;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НовыйДок.Товары.Очистить();
    
    Выполнить("НовыйДок.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию(""ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки""), Истина)");
    
    Если ЗначениеЗаполнено(Склад) Тогда
        НовыйДок.Склад = Склад; 
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(НовыйДок.ДатаПлатежа) Тогда
        НовыйДок.ДатаПлатежа = ТекущаяДатаСеанса();
    КонецЕсли;
    
    НовыйДок.Менеджер = Пользователи.ТекущийПользователь();
    
    СтруктураОтветственного = Неопределено;
    
    Выполнить("СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(НовыйДок.Склад, НовыйДок.Менеджер)");
    
    Если СтруктураОтветственного <> Неопределено Тогда
        НовыйДок.Принял = СтруктураОтветственного.Ответственный;
        НовыйДок.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
    КонецЕсли;
    
    ЗначениеНастройки = Неопределено;
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = ?(ЭтоАкт, "Послуга", "Товар");
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры); 
        
        НоваяСтрокаТЧ = НовыйДок.Товары.Добавить();    
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
            
            ЗаполнитьЦенуИСуммыДокумента(Ложь, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
            НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.Сумма + НоваяСтрокаТЧ.СуммаНДС;
            
            Если ЭтоАкт Тогда
                
                НоваяСтрокаТЧ.Подразделение = Подразделение;
                НоваяСтрокаТЧ.АналитикаРасходов = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж;
                
            КонецЕсли;
            
            
            СтруктураДействий = Новый Структура;
            СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
            
            Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЧ, СтруктураДействий, Неопределено)");
            
        КонецЦикла;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура UNF_ЗаписатьЗаказПокупателя(СтрокаТЧ)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.ЗаказПокупателя.СоздатьДокумент();    
    КонецЕсли;
    
    Попытка
        НовыйДок.Организация = Организация;
    Исключение
    КонецПопытки;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.ДатаОтгрузки = СтрокаТЧ.Дата;
    НовыйДок.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
    
    НовыйДок.ВалютаДокумента = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    
    ЗначениеНастройки = Неопределено;
    
    Выполнить("ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновноеПодразделение"")");
    
    Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
        ТекПодразделение = ЗначениеНастройки;
    Иначе
        ТекПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;    
    КонецЕсли;

    НовыйДок.СтруктурнаяЕдиницаПродажи = ТекПодразделение;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ); 
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "Валюта");
        НайденныеСтрокиВалюты = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        Для Каждого СтрокаВалюты Из НайденныеСтрокиВалюты Цикл
            НовыйДок.Курс = ПолучитьЗначениеПоДеревуИзXML("КурсВалюти", СтрокаВалюты);
            НовыйДок.Кратность = ПолучитьЗначениеПоДеревуИзXML("КратністьВалюти", СтрокаВалюты); 
        КонецЦикла;
        
        Если НовыйДок.Курс = 0 Тогда
            
            ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовыйДок.Дата, Новый Структура("Валюта", НовыйДок.ВалютаДокумента));
            
            Если ЗначениеЗаполнено(ВалютаКурсКратность.Курс) Тогда
                НовыйДок.Курс = ВалютаКурсКратность.Курс;
                НовыйДок.Кратность = ВалютаКурсКратность.Кратность;    
            Иначе
                НовыйДок.Курс = 1;
                НовыйДок.Кратность = 1;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    НовыйДок.Комментарий = "Загружено из Приват24. Входящий номер: " + СтрокаТЧ.ВходящийНомер; //т.к. нет ревизита "входящий номер", то пишем его в комменатрий.
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.Договор = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйДок.Договор.ВидЦенКонтрагента), НовыйДок.Договор.ВидЦенКонтрагента.ЦенаВключаетНДС, Ложь);
    
    НовыйДок.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
    
    Попытка    
        НовыйДок.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Открыт;
    Исключение
    КонецПопытки;
    
    Попытка    
        НовыйДок.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
    Исключение
    КонецПопытки;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда
            ЕстьНДС = Истина;
            НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НовыйДок.Запасы.Очистить();    
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        НоваяСтрокаТЧ = НовыйДок.Запасы.Добавить();
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = Неопределено;    
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры);
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        НоваяСтрокаТЧ.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.СуммаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
            
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
            НоваяСтрокаТЧ.Всего = НоваяСтрокаТЧ.Сумма + ?(НовыйДок.СуммаВключаетНДС, 0, НоваяСтрокаТЧ.СуммаНДС);
            
        КонецЦикла;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура UT_3_ЗаписатьЗаказПокупателя(СтрокаТЧ)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.ЗаказКлиента.СоздатьДокумент();    
    КонецЕсли;
    
    НовыйДок.Организация = Организация;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.Валюта = СтрокаТЧ.ВалютаДокумента;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    НовыйДок.Партнер = НовыйДок.Контрагент.Партнер;
    НовыйДок.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(НовыйДок.Приоритет);
    НовыйДок.Менеджер = Пользователи.ТекущийПользователь();
    НовыйДок.ДатаОтгрузки = ТекущаяДатаСеанса();
    
    Выполнить("НовыйДок.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(НовыйДок.Склад, ПолучитьФункциональнуюОпцию(""ИспользоватьСкладыВТабличнойЧастиДокументовПродажи""))");
    
    Если ЗначениеЗаполнено(Склад) Тогда
        НовыйДок.Склад = Склад;
    КонецЕсли;
    
    
    НовыйДок.НеОтгружатьЧастями = Истина;
    
    НалогообложениеНДСПоУмолчанию = "";
    
    Выполнить("НалогообложениеНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(НовыйДок.Организация, НовыйДок.Контрагент, НовыйДок.Дата, Истина)");
    
    Выполнить("НовыйДок.АвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагАвторасчетНДС(НалогообложениеНДСПоУмолчанию)");
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
        НовыйДок.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
        Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
            НовыйДок.ДатаОтгрузки = ТекущаяДатаСеанса();
        КонецЕсли;
    Иначе
        НовыйДок.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
    КонецЕсли; 
    
    ЗаполнитьОбособленно = "";
    Выполнить("ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДок.Соглашение, ""ОбеспечиватьЗаказыОбособленно"")");
    Выполнить("ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(НовыйДок.Товары, ЗаполнитьОбособленно)");
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
        НовыйДок.ЗаполнитьУсловияПродажПоУмолчанию();
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Соглашение) Тогда
        НовыйДок.Соглашение = Соглашение;
    КонецЕсли;    
    
    НовыйДок.ЦенаВключаетНДС = НовыйДок.Соглашение.ЦенаВключаетНДС;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ); 
        
    КонецЦикла;
    
    НовыйДок.НомерПоДаннымКлиента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.Комментарий = "Загружено из Приват24"; 
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.Договор = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
    
    НовыйДок.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда
            ЕстьНДС = Истина;
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НовыйДок.Товары.Очистить();    
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        НоваяСтрокаТЧ = НовыйДок.Товары.Добавить();
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = Неопределено;    
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры);
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        
        НоваяСтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.ЦенаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
            
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.ЦенаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);
            
            СтруктураДействий = Новый Структура;
            СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
            
            Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЧ, СтруктураДействий, Неопределено)");
            
        КонецЦикла;
        
    КонецЦикла;    
    
    СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(НовыйДок.Склад);
    Выполнить("СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(НовыйДок.Склад, СкладГруппа, НовыйДок.Товары, Ложь)");
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура BP_ЗаписатьВходящийСчет(СтрокаТЧ)
        
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();    
    КонецЕсли;
    
    НовыйДок.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.ПокупкаКомиссия;
    
    НовыйДок.Организация = Организация;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.ВалютаДокумента = СтрокаТЧ.ВалютаДокумента;
     НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    
    СтруктураДокумента = ПолучитьДеревоФинДокПоXML(СтрокаТЧ.XML, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Заголовок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    НомерДоговора = "";
    ДатаДоговора = "";
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл
        
        лНомерДоговора = ПолучитьЗначениеПоДеревуИзXML("НомерДоговоруПоставки", СтрокаДЗ);
        лДатаДоговора = ПолучитьЗначениеПоДеревуИзXML("ДатаДоговоруПоставки", СтрокаДЗ);
        НовыйДок.Комментарий = ПолучитьЗначениеПоДеревуИзXML("Коментар", СтрокаДЗ);
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "Валюта");
        НайденныеСтрокиВалюты = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        Для Каждого СтрокаВалюты Из НайденныеСтрокиВалюты Цикл
            НовыйДок.КурсВзаиморасчетов = ПолучитьЗначениеПоДеревуИзXML("КурсВалюти", СтрокаВалюты);
            НовыйДок.КратностьВзаиморасчетов = ПолучитьЗначениеПоДеревуИзXML("КратністьВалюти", СтрокаВалюты); 
        КонецЦикла;
        
        Если НовыйДок.КурсВзаиморасчетов = 0 Тогда
            
            ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовыйДок.Дата, Новый Структура("Валюта", НовыйДок.ВалютаДокумента));
            
            Если ЗначениеЗаполнено(ВалютаКурсКратность.Курс) Тогда
                НовыйДок.КурсВзаиморасчетов = ВалютаКурсКратность.Курс;
                НовыйДок.КратностьВзаиморасчетов = ВалютаКурсКратность.Кратность;    
            Иначе
                НовыйДок.КурсВзаиморасчетов = 1;
                НовыйДок.КратностьВзаиморасчетов = 1;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    СтруктураДоговора = Новый Структура;
    СтруктураДоговора.Вставить("ДатаДоговора", лДатаДоговора);
    СтруктураДоговора.Вставить("НомерДоговора", лНомерДоговора);
    
    НовыйДок.ДоговорКонтрагента = НайтиСоздатьДоговорКонтрагента(НовыйДок.Контрагент, Ложь, СтруктураДоговора);
    
    НовыйДок.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйДок.ДоговорКонтрагента.ТипЦен), НовыйДок.ДоговорКонтрагента.ТипЦен.ЦенаВключаетНДС, Ложь);
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоДокументу");
    СтрокиИтоговДокумента = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    ЕстьНДС = Ложь;
    
    Для Каждого СтрокаИтогов Из СтрокиИтоговДокумента Цикл
        
        лСуммаНДС = ПолучитьЗначениеПоДеревуИзXML("ПДВ", СтрокаИтогов);
        Если ЗначениеЗаполнено(лСуммаНДС) И Число(лСуммаНДС) <> 0 Тогда    
            ЕстьНДС = Истина;
        
        КонецЕсли;
        
        НовыйДок.СуммаДокумента = ПолучитьЗначениеПоДеревуИзXML("Сума", СтрокаИтогов);
        
    КонецЦикла;
    
    НовыйДок.Товары.Очистить();
    НовыйДок.Услуги.Очистить();
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("НазваниеУзла", "Рядок");
    НайденныеСтроки = СтруктураДокумента.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
    
    Для Каждого СтрокаДЗ Из НайденныеСтроки Цикл    
        
        НаименованиеНом = ПолучитьЗначениеПоДеревуИзXML("Найменування", СтрокаДЗ);
        АртикулНом = ПолучитьЗначениеПоДеревуИзXML("АртикулПродавця", СтрокаДЗ);
        ЕдИзм = ПолучитьЗначениеПоДеревуИзXML("ОдиницяВиміру", СтрокаДЗ);
        
        ТипНоменклатуры = ПолучитьЗначениеПоДеревуИзXML("ВидНоменклатури", СтрокаДЗ); 
        
        Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
            ТипНоменклатуры = Неопределено;    
        КонецЕсли;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Артикул", АртикулНом);
        СтруктураПараметров.Вставить("Наименование", НаименованиеНом);
        СтруктураПараметров.Вставить("ЕдИзм", ЕдИзм);
        СтруктураПараметров.Вставить("Тип", ТипНоменклатуры);
        
        Если ТипНоменклатуры = "Послуга" Тогда
            
            НоваяСтрокаТЧ = НовыйДок.Услуги.Добавить();    
            
        Иначе
            
            НоваяСтрокаТЧ = НовыйДок.Товары.Добавить();    
            
            НоваяСтрокаТЧ.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ЕдИзм);    
            
        КонецЕсли;
        
        НоваяСтрокаТЧ.Номенклатура = НайтиСоздатьНоменклатуру(СтруктураПараметров, Истина);
        НоваяСтрокаТЧ.Количество = ПолучитьЗначениеПоДеревуИзXML("ЗаявленаКількість", СтрокаДЗ);
        
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("НазваниеУзла", "ВсьогоПоРядку");
        НайденныеПодСтроки = СтрокаДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
        
        НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("БазоваЦіна", СтрокаДЗ);
        
        //если тег "Базовая цена" пустой - это значит что документ создавался или не сайте или другим приложением
        //в наших обработках он везеде заполняется
        Если НоваяСтрокаТЧ.Цена = 0 Тогда
            НовыйДок.СуммаВключаетНДС = Ложь;    
        КонецЕсли;
        
        Для Каждого ПодСтрокаДЗ Из НайденныеПодСтроки Цикл    
            
            ЗаполнитьЦенуИСуммыДокумента(НовыйДок.СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС);  
                    
        КонецЦикла;
        
    КонецЦикла;    
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
КонецПроцедуры

Процедура ЗаполнитьЦенуИСуммыДокумента(СуммаВключаетНДС, НоваяСтрокаТЧ, СтрокаДЗ, ПодСтрокаДЗ, ЕстьНДС)
    
    Если СуммаВключаетНДС Тогда
        
        Если НоваяСтрокаТЧ.Цена = 0 Тогда 
            
            НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("Ціна", СтрокаДЗ);
            
        Иначе
            
            Если ЕстьНДС Тогда //только для ставки НДС 20%, на сайте другой нет
                
                НоваяСтрокаТЧ.Цена = НоваяСтрокаТЧ.Цена + НоваяСтрокаТЧ.Цена * 0.2;
                
            КонецЕсли;    
            
        КонецЕсли;
        
        НоваяСтрокаТЧ.Сумма = ПолучитьЗначениеПоДеревуИзXML("Сума", ПодСтрокаДЗ);
        
        Если НоваяСтрокаТЧ.Сумма = 0 Тогда
            
            НоваяСтрокаТЧ.Сумма = ПолучитьЗначениеПоДеревуИзXML("СумаБезПДВ", ПодСтрокаДЗ);    
            
            Если ЕстьНДС Тогда //только для ставки НДС 20%, на сайте другой нет
                
                НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма + НоваяСтрокаТЧ.Сумма * 0.2;
                
            КонецЕсли;    
            
        КонецЕсли;
        
    Иначе
        
        //на текущий момент (21.01.2016) возможен вариант когда документ создан на сайте, 
        //и полей связанных с НДС по строкам вообще не будет. Для такого случая будем все вычислять
        
        НоваяСтрокаТЧ.Сумма = ПолучитьЗначениеПоДеревуИзXML("СумаБезПДВ", ПодСтрокаДЗ);
        
        Если НоваяСтрокаТЧ.Цена = 0 Тогда //И ЕстьНДС Тогда //если цена = 0, а НДС по документу есть - скорее всего документ создан на сайте
            
            НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("Ціна", СтрокаДЗ);
            НоваяСтрокаТЧ.Сумма = ПолучитьЗначениеПоДеревуИзXML("Сума", ПодСтрокаДЗ);
            
            //Иначе //если НДС нет - то и вычислять ничего не нужно
            //    
            //    НоваяСтрокаТЧ.Цена = ПолучитьЗначениеПоДеревуИзXML("Ціна", СтрокаДЗ);
            //    НоваяСтрокаТЧ.Сумма = ПолучитьЗначениеПоДеревуИзXML("Сума", ПодСтрокаДЗ);
            
        КонецЕсли;
        
    КонецЕсли;    
    
    НоваяСтрокаТЧ.СуммаНДС = ПолучитьЗначениеПоДеревуИзXML("СумаПДВ", ПодСтрокаДЗ); 
    
    НоваяСтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДСПоСтроковомуПредставлению(ПолучитьЗначениеПоДеревуИзXML("CтавкаПДВ", СтрокаДЗ));
    
    //со ставкой НДС проблема - на сайте вообще такой нет...
    //пока так
    Если НЕ ЗначениеЗаполнено(НоваяСтрокаТЧ.СтавкаНДС) Тогда
        
        Если ЕстьНДС Тогда
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                НоваяСтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
                
            ИначеЕсли ИдКонф = "BP" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда     
                
                НоваяСтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;     
                
            КонецЕсли;    
            
        Иначе
            
            Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
                
                НоваяСтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");    
                
            ИначеЕсли ИдКонф = "BP" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда     
                
                НоваяСтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС; 
                
            КонецЕсли;    
            
        КонецЕсли;
        
    КонецЕсли;
    
    Если НоваяСтрокаТЧ.СуммаНДС = 0 И ЕстьНДС Тогда //опять же скорее всего такой документ создан на сайте
        
        НоваяСтрокаТЧ.СуммаНДС = ПолучитьСуммуНДС(НоваяСтрокаТЧ.Сумма, НоваяСтрокаТЧ.СтавкаНДС, СуммаВключаетНДС); 
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаписатьДокумент(НовыйДок, СтрокаТЧ = Неопределено)
        
    Попытка
        Если ПроводитьДокументы Тогда
            Попытка
                
                НовыйДок.Записать(РежимЗаписиДокумента.Проведение);    
                
                Если СтрокаТЧ = Неопределено Тогда
                    Возврат;    
                КонецЕсли;
                
                Если СтрокаТЧ = Ложь Тогда //условие-заглушка на вызов из процедуры дозаполнения реквизитов документов
                    Возврат;    
                КонецЕсли;

                СтрокаТЧ.ИдентификаторКартинки = 0;
                СтрокаТЧ.ТекстОшибки = "";
                СтрокаТЧ.КартинкаОшибки = 0;
                
            Исключение
                
                НовыйДок.Записать(РежимЗаписиДокумента.Запись);
                
                ТекстСообщения = НСтр("ru = 'Ошибка при проведении документа '; uk='Помилка при проведенні документа '") + НовыйДок + " " + ОписаниеОшибки();
                СообщениеПользователю(ТекстСообщения);
                
                Если СтрокаТЧ = Неопределено Тогда
                    Возврат;    
                КонецЕсли;
                
                Если СтрокаТЧ = Ложь Тогда //условие-заглушка на вызов из процедуры дозаполнения реквизитов документов
                    Возврат;    
                КонецЕсли;

                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                СтрокаТЧ.КартинкаОшибки = 2;
                СтрокаТЧ.ИдентификаторКартинки = 2;
                
            КонецПопытки;    
        Иначе
            
            НовыйДок.Записать(РежимЗаписиДокумента.Запись);
            
            Если СтрокаТЧ = Неопределено Тогда
                Возврат;    
            КонецЕсли;
            
            Если СтрокаТЧ = Ложь Тогда //условие-заглушка на вызов из процедуры дозаполнения реквизитов документов
                Возврат;    
            КонецЕсли;

            СтрокаТЧ.ТекстОшибки = "";
            СтрокаТЧ.КартинкаОшибки = 0;                                      
            СтрокаТЧ.ИдентификаторКартинки = 2;
            
        КонецЕсли;
        
        СтрокаТЧ.Номер = НовыйДок.Номер;
        СтрокаТЧ.СсылкаНаДокумент = НовыйДок.Ссылка;
        
        Попытка
            Если СтрокаТЧ.СуммаДокумента <> СтрокаТЧ.СсылкаНаДокумент.СуммаДокумента Тогда
                ТекстСообщения = НСтр("ru = 'Внимание! При записи документа в строке №%НомерСтроки% изменилась сумма. Откройте документ и откорректируйте сумму вручную.'; 
                 |uk='Увага! При записи документа в рядку №%НомерСтроки% змінилася сума. Відкрийте документ і відкоригуйте суму вручну.'");
                 
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки); 
                СообщениеПользователю(ТекстСообщения, Ложь);         
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        Если СтрокаТЧ = Ложь Тогда //условие-заглушка на вызов из процедуры дозаполнения реквизитов документов
            Возврат;    
        КонецЕсли;

        ДозаполнитьРеквизитыДокумента(НовыйДок);
        
    Исключение
        
        ТекстСообщения = НСтр("ru = 'Ошибка при записи документа '; uk='Помилка при запису документа '") + НовыйДок + " " + ОписаниеОшибки();
        
        Если СтрокаТЧ = Неопределено Тогда
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат;    
        КонецЕсли;
        
        Если СтрокаТЧ = Ложь Тогда //условие-заглушка на вызов из процедуры дозаполнения реквизитов документов
            Возврат;    
        КонецЕсли;

        СтрокаТЧ.ТекстОшибки = ТекстСообщения;
        СтрокаТЧ.КартинкаОшибки = 1;
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецПопытки;
    
    
КонецПроцедуры    

Функция ЗагрузитьФинДок(НачПериода, КонПериода, ТипДок) Экспорт
    
    ДействиеАналитики = "ФинДокЧтениеСписка";
    
    ФинансовыеДокументы.Очистить();
    
    НачалоПериода = Формат(НачПериода, "ДФ=yyyy-MM-dd");
    КонецПериода = Формат(КонПериода, "ДФ=yyyy-MM-dd");
    
    РесурсНаСервере = "/inbox"; //журнал входящие
    
    ЕстьОшибки = Ложь;
    
    ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, НачалоПериода, СессияДок, ЕстьОшибки, ТипДок, ПоискПоДатеДокумента, КонецПериода);
    
    ТекДата = КонецДня(ТекДата) + 1;
    
    Если ЕстьОшибки Тогда
        Возврат Ложь; // прерываем функцию загрузки
    КонецЕсли;
    
    ТабВхФинДок = ПрочитатьТабВхФинДокАК(ЖурналОтвет);
    
    Для Каждого СтрокаТЗ Из ТабВхФинДок Цикл
        ЗаполнитьСтрокуВходящегоФинДок(СтрокаТЗ, СессияДок, ТипДок);
    КонецЦикла;    
    
    Возврат Ложь;
    
КонецФункции    

Процедура СообщитьСтруктуру(Структура, Смещение = "") 
    
    Для Каждого СтрокаСтруктуры Из Структура Цикл
        
        Если ТипЗнч(СтрокаСтруктуры.Значение) <> Тип("Массив") Тогда 
            СообщениеПользователю(Смещение + СтрокаСтруктуры.Ключ + ": " + СтрокаСтруктуры.Значение);
        Иначе
            СообщитьСтруктуру(СтрокаСтруктуры.Значение, Смещение + "   ");
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПрочитатьТабВхФинДокАК(ОтветСервера, ЗаполнятьКонтрагента = Истина)
    
    ТаблицаФинДок = Новый ТаблицаЗначений;
    ТаблицаФинДок.Колонки.Добавить("ДокИД");
    ТаблицаФинДок.Колонки.Добавить("Дата");
    ТаблицаФинДок.Колонки.Добавить("Номер");
    ТаблицаФинДок.Колонки.Добавить("Контрагент");
    ТаблицаФинДок.Колонки.Добавить("Сумма");
    ТаблицаФинДок.Колонки.Добавить("Валюта");
    ТаблицаФинДок.Колонки.Добавить("Статус");
    ТаблицаФинДок.Колонки.Добавить("Комментарий");
    
    СтруктураОтвета = jsonПрочитатьИнициализация(ОтветСервера);

    Если ТипЗнч(СтруктураОтвета) <> Тип("Структура") Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа на импорт документов ';uk='Помилка при читанні відповіді на імпорт документів'");
        СообщениеПользователю(ТекстСообщения);
        
        ЕстьОшибки = Истина;
        Если РежимОтладки Тогда
            СообщениеПользователю(СтруктураОтвета);    
        КонецЕсли;
        
        Возврат ТаблицаФинДок;
    
    КонецЕсли;
    
    Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
        
        Если НЕ РежимОтладки Тогда
            СообщениеПользователю(СтруктураОтвета.code + ": " + СтруктураОтвета.message);
        Иначе
            СообщитьСтруктуру(СтруктураОтвета);    
        КонецЕсли;
        
        Возврат ТаблицаФинДок;
        
    КонецЕсли;
        
    Для Каждого Докумет Из СтруктураОтвета.documents Цикл
        
        НоваяСтрока = ТаблицаФинДок.Добавить();
        
        НоваяСтрока.ДокИД = Докумет.ID;
        НоваяСтрока.Дата = Докумет.DOC_DATE;
        НоваяСтрока.Номер = Докумет.DOC_NUMBER;
        
        ОКПОКонтрагента = Докумет.OKPO_RECIPIENT;        
        ИмяКонтрагента = Докумет.OKPO_RECIPIENT_NAME; 
        
        Если СокрЛП(ОКПОКонтрагента) = СокрЛП(КодПоЕДРПОУ) Тогда // поле КодПоЕДРПОУ - должно быть заполнено в настройках обработки
            //если полученный из "OKPO_RECIPIENT" равен коду текущей организации, то берем OKPO_SENDER
            ОКПОКонтрагента = Докумет.OKPO_SENDER;
            ИмяКонтрагента = Докумет.OKPO_SENDER_NAME; 
            
        КонецЕсли;
                                            
        Если ЗаполнятьКонтрагента Тогда
            
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", ИмяКонтрагента);
            СтруктураПоиска.Вставить("КодКонтрагента", ОКПОКонтрагента);
            СтруктураПоиска.Вставить("СчетКонтрагента", "");
            
            Покупатель = Ложь;    
            
            КонтрагентИзДок = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, Покупатель);
            НоваяСтрока.Контрагент = КонтрагентИзДок;
        Иначе
            НоваяСтрока.Контрагент    = ОКПОКонтрагента;
        КонецЕсли;
        
        НоваяСтрока.Статус = Докумет.STATUS;
        
        Попытка
            НоваяСтрока.Сумма = Число(СтрЗаменить(СокрЛП(Докумет.AMOUNT), " ", ""));
        Исключение    
            НоваяСтрока.Сумма = 0;
            СообщениеПользователю(ОписаниеОшибки());
        КонецПопытки;    
        
        НоваяСтрока.Валюта = "980"; //пока в ответе от сервера нет валюты, по умолчанию берем гривну
        
        Если Докумет.Свойство("COMMENT") Тогда
            НоваяСтрока.Комментарий = Докумет.COMMENT;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ТаблицаФинДок;
    
КонецФункции

Процедура ЗаполнитьСтрокуВходящегоФинДок(СтрокаТЗ, СессияДок, ТипДок)
    
    Если ЗначениеЗаполнено(Контрагент) И СтрокаТЗ.Контрагент <> Контрагент Тогда
        Возврат;    
    КонецЕсли;
    
    Если ЗагружатьТолькоУтвержденныеДокументы Тогда
        Если СтрокаТЗ.Статус <> "5" И СтрокаТЗ.Статус <> "12" Тогда //статус утверждено
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    НоваяСтрока = ФинансовыеДокументы.Добавить();
    НоваяСтрока.Дата = Дата(СтрЗаменить(СтрокаТЗ.Дата, "-",""));
    НоваяСтрока.ИмяДокумента = СтрЗаменить(ИмяТипаФинДокПоРазделу(ТипДок, Истина), "%", ""); 
    НоваяСтрока.ИдентификаторКартинки = 5; //такой картинки нет, так надо
    НоваяСтрока.ВходящийНомер = СтрокаТЗ.Номер;
    НоваяСтрока.Контрагент = СтрокаТЗ.Контрагент;
     НоваяСтрока.СуммаДокумента = СтрокаТЗ.Сумма;
    НоваяСтрока.ВалютаДокумента = НайтиВалюту(СтрокаТЗ.Валюта);
    НоваяСтрока.XML = ПолучитьТекстXMLПоФинДок(СтрокаТЗ.ДокИД, СессияДок);    
    
    ТекстСтатуса = "";
    
    Если СтрокаТЗ.Статус = "4" Тогда
        
        ТекстСтатуса = НСтр("ru = 'Подписан отправителем';uk = 'Підписаний відправником'");
        
    //ИначеЕсли СтрокаТЗ.Статус = "5" Тогда
    //    
    //    ТекстСтатуса = НСтр("ru = 'Подписан';uk = 'Підписаний'");
        
    ИначеЕсли СтрокаТЗ.Статус = "12" Тогда        
        
        ТекстСтатуса = НСтр("ru = 'Подписан';uk = 'Підписаний'");
        
    ИначеЕсли СтрокаТЗ.Статус = "14" Тогда
        
        ТекстСтатуса = НСтр("ru = 'Без подписи';uk = 'Без підпису'");
        
    ИначеЕсли СтрокаТЗ.Статус = "15" Тогда 
            
        ТекстСтатуса =  НСтр("ru='Утвержден';uk = 'Затверджено'");
        
    КонецЕсли;
    
    НоваяСтрока.СтатусДокумента = ТекстСтатуса;
    
    ЗаполнитьСсылкуНаФинДок(ТипДок, НоваяСтрока);
    
КонецПроцедуры

Функция ПолучитьТекстXMLПоФинДок(ИдДокумента, СессияДок)
    
    ТекстXML = "";
    
    ИнтернетАдрес = АдресАК + "/api/proxy/edoc/journal";
    РесурсНаСервере = "/get-xml-document/" + ИдДокумента + "?okpo=" + ПолучитьКодОрганизации();
    
    СтрокаЗапроса = "";

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Accept";
    НоваяСтрока.ЗначениеЗаголовка = "application/json, text/plain, ";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Accept-Language";
    НоваяСтрока.ЗначениеЗаголовка = "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json;charset=utf-8";

    Если ЗначениеЗаполнено(ИдАК) Тогда
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "id";
        НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    КонецЕсли;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "token";
    НоваяСтрока.ЗначениеЗаголовка = ТокенАК;

    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", СессияАК, Заголовки,,,Ложь);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        
        ЕстьОшибки = Истина;
        
        Возврат "";
        
    Иначе
        Статус = стРезультат.Статус;
        СессияДок = стРезультат.Cookie;
        ТекстXML = стРезультат.ТелоОтвета;
    КонецЕсли;
    
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение XML текста документа. ID = ';uk='Помилка відправки запиту на отримання XML тексту документа. ID = '") + ИдДокумента;
        СообщениеПользователю(ТекстСообщения);
        
        ЕстьОшибки = Истина;
        Возврат "";
        
    КонецЕсли;
    
    Возврат ТекстXML;
    
КонецФункции

////не используется
//Функция ЗаполнитьИОтправитьОтчетНаБО(ТипОтчета, ПериодОтчета) Экспорт
//    
//    //Cookie = АвторизацияБО(Истина); //параметр Истина говорит что в реквизит XML будет помещен UserIDPB24
//    //
//    //ИнтернетАдрес = "bo.privatbank.ua/import/reports/server/import_report.php?action=tmp&reportId=-1&changeUser=false&qqfile=161753580604998ZZZZZ26022016140603E05I0.pfz";
//    //РесурсНаСервере = "";    
//    //Файл = Новый ЧтениеТекста("C:\Users\Admin\Downloads\161753580604998ZZZZZ26022016140603E05I0.pfz");
//    //СтрокаЗапроса = Файл.Прочитать();
//    //
//    //UserAgentHeaders = ОпределитьUserAgentHeaders();
//    //
//    //Заголовки = Новый ТаблицаЗначений;
//    //Заголовки.Колонки.Добавить("Заголовок");
//    //Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "Content-Type";
//    //НоваяСтрока.ЗначениеЗаголовка = "application/octet-stream";
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "Content-Lenght";
//    //НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(XMLСтрока(СтрокаЗапроса)));
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "X-Requested-With";
//    //НоваяСтрока.ЗначениеЗаголовка = "XMLHttpRequest";
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "X-File-Name";
//    //НоваяСтрока.ЗначениеЗаголовка = "161753580604998ZZZZZ26022016140603E05I0.pfz";
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "X-CSRF-TOKEN";
//    //НоваяСтрока.ЗначениеЗаголовка = Сред(Cookie, Найти(Cookie, " CSRF-TOKEN")+12, 32);
//    //
//    //стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Cookie, Заголовки, КодировкаТекста.UTF8);
//    //
//    //Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//    //    
//    //    ЕстьОшибки = Истина;
//    //    
//    //    Возврат Неопределено;
//    //    
//    //Иначе
//    //    Статус = стРезультат.Статус;
//    //    СессияДок = стРезультат.Cookie;
//    //    ТелоОтвета = стРезультат.ТелоОтвета;
//    //КонецЕсли;

//    //// если не успешно сообщим ошибку
//    //Если Статус <> 200 Тогда
//    //    
//    //    ТекстСообщения = НСтр("ru = 'Ошибка при отправке отчета в сервис электронной отчетности'; uk='Помилка при відправці звіту у сервіс електронної звітності'");
//    //    СообщениеПользователю(ТекстСообщения);
//    //    ЕстьОшибки = Истина;

//    //    Возврат Неопределено;
//    //    
//    //КонецЕсли;    
//    //
//    //ИнтернетАдрес = "bo.privatbank.ua/import/reports/server/import_report.php";
//    //РесурсНаСервере = "action=save";
//    //ТелоЗапрос = "id=25465&action=update&updateId=315098";
//    //
//    //Возврат Неопределено;
//    //
//    //ИнтернетАдрес = "buhonline.test.it.loc/api";
//    //
//    //РесурсНаСервере = "/report_ops/?action=insertReport";
//    //
//    //лПериодОтчета = Формат(ПериодОтчета, "ДФ=yyyy|M|dd");
//    //
//    //СтрокаЗапроса = "{" + Символы.ВК + Символы.ПС +
//    //"""ops"":[" + Символы.ВК + Символы.ПС + 
//    //"{" + Символы.ВК + Символы.ПС +
//    //"""extra"":{"  + Символы.ВК + Символы.ПС +
//    //"""okpo"": """ + ПолучитьКодОрганизации() + """," + Символы.ВК + Символы.ПС +
//    //"""report_type"": """ + ТипОтчета + """," + Символы.ВК + Символы.ПС +
//    //"""user_id_p24"": """ + XML + """," + Символы.ВК + Символы.ПС +
//    //"""report_period"": """ + лПериодОтчета + """," + Символы.ВК + Символы.ПС +
//    //"""report_data"": {" + ПолучитьДанныеОтчета(ТипОтчета, ПериодОтчета) + "}"  + Символы.ВК + Символы.ПС +
//    //"}" + Символы.ВК + Символы.ПС +
//    //"}" + Символы.ВК + Символы.ПС +
//    //"]" + Символы.ВК + Символы.ПС +
//    //"}" + Символы.ВК + Символы.ПС;
//    //
//    //UserAgentHeaders = ОпределитьUserAgentHeaders();
//    //
//    //Заголовки = Новый ТаблицаЗначений;
//    //Заголовки.Колонки.Добавить("Заголовок");
//    //Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "Content-Type";
//    //НоваяСтрока.ЗначениеЗаголовка = "application/json; charset=utf-8";
//    //
//    //НоваяСтрока = Заголовки.Добавить();
//    //НоваяСтрока.Заголовок = "Content-Lenght";
//    //НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(XMLСтрока(СтрокаЗапроса)));
//    //
//    //стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Cookie, Заголовки, КодировкаТекста.UTF8);
//    //
//    //Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//    //    
//    //    ЕстьОшибки = Истина;
//    //    
//    //    Возврат Неопределено;
//    //    
//    //Иначе
//    //    Статус = стРезультат.Статус;
//    //    СессияДок = стРезультат.Cookie;
//    //    ТелоОтвета = стРезультат.ТелоОтвета;
//    //КонецЕсли;
//    //
//    //СтрукутраОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
//    //
//    //Попытка
//    //    Если СтрукутраОтвета.ops[0].proc = "ok" Тогда
//    //        
//    //        Cookie = АвторизацияБО(); 
//    //        
//    //        idОтчета = Формат(СтрукутраОтвета.ops[0].res_data.res, "ЧГ=0");
//    //        
//    //        ИнтернетАдрес = "buhonline.test.it.loc/inc";
//    //        
//    //        РесурсНаСервере = "ajax/reports_controller.php?a=get_html";
//    //        
//    //        СтрокаЗапроса = "&is_empty=1&report_type=4&dodatok_ind=&report_id=" + idОтчета; 
//    //        
//    //        UserAgentHeaders = ОпределитьUserAgentHeaders();
//    //        
//    //        стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Cookie);
//    //        
//    //        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//    //            
//    //            ЕстьОшибки = Истина;
//    //            
//    //            Возврат Неопределено;
//    //            
//    //        Иначе
//    //            Статус = стРезультат.Статус;
//    //            СессияДок = стРезультат.Cookie;
//    //            ТелоОтвета = стРезультат.ТелоОтвета;
//    //        КонецЕсли;
//    //        
//    //        СтруктураВозврата = Новый Структура;
//    //        //СтруктураВозврата.Вставить("Адрес", "http://buhonline.test.it.loc/?view=reports&a=open_view&EMPTY_PAGE&id=" + idОтчета);
//    //        СтруктураВозврата.Вставить("Адрес", ТелоОтвета);
//    //        СтруктураВозврата.Вставить("Куки", Cookie);
//    //        
//    //        Возврат СтруктураВозврата;
//    //    КонецЕсли;    
//    //Исключение
//    //    
//    //КонецПопытки;

//КонецФункции

Функция ПолучитьДанныеОтчета(ТипОтчета, ПериодОтчета)
        
    ДанныеОтчета = "";
    
    Если ТипОтчета = "4" Тогда //Единый налог
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            ДанныеОтчета = UNF_ЗаполитьОтчетЕдиныйНалог(ПериодОтчета);
        КонецЕсли;
        
    ИначеЕсли ТипОтчета = "1" Тогда //ЕСВ     
        
        Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
            //ДанныеОтчета = UNF_ЗаполитьОтчетЕдиныйНалог();
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ДанныеОтчета;
    
КонецФункции

Функция UNF_ЗаполитьОтчетЕдиныйНалог(ПериодОтчета)
    
    ДанныеОтчета = "";
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    ДоходыИРасходыКассовыйМетодОбороты.СуммаДоходовОборот КАК СуммаДоходов
    |ИЗ
    |    РегистрНакопления.ДоходыИРасходыКассовыйМетод.Обороты(&НачПериода, &КонПериода, , Организация = &Организация) КАК ДоходыИРасходыКассовыйМетодОбороты";
    
    Запрос.УстановитьПараметр("НачПериода", НачалоКвартала(ПериодОтчета));
    Запрос.УстановитьПараметр("КонПериода", КонецКвартала(ПериодОтчета));
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ДанныеОтчета = """R012G3"":""" + Формат(ВыборкаДетальныеЗаписи.СуммаДоходов, "ЧРД=.; ЧГ=0") + """";
    КонецЦикла;
    
    Возврат ДанныеОтчета;
    
КонецФункции

Функция ПроверитьСтатусДокументаПоСтроке(СтрокаТЧ, ТипДок) Экспорт
    
    СтрокаТЧ.Флажок = Ложь;

    Попытка
        СтрокаТЧ.КартинкаСтатуса = 10; //снимаем картинку
    Исключение
    КонецПопытки;
    Попытка
        СтрокаТЧ.СтатусДокумента = ""; //очищаем текст статуса
    Исключение
    КонецПопытки;
    СтрокаТЧ.КартинкаОшибки = 0;
    
    ЕстьОтмеченные = Истина;
    
    ЕстьОшибки = Ложь;
    
    ДатаДок = Формат(СтрокаТЧ.Дата, "ДФ=yyyy-MM-dd");
    
    РесурсНаСервере = "/outbox"; //журнал исходящие
    
    ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, ДатаДок, СессияДок, ЕстьОшибки, ТипДок); 
    
    Если ЕстьОшибки Тогда
        
        ТекстСообщения = НСтр("ru = 'Ошибка при получении статуса документа отмеченного в строке №%НомерСтроки%. Документ пропущен.'; uk = 'Помилка при отриманні статусу документу зазначеного у рядку №%НомерСтроки%. Документ пропущений.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        СообщениеПользователю(ТекстСообщения);
        СтрокаТЧ.КартинкаОшибки = 6;
        СтрокаТЧ.ТекстОшибки = ТекстСообщения;            
        Возврат ЕстьОшибки;
        
    КонецЕсли;
    
    ПараметрыПоиска = Новый Структура;
    ПараметрыПоиска.Вставить("Дата", ДатаДок);
    ПараметрыПоиска.Вставить("Номер", СокрЛП(СтрокаТЧ.Номер));
    ПараметрыПоиска.Вставить("Сумма", СтрокаТЧ.СуммаДокумента);
    ПараметрыПоиска.Вставить("Контрагент", СокрЛП(?(ЗначениеЗаполнено(СтрокаТЧ.Контрагент.КодПоЕДРПОУ), СтрокаТЧ.Контрагент.КодПоЕДРПОУ, ?( ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP", СтрокаТЧ.Контрагент.ИННПлательщикаНДС, СтрокаТЧ.Контрагент.ИНН))));// ?(ЭтоЮрЛицо(СтрокаТЧ.Контрагент), СтрокаТЧ.Контрагент.ИНН, СтрокаТЧ.Контрагент.КодПоЕДРПОУ));

    Попытка
        ПолученСтатус = ПрочитатьСтатусФинДокумента(ЖурналОтвет, ПараметрыПоиска, СтрокаТЧ);
    Исключение
    КонецПопытки;
    
    //Если НЕ ПолученСтатус Тогда
    Если ПолученСтатус = Ложь Или ПолученСтатус = Неопределено Тогда
        
        РесурсНаСервере = "/in-process"; //журнал в работе
        
        ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, ДатаДок, СессияДок, ЕстьОшибки, ТипДок); 
        
        Если ЕстьОшибки Тогда
            
            ТекстСообщения = НСтр("ru = 'Ошибка при получении статуса документа отмеченного в строке №%НомерСтроки%. Документ пропущен.'; uk = 'Помилка при отриманні статусу документу зазначеного у рядку №%НомерСтроки%. Документ пропущений.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения);
            СтрокаТЧ.КартинкаОшибки = 6;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;            
            Возврат ЕстьОшибки;
            
        КонецЕсли;

        Попытка
            ПрочитатьСтатусФинДокумента(ЖурналОтвет, ПараметрыПоиска, СтрокаТЧ);
        Исключение
        КонецПопытки;
        
    КонецЕсли;
    
    Возврат ЕстьОшибки;

КонецФункции

Функция ПроверитьСтатусыФинДок(ТипДок) Экспорт
    
    ДействиеАналитики = "ФинДокПроверкаСтатусов";
    
    //Если НЕ ЕстьОтмеченные ИЛИ НЕ ЗначениеЗаполнено(СессияДок) Тогда
    //    СессияДок = АвторизацияДок();
    //КонецЕсли;
    
    Для Каждого СтрокаТЧ Из ФинансовыеДокументы Цикл //цикл каждый раз прерывается
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;
        
        ПроверитьСтатусДокументаПоСтроке(СтрокаТЧ, ТипДок);
        
        Возврат Истина;  //признак что будет продолжать выполняться в цикле
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для проверки статуса!'; uk = 'Немає відмічених документів для перевірки статусу!'"), Ложь);
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    
    //XML = ""; 
    //СессияДок = "";
    
    Возврат Ложь; //обработка списка завершена
    
КонецФункции

Функция ПроверитьСтатусыФинДокPDF(ТипДок) Экспорт
    
    ДействиеАналитики = "ФинДокPDFПроверкаСтатусов";
    
    Для Каждого СтрокаТЧ Из СписокЭкспортаPDF Цикл //цикл каждый раз прерывается
        
        //Если НЕ СтрокаТЧ.Флажок Тогда
        Если НЕ СтрокаТЧ.Флажок И НЕ СтрокаТЧ.ФлажокКопия Тогда
            Продолжить;
        КонецЕсли;
        СтрокаТЧ.ФлажокКопия = Ложь;
        
        ПроверитьСтатусДокументаПоСтроке(СтрокаТЧ, ТипДок);
        
        Возврат Истина;  //признак что будет продолжать выполняться в цикле
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для проверки статуса!'; uk = 'Немає відмічених документів для перевірки статусу!'"), Ложь);
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    
    Возврат Ложь; //обработка списка завершена
    
КонецФункции

Функция ПрочитатьСтатусФинДокумента(Ответ, ПараметрыПоиска, СтрокаТЧ)
    
    //возможные статусы
    //START=0//when main document created, but file isn't stored to db
    //LOADED=1//when fili is stored to db
    //VALIDATED=2//when doc is fully validated - > xsd ans so on
    //SENDER_SIGNING=3//cxpStatus when sender sign document
    //RECIPIENT_SIGNING=4
    //BOTH_SIDE_SIGNING=5
    //PREPARED_FOR_SENDING_TO_TAX=6
    //SENT_TO_TAX=7
    //REGISTERED_IN_TAX=8
    //REJECTED_IN_TAX=9
    //RECEIVED_IN_TAX=10
    //RECIPIENT_DISAGREEMENT=11
    //RECIPIENT_APPROVEMENT=12
    //FINISH=13
    //RECIPIENT_PREVIEW=14
    //APPROVED_BY_RECIPIENT(15),
    //DELETED(16),
    //UPLOADED_AS_ENCRYPTED(18),
    //DECRYPTED_TAX_TECHNICAL_DOC(19);
    
    ТЗСтатусов = Новый ТаблицаЗначений;
    
    ТЗСтатусов = ПрочитатьТабВхФинДокАК(Ответ, Ложь);
    
    МассивСтрок = ТЗСтатусов.НайтиСтроки(ПараметрыПоиска);
    
    Если МассивСтрок.Количество() = 0 Тогда
        
        СтрокаТЧ.КартинкаСтатуса = 4;    
        СтрокаТЧ.СтатусДокумента =  НСтр("ru = 'Не выгружался';uk = 'Не вивантажувався'");//нужно отправить
        
        Возврат Ложь;

    ИначеЕсли МассивСтрок.Количество() = 1 Тогда
        
        СтрокаТЗ = МассивСтрок[0];
        
        СтрокаТЧ.ИдДокумента = СтрокаТЗ.ДокИД;
        
        //Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Статус) ИЛИ СтрокаТЗ.Статус = "1" ИЛИ СтрокаТЗ.Статус = "2" ИЛИ СтрокаТЗ.Статус = "3" Тогда //тега статус вообще нет, а следов. документ еще "в работе"
        Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Статус) ИЛИ СтрокаТЗ.Статус = "2" Тогда //тега статус вообще нет, а следов. документ еще "в работе"
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'В работе';uk = 'В роботі'");//нужно подписать и отправить

        ИначеЕсли СтрокаТЗ.Статус = "1" Тогда
            СтрокаТЧ.КартинкаСтатуса = 5;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Черновик';uk = 'Чернетка'")

        ИначеЕсли СтрокаТЗ.Статус = "3" Тогда
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Проверен и сохранен (в работе)';uk = 'Перевірений та збережений (в роботі)'")

        //ИначеЕсли СтрокаТЗ.Статус = "4" ИЛИ СтрокаТЗ.Статус = "14" Тогда // отправлен получателю, возможно разделение на статусы отправлен без подписи и отправлен с подписью
        ИначеЕсли СтрокаТЗ.Статус = "4" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;    
            //СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отправлен';uk = 'Відправлений'");//отправлен получателю
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Подписан и отправлен';uk = 'Підписаний та відправлений'")
            
        //ИначеЕсли СтрокаТЗ.Статус = "5" ИЛИ СтрокаТЗ.Статус = "12" Тогда //есть подпись двух сторон
        ИначеЕсли СтрокаТЗ.Статус = "5" Тогда
            СтрокаТЧ.КартинкаСтатуса = 0;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Принят';uk = 'Прийнято'")

        ИначеЕсли СтрокаТЗ.Статус = "6" Тогда
            СтрокаТЧ.КартинкаСтатуса = 3;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'В очереди на отправку в налоговую';uk = 'У черзі на відправку до податкової'")

        ИначеЕсли СтрокаТЗ.Статус = "7" Тогда
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отправлен в налоговую';uk = 'Відправлений до податкової'")

        ИначеЕсли СтрокаТЗ.Статус = "8" Тогда
            СтрокаТЧ.КартинкаСтатуса = 2;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Доставлен в налоговую';uk = 'Доставлений в податкову'")

        ИначеЕсли СтрокаТЗ.Статус = "9" Тогда
            СтрокаТЧ.КартинкаСтатуса = 5;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отклонен в налоговой';uk = 'Відхилений в податковій'")

        ИначеЕсли СтрокаТЗ.Статус = "10" Тогда
            СтрокаТЧ.КартинкаСтатуса = 0;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Принят';uk = 'Прийнято'")

        ИначеЕсли СтрокаТЗ.Статус = "11" Тогда // получатель отказался
            
            СтрокаТЧ.КартинкаСтатуса = 5;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отказ';uk = 'Відмова'");//получатель не согласен

        ИначеЕсли СтрокаТЗ.Статус = "12" Тогда
            СтрокаТЧ.КартинкаСтатуса = 0;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Подписан получателем';uk = 'Підписаний одержувачем'")

        ИначеЕсли СтрокаТЗ.Статус = "14" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отправлен без подписи';uk = 'Відправлений без підпису'")

        ИначеЕсли СтрокаТЗ.Статус = "15" Тогда 

            СтрокаТЧ.КартинкаСтатуса = 3;//?1
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Утвержден получателем';uk = 'Затверджено одержувачем'");
            
        ИначеЕсли СтрокаТЗ.Статус = "16" Тогда 

            СтрокаТЧ.КартинкаСтатуса = 5;
            СтрокаТЧ.СтатусДокумента =  НСтр("ru='Удален';uk = 'Видалений'");;

        //ИначеЕсли СтрокаТЗ.Статус = "17" Тогда
        //    СтрокаТЧ.КартинкаСтатуса = 2;    
        //    СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Отправлен без подписи';uk = 'Відправлений без підпису'")

        ИначеЕсли СтрокаТЗ.Статус = "18" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Ожидает расшифровки';uk = 'Очікує розшифровки'")

        ИначеЕсли СтрокаТЗ.Статус = "19" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Расшифрован';uk = 'Розшифрований'")

        ИначеЕсли СтрокаТЗ.Статус = "22" Тогда
            СтрокаТЧ.КартинкаСтатуса = 1;    
            СтрокаТЧ.СтатусДокумента = НСтр("ru='Подписан. Не отправлен';uk = 'Підписаний. Не відправлений'")

        Иначе
            
            СтрокаТЧ.КартинкаСтатуса = 6;
            СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Неизвестный статус';uk = 'Невідомий статус'");
            
        КонецЕсли;    
        
        Если ЗначениеЗаполнено(СтрокаТЗ.Комментарий) Тогда
            СтрокаТЧ.ТекстОшибки = СтрокаТЗ.Комментарий;
        КонецЕсли;    
        
    Иначе //документ не один в списке
        
        СтрокаТЧ.КартинкаСтатуса = 3;    
        СтрокаТЧ.СтатусДокумента = НСтр("ru = 'Есть дубли';uk = 'Є дублі'");

        СтрокаТЧ.ТекстОшибки = Ответ//для выбора документа из списка дублей для подписи SmartId
        
    КонецЕсли;
    
    Возврат Истина;
    
КонецФункции

Функция ПрочитатьКурсВалют(ТипКурса, НачПериода, КонПериода, Валюта, Кратность) Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат Ложь;
    КонецЕсли;

    ДействиеАналитики = "КурсыВалютЧтение";
    
    КурсыВалют.Очистить();
    ДанныеГрафика.Очистить();
    
    РесурсНаСервере = "/api/proxy/currency/history";
    
    //Если КонПериода - НачПериода > 60*60*24 * 14 Тогда //если разность больше 14 дней тогда график и так будет красивый
    //    парНачПериода = НачПериода;
    //    парКонПериода = КонПериода;

    //Иначе //иначе чтобы показать динамику графика нужно отнять 14 назад    
    //    парНачПериода = НачПериода - 60*60*24 * 14;
    //    парКонПериода = КонПериода;
    //КонецЕсли;    
    
    СтрокаЗапроса = "";//"&startDate=" + Формат(НачПериода, "ДФ=dd-MM-yyyy") + "&endDate=" + Формат(КонПериода, "ДФ=dd-MM-yyyy");
    РесурсНаСервере = РесурсНаСервере + "?startDate=" + Формат(НачПериода, "ДФ=dd-MM-yyyy") + "&endDate=" + Формат(КонПериода, "ДФ=dd-MM-yyyy");
    
    Ответ = ПолучитьКурсыВалютССервера(РесурсНаСервере, СтрокаЗапроса);
    ОбработатьОтветПоКурсамВалютЗаПериод(Ответ, НачПериода, КонПериода, ТипКурса, Валюта, Кратность);
    
    Возврат Ложь;
    
КонецФункции    

Функция РаспарситьОтветПоКурсамНБУ(Ответ, Кратность)
    
    ТЗКурсовВалют = Новый ТаблицаЗначений;
    ТЗКурсовВалют.Колонки.Добавить("Дата");
    ТЗКурсовВалют.Колонки.Добавить("КодВалюты");
    ТЗКурсовВалют.Колонки.Добавить("Кратность");
    ТЗКурсовВалют.Колонки.Добавить("Курс");
    
    Пока Найти(Ответ, "FilterCurrenciesResponse") > 0 Цикл
        
        КодВалюты = спцПрочитатьУзел("literalCode", Ответ); //здесь не код а имя валюты 
        
        Если КодВалюты = "UAH" Тогда
            Ответ = Сред(Ответ, Найти(Ответ,"</FilterCurrenciesResponse") + СтрДлина("</FilterCurrenciesResponse>"));
            Продолжить;
        КонецЕсли;
        
        ДатаСтрока = СтрЗаменить(Лев(спцПрочитатьУзел("operDay", Ответ), 10), "-", "");  
        
        ДатаКурса = Дата(Прав(ДатаСтрока,4), Сред(ДатаСтрока,3,2), Лев(ДатаСтрока,2));
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("Дата", ДатаКурса);
        СтруктураПоиска.Вставить("КодВалюты", КодВалюты);
        МассивСтрок = ТЗКурсовВалют.НайтиСтроки(СтруктураПоиска);
        
        Если МассивСтрок.Количество() = 1 Тогда
            НоваяСтрока = МассивСтрок[0];
        Иначе
            НоваяСтрока = ТЗКурсовВалют.Добавить();
        КонецЕсли;
        
        НоваяСтрока.Дата = ДатаКурса;
        НоваяСтрока.КодВалюты = КодВалюты; 
        НоваяСтрока.Кратность = Кратность;
        НоваяСтрока.Курс = Число(спцПрочитатьУзел("exchangeRate", Ответ)) * Кратность;
        
        Ответ = Сред(Ответ, Найти(Ответ,"</FilterCurrenciesResponse") + СтрДлина("</FilterCurrenciesResponse>"));
        
    КонецЦикла;
    
    Возврат ТЗКурсовВалют;
    
КонецФункции

Функция РаспарситьОтветПоКурсамПривата(ТипКурса, Ответ, Кратность)
    
    ТЗКурсовВалют = Новый ТаблицаЗначений;
    ТЗКурсовВалют.Колонки.Добавить("Дата");
    ТЗКурсовВалют.Колонки.Добавить("КодВалюты");
    ТЗКурсовВалют.Колонки.Добавить("Кратность");
    ТЗКурсовВалют.Колонки.Добавить("Курс");
    
    Пока Найти(Ответ, "CommercialHistoryResponse") > 0 Цикл
        
        Если спцПрочитатьУзел("operationCode", Ответ) = ТипКурса Тогда //берем курс по типу
            
            ДатаКурса = Дата(СтрЗаменить(Лев(спцПрочитатьУзел("date", Ответ), 10), "-", ""));  
            КодВалюты = спцПрочитатьУзел("currencyCode", Ответ); //здесь не код а имя валюты 
            
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("Дата", ДатаКурса);
            СтруктураПоиска.Вставить("КодВалюты", КодВалюты);
            МассивСтрок = ТЗКурсовВалют.НайтиСтроки(СтруктураПоиска);
            
            Если МассивСтрок.Количество() = 1 Тогда
                НоваяСтрока = МассивСтрок[0];
            Иначе
                НоваяСтрока = ТЗКурсовВалют.Добавить();
            КонецЕсли;
            
            НоваяСтрока.Дата = ДатаКурса;
            НоваяСтрока.КодВалюты = КодВалюты; 
            НоваяСтрока.Кратность = Кратность;
            НоваяСтрока.Курс = Число(спцПрочитатьУзел("rate", Ответ)) * Кратность;
            
        КонецЕсли;    
        
        Ответ = Сред(Ответ, Найти(Ответ,"</CommercialHistoryResponse") + СтрДлина("</CommercialHistoryResponse>"));
        
    КонецЦикла;
    
    Возврат ТЗКурсовВалют;
    
КонецФункции

Функция ПолучитьКурсВ1С(НачПериода, КонПериода)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    КурсыВалют.Период,
        |    КурсыВалют.Валюта,
        |    КурсыВалют.Курс,
        |    КурсыВалют.Кратность
        |ИЗ
        |    РегистрСведений.КурсыВалют КАК КурсыВалют
        |ГДЕ
        |    КурсыВалют.Период МЕЖДУ &НачПериода И &КонПериода";
    
    Запрос.УстановитьПараметр("КонПериода", КонПериода);
    Запрос.УстановитьПараметр("НачПериода", НачПериода);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

Функция ПрочитатьКрусПБАК(ОтветСервера, Валюта, Кратность, ТипКурса)
    
    ТЗКурсовВалют = Новый ТаблицаЗначений;
    ТЗКурсовВалют.Колонки.Добавить("Дата");
    ТЗКурсовВалют.Колонки.Добавить("Валюта");
    ТЗКурсовВалют.Колонки.Добавить("Кратность");
    ТЗКурсовВалют.Колонки.Добавить("Курс");

    Попытка
        СтруктураОтвета = jsonПрочитатьИнициализация(ОтветСервера)
    Исключение
        Возврат ТЗКурсовВалют
    КонецПопытки;

    Попытка
        
        Для Каждого СтрокаМассива Из СтруктураОтвета.data.history Цикл
            
            текВалюта = НайтиВалюту(СтрокаМассива.currencyCode, Ложь);
            
            Если НЕ ЗначениеЗаполнено(текВалюта) Тогда
                Продолжить;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Валюта) И текВалюта <> Валюта Тогда
                Продолжить;
            КонецЕсли;
            
            ДатаКурса = ПреобразоватьДату(СтрокаМассива.date);
            
            НоваяСтрока = ТЗКурсовВалют.Добавить();
            
            НоваяСтрока.Дата = ДатаКурса;
            НоваяСтрока.Валюта = текВалюта; 
            НоваяСтрока.Кратность = Кратность;
            Если ТипКурса = "N" Тогда
                курс = СтрокаМассива.nbuRate; 
            ИначеЕсли ТипКурса = "BS" Тогда
                курс = СтрокаМассива.rate_s;
            ИначеЕсли ТипКурса = "BB" Тогда
                курс = СтрокаМассива.rate_b
            КонецЕсли;
            
            НоваяСтрока.Курс = Число(курс) * Кратность;
            
        КонецЦикла;
        
    Исключение
        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа по курсам валют ';uk='Помилка при читанні відповіді по курсам валют'")
            + ОписаниеОшибки();
        СообщениеПользователю(ТекстСообщения);
        
        ЕстьОшибки = Истина;
        Если РежимОтладки Тогда
            СообщениеПользователю(ОтветСервера);    
        КонецЕсли;
        
        Возврат ТЗКурсовВалют;
    КонецПопытки;

    Если ТЗКурсовВалют.Количество() = 0 И СтруктураОтвета.data.history.Количество() > 0 Тогда
        ТекстСообщения = НСтр("ru = 'В справочнике отсутствуют необходимые валюты.';uk='В довіднику відсутні необхідні валюти.'");
        СообщениеПользователю(ТекстСообщения)
    КонецЕсли;

    Возврат ТЗКурсовВалют;
    
КонецФункции

Процедура ОбработатьОтветПоКурсамВалютЗаПериод(Ответ, НачПериода, КонПериода, ТипКурса, Валюта, Кратность)
    
    ТЗКурсовВалют = ПрочитатьКрусПБАК(Ответ, Валюта, Кратность, ТипКурса);    
    
    ТЗКурсовВалют.Сортировать("Дата");
    
    ТЗКурсовВалют1С = ПолучитьКурсВ1С(НачалоДня(НачПериода), КонецДня(КонПериода));
    
    Для Каждого СтрокаТЗ Из ТЗКурсовВалют Цикл
        
        
        Если СтрокаТЗ.Дата >= НачПериода И СтрокаТЗ.Дата <= КонПериода Тогда
            НоваяСтрока = КурсыВалют.Добавить();    
            НоваяСтрока.Валюта = СтрокаТЗ.Валюта;
            НоваяСтрока.Дата = СтрокаТЗ.Дата;
            НоваяСтрока.Загружать = Истина;
            НоваяСтрока.Кратность = СтрокаТЗ.Кратность;
            НоваяСтрока.Курс = СтрокаТЗ.Курс;
            
            СтруктураОтбора = Новый Структура;
            СтруктураОтбора.Вставить("Валюта", НоваяСтрока.Валюта);
            СтруктураОтбора.Вставить("Период", НоваяСтрока.Дата);
            
            МассивКурсов = ТЗКурсовВалют1С.НайтиСтроки(СтруктураОтбора);
            
            Если МассивКурсов.Количество() <> 0 Тогда
                НоваяСтрока.КратностьВ1С = МассивКурсов[0].Кратность;
                НоваяСтрока.КурсВ1С = МассивКурсов[0].Курс;
            КонецЕсли;
         КонецЕсли;
        
         //СтрокаГрафик = ДанныеГрафика.Добавить();
         //СтрокаГрафик.Валюта = СтрокаТЗ.Валюта;
         //СтрокаГрафик.Дата = СтрокаТЗ.Дата;
         //СтрокаГрафик.Кратность = СтрокаТЗ.Кратность;
         //СтрокаГрафик.Курс = СтрокаТЗ.Курс;
        
    КонецЦикла;
    
КонецПроцедуры    

Функция ПолучитьКурсыВалютССервера(РесурсНаСервере, СтрокаЗапроса)
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");

    //Если ЗначениеЗаполнено(ИдАК) Тогда
    //    НоваяСтрока = Заголовки.Добавить();
    //    НоваяСтрока.Заголовок = "id";
    //    НоваяСтрока.ЗначениеЗаголовка = ИдАК;
    //КонецЕсли;

    //НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "token";
    //НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
    
    стРезультат = УстановитьСоединение(АдресАК, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "", Заголовки);//, ,,Ложь);
    //УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders,
        //ТелоЗапроса, ИмяФайлаРезультата, Сессия, ДопЗаголовки = Неопределено, Кодировка = Неопределено, ПоSSL = Истина, POST = Истина, ЭтоДвоичныеДанные = Ложь)
        
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        
        ЕстьОшибки = Истина;
        
        Возврат "";
        
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение курсов валют';uk='Помилка відправки запиту на отримання курсів валют'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        ЕстьОшибки = Истина;

        Возврат "";
        
    КонецЕсли;
    
    Возврат ТелоОтвета;
    
КонецФункции

Процедура ЗаписатьКурсыВалют() Экспорт
    
    РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
    
    ДействиеАналитики = "КурсыВалютЗапись";
    
    Для Каждого СтрокаТЧ Из КурсыВалют Цикл
        
        Если СтрокаТЧ.Загружать Тогда
            
            ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
            
            ЗаписьКурсовВалют.Валюта    = СтрокаТЧ.Валюта;
            ЗаписьКурсовВалют.Период    = СтрокаТЧ.Дата;
            ЗаписьКурсовВалют.Курс      = СтрокаТЧ.Курс;
            ЗаписьКурсовВалют.Кратность = СтрокаТЧ.Кратность;
            
            Попытка
                ЗаписьКурсовВалют.Записать();
                СтрокаТЧ.КурсВ1С = СтрокаТЧ.Курс;
                СтрокаТЧ.КратностьВ1С = СтрокаТЧ.Кратность; 
            Исключение
                СообщениеПользователю(ОписаниеОшибки());
            КонецПопытки;    
            
        КонецЕсли;
        
    КонецЦикла;
    
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);

КонецПроцедуры

Функция ЗагрузитьВходящиеНН(НачПериода, КонПериода, ТипДок) Экспорт
    
    ДействиеАналитики = "ННЧтениеСписка";
    
    СписокДокументов.Очистить();
    
    НачалоПериода = Формат(НачПериода, "ДФ=yyyy-MM-dd");
    КонецПериода = Формат(КонПериода, "ДФ=yyyy-MM-dd");
    
    
    РесурсНаСервере = "/inbox"; //журнал входящие
    
    ЕстьОшибки = Ложь;
    
    ЖурналОтвет = ПрочитатьЖурналДокументов(РесурсНаСервере, НачалоПериода, СессияДок, ЕстьОшибки, ТипДок, ПоискПоДатеДокумента, КонецПериода);
    
    ТекДата = КонецДня(ТекДата) + 1;
    
    Если ЕстьОшибки Тогда
        Возврат Ложь;
    КонецЕсли;
    
    ТабВхНН = ПрочитатьТабВхНН(ЖурналОтвет);
    
    Для Каждого СтрокаТЗ Из ТабВхНН Цикл
        ЗаполнитьСтрокуВходящейНН(СтрокаТЗ, СессияДок);
    КонецЦикла;    
    
    
    Возврат Ложь;    
    
КонецФункции    

Процедура ПрочитатьДанныеННИзФайла(Адрес) Экспорт
    
    ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
    // получаем имя временного файла в локальной ФС на сервере
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
    // получаем файл правил для зачитки
    ДвоичныеДанные.Записать(ИмяВременногоФайла);
    ДвоичныеДанные = Неопределено;
    
    ПрочитатьФалйВходящейНН(ИмяВременногоФайла);
    
КонецПроцедуры    

Процедура ПрочитатьФалйВходящейНН(ИмяФайла)
    
    ДанныеXML = Новый ЧтениеXML;    
    Попытка
        ДанныеXML.ОткрытьФайл(ИмяФайла);
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла';uk='Помилка при завантаженні файлу'") + Символы.ПС + ОписаниеОшибки());
        Возврат;
    КонецПопытки;    
    
    ПостроительДом = Новый ПостроительDOM();
    Попытка
        ДанныеDOM = ПостроительДом.Прочитать(ДанныеXML);
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Неправильный формат xml.';uk='Помилка при завантаженні файлу. Невірний формат xml.'")
            + Символы.ПС + ОписаниеОшибки());
        Возврат
    КонецПопытки;    

    Если Прав(ПрочитатьЭлементDOM(ДанныеDOM, "C_DOC"), 2) <> "12" Тогда
     
        СообщениеПользователю(НСтр("ru='Ошибка при загрузке файла. Выбран файл неверного формата.';uk='Помилка при завантаженні файлу. Обрано файл невірного формату.'"));     
     
     КонецЕсли;    
    
    СтруктураДанныхДок = Новый Структура;
    СтруктураДанныхДок.Вставить("КодОрганизации", ПрочитатьЭлементDOM(ДанныеDOM, "HKBUY"));
    
    Если СтруктураДанныхДок.КодОрганизации <> ИНН И (СтруктураДанныхДок.КодОрганизации <> "600000000000" И СтруктураДанныхДок.КодОрганизации <> "400000000000") Тогда
        СообщениеПользователю(НСтр("ru = 'Организация по загружаемому документу не совпадает с организацией указанной в параметрах импорта. Документ не загружен!'; 
         |uk = 'Організація з завантажуваного документу не збігається з організацією зазначеної в параметрах імпорту. Документ не завантажений'"), Ложь);
        Возврат;
    КонецЕсли;
    
    СтруктураДанныхДок.Вставить("ДатаВходящегоДокумента", ПрочитатьЭлементDOM(ДанныеDOM, "HFILL"));
    СтруктураДанныхДок.Вставить("НомерВходящегоДокумента", ПрочитатьЭлементDOM(ДанныеDOM, "HNUM1") + ПрочитатьЭлементDOM(ДанныеDOM, "HNUM2") + ПрочитатьЭлементDOM(ДанныеDOM, "HNUM")); 
    СтруктураДанныхДок.Вставить("ВидОперации", ?(ПрочитатьЭлементDOM(ДанныеDOM, "C_DOC_SUB") = "010", "Налоговая", "Приложение"));
    
    СтруктураДанныхДок.Вставить("Наименование_Контрагента", ПрочитатьЭлементDOM(ДанныеDOM, "HNAMESEL"));
    СтруктураДанныхДок.Вставить("КодИНН_Контрагента", ПрочитатьЭлементDOM(ДанныеDOM, "HKSEL"));
    СтруктураДанныхДок.Вставить("Адрес_Контрагента", ПрочитатьЭлементDOM(ДанныеDOM, "HLOCSEL"));
    
    СуммаСНДС = ПрочитатьЭлементDOM(ДанныеDOM, "R04G11");
    
    Если НЕ ЗначениеЗаполнено(СуммаСНДС) Тогда  //приложение 2
        
        Попытка
            СуммаСНДС = 0;//Число(ПрочитатьЭлементDOM(ДанныеDOM, "R01G9")) + Число(ПрочитатьЭлементDOM(ДанныеDOM, "R001G03")); 
        Исключение
        КонецПопытки;    
        
    КонецЕсли;
    
    СтруктураДанныхДок.Вставить("СуммаИтого", СуммаСНДС);
    
    Текст = Новый ТекстовыйДокумент;
    Текст.Прочитать(ИмяФайла);
    
    СтруктураДанныхДок.Вставить("ТекстXML", Текст.ПолучитьТекст());
    
    ЗаполнитьСтрокуВходящейННXML(СтруктураДанныхДок);
    
КонецПроцедуры    

Процедура ЗаполнитьСтрокуВходящейННXML(СтруктураДанныхДок)
    
    ДанныеКонтрагента = Новый Структура;
    ДанныеКонтрагента.Вставить("НаименованиеКонтрагента", СтруктураДанныхДок.Наименование_Контрагента);
    ДанныеКонтрагента.Вставить("КодКонтрагента", ?(СтруктураДанныхДок.КодИНН_Контрагента = "600000000000" ИЛИ СтруктураДанныхДок.КодИНН_Контрагента = "400000000000", СтруктураДанныхДок.КодОрганизации, СтруктураДанныхДок.КодИНН_Контрагента));
    ДанныеКонтрагента.Вставить("СчетКонтрагента", "");
    
    лКонтрагент = НайтиСоздатьКонтрагента(ДанныеКонтрагента, Истина, Ложь);
    
    Если ЗначениеЗаполнено(Контрагент) И лКонтрагент <> Контрагент Тогда
        СообщениеПользователю(НСтр("ru = 'Контрагент по загружаемому документу не совпадает с контрагентом указанном в фильтре для заполнения документов. Документ не загружен!'; 
         |uk = 'Контрагент з завантажуваного документу не збігається з контрагентом зазначеному у фільтрі для заповнення документів. Документ не завантажений'"), Ложь);
        Возврат;
    КонецЕсли;
    
    НоваяСтрока = СписокДокументов.Добавить();
    
    НоваяСтрока.XML = СтруктураДанныхДок.ТекстXML;
    НоваяСтрока.Контрагент = лКонтрагент;
    НоваяСтрока.ВидДокумента = "РегистрацияВходящегоНалоговогоДокумента";
    НоваяСтрока.ВходящийНомер = СтруктураДанныхДок.НомерВходящегоДокумента;
    НоваяСтрока.Дата = Дата(Формат(Число(СтруктураДанныхДок.ДатаВходящегоДокумента), "ЧЦ=8; ЧРГ=.; ЧВН=; ЧГ=4,2,0") + " 00:00:00");
    НоваяСтрока.СуммаДокумента = СтруктураДанныхДок.СуммаИтого;
    НоваяСтрока.ИдентификаторКартинки = 99;
    НоваяСтрока.КартинкаОшибки = 0;
    НоваяСтрока.ВидОперации = СтруктураДанныхДок.ВидОперации; 
    
    ЗаполнитьСсылкуНаВходящНН(НоваяСтрока);
    
КонецПроцедуры

Процедура ЗаполнитьСсылкуНаВходящНН(НоваяСтрока)
    
    ДокуменСсылкаВБазе = Неопределено;
    
    СтруктураПоиска = Новый Структура;
    СтруктураПоиска.Вставить("ДатаВходящегоДокумента", НоваяСтрока.Дата);
    СтруктураПоиска.Вставить("НомерВходящегоДокумента", НоваяСтрока.ВходящийНомер);
    СтруктураПоиска.Вставить("СуммаДокумента", НоваяСтрока.СуммаДокумента);
    СтруктураПоиска.Вставить("Контрагент", НоваяСтрока.Контрагент);
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" ИЛИ ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда 
        ДокуменСсылкаВБазе = НайтиВходящуюНН(СтруктураПоиска); //для BP подходит процедура от UNF + УТ3
    Иначе
        Возврат; 
    КонецЕсли;    
        
    Если ЗначениеЗаполнено(ДокуменСсылкаВБазе) Тогда
        НоваяСтрока.Номер = ДокуменСсылкаВБазе.Номер;
        НоваяСтрока.СсылкаНаДокумент = ДокуменСсылкаВБазе; 
        
        Если ДокуменСсылкаВБазе.Проведен Тогда
            НоваяСтрока.ИдентификаторКартинки = 0;
        ИначеЕсли ДокуменСсылкаВБазе.ПометкаУдаления Тогда
            НоваяСтрока.ИдентификаторКартинки = 1;
        Иначе
            НоваяСтрока.ИдентификаторКартинки = 2;    
        КонецЕсли;
    Иначе
        НоваяСтрока.ВидОперации = ?(спцПрочитатьУзел("C_DOC_SUB", НоваяСтрока.XML) = "010", "Налоговая", "Приложение")
    КонецЕсли;
    
КонецПроцедуры

Функция НайтиВходящуюНН(СтруктураПоиска)
    
    СсылкаНаДокумент = Документы.РегистрацияВходящегоНалоговогоДокумента.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    РегистрацияВхНН.Ссылка
        |ИЗ
        |    Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВхНН
        |ГДЕ
        |    РегистрацияВхНН.Контрагент = &Контрагент
        |    И (РегистрацияВхНН.СуммаДокумента + РегистрацияВхНН.СуммаВозвратнойТары) = &СуммаДокумента
        |    И РегистрацияВхНН.НомерВходящегоДокумента = &НомерВходящегоДокумента
        |    И РегистрацияВхНН.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
        |    И НЕ РегистрацияВхНН.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
    Запрос.УстановитьПараметр("Контрагент", СтруктураПоиска.Контрагент);
    Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
    Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПоиска.СуммаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЦикла;
    
    Возврат СсылкаНаДокумент;
    
КонецФункции

Функция ПрочитатьДанныеТЧВходящейНН(СтрокаXML, СуммаВозвратнойТары)
    
    ТЗ_ДанныеДляТЧ = Новый ТаблицаЗначений;
    
    ДанныеXML = Новый ЧтениеXML;    
    Попытка
        ДанныеXML.УстановитьСтроку(СтрокаXML);
    Исключение
        СообщениеПользователю(НСтр("ru='Ошибка при чтении данных XML';uk='Помилка при читанні даних XML'") + Символы.ПС + ОписаниеОшибки());
        Возврат ТЗ_ДанныеДляТЧ;
    КонецПопытки;    
    
    ПостроительДом = Новый ПостроительDOM();
    ДанныеDOM = ПостроительДом.Прочитать(ДанныеXML);
    
    ТЗ_ДанныеДляТЧ.Колонки.Добавить("СтавкаНДС");
    ТЗ_ДанныеДляТЧ.Колонки.Добавить("СуммаCНДС");
    ТЗ_ДанныеДляТЧ.Колонки.Добавить("СуммаНДС");
    
    // суммы документа по ставкам
    БазаНДС20  = 0; СуммаНДС20 = 0;
    БазаНДС7   = 0; СуммаНДС7  = 0;
    БазаНДС0   = 0;
    БазаБезНДС = 0;
    Тара = 0;
    
    C_DOC_SUB = ПрочитатьЭлементDOM(ДанныеDOM, "C_DOC_SUB");
    HNUM1 = ПрочитатьЭлементDOM(ДанныеDOM, "HNUM1");
    
    // 20%
    Если C_DOC_SUB = "010" Тогда
        БазаНДС20 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G7");
        
        СуммаНДС20 = ПрочитатьЭлементDOM(ДанныеDOM, "R03G7");
        
    Иначе
        
        БазаНДС20 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G9");
        
        СуммаНДС20 = ПрочитатьЭлементDOM(ДанныеDOM, "R02G9");
        
    КонецЕсли;
    
    // 7% и 0%
    Если HNUM1 = "7" Тогда
        
        Если C_DOC_SUB = "010" Тогда
            
            БазаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G8");
            
            СуммаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R03G8");
            
            // В сумме НДС по ставке 7 могут находиться ошибочно разделители триад
            СуммаНДС7 = СтрЗаменить(СуммаНДС7, " ", "");
            
        Иначе
            
            БазаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G10");
            
            СуммаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R02G9");
            
        КонецЕсли;
        
    Иначе
        
        Если C_DOC_SUB = "010" Тогда
            
            БазаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G109");
            
            СуммаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R03G109");
            
            БазаНДС0 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G8");
            
            СуммаНДС0 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G9");
            
            БазаНДС0 = Число(?(ЗначениеЗаполнено(БазаНДС0), БазаНДС0, 0)) + Число(?(ЗначениеЗаполнено(СуммаНДС0), СуммаНДС0, 0));
            
        Иначе
            
            БазаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G111");
            
            СуммаНДС7 = ПрочитатьЭлементDOM(ДанныеDOM, "R02G111");
            
            БазаНДС0 = ПрочитатьЭлементDOM(ДанныеDOM, "R01G10");
            
        КонецЕсли;
        
        СуммаНДС0 = ПрочитатьЭлементDOM(ДанныеDOM, "R006G03");
        БазаНДС0 = Число(?(ЗначениеЗаполнено(БазаНДС0), БазаНДС0, 0)) + Число(?(ЗначениеЗаполнено(СуммаНДС0), СуммаНДС0, 0));
        
        СуммаНДС0 = ПрочитатьЭлементDOM(ДанныеDOM, "R007G03");
        БазаНДС0 = Число(?(ЗначениеЗаполнено(БазаНДС0), БазаНДС0, 0)) + Число(?(ЗначениеЗаполнено(СуммаНДС0), СуммаНДС0, 0));    
        
    КонецЕсли;
    
    // БезНДС
    Если C_DOC_SUB = "010" Тогда
        БазаБезНДС = ПрочитатьЭлементDOM(ДанныеDOM, "R01G10");
    Иначе
        БазаБезНДС = ПрочитатьЭлементDOM(ДанныеDOM, "R01G11");
    КонецЕсли;
            
    // Тара
    Если C_DOC_SUB = "010" Тогда
        Тара = ПрочитатьЭлементDOM(ДанныеDOM, "R02G11");
    КонецЕсли;
    
    // добавляем строки в ТЧ
    Если ЗначениеЗаполнено(БазаНДС20) И Число(БазаНДС20) <> 0 Тогда
        
        СтрокаДок = ТЗ_ДанныеДляТЧ.Добавить();
        СтрокаДок.СтавкаНДС = "НДС20";
        СтрокаДок.СуммаCНДС = Число(БазаНДС20) + Число(СуммаНДС20);
        СтрокаДок.СуммаНДС  = Число(СуммаНДС20);
    
    КонецЕсли;
    
    Если ЗначениеЗаполнено(БазаНДС7) И Число(БазаНДС7) <> 0 Тогда
        
        СтрокаДок = ТЗ_ДанныеДляТЧ.Добавить();
        СтрокаДок.СтавкаНДС = "НДС7";
        СтрокаДок.СуммаCНДС = Число(БазаНДС7) + Число(СуммаНДС7);
        СтрокаДок.СуммаНДС  = Число(СуммаНДС7);
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(БазаНДС0) И Число(БазаНДС0) <> 0 Тогда
        
        СтрокаДок = ТЗ_ДанныеДляТЧ.Добавить();
        СтрокаДок.СтавкаНДС = "НДС0";
        СтрокаДок.СуммаCНДС = Число(БазаНДС0);
        СтрокаДок.СуммаНДС  = 0;
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(БазаБезНДС) И Число(БазаБезНДС) <> 0 Тогда
        
        СтрокаДок = ТЗ_ДанныеДляТЧ.Добавить();
        СтрокаДок.СтавкаНДС = "БезНДС";
        СтрокаДок.СуммаCНДС = Число(БазаБезНДС);
        СтрокаДок.СуммаНДС  = 0;
    
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Тара) И Число(Тара) <> 0 Тогда
        
        СуммаВозвратнойТары = Число(Тара);
    
    КонецЕсли;
    
    ТЗ_ДанныеДляТЧ.Свернуть("СтавкаНДС", "СуммаCНДС, СуммаНДС");
    
    Возврат ТЗ_ДанныеДляТЧ;
    
КонецФункции

Функция ПрочитатьЭлементDOM(ДокументDOM, ИмяЭлемента)
    
    СписокДом = ДокументDOM.ПолучитьЭлементыПоИмени(ИмяЭлемента);
    
    Если СписокДом.Количество() = 0 Тогда
        Возврат "";
    Иначе
        Возврат СписокДом[0].ТекстовоеСодержимое;
    КонецЕсли;    
    
КонецФункции    

Функция ЗаписатьВходящиеНН(ТипДок) Экспорт
    
    ДействиеАналитики = "ННП2Загрузка";
    
    Для каждого СтрокаТЧ из СписокДокументов Цикл //цикл прерывается каждый раз, и начинается заново для оставшихся строк
        
        Если НЕ СтрокаТЧ.Флажок ИЛИ СтрокаТЧ.ВидДокумента <> ТипДок Тогда
            Продолжить;
        КонецЕсли;    
        
        СтрокаТЧ.КартинкаОшибки = 0;
        СтрокаТЧ.ТекстОшибки = "";
        
        ЕстьОтмеченные = Истина;
        
        СтрокаТЧ.Флажок = Ложь;
        
        ВыпВЦикле = Ложь;
        
        Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И НЕ ПерезаполнятьНайденныеДокументы Тогда
            
            ТекстСообщения = НСтр("ru = 'Документ отмеченный в строке №%НомерСтроки% уже был загружен ранее.'; uk = 'Документ зазначений у рядку №%НомерСтроки% вже був завантажений раніше.' ");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            
            СообщениеПользователю(ТекстСообщения, Ложь);
            
            СтрокаТЧ.КартинкаОшибки = 2;
            СтрокаТЧ.ТекстОшибки = ТекстСообщения;
            Продолжить;
            
        КонецЕсли;
        
            ВыпВЦикле = Истина;
            ЗаписатьВходящуюНН(СтрокаТЧ);
        
        Возврат ВыпВЦикле;
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для записи!'; uk = 'Немає відмічених документів для запису!'"), Ложь);
    Иначе
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);    
    КонецЕсли;    
    
    ЕстьОтмеченные = Ложь;
    ЕстьОшибки = Ложь;
    
    Возврат Ложь;
    
КонецФункции

Процедура ЗаписатьВходящуюНН(СтрокаТЧ)
    
    Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаНаДокумент) И ПерезаполнятьНайденныеДокументы Тогда
        НовыйДок = СтрокаТЧ.СсылкаНаДокумент.ПолучитьОбъект();     
    Иначе    
        НовыйДок = Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();    
    КонецЕсли;
    
    НовыйДок.ВидОперации = ?(СтрокаТЧ.ВидОперации = "Налоговая",  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная, Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат);
    НовыйДок.Организация = Организация;
    НовыйДок.Дата = СтрокаТЧ.Дата;
    НовыйДок.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
    НовыйДок.НомерВходящегоДокумента = СтрокаТЧ.ВходящийНомер;
    НовыйДок.Контрагент = СтрокаТЧ.Контрагент;
    
    Если ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        НовыйДок.Партнер = СтрокаТЧ.Контрагент.Партнер;
        
        ХозяйственныеОперацииЗакупки = Новый Массив;
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
        ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
        Попытка
            Выполнить("НовыйДок.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(НовыйДок, ХозяйственныеОперацииЗакупки)");
        Исключение
        КонецПопытки;    
        
    Иначе
        Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            Выполнить("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(НовыйДок.ДоговорКонтрагента, НовыйДок.Контрагент, НовыйДок.Организация)");
        Иначе
            Попытка
                НовыйДок.Договор = НовыйДок.Контрагент.ДоговорПоУмолчанию;
            Исключение
                // BSB, ...
            КонецПопытки;
            
        КонецЕсли;    
    КонецЕсли;
    
    СуммаВозвратнойТары = 0;
    
    ТЗ_ДанныеДляТЧ = ПрочитатьДанныеТЧВходящейНН(СтрокаТЧ.XML, СуммаВозвратнойТары);
    
    НовыйДок.СуммаВозвратнойТары = СуммаВозвратнойТары;
    
    Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
        НовыйДок.Товары.Очистить();
        
    ИначеЕсли ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда     
        
        НовыйДок.Запасы.Очистить();
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда     
        
        НовыйДок.Поставка.Очистить();
        
    КонецЕсли;
    
    Для Каждого СтокаТЗ Из ТЗ_ДанныеДляТЧ Цикл
        
        Если ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
            
            НоваяСтрока = НовыйДок.Товары.Добавить();
            НоваяСтрока.ДляХозяйственнойДеятельности = Истина;
            НоваяСтрока.ДляОперацийОблагаемыхНДС     = Истина;
            НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСтатьюНалоговойДекларации(НовыйДок.ВидОперации, НоваяСтрока);
            НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоСтроковомуПредставлению(СтокаТЗ.СтавкаНДС);
            НоваяСтрока.СуммаВзаиморасчетов = СтокаТЗ.СуммаCНДС;
            //НоваяСтрока.Всего = НоваяСтрока.СуммаВзаиморасчетов;
            НоваяСтрока.СуммаНДС = СтокаТЗ.СуммаНДС;
            НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС;
        
        ИначеЕсли ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда     
            
            НоваяСтрока = НовыйДок.Запасы.Добавить();
            Если ИдКонф = "UNF" Тогда
                НоваяСтрока.СтатьяКнигиПриобретения = НовыйДок.ОпределитьСтатьюНалоговойДекларации(НоваяСтрока);
            Иначе//Если ИдКонф = "BSB" Тогда
                НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = НовыйДок.ОпределитьСтатьюНалоговойДекларации(НоваяСтрока)
            КонецЕсли;
            НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоСтроковомуПредставлению(СтокаТЗ.СтавкаНДС);
            НоваяСтрока.СуммаВзаиморасчетов = СтокаТЗ.СуммаCНДС;
            НоваяСтрока.Всего = НоваяСтрока.СуммаВзаиморасчетов;
            НоваяСтрока.СуммаНДС = СтокаТЗ.СуммаНДС;
            НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС;
            
        ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда     
            
            НоваяСтрока = НовыйДок.Поставка.Добавить();
            НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСПоСтроковомуПредставлению(СтокаТЗ.СтавкаНДС);
            НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ПолучитьСтатьюНалоговойДекларации(НовыйДок.ВидОперации, НоваяСтрока.СтавкаНДС);
            НоваяСтрока.СуммаНДС = СтокаТЗ.СуммаНДС;
            НоваяСтрока.СуммаСНДС = СтокаТЗ.СуммаCНДС + СтокаТЗ.СуммаНДС;
            НоваяСтрока.Сумма = СтокаТЗ.СуммаCНДС; //путаница получилась
            
        КонецЕсли;    
        
    КонецЦикла;

    СтрокаТЧ.СуммаДокумента = СтрокаТЧ.СуммаДокумента - НовыйДок.СуммаВозвратнойТары; //нужно чтобы небыло сообщения об ошибке из-за суммы тары
    
    ЗаписатьДокумент(НовыйДок, СтрокаТЧ);
    
    СтрокаТЧ.СуммаДокумента = СтрокаТЧ.СуммаДокумента + НовыйДок.СуммаВозвратнойТары;
    
КонецПроцедуры

Процедура ЗаполнитьСтрокуВходящейНН(СтрокаТЗ, СессияДок)
    
    Если ЗначениеЗаполнено(Контрагент) И СтрокаТЗ.Контрагент <> Контрагент Тогда
        Возврат;    
    КонецЕсли;
    
    НоваяСтрока = СписокДокументов.Добавить();
    Попытка
        НоваяСтрока.Дата = Дата(СтрЗаменить(СтрокаТЗ.Дата, "-",""));
    Исключение
    КонецПопытки;
    НоваяСтрока.ВидДокумента = "РегистрацияВходящегоНалоговогоДокумента"; 
    НоваяСтрока.ИдентификаторКартинки = 5; //такой картинки нет, так надо
    НоваяСтрока.ВходящийНомер = СтрокаТЗ.Номер;
    НоваяСтрока.Контрагент = СтрокаТЗ.Контрагент;
     НоваяСтрока.СуммаДокумента = СтрокаТЗ.Сумма;
    НоваяСтрока.XML = ПолучитьТекстXMLПоФинДок(СтрокаТЗ.ДокИД, СессияДок);    
    
    ЗаполнитьСсылкуНаВходящНН(НоваяСтрока);
    
КонецПроцедуры

Функция ПрочитатьТабВхНН(ОтветСервера, ЗаполнятьКонтрагента = Истина)
    
    ТаблицаВхНН = Новый ТаблицаЗначений;
    ТаблицаВхНН.Колонки.Добавить("ДокИД");
    ТаблицаВхНН.Колонки.Добавить("Дата");
    ТаблицаВхНН.Колонки.Добавить("Номер");
    ТаблицаВхНН.Колонки.Добавить("Контрагент");
    ТаблицаВхНН.Колонки.Добавить("Сумма");
    ТаблицаВхНН.Колонки.Добавить("Статус");
    ТаблицаВхНН.Колонки.Добавить("Комментарий");
    ТаблицаВхНН.Колонки.Добавить("ИмяДокумента");

    Попытка
        СтруктураОтвета = jsonПрочитатьИнициализация(ОтветСервера);
        ТекстОписаниеОшибки = ""
    Исключение
        ТекстОписаниеОшибки = ОписаниеОшибки();
        СтруктураОтвета = Неопределено
    КонецПопытки;

    Если ТипЗнч(СтруктураОтвета) <> Тип("Структура") Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при чтении ответа на импорт документов ';uk='Помилка при читанні відповіді на імпорт документів'")
            + ТекстОписаниеОшибки;
        СообщениеПользователю(ТекстСообщения);
        
        ЕстьОшибки = Истина;
        Если РежимОтладки Тогда
            СообщениеПользователю(СтруктураОтвета);    
        КонецЕсли;
        
        Возврат ТаблицаВхНН;
    
    КонецЕсли;
    
    Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
        
        Если НЕ РежимОтладки Тогда
            СообщениеПользователю(СтруктураОтвета.code + ": " + СтруктураОтвета.message);
        Иначе
            СообщитьСтруктуру(СтруктураОтвета);    
        КонецЕсли;
        
        Возврат ТаблицаВхНН;
        
    КонецЕсли;
        
    Для Каждого Докумет Из СтруктураОтвета.documents Цикл
        
        НоваяСтрока = ТаблицаВхНН.Добавить();
        НоваяСтрока.ДокИД = Докумет.id;
        НоваяСтрока.Дата = Докумет.DOC_DATE;
        НоваяСтрока.Номер = Докумет.DOC_NUMBER;
        
        ИмяКонтрагента = спцЗаменитьСпецСимволыXML(Докумет.OKPO_SENDER_NAME); 
        ОКПОКонтрагента = Докумет.OKPO_SENDER;
        
        Если СокрЛП(ОКПОКонтрагента) = СокрЛП(КодПоЕДРПОУ) Тогда // поле КодПоЕДРПОУ - должно быть заполнено в настройках обработки
            //если полученный из "OKPO_RECIPIENT" равен коду текущей организации, то берем OKPO_SENDER
            ИмяКонтрагента = спцЗаменитьСпецСимволыXML(Докумет.OKPO_RECIPIENT_NAME);
            ОКПОКонтрагента = Докумет.OKPO_RECIPIENT;
        КонецЕсли;
        
        Если ЗаполнятьКонтрагента Тогда
            
            СтруктураПоиска = Новый Структура;
            СтруктураПоиска.Вставить("НаименованиеКонтрагента", ИмяКонтрагента);
            СтруктураПоиска.Вставить("КодКонтрагента", ОКПОКонтрагента);
            СтруктураПоиска.Вставить("СчетКонтрагента", "");
            
            Покупатель = Ложь;    
            
            КонтрагентИзДок = НайтиСоздатьКонтрагента(СтруктураПоиска, Истина, Покупатель);
            НоваяСтрока.Контрагент = КонтрагентИзДок;
        Иначе
            НоваяСтрока.Контрагент    = ОКПОКонтрагента;
        КонецЕсли;
        
        НоваяСтрока.Статус = Докумет.STATUS;
        
        НоваяСтрока.Сумма = Докумет.AMOUNT;
        
        Попытка
            НоваяСтрока.ИмяДокумента = Докумет.ORIGINAL_DOC_NAME;
        Исключение
        КонецПопытки;
        
        Если Докумет.Свойство("COMMENT") Тогда
            НоваяСтрока.Комментарий = Докумет.COMMENT;
        КонецЕсли;        
        
    КонецЦикла;
    
    Возврат ТаблицаВхНН;
    
КонецФункции    

Функция СтроковоеПредставлениеСтавкиНДС(ТекСтавкаНДС)
    
    ПредставлениеСтавки = "БезНДС";

    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        Если ТекСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%") Тогда
            ПредставлениеСтавки = "НДС0";
        ИначеЕсли ТекСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС") Тогда
            ПредставлениеСтавки = "БезНДС";
        ИначеЕсли ТекСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не НДС") Тогда
            ПредставлениеСтавки = "НеНДС";
        ИначеЕсли ТекСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") Тогда
            ПредставлениеСтавки = "НДС7";    
        ИначеЕсли ТекСтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС Тогда
            ПредставлениеСтавки = "НДС20";        
        Иначе
            ПредставлениеСтавки = "БезНДС";
        КонецЕсли;
        
    ИначеЕсли ИдКонф = "BP" Тогда
        
        Попытка
            ПредставлениеСтавки = ТекСтавкаНДС.Метаданные().ЗначенияПеречисления.Получить(Перечисления.СтавкиНДС.Индекс(ТекСтавкаНДС)).Имя;
        Исключение
        КонецПопытки;
        
    КонецЕсли;
    
    Возврат ПредставлениеСтавки;
    
КонецФункции

Функция ПолучитьСтавкуНДСПоСтроковомуПредставлению(ПредставлениеСтавки)
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        Если ПредставлениеСтавки = "НДС0" Тогда
            лСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
        ИначеЕсли ПредставлениеСтавки = "БезНДС" Тогда
            лСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
        ИначеЕсли ПредставлениеСтавки = "НеНДС" Тогда
            лСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не НДС");
        ИначеЕсли ПредставлениеСтавки = "НДС7" Тогда
            лСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("7%");    
        ИначеЕсли ПредставлениеСтавки = "НДС20" Тогда
            лСтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
        Иначе
            лСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
        КонецЕсли;    
        
    ИначеЕсли ИдКонф = "BP" ИЛИ ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        Попытка
            лСтавкаНДС = Перечисления.СтавкиНДС[ПредставлениеСтавки];
        Исключение
            лСтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
        КонецПопытки;
        
    КонецЕсли;
    
    Возврат лСтавкаНДС; 
    
КонецФункции

Функция ЭтоЮрЛицо(спрОрганизация)
    
    Если ИдКонф = "UNF" ИЛИ ИдКонф = "OSMD" Или ИдКонф = "BSB" Тогда 
        Попытка
            Если спрОрганизация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
                Возврат Истина;
            Иначе
                Возврат Ложь;
            КонецЕсли;
        Исключение
            //  BSB, ...
        КонецПопытки;
        
        Попытка
            // BSB, ...
            Если спрОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
                Возврат Истина;
            Иначе
                Возврат Ложь;
            КонецЕсли;
        Исключение
        КонецПопытки;
        
        Попытка
            Если спрОрганизация.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
                Возврат Истина;
            Иначе
                Возврат Ложь;
            КонецЕсли;
        Исключение
            //  BSB, ...
        КонецПопытки;
        
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        Если спрОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
            Возврат Истина;
        Иначе
            Возврат Ложь;
        КонецЕсли;
    ИначеЕсли ИдКонф = "KUBU" Тогда
        
        Попытка
            Если спрОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
                Возврат Истина;
            Иначе
                Возврат Ложь;
            КонецЕсли;
        Исключение
            Возврат Истина;
        КонецПопытки;
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        Если спрОрганизация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо ИЛИ спрОрганизация.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда //вот это бред так бред, УТ 3.0 - круть
            Возврат Истина;
        Иначе
            Возврат Ложь;
        КонецЕсли;    
    КонецЕсли;
    
    СообщениеПользователю("Внимание! При получении признака Юр/Физ лицо обнаружена неподдерживаемая конфигурация!");
    Возврат Ложь;
    
КонецФункции    

Функция BP_ПолучитьШапкуНалоговогоДокумента(Документ)
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ТекущийДокумент", Документ.Ссылка);
    
    Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
        
        Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Номер,
        |    ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
        |    ЭлектронныйДокумент,
        |    ТипПричиныНевыдачиПокупателю,
        |    ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены,
        |    СпецРежимНалогообложения,
        |    ДоговорКонтрагента.Дата  КАК ДатаДоговора,
        |    ДоговорКонтрагента.Номер КАК НомерДоговора,
        |    Дата,
        |    Контрагент,
        |    Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
        |    Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
        
        |    ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции, 
        
        |    Организация,
        |    Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
        |    ЛьготаНДС,
        |    УсловиеПродажи,
        |    ВидДоговора,
        |    ФормаРасчетов,
        |    ВидОперации,
        |    ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
        |    ОбособленноеПодразделение.Префикс КАК Префикс,
        |    УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
        |    ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены,
        |    ПодтверждаетсяГТД,
        |    ПоставкаДипПредставительству,
        |    КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
        |ИЗ
        |    Документ.НалоговаяНакладная КАК НалоговаяНакладная
        |
        |ГДЕ
        |    НалоговаяНакладная.Ссылка = &ТекущийДокумент";
    Иначе
        Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    Номер,
        |    Дата,
        
        |   ДоговорКонтрагента.Номер КАК НомерДоговора,
        |   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
        
        |    ВидОперации,
        |    Контрагент,
        |    Организация,
        |    Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
        
        |    Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
        |    Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
        
        |    ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции, 
        
        |    ВидДоговора,
        |   ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
        |    ЭлектронныйДокумент,
        |    РегистрируетсяВЕРННПокупателем,
        
        |   ТипПричиныНевыдачиПокупателю,
        |    НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
        |    НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
        |    НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
        |    НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
        
        |    НалоговаяНакладная.ПоставкаДипПредставительству КАК ПоставкаДипПредставительству,
        
        |    НалоговаяНакладная,
        |    НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
        |    НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
        |    КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
        |ИЗ
        |    Документ.Приложение2КНалоговойНакладной КАК Приложение2
        |
        |ГДЕ
        |    Приложение2.Ссылка = &ТекущийДокумент";
        
    КонецЕсли;
    
    Шапка = Запрос.Выполнить().Выбрать();
    Шапка.Следующий();

    Возврат Шапка;

КонецФункции    

Функция ИмяТипаФинДокПоРазделу(Раздел, Входящий = Неопределено) Экспорт
    
    СтрукутраВозврата = Новый Структура;
    СтрукутраВозврата.Вставить("ИмяВходящего", "");
    СтрукутраВозврата.Вставить("ИмяИсходящего", "");
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        
        Если Раздел = "Счета" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "СчетНаОплатуПоставщика");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "СчетНаОплату%");
            
        ИначеЕсли Раздел = "Акты" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПриходнаяНакладная");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "АктВыполненныхРабот");
            
        ИначеЕсли Раздел = "Заказы" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ЗаказПокупателя");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "ЗаказПоставщику");
            
        ИначеЕсли Раздел = "Расходные" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПриходнаяНакладная");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "РасходнаяНакладная");
    
        КонецЕсли;
        
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        
        Если Раздел = "Счета" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "СчетНаОплатуПоставщика");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "СчетНаОплатуПокупателю");
            
        ИначеЕсли Раздел = "Акты" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПоступлениеТоваровУслуг");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "РеализацияТоваровУслуг");
            
        ИначеЕсли Раздел = "Расходные" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПоступлениеТоваровУслуг");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "РеализацияТоваровУслуг");
    
        КонецЕсли;
        
    ИначеЕсли ИдКонф = "UT_3" ИЛИ ИдКонф = "ERP" Тогда
        
        Если Раздел = "Счета" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "СчетНаОплатуКлиенту");
            
        ИначеЕсли Раздел = "Акты" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПоступлениеТоваровУслуг");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "АктВыполненныхРабот");
            
        ИначеЕсли Раздел = "Заказы" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ЗаказКлиента");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "ЗаказПоставщику");
            
        ИначеЕсли Раздел = "Расходные" Тогда
            
            СтрукутраВозврата.Вставить("ИмяВходящего", "ПоступлениеТоваровУслуг");
            СтрукутраВозврата.Вставить("ИмяИсходящего", "РеализацияТоваровУслуг");
    
        КонецЕсли;    
    КонецЕсли;
    
    Если Входящий = Неопределено Тогда
        Возврат СтрукутраВозврата;
    ИначеЕсли Входящий = Истина Тогда
        Возврат СтрукутраВозврата.ИмяВходящего;
    Иначе        
        Возврат СтрукутраВозврата.ИмяИсходящего;
    КонецЕсли;
    
КонецФункции    

Процедура ЗаполнитьСписокОтчетов(РеглОтчет, НачПериода, КонПериода) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    РегламентированныйОтчет.Ссылка КАК СсылкаНаОтчет,
    |    РегламентированныйОтчет.Организация,
    |    РегламентированныйОтчет.НаименованиеОтчета,
    |    РегламентированныйОтчет.ПредставлениеПериода КАК Период
    |ИЗ
    |    Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
    |ГДЕ
    |    НЕ РегламентированныйОтчет.ПометкаУдаления
    |    И РегламентированныйОтчет.ДатаНачала >= &НачПериода
    |    И РегламентированныйОтчет.ДатаОкончания <= &КонПериода
    |    И РегламентированныйОтчет.Организация = &Организация" + ?(ЗначениеЗаполнено(РеглОтчет), " И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета", "");
    
    Если ЗначениеЗаполнено(РеглОтчет) Тогда     
        Запрос.УстановитьПараметр("ИсточникОтчета", РеглОтчет.ИсточникОтчета);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("КонПериода", КонецКвартала(КонПериода));
    Запрос.УстановитьПараметр("НачПериода", НачПериода);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РеглОтчеты.Загрузить(Запрос.Выполнить().Выгрузить());
    
КонецПроцедуры    

Функция ПолучитьТекстыВыгрузкиОтчета(СпДокОсн) Экспорт

    Для каждого ЭлементСЗ Из СпДокОсн Цикл
        ДокументОбъект = ЭлементСЗ.Значение.ПолучитьОбъект();
        Попытка
            ЭлементСЗ.Представление = ДокументОбъект.Выгрузки
        Исключение
        КонецПопытки
    КонецЦикла;

    //Возврат СпДокОсн

КонецФункции

Процедура ОтправитьОтчеты(МассивВыгрузки) Экспорт

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат
    КонецЕсли;

    //Обработка массива выгрузки
    ТЗВыгрузки = Новый ТаблицаЗначений;
    ТЗВыгрузки.Колонки.Добавить("ИмяФайла");
    ТЗВыгрузки.Колонки.Добавить("Текст");
    ТЗВыгрузки.Колонки.Добавить("СсылкаНаОтчет");
    
    Для Каждого СтрокаМассива Из МассивВыгрузки Цикл
        ЗаполнитьЗначенияСвойств(ТЗВыгрузки.Добавить(), СтрокаМассива);    
    КонецЦикла;

    //СессияДок = АвторизацияБО(Истина); //параметр Истина говорит что в реквизит XML будет помещен CSRF-TOKEN
    
    Для Каждого СтрокаТЧ Из РеглОтчеты Цикл
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;    
        КонецЕсли;     
        
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("СсылкаНаОтчет", СтрокаТЧ.СсылкаНаОтчет);
        МассивНайданныхВыгрузок = ТЗВыгрузки.НайтиСтроки(СтруктураПоиска);
        
        //Если МассивНайданныхВыгрузок.Количество() = 1 Тогда
        //    СтрокаТЧ.ИмяФайлаОтчета = МассивНайданныхВыгрузок[0].ИмяФайла;
        //    СтрокаТЧ.ТекстОтчета = МассивНайданныхВыгрузок[0].Текст;    
        //Иначе
            СтруктраАрхива = СоздатьАрхивИЗаполнитьТекстыОтчетов(МассивНайданныхВыгрузок);
            СтрокаТЧ.ИмяФайлаОтчета = СтруктраАрхива.ИмяФайла;
            СтрокаТЧ.ТекстОтчета = СтруктраАрхива.ТекстОтчета;        
        //КонецЕсли;
        
        СтрокаТЧ.Флажок = Ложь;
        
        Попытка
            ИмяФайлаОтчета = МассивНайданныхВыгрузок[0].ИмяФайла; //СтрокаТЧ.ИмяФайлаОтчета;
        Исключение
            ЕстьОшибки = Истина;
            ТекстСообщения = НСтр("ru = 'Ошибка при отправке отчета в сервис электронной отчетности. Отсутствует файл отчета '; uk='Помилка при відправці звіту у сервіс електронної звітності. Відсутній файл звіту '")
                + СтрокаТЧ.НаименованиеОтчета;
            СообщениеПользователю(ТекстСообщения);
            Возврат
        КонецПопытки;
        
        ИнтернетАдрес = АдресАК;
                
        РесурсНаСервере = "/api/proxy/eo/documents/create-b64";
        
        //ТекстОтчета = Новый ДвоичныеДанные(КаталогВременныхФайлов() + СтруктраАрхива.ИмяФайла);
        
        
        СтрокаЗапроса = "&uploadedFileB64=" + EncodeURL(СтрЗаменить(СтрЗаменить(Base64Строка(СтруктраАрхива.ТекстОтчета), Символы.ВК, ""),Символы.ПС , ""))
                        + "&uploadedFileName=" + ИмяФайлаОтчета
                        + "&okpo=" + КодПоЕДРПОУ
                        + "&duplicate=remove";
        
        СтрокаТЧ.ТекстОтчета = "";
        UserAgentHeaders = ОпределитьUserAgentHeaders();
        
        
        Заголовки = Новый ТаблицаЗначений;
        Заголовки.Колонки.Добавить("Заголовок");
        Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
        
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Content-Type";
        НоваяСтрока.ЗначениеЗаголовка = "application/x-www-form-urlencoded";
        
        //НоваяСтрока = Заголовки.Добавить();
        //НоваяСтрока.Заголовок = "Content-Lenght";
        //НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(ТекстДляОтправки));

        Если ЗначениеЗаполнено(ИдАК) Тогда
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "id";
            НоваяСтрока.ЗначениеЗаголовка = ИдАК;
        КонецЕсли;

        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "token";
        НоваяСтрока.ЗначениеЗаголовка = ТокенАК;
                 
        стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "", Заголовки);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            
            ЕстьОшибки = Истина;
            Возврат;
            
        Иначе
            Статус = стРезультат.Статус;
            СессияДок = стРезультат.Cookie;
            ТелоОтвета = стРезультат.ТелоОтвета;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда
            
            ТекстСообщения = НСтр("ru = 'Ошибка при отправке отчета в сервис электронной отчетности. '; uk='Помилка при відправці звіту у сервіс електронної звітності. '") + СтрокаТЧ.НаименованиеОтчета;
            СообщениеПользователю(ТекстСообщения);
            ЕстьОшибки = Истина;
            
            Возврат;
            
        КонецЕсли;    
        
        Если Найти(ТелоОтвета, """result"":""success""") > 0 ИЛИ Найти(ТелоОтвета, """status"":""success""") > 0 Тогда
            
            ТекстСообщения = НСтр("ru = 'Отчет успешно отправлен. '; uk='Звіт успішно відправлений. '") + СтрокаТЧ.НаименованиеОтчета;
            СообщениеПользователю(ТекстСообщения, Ложь);
            
        Иначе
            
            ТекстСообщения = НСтр("ru = 'Ошибка при сохранении отчета в сервисе электронной отчетности. '; uk='Помилка при збереженні звіту у сервісі електронної звітності. '") + СтрокаТЧ.НаименованиеОтчета;
            СообщениеПользователю(ТекстСообщения);
            ЕстьОшибки = Истина;
            
            Попытка
                ТекстОшибки = jsonПрочитатьИнициализация(ТелоОтвета).errors;
            Исключение
                ТекстОшибки = "";
            КонецПопытки;

            Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
                ТекстОшибки = ТелоОтвета;
            КонецЕсли;
            
            СообщениеПользователю(ТекстОшибки);
            
            Возврат;
            
        КонецЕсли;    
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьXMLФайлВыгрузкиРеглОтчета(СсылкаНаОтчет, ФормаВыгрузкиРеглОтчета)
    
    СпДокОсн = Новый СписокЗначений;
    СпДокОсн.Добавить(СсылкаНаОтчет);
    
    ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн, КаталогВыгрузки);
    
    Попытка
        Возврат ФормаВыгрузкиРеглОтчета.Объект.Выгрузки[0].ИмяФайла;
    Исключение
        Возврат "";    
    КонецПопытки;    
    
КонецФункции

Функция СоздатьАрхивИЗаполнитьТекстыОтчетов(МассивВыгрузки)
    
    ВременнаяПапка = КаталогВременныхФайлов();
    ПутьКАрхиву = ВременнаяПапка + ?(Прав(ВременнаяПапка,1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + "Reports.zip";
    Архив = Новый ЗаписьZipФайла(ПутьКАрхиву);
    
    Для Каждого СтрокаМассива Из МассивВыгрузки Цикл
        
        врФайл = Новый ЗаписьТекста(ВременнаяПапка + ?(Прав(ВременнаяПапка,1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + СтрокаМассива.ИмяФайла, "WINDOWS-1251");
        врФайл.Записать(СтрокаМассива.Текст);
        врФайл.Закрыть();
        Архив.Добавить(ВременнаяПапка + ?(Прав(ВременнаяПапка,1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + СтрокаМассива.ИмяФайла);
        
    КонецЦикла;
    
    Архив.Записать();
    
    ТекстАрхива = Новый ДвоичныеДанные(ПутьКАрхиву);
    
    //ТекстАрхива = Новый ЧтениеТекста(ПутьКАрхиву, КодировкаТекста.UTF8);
    //ТекстАрхива = ТекстАрхива.Прочитать();
    СтруктраАрхива = Новый Структура;
    
    СтруктраАрхива.Вставить("ИмяФайла", "Reports.zip");
    СтруктраАрхива.Вставить("ТекстОтчета", ТекстАрхива); 
            
    Возврат СтруктраАрхива;
    
КонецФункции

Процедура ОтправитьРасчетныеЛискти(ТолькоСохранитьВDBF = Ложь, GUID_Формы) Экспорт
    
    ДействиеАналитики = "РасчетныйЛистПодготовкаDBF";    
    
    МассивДанныхРЛ = Новый Массив;

    Для Каждого СтрокаТЧ Из РасчетныеЛистки Цикл
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        СтруктураДанныхРЛ = СоздатьСтруктуруРЛ();
        
        ЕстьОтмеченные = Истина;
        СтрокаТЧ.Флажок = Ложь;
        
        Успешно = ПолучитьДанныеРасчетныхЛистков(СтруктураДанныхРЛ, СтрокаТЧ.СсылкаНаДокумент);
        
        Если НЕ Успешно Тогда
            Возврат;    
        КонецЕсли;
        
        МассивДанныхРЛ.Добавить(СтруктураДанныхРЛ);
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        СообщениеПользователю(НСтр("ru = 'Нет отмеченных документов для выгрузки!'; uk = 'Немає відмічених документів для вивантаження!'"), Ложь);
        Возврат;    
    КонецЕсли;
    
    ЕстьОтмеченные = Ложь;
    
    Если МассивДанныхРЛ.Количество() = 0 Тогда
        СообщениеПользователю(НСтр("ru = 'Нет данных для выгрузки!'; uk = 'Немає даних для вивантаження!'"), Ложь);
        Возврат;
    КонецЕсли;    
    
    СформироватьDBFФайлыPЛ(МассивДанныхРЛ, GUID_Формы);
    
    Если НЕ ТолькоСохранитьВDBF Тогда
        
        ОтправитьФайлыРС(МассивДанныхРЛ);
        
    КонецЕсли;
    
КонецПроцедуры    

Процедура ОтправитьФайлыРС(МассивДанныхРЛ)
    
    Для Каждого СтруктураДанныхРЛ Из МассивДанныхРЛ Цикл
        
        //СтруктураАвторизации = ПолучитьАвторизационныйXML("rl_upload", Истина);
        //
        //Если НЕ ЗначениеЗаполнено(СтруктураАвторизации.АвтXML) Тогда
        //    Возврат;    
        //КонецЕсли;    
        //
        //ДействиеАналитики = "РасчетныйЛистАвторизация";

//        Заголовки = Новый ТаблицаЗначений;
//        Заголовки.Колонки.Добавить("Заголовок");
//        Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
//        
//        НоваяСтрока = Заголовки.Добавить();
//        НоваяСтрока.Заголовок = "Authorization";
//        НоваяСтрока.ЗначениеЗаголовка = "P24";
//        
//        РесурсНаСервере = "/paysheets/p24/paysheet/upload";
//        
//        СтрокаЗапроса = "&oper=rl_upload&lang=ru&sign=" + СтруктураАвторизации.ID_SIGN + "&xml=" + СтруктураАвторизации.АвтXML; 
//        
//        стРезультат = УстановитьСоединение(АдресРасченыхЛистов, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия, Заголовки);
//        
//        ТекстСообщенияОшибки = НСтр("ru = 'Ошибка при авторизации в сервисе расчетных листков';uk='Помилка при авторизації в сервісі розрахункових листків'");
//        
//        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
//            
//            СообщениеПользователю(ТекстСообщенияОшибки);
//            Возврат;
//            
//        Иначе
//            
//            Статус = стРезультат.Статус;
//            СессияДок = стРезультат.Cookie;
//            
//            Если Статус <> 200 Тогда
//                СообщениеПользователю(ТекстСообщенияОшибки);
//                Возврат;
//            КонецЕсли;
//            
//            ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
//            
//        КонецЕсли;
        
        ДействиеАналитики = "РасчетныйЛистОтправка";

        Попытка
            ПозицияРазделителя = Найти(ТекущийЗПРЛ, ",");
            Если ПозицияРазделителя = 0 Тогда
                вТекущийЗПРЛ = ТекущийЗПРЛ
            Иначе
                ИндексЗП = Лев(ТекущийЗПРЛ, ПозицияРазделителя - 1);
                //Объект.ТекущийЗПРЛ = Сред(Элементы.РасчетныеЛисткиСписокЗП.СписокВыбора.НайтиПоИдентификатору(Число(ИндексЗП)).Значение, ПозицияРазделителя + 1)
                вТекущийЗПРЛ = СписокЗПРЛ[Число(ИндексЗП)].Значение
            КонецЕсли
        Исключение
            вТекущийЗПРЛ = "";
            Продолжить
        КонецПопытки;

        РесурсНаСервере = "/api/paysheets/upload-file";
        
        Заголовки = Новый ТаблицаЗначений;

        ТекстДляОтправки = "";
        ТелоЗапросаКурл = "";

        Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда//используется curl

            РесурсНаСервере = РесурсНаСервере + "?projectReference=" + вТекущийЗПРЛ + "&yearmonth=" + Лев(СтруктураДанныхРЛ.Данные[0].REP_DATE, 6);
            СтрокаЗапроса = "";//" --form ""encoding=ANSI"" --form ""projectReference=" + вТекущийЗПРЛ + """ --form ""yearmonth=" + Лев(СтруктураДанныхРЛ.Данные[0].REP_DATE, 6) + """";
            
            ТекстДляОтправки = СтрокаЗапроса;
            
            ТекстДляОтправки = ТекстДляОтправки + " --form paysheet=@""" + ПеременнаяОкружения("%TEMP%") + "\" + (СтруктураДанныхРЛ.ИмяФайлаДанных) + """";
            ТекстДляОтправки = ТекстДляОтправки + " --form catalog=@""" + ПеременнаяОкружения("%TEMP%") + "\" + (СтруктураДанныхРЛ.ИмяФайлаСправочника) + """";
            ТелоЗапросаКурл = ТекстДляОтправки;

        Иначе//средствами платформы
            
            //СтрокаЗапроса = "encoding=ANSI&projectReference=" + ТекущийЗП + "&yearmonth=" + Лев(СтруктураДанныхРЛ.Данные[0].REP_DATE, 6);
            СтрокаЗапроса = "projectReference=" + вТекущийЗПРЛ + "&yearmonth=" + Лев(СтруктураДанныхРЛ.Данные[0].REP_DATE, 6);//&
            РесурсНаСервере = РесурсНаСервере + "?" + СтрокаЗапроса;
            
            Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
            
            ТекстДляОтправки = "";
            
            ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary) + Символы.ВК + Символы.ПС;
            
            ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""paysheet""; filename=""" + (СтруктураДанныхРЛ.ИмяФайлаДанных) + """") + Символы.ВК + Символы.ПС;
            ТекстДляОтправки = ТекстДляОтправки + ("Content-Type: application/octet-stream") + Символы.ВК + Символы.ПС;//vnd.dbf//dbf//x-dbf//dbase//x-dbase
            ТекстДляОтправки = ТекстДляОтправки + ("") + Символы.ВК + Символы.ПС;
            
            Текст = Новый ЧтениеТекста(КаталогВременныхФайлов() + СтруктураДанныхРЛ.ИмяФайлаДанных, КодировкаТекста.ANSI);
            
            ТекстДляОтправки = ТекстДляОтправки + (Текст.Прочитать()) + Символы.ВК + Символы.ПС;
            //ТекстДляОтправки = ТекстДляОтправки + (EncodeURL(Текст.Прочитать())) + Символы.ВК + Символы.ПС;
            
            ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary) + Символы.ВК + Символы.ПС;
            
            ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""catalog""; filename=""" + (СтруктураДанныхРЛ.ИмяФайлаСправочника) + """") + Символы.ВК + Символы.ПС;
            ТекстДляОтправки = ТекстДляОтправки + ("Content-Type: application/octet-stream") + Символы.ВК + Символы.ПС;//vnd.dbf//dbf//x-dbf//dbase//x-dbase
            ТекстДляОтправки = ТекстДляОтправки + ("") + Символы.ВК + Символы.ПС;
            
            Текст = Новый ЧтениеТекста(КаталогВременныхФайлов() + СтруктураДанныхРЛ.ИмяФайлаСправочника, КодировкаТекста.ANSI);
            
            ТекстДляОтправки = ТекстДляОтправки + (Текст.Прочитать()) + Символы.ВК + Символы.ПС;
            //ТекстДляОтправки = ТекстДляОтправки + (EncodeURL(Текст.Прочитать())) + Символы.ВК + Символы.ПС;

            ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary + "--") + Символы.ВК + Символы.ПС;
            
            Заголовки.Колонки.Добавить("Заголовок");
            Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
            
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Content-Type";
            НоваяСтрока.ЗначениеЗаголовка = "multipart/form-data; boundary=" + Boundary;
            
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Content-Lenght";
            НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(ТекстДляОтправки));//Формат(СтрДлина(ТекстДляОтправки), "ЧГ=0");
            
        КонецЕсли;

        POST = Истина;

        UserAgentHeaders = ОпределитьUserAgentHeaders();
        КодировкаТекстаЗапроса = КодировкаТекста.ANSI;//UTF8
        
        стРезультат = УстановитьСоединение(АдресРасченыхЛистов, Прокси, РесурсНаСервере, UserAgentHeaders, ТекстДляОтправки, "", "",
            Заголовки, КодировкаТекстаЗапроса,, POST,,,, ТелоЗапросаКурл);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Возврат;
        Иначе
            Статус = стРезультат.Статус;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        ТекстСообщенияОшибка = НСтр("ru = 'Ошибка при отправке расчетных листков';uk='Помилка при відправці розрахункових листків'");
        Если Статус <> 200 Тогда
            СообщениеПользователю(ТекстСообщенияОшибка);
            Если РежимОтладки Или Число(Лев(Статус, 2)) = 40 Тогда
                СообщениеПользователю(стРезультат.ТелоОтвета);
            КонецЕсли;
            Возврат
        Иначе
            ТелоОтвета = стРезультат.ТелоОтвета
        КонецЕсли;

        стОтветСервера = jsonПрочитатьИнициализация(ТелоОтвета);
        Если стОтветСервера.status <> "success" Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка отправки расчетных листков.';uk='Помилка відправки розрахункових листків.'");
            СообщениеПользователю(ТекстСообщения);//ТекстСообщенияОшибка + Символы.ПС + 
            //Если РежимОтладки Или Число(Лев(Статус, 2)) = 40 Тогда//Число(Лев(Статус, 3)) = 400
            //    СообщениеПользователю(стРезультат.ТелоОтвета);
            //КонецЕсли;
            Возврат
        КонецЕсли;

        //    сохранение Расчетных Листков
        ДействиеАналитики = "ЗаписьФайловРасчетныхЛистков";

        РесурсНаСервере = "/api/paysheets/save-files";
        ТекстДляОтправки = "";
        POST = Истина;

        стРезультат = УстановитьСоединение(АдресРасченыхЛистов, Прокси, РесурсНаСервере, UserAgentHeaders, ТекстДляОтправки, "", "", , ,, POST);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            ТекстСообщения = НСтр("ru = 'Расчетные листки отправлены. Ошибка при сохранении расчетных листков.';uk='Розрахункові листки відправлені. Помилка при збереженні розрахункових листків'");
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        Иначе
            Статус = стРезультат.Статус;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка при сохранении расчетных листков';uk='Помилка при збереженні розрахункових листків'");
            СообщениеПользователю(ТекстСообщения);
            Если РежимОтладки Или Число(Лев(Статус, 2)) = 40 Тогда
                СообщениеПользователю(стРезультат.ТелоОтвета);
            КонецЕсли;
            Возврат
        Иначе
            ТелоОтвета = стРезультат.ТелоОтвета
        КонецЕсли;

        стОтветСервера = jsonПрочитатьИнициализация(ТелоОтвета);
        Если стОтветСервера.status <> "success" Тогда
            ТекстСообщения = НСтр("ru = 'Ошибка статуса при сохранении расчетных листков.';uk='Помилка статусу при збереженні розрахункових листків.'");
            СообщениеПользователю(ТекстСообщения);//ТекстСообщенияОшибка + Символы.ПС + 
            //Если РежимОтладки Или Число(Лев(Статус, 2)) = 40 Тогда//Число(Лев(Статус, 3)) = 400
            //    СообщениеПользователю(стРезультат.ТелоОтвета);
            //КонецЕсли;
            Возврат
        КонецЕсли;

        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
        
    КонецЦикла;

    ТекстСообщения = НСтр("ru = 'Отправка файлов расчетных листков завершена успешно';uk='Відправка файлів розрахункових листів завершена успішно'");
    СообщениеПользователю(ТекстСообщения, Ложь)
    
КонецПроцедуры

Процедура СформироватьDBFФайлыPЛ(МассивДанныхРЛ, GUID_Формы)
    
    Для Каждого СтруктураДанныхРЛ Из МассивДанныхРЛ Цикл
        
        СтруктураДанныхРЛ.Справочник.Колонки.Удалить("GUID"); //удаляем техническую колонку
        
        //создаем файл-справочник
        
        СправочникDBF = Новый XBase;
        ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + "Spr.DBF";
        ЗаполнитьDBFПоТЗ(СправочникDBF, СтруктураДанныхРЛ.Справочник, СтруктураДанныхРЛ.ИмяФайлаСправочника, ПолноеИмяКонечногоФайла, GUID_Формы);
        СохранитьDBFФайл(СправочникDBF, СтруктураДанныхРЛ.ИмяФайлаСправочника, ПолноеИмяКонечногоФайла, GUID_Формы); 
        
        //создаем файл-данные
        ДаннныеDBF = Новый XBase;
        ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + "Cards.DBF";
        ЗаполнитьDBFПоТЗ(ДаннныеDBF, СтруктураДанныхРЛ.Данные, СтруктураДанныхРЛ.ИмяФайлаДанных, ПолноеИмяКонечногоФайла, GUID_Формы);
        СохранитьDBFФайл(ДаннныеDBF, СтруктураДанныхРЛ.ИмяФайлаДанных, ПолноеИмяКонечногоФайла, GUID_Формы); 
        
    КонецЦикла;    
        
КонецПроцедуры

Процедура ЗаполнитьDBFПоТЗ(ФайлDBF, ТЗ, ИмяФайла, ПолноеИмяКонечногоФайла, GUID_Формы)
        
    Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
        ФайлDBF.Поля.Добавить(КолонкаТЗ.Имя, "S", КолонкаТЗ.ТипЗначения.КвалификаторыСтроки.Длина); //создаем колонки в DBF файле такие же как и в ТЗ
    КонецЦикла;    
    
    ФайлDBF.Кодировка = КодировкаXBase.ANSI;
    ФайлDBF.СоздатьФайл(ПолноеИмяКонечногоФайла);
    
    Для Каждого СтрокаТЗ Из ТЗ Цикл
        
        ФайлDBF.Добавить(); //добавляем запись в DBF        
        
        Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
            ФайлDBF[КолонкаТЗ.Имя] = СтрокаТЗ[КолонкаТЗ.Имя]; //аналог функции ЗаполнитьЗначенияСвойств
        КонецЦикла;
        
        ФайлDBF.Записать();
    
    КонецЦикла;
    
    ФайлDBF.Записать();
    
    Если ФайлDBF.Открыта() Тогда
        ФайлDBF.ЗакрытьФайл();
    КонецЕсли;

КонецПроцедуры

Функция СохранитьDBFФайл(ФайлDBF, ИмяФайла, ПолноеИмяКонечногоФайла, GUID_Формы)    
    
    Попытка
                
        //а теперь переименовываем файл, т.к. "чудо" механизм не может сразу создать файл с именем больше чем 8 символов
        ПереместитьФайл(ПолноеИмяКонечногоФайла, КаталогВременныхФайлов() + ИмяФайла); 
        //КопироватьФайл(ПолноеИмяКонечногоФайла, ПолучитьИмяВременногоФайла("dbf")); 
        
        //КопироватьФайл(ПолноеИмяКонечногоФайла, КаталогВременныхФайлов() + ИмяФайла); 
        
        Если GUID_Формы <> Неопределено Тогда
            
            ПолноеИмяКонечногоФайла = КаталогВременныхФайлов() + ИмяФайла;
            GUID = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяКонечногоФайла), GUID_Формы);
            НоваяСтрока = СписокФайлов.Добавить();
            НоваяСтрока.АдресФайла = GUID;
            НоваяСтрока.ИмяФайла = ИмяФайла;

        КонецЕсли; 
                
        Возврат Истина;
        
    Исключение
        
        ТекстСообщения = НСтр("ru='Не удалось записать DBF файл! Возможно, недостаточно места на диске или диск защищен от записи.';uk='Не вдалося записати DBF файл! Можливо, недостатньо місця на диску або диск захищений від запису'");
        
        ТекстСообщения = ТекстСообщения + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.';uk='Також, можливо, не підключено розширення для роботи з файлами.'");
        
        СообщениеПользователю(ТекстСообщения);
        СообщениеПользователю(ОписаниеОшибки());
        Возврат Ложь;
        
    КонецПопытки;
    
КонецФункции

Функция ПолучитьДанныеРасчетныхЛистков(СтруктураДанныхРЛ, СсылкаНаДокумент) 
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        Возврат UNF_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент);
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" Тогда
        Возврат BP_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент);
    ИначеЕсли ИдКонф = "ERP" Тогда//BAS КУП
        Возврат BASIEM_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент);
    КонецЕсли;
    
КонецФункции

Функция UNF_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент)
    
    REP_DATE = Формат(СсылкаНаДокумент.ПериодРегистрации, "ДФ=yyyyMMdd");
    
    Если ПустаяСтрока(СтруктураДанныхРЛ.ИмяФайлаСправочника) Тогда
        
        СтруктураДанныхРЛ.ИмяФайлаСправочника = "SPR_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        //
        //СтруктураДанныхРЛ.ИмяФайлаСправочника = "Spr.DBF";
        //СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards.DBF";

    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    НачислениеЗарплатыНачисленияУдержания.Сотрудник." + ИмяПоляТабельногоНомера() + " КАК ТабНомер,
        |    НачислениеЗарплатыНачисленияУдержания.Должность КАК Должность,
        |    НачислениеЗарплатыНачисленияУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
        |    НачислениеЗарплатыНачисленияУдержания.Представление1 КАК Показатель,
        |    НачислениеЗарплатыНачисленияУдержания.Значение1 КАК Значение,
        |    ВЫРАЗИТЬ(НачислениеЗарплатыНачисленияУдержания.Сумма КАК ЧИСЛО (15,2)) КАК Сумма
        |ИЗ
        |    Документ.НачислениеЗарплаты.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
        |ГДЕ
        |    НачислениеЗарплатыНачисленияУдержания.Ссылка = &СсылкаНаДокумент
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |    НачислениеЗарплатыНалогиНаДоходы.Сотрудник." + ИмяПоляТабельногоНомера() + ",
        |    NULL,
        |    НачислениеЗарплатыНалогиНаДоходы.ВидНачисленияУдержания,
        |    NULL,
        |    NULL,
        |    ВЫРАЗИТЬ(НачислениеЗарплатыНалогиНаДоходы.Сумма КАК ЧИСЛО (15,2))
        |ИЗ
        |    Документ.НачислениеЗарплаты.НалогиНаДоходы КАК НачислениеЗарплатыНалогиНаДоходы
        |ГДЕ
        |    НачислениеЗарплатыНалогиНаДоходы.Ссылка = &СсылкаНаДокумент
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |    НачислениеЗарплатыВзносы.Сотрудник." + ИмяПоляТабельногоНомера() + ",
        |    NULL,
        |    НачислениеЗарплатыВзносы.ВидНачисленияУдержания,
        |    NULL,
        |    NULL,
        |    ВЫРАЗИТЬ(НачислениеЗарплатыВзносы.Сумма КАК ЧИСЛО (15,2))
        |ИЗ
        |    Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
        |ГДЕ
        |    НачислениеЗарплатыВзносы.Ссылка = &СсылкаНаДокумент
        |
        //|ОБЪЕДИНИТЬ ВСЕ
        //|
        //|ВЫБРАТЬ
        //|    НачислениеЗарплатыВзносыФОТ.Сотрудник.Код,
        //|    NULL,
        //|    НачислениеЗарплатыВзносыФОТ.ВидНачисленияУдержания,
        //|    NULL,
        //|    NULL,
        //|    ВЫРАЗИТЬ(НачислениеЗарплатыВзносыФОТ.Сумма КАК ЧИСЛО (15,2))
        //|ИЗ
        //|    Документ.НачислениеЗарплаты.ВзносыФОТ КАК НачислениеЗарплатыВзносыФОТ
        //|ГДЕ
        //|    НачислениеЗарплатыВзносыФОТ.Ссылка = &СсылкаНаДокумент
        |
        |УПОРЯДОЧИТЬ ПО
        |    ТабНомер
        |ИТОГИ ПО
        |    ТабНомер,
        |    Должность";
    
    Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаСотрудник.Следующий() Цикл
        
        ТабНомер = ВыборкаСотрудник.ТабНомер;
        Если НЕ ЗначениеЗаполнено(ТабНомер) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание, обнаружено пустое значение табельного номера!'; uk = 'Увага, виявлено порожнє значення табельного номера!'"), Ложь);
            Возврат Ложь;
        КонецЕсли;
        
        КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ("Таб.номер", СтруктураДанныхРЛ.Справочник, REP_DATE);
        
        СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
        //СтрокаДанных.BPP_REF = ТекущийЗП;
        СтрокаДанных.TAB_NUMB = ТабНомер;
        СтрокаДанных.ATTR_ID = КодСправочника;
        СтрокаДанных.ZNACH1 = ТабНомер;
        СтрокаДанных.REP_DATE = REP_DATE;
        
        ВыборкаДолжность = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        Пока ВыборкаДолжность.Следующий() Цикл
            
            Если ЗначениеЗаполнено(ВыборкаДолжность.Должность) Тогда
                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(НСтр("ru='Профессия, должность';uk='Професія, посада'"), СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = ВыборкаДолжность.Должность;
                СтрокаДанных.REP_DATE = REP_DATE;
                
            КонецЕсли;
            
            ВыборкаДетальныеЗаписи = ВыборкаДолжность.Выбрать();
            
            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
                
                Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Показатель) Тогда
                    
                    КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(ВыборкаДетальныеЗаписи.Показатель, СтруктураДанныхРЛ.Справочник, REP_DATE);
                    
                    СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                    //СтрокаДанных.BPP_REF = ТекущийЗП;
                    СтрокаДанных.TAB_NUMB = ТабНомер;
                    СтрокаДанных.ATTR_ID = КодСправочника;
                    СтрокаДанных.ZNACH1 = ВыборкаДетальныеЗаписи.Значение;
                    СтрокаДанных.REP_DATE = REP_DATE;    
                    
                КонецЕсли;
                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(ВыборкаДетальныеЗаписи.ВидНачисленияУдержания, СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = Формат(ВыборкаДетальныеЗаписи.Сумма, "ЧДЦ=2; ЧГ=0");
                СтрокаДанных.REP_DATE = REP_DATE;
                
            КонецЦикла;
            
        КонецЦикла;
        
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции    

Функция BP_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент)
    
    REP_DATE = Формат(СсылкаНаДокумент.МесяцНачисления, "ДФ=yyyyMMdd");
    
    Если ПустаяСтрока(СтруктураДанныхРЛ.ИмяФайлаСправочника) Тогда
        
        СтруктураДанныхРЛ.ИмяФайлаСправочника = "SPR_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        
        //СтруктураДанныхРЛ.ИмяФайлаСправочника = "Spr.DBF";
        //СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards.DBF";
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    МАКСИМУМ(НачислениеЗарплатыНачисления.Сотрудник) КАК Сотрудник,
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение
    |ПОМЕСТИТЬ Сотрудники
    |ИЗ
    |    Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
    |ГДЕ
    |    НачислениеЗарплатыНачисления.Ссылка = &СсылкаНаДокумент
    |
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    Сотрудники.Сотрудник,
    |    Сотрудники.СотрудникФизическоеЛицо,
    |    МАКСИМУМ(КадроваяИсторияСотрудниковСрезПоследних.Должность) КАК Должность,
    |    Сотрудники.Подразделение
    |ПОМЕСТИТЬ СотрудникиНаДолжности
    |ИЗ
    |    Сотрудники КАК Сотрудники
    |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ПериодРегистрации, ) КАК КадроваяИсторияСотрудниковСрезПоследних
    |        ПО Сотрудники.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
    |            И Сотрудники.Подразделение = КадроваяИсторияСотрудниковСрезПоследних.Подразделение
    |
    |СГРУППИРОВАТЬ ПО
    |    Сотрудники.Сотрудник,
    |    Сотрудники.СотрудникФизическоеЛицо,
    |    Сотрудники.Подразделение
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Начисление,
    |    СУММА(НачислениеЗарплатыНачисления.Результат) КАК Результат,
    |    СУММА(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
    |    СУММА(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов
    |ПОМЕСТИТЬ НачисленияИУдержания
    |ИЗ
    |    Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
    |ГДЕ
    |    НачислениеЗарплатыНачисления.Ссылка = &СсылкаНаДокумент
    |
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение,
    |    НачислениеЗарплатыНачисления.Начисление
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыВзносы.ФизическоеЛицо,
    |    НачислениеЗарплатыВзносы.Налог,
    |    НачислениеЗарплатыВзносы.Результат,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
    |ГДЕ
    |    НачислениеЗарплатыВзносы.Ссылка = &СсылкаНаДокумент
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    //|    НачислениеЗарплатыУдержания.Сотрудник.ФизическоеЛицо,//ИдКонф = "BP"//ИдКонф = "BASC"
    |    НачислениеЗарплатыУдержания." + ?(ИдКонф = "BP", "Сотрудник.ФизическоеЛицо", "ФизическоеЛицо") + " КАК СотрудникФизическоеЛицо,
    |    НачислениеЗарплатыУдержания.Удержание,
    |    НачислениеЗарплатыУдержания.Результат,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
    |ГДЕ
    |    НачислениеЗарплатыУдержания.Ссылка = &СсылкаНаДокумент
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыНДФЛ.ФизическоеЛицо,
    //|    НачислениеЗарплатыНДФЛ.ДоходНДФЛ,//ИдКонф = "BP"//ИдКонф = "BASC"
    |    НачислениеЗарплатыНДФЛ." + ?(ИдКонф = "BP", "ДоходНДФЛ", "КодДохода") + " КАК ДоходНДФЛ,
    |    НачислениеЗарплатыНДФЛ.Налог,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
    |ГДЕ
    |    НачислениеЗарплатыНДФЛ.Ссылка = &СсылкаНаДокумент
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    СотрудникиНаДолжности.Сотрудник." + ИмяПоляТабельногоНомера() + " КАК ТабНомер,
    |    СотрудникиНаДолжности.Должность КАК Должность,
    |    СотрудникиНаДолжности.Подразделение,
    |    НачисленияИУдержания.Начисление КАК ВидНачисленияУдержания,
    |    СУММА(НачисленияИУдержания.Результат) КАК Сумма,
    |    СУММА(НачисленияИУдержания.ОтработаноДней) КАК ОтработаноДней,
    |    СУММА(НачисленияИУдержания.ОтработаноЧасов) КАК ОтработаноЧасов
    |ИЗ
    |    СотрудникиНаДолжности КАК СотрудникиНаДолжности
    |        ЛЕВОЕ СОЕДИНЕНИЕ НачисленияИУдержания КАК НачисленияИУдержания
    |        ПО СотрудникиНаДолжности.СотрудникФизическоеЛицо = НачисленияИУдержания.ФизическоеЛицо
    |
    |СГРУППИРОВАТЬ ПО
    |    СотрудникиНаДолжности.Сотрудник." + ИмяПоляТабельногоНомера() + ",
    |    СотрудникиНаДолжности.Должность,
    |    СотрудникиНаДолжности.Подразделение,
    |    НачисленияИУдержания.Начисление
    |ИТОГИ
    |    СУММА(Сумма),
    |    СУММА(ОтработаноДней),
    |    СУММА(ОтработаноЧасов)
    |ПО
    |    ТабНомер,
    |    Должность";
    
    Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
    Запрос.УстановитьПараметр("ПериодРегистрации", СсылкаНаДокумент.МесяцНачисления);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаСотрудник.Следующий() Цикл
        
        ТабНомер = ВыборкаСотрудник.ТабНомер;
        
        Если НЕ ЗначениеЗаполнено(ТабНомер) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание, обнаружено пустое значение табельного номера!'; uk = 'Увага, виявлено порожнє значення табельного номера!'"), Ложь);
            Возврат Ложь;
        КонецЕсли;
        
        КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ("Таб.номер", СтруктураДанныхРЛ.Справочник, REP_DATE);
        
        СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
        //СтрокаДанных.BPP_REF = ТекущийЗП;
        СтрокаДанных.TAB_NUMB = ТабНомер;
        СтрокаДанных.ATTR_ID = КодСправочника;
        СтрокаДанных.ZNACH1 = ТабНомер;
        СтрокаДанных.REP_DATE = REP_DATE;
        
        ВыборкаДолжность = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        Пока ВыборкаДолжность.Следующий() Цикл
            
            Если ЗначениеЗаполнено(ВыборкаДолжность.Должность) Тогда
                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(НСтр("ru='Профессия, должность';uk='Професія, посада'"), СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = ВыборкаДолжность.Должность;
                СтрокаДанных.REP_DATE = REP_DATE;
                
            КонецЕсли;
            
            ВыборкаДетальныеЗаписи = ВыборкаДолжность.Выбрать();
            
            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
                
                                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(ВыборкаДетальныеЗаписи.ВидНачисленияУдержания, СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = Формат(ВыборкаДетальныеЗаписи.Сумма, "ЧДЦ=2; ЧГ=0");
                СтрокаДанных.REP_DATE = REP_DATE;
                
                Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтработаноДней) Тогда
                    
                    КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(НСтр("ru='Отработано дней';uk='відпрацьовано днів'"), СтруктураДанныхРЛ.Справочник, REP_DATE);
                    
                    СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                    //СтрокаДанных.BPP_REF = ТекущийЗП;
                    СтрокаДанных.TAB_NUMB = ТабНомер;
                    СтрокаДанных.ATTR_ID = КодСправочника;
                    СтрокаДанных.ZNACH1 = ВыборкаДетальныеЗаписи.ОтработаноДней;
                    СтрокаДанных.REP_DATE = REP_DATE;    
                    
                КонецЕсли;

                
            КонецЦикла;
            
        КонецЦикла;
        
    КонецЦикла;

    Возврат Истина;
    
КонецФункции    

//BAS КУП
Функция BASIEM_ЗаполнитьДанныеРЛ(СтруктураДанныхРЛ, СсылкаНаДокумент)
    
    REP_DATE = Формат(СсылкаНаДокумент.МесяцНачисления, "ДФ=yyyyMMdd");
    
    Если ПустаяСтрока(СтруктураДанныхРЛ.ИмяФайлаСправочника) Тогда
        
        СтруктураДанныхРЛ.ИмяФайлаСправочника = "SPR_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards_" + REP_DATE + "_" + ТекущийЗП + ".dbf";
        
        //СтруктураДанныхРЛ.ИмяФайлаСправочника = "Spr.DBF";
        //СтруктураДанныхРЛ.ИмяФайлаДанных = "Cards.DBF";
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    МАКСИМУМ(НачислениеЗарплатыНачисления.Сотрудник) КАК Сотрудник,
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение
    |ПОМЕСТИТЬ Сотрудники
    |ИЗ
    |    Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
    |ГДЕ
    |    НачислениеЗарплатыНачисления.Ссылка = &СсылкаНаДокумент
    |
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    Сотрудники.Сотрудник,
    |    Сотрудники.СотрудникФизическоеЛицо,
    |    МАКСИМУМ(КадроваяИсторияСотрудниковСрезПоследних.Должность) КАК Должность,
    |    Сотрудники.Подразделение
    |ПОМЕСТИТЬ СотрудникиНаДолжности
    |ИЗ
    |    Сотрудники КАК Сотрудники
    |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ПериодРегистрации, ) КАК КадроваяИсторияСотрудниковСрезПоследних
    |        ПО Сотрудники.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
    |            И Сотрудники.Подразделение = КадроваяИсторияСотрудниковСрезПоследних.Подразделение
    |
    |СГРУППИРОВАТЬ ПО
    |    Сотрудники.Сотрудник,
    |    Сотрудники.СотрудникФизическоеЛицо,
    |    Сотрудники.Подразделение
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Начисление,
    |    СУММА(НачислениеЗарплатыНачисления.Результат) КАК Результат,
    |    СУММА(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
    |    СУММА(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов
    |ПОМЕСТИТЬ НачисленияИУдержания
    |ИЗ
    |    Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
    |ГДЕ
    |    НачислениеЗарплатыНачисления.Ссылка = &СсылкаНаДокумент
    |
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо,
    |    НачислениеЗарплатыНачисления.Подразделение,
    |    НачислениеЗарплатыНачисления.Начисление
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыВзносы.ФизическоеЛицо,
    |    НачислениеЗарплатыВзносы.Налог,
    |    НачислениеЗарплатыВзносы.Результат,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
    |ГДЕ
    |    НачислениеЗарплатыВзносы.Ссылка = &СсылкаНаДокумент
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыУдержания.ФизическоеЛицо,
    |    НачислениеЗарплатыУдержания.Удержание,
    |    НачислениеЗарплатыУдержания.Результат,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
    |ГДЕ
    |    НачислениеЗарплатыУдержания.Ссылка = &СсылкаНаДокумент
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыНДФЛ.ФизическоеЛицо,
    |    НачислениеЗарплатыНДФЛ.Доход,
    |    НачислениеЗарплатыНДФЛ.Налог,
    |    0,
    |    0
    |ИЗ
    |    Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
    |ГДЕ
    |    НачислениеЗарплатыНДФЛ.Ссылка = &СсылкаНаДокумент
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    СотрудникиНаДолжности.Сотрудник." + ИмяПоляТабельногоНомера() + " КАК ТабНомер,
    |    СотрудникиНаДолжности.Должность КАК Должность,
    |    СотрудникиНаДолжности.Подразделение,
    |    НачисленияИУдержания.Начисление КАК ВидНачисленияУдержания,
    |    СУММА(НачисленияИУдержания.Результат) КАК Сумма,
    |    СУММА(НачисленияИУдержания.ОтработаноДней) КАК ОтработаноДней,
    |    СУММА(НачисленияИУдержания.ОтработаноЧасов) КАК ОтработаноЧасов
    |ИЗ
    |    СотрудникиНаДолжности КАК СотрудникиНаДолжности
    |        ЛЕВОЕ СОЕДИНЕНИЕ НачисленияИУдержания КАК НачисленияИУдержания
    |        ПО СотрудникиНаДолжности.СотрудникФизическоеЛицо = НачисленияИУдержания.ФизическоеЛицо
    |
    |СГРУППИРОВАТЬ ПО
    |    СотрудникиНаДолжности.Сотрудник." + ИмяПоляТабельногоНомера() + ",
    |    СотрудникиНаДолжности.Должность,
    |    СотрудникиНаДолжности.Подразделение,
    |    НачисленияИУдержания.Начисление
    |ИТОГИ
    |    СУММА(Сумма),
    |    СУММА(ОтработаноДней),
    |    СУММА(ОтработаноЧасов)
    |ПО
    |    ТабНомер,
    |    Должность";
    
    Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
    Запрос.УстановитьПараметр("ПериодРегистрации", СсылкаНаДокумент.МесяцНачисления);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаСотрудник.Следующий() Цикл
        
        ТабНомер = ВыборкаСотрудник.ТабНомер;
        
        Если НЕ ЗначениеЗаполнено(ТабНомер) Тогда
            СообщениеПользователю(НСтр("ru = 'Внимание, обнаружено пустое значение табельного номера!'; uk = 'Увага, виявлено порожнє значення табельного номера!'"), Ложь);
            Возврат Ложь;
        КонецЕсли;
        
        КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ("Таб.номер", СтруктураДанныхРЛ.Справочник, REP_DATE);
        
        СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
        //СтрокаДанных.BPP_REF = ТекущийЗП;
        СтрокаДанных.TAB_NUMB = ТабНомер;
        СтрокаДанных.ATTR_ID = КодСправочника;
        СтрокаДанных.ZNACH1 = ТабНомер;
        СтрокаДанных.REP_DATE = REP_DATE;
        
        ВыборкаДолжность = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        Пока ВыборкаДолжность.Следующий() Цикл
            
            Если ЗначениеЗаполнено(ВыборкаДолжность.Должность) Тогда
                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(НСтр("ru='Профессия, должность';uk='Професія, посада'"), СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = ВыборкаДолжность.Должность;
                СтрокаДанных.REP_DATE = REP_DATE;
                
            КонецЕсли;
            
            ВыборкаДетальныеЗаписи = ВыборкаДолжность.Выбрать();
            
            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
                
                                
                КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(ВыборкаДетальныеЗаписи.ВидНачисленияУдержания, СтруктураДанныхРЛ.Справочник, REP_DATE);
                
                СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                //СтрокаДанных.BPP_REF = ТекущийЗП;
                СтрокаДанных.TAB_NUMB = ТабНомер;
                СтрокаДанных.ATTR_ID = КодСправочника;
                СтрокаДанных.ZNACH1 = Формат(ВыборкаДетальныеЗаписи.Сумма, "ЧДЦ=2; ЧГ=0");
                СтрокаДанных.REP_DATE = REP_DATE;
                
                Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтработаноДней) Тогда
                    
                    КодСправочника = ПолучитьОбновитьДанныеСправочникаРЛ(НСтр("ru='Отработано дней';uk='відпрацьовано днів'"), СтруктураДанныхРЛ.Справочник, REP_DATE);
                    
                    СтрокаДанных = СтруктураДанныхРЛ.Данные.Добавить();
                    //СтрокаДанных.BPP_REF = ТекущийЗП;
                    СтрокаДанных.TAB_NUMB = ТабНомер;
                    СтрокаДанных.ATTR_ID = КодСправочника;
                    СтрокаДанных.ZNACH1 = ВыборкаДетальныеЗаписи.ОтработаноДней;
                    СтрокаДанных.REP_DATE = REP_DATE;    
                    
                КонецЕсли;

            КонецЦикла;
            
        КонецЦикла;
        
    КонецЦикла;

    Возврат Истина;
    
КонецФункции    

Функция ПолучитьОбновитьДанныеСправочникаРЛ(ВидСправочника, ТаблицаСправочника, ДатаВедомости)
    
    КодСправочника = "";
    
    Попытка //есть такие значения которые не имеют ссылочного типа, поэтому хранятся как строка
        GUID = Строка(ВидСправочника.УникальныйИдентификатор());
    Исключение
        GUID = ВидСправочника;
    КонецПопытки;    
    
    СтрокаТЗ = ТаблицаСправочника.Найти(GUID, "GUID");
    
    Если СтрокаТЗ = Неопределено Тогда
        
        СтрокаТЗ = ТаблицаСправочника.Добавить();
        //СтрокаТЗ.BPP_REF = ТекущийЗП;
        СтрокаТЗ.ATTR_ID = ТаблицаСправочника.Количество();
        СтрокаТЗ.ATTR_NAME = Строка(ВидСправочника);
        СтрокаТЗ.ATTR_DOP = ""; //пока всегда пустой
        СтрокаТЗ.REP_DATE = ДатаВедомости;
        СтрокаТЗ.GUID = GUID;
        
    КонецЕсли;
    
    КодСправочника = СтрокаТЗ.ATTR_ID;
    
    Возврат КодСправочника;
    
КонецФункции    

Процедура ЗаполнитьСписокРасчетныхЛистков(НачПериода, КонПериода) Экспорт
    
    Если ИдКонф = "UNF" Или ИдКонф = "BSB" Тогда
        UNF_ЗаполнитьНачислениеЗП(НачПериода, КонПериода);
    ИначеЕсли ИдКонф = "BP" Или ИдКонф = "BASC" ИЛИ ИдКонф = "ERP" Тогда
        BP_ЗаполнитьНачислениеЗП(НачПериода, КонПериода);
    ИначеЕсли ИдКонф = "UT_3" Тогда
        //UT_3_ЗаполнитьНачислениеЗП(НачПериода, КонПериода);
    //ИначеЕсли ИдКонф = "ERP" Тогда
        //TODO
    КонецЕсли;        
    
КонецПроцедуры

Процедура UNF_ЗаполнитьНачислениеЗП(НачПериода, КонПериода)    
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    НачислениеЗарплаты.Ссылка КАК СсылкаНаДокумент,
        |    НачислениеЗарплаты.СтруктурнаяЕдиница КАК Подразделение,
        |    НачислениеЗарплаты.СуммаДокумента,
        |    НачислениеЗарплаты.ПериодРегистрации,
        |    НачислениеЗарплаты.Номер,
        |    НачислениеЗарплаты.Дата,
        |    ""НачислениеЗарплаты"" КАК ИмяДокумента
        |ИЗ
        |    Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
        |ГДЕ
        |    НачислениеЗарплаты.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода
        |    И НачислениеЗарплаты.Проведен" +
        ?(ЗначениеЗаполнено(Организация), " И НачислениеЗарплаты.Организация = &Организация ", "");             
        
    Запрос.УстановитьПараметр("НачПериода", НачПериода);
    Запрос.УстановитьПараметр("КонПериода", КонПериода);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РасчетныеЛистки.Загрузить(Запрос.Выполнить().Выгрузить());
    
КонецПроцедуры

Процедура BP_ЗаполнитьНачислениеЗП(НачПериода, КонПериода)    
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    НачислениеЗарплатыНачисления.Ссылка,
    |    НачислениеЗарплатыНачисления.Ссылка.Подразделение КАК Подразделение,
    |   НачислениеЗарплатыНачисления.Ссылка.Номер КАК Номер,
    |   НачислениеЗарплатыНачисления.Ссылка.Дата КАК Дата,
    |    СУММА(НачислениеЗарплатыНачисления.Результат) КАК Результат
    |ПОМЕСТИТЬ ИтоговаяСумма
    |ИЗ
    |    Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
    |ГДЕ
    |    НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачПериода И &КонПериода
    |    И НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
    |    И НачислениеЗарплатыНачисления.Ссылка.Проведен
    |
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыНачисления.Ссылка,
    |    НачислениеЗарплатыНачисления.Ссылка.Подразделение,
    |    НачислениеЗарплатыНачисления.Ссылка.Номер,
    |    НачислениеЗарплатыНачисления.Ссылка.Дата
    
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    НачислениеЗарплатыУдержания.Ссылка,
    |    НачислениеЗарплатыУдержания.Ссылка.Подразделение КАК Подразделение,
    |   НачислениеЗарплатыУдержания.Ссылка.Номер КАК Номер,
    |   НачислениеЗарплатыУдержания.Ссылка.Дата КАК Дата,
    |    СУММА(-НачислениеЗарплатыУдержания.Результат)
    |ИЗ
    |    Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
    |ГДЕ
    |    НачислениеЗарплатыУдержания.Ссылка.Проведен
    |    И НачислениеЗарплатыУдержания.Ссылка.МесяцНачисления МЕЖДУ &НачПериода И &КонПериода
    |   И НачислениеЗарплатыУдержания.Ссылка.Организация = &Организация
    |СГРУППИРОВАТЬ ПО
    |    НачислениеЗарплатыУдержания.Ссылка,
    |    НачислениеЗарплатыУдержания.Ссылка.Подразделение,
    |    НачислениеЗарплатыУдержания.Ссылка.Номер,
    |    НачислениеЗарплатыУдержания.Ссылка.Дата
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    ИтоговаяСумма.Ссылка КАК СсылкаНаДокумент,
    |    ИтоговаяСумма.Ссылка.МесяцНачисления КАК ПериодРегистрации,
    |    ИтоговаяСумма.Подразделение КАК Подразделение,
    |    СУММА(ИтоговаяСумма.Результат) КАК СуммаДокумента,
    |    ИтоговаяСумма.Номер,
    |    ИтоговаяСумма.Дата,
    |    ""НачислениеЗарплаты"" КАК ИмяДокумента
    |ИЗ
    |    ИтоговаяСумма КАК ИтоговаяСумма
    |
    |СГРУППИРОВАТЬ ПО
    |    ИтоговаяСумма.Ссылка,
    |    ИтоговаяСумма.Подразделение,
    |    ИтоговаяСумма.Ссылка.МесяцНачисления,
    |    ИтоговаяСумма.Номер,
    |    ИтоговаяСумма.Дата";
    
    
    Запрос.УстановитьПараметр("НачПериода", НачПериода);
    Запрос.УстановитьПараметр("КонПериода", КонПериода);
    Запрос.УстановитьПараметр("Организация", Организация);
    
    
    РасчетныеЛистки.Загрузить(Запрос.Выполнить().Выгрузить());
    
КонецПроцедуры

Функция СоздатьСтруктуруРЛ()
    
    СтруктураДанныхРЛ = Новый Структура;
    
    ТЗСправочника = Новый ТаблицаЗначений;
    //ТЗСправочника.Колонки.Добавить("BPP_REF",   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
    ТЗСправочника.Колонки.Добавить("ATTR_ID",   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
    ТЗСправочника.Колонки.Добавить("ATTR_NAME", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100))); 
    ТЗСправочника.Колонки.Добавить("ATTR_DOP",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
    ТЗСправочника.Колонки.Добавить("REP_DATE",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(8)));
    ТЗСправочника.Колонки.Добавить("GUID",      Новый ОписаниеТипов("Строка")); //техническая колонка
    
    ТЗДанных = Новый ТаблицаЗначений;
    //ТЗДанных.Колонки.Добавить("BPP_REF",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
    ТЗДанных.Колонки.Добавить("TAB_NUMB", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
    ТЗДанных.Колонки.Добавить("ATTR_ID",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
    ТЗДанных.Колонки.Добавить("ZNACH1",   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
    ТЗДанных.Колонки.Добавить("REP_DATE", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(8)));
    
    СтруктураДанныхРЛ.Вставить("ИмяФайлаСправочника", "");
    СтруктураДанныхРЛ.Вставить("Справочник", ТЗСправочника);
    СтруктураДанныхРЛ.Вставить("ИмяФайлаДанных", "");
    СтруктураДанныхРЛ.Вставить("Данные", ТЗДанных);
    
    Возврат СтруктураДанныхРЛ;
    
КонецФункции    

Процедура ДозаполнитьРеквизитыДокумента(ОбъектДокумента)
    
    ДействиеАналитики = "АвтозаполнениеРеквизитовДокументов";
    
    ТипДокумента = ОбъектДокумента.Метаданные().Имя;
    
    СтруктураПоиска = Новый Структура;
    СтруктураПоиска.Вставить("ТипДокумента", ТипДокумента);
    МассивПравил = ТаблицаПравил.НайтиСтроки(СтруктураПоиска);
    
    МетаОбласть = Метаданные.НайтиПоПолномуИмени("Документ." + ТипДокумента);
    
    ДоступныеРеквизитыОтбора = ДоступныеИменаМетаРеквизитовОтбора(МетаОбласть.СтандартныеРеквизиты);
    ДоступныеРеквизитыОтбора = ?(ПустаяСтрока(ДоступныеРеквизитыОтбора), ",", ДоступныеРеквизитыОтбора)
        + ДоступныеИменаМетаРеквизитовОтбора(МетаОбласть.Реквизиты);
    
    //
    СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
    
    ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
    ИсточникДанных.Имя = "ИсточникДанных1";
    ИсточникДанных.ТипИсточникаДанных = "local";
    
    НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = "ИсточникДанных1";
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    НаборДанных.Запрос = "ВЫБРАТЬ " + Сред(ДоступныеРеквизитыОтбора, 2) + " ИЗ Документ." + ТипДокумента;;
    
    НаборДанных.Имя = "НаборДанных1";
    
    Для Каждого СтрокаПравил Из МассивПравил Цикл
        
        Если НЕ ЗначениеЗаполнено(СтрокаПравил.АдресЗаполняемыхПолей) Тогда
            Продолжить;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(СтрокаПравил.АдресУсловия) Тогда
            КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
            КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
            
            Настройки = ВостановитьИзХранилищаНастроек("МодульОбменаПрива24-1С", СтрокаПравил.АдресУсловия);
            УстановитьНастройкуСтруктурыВыводаРезультата(Настройки);
            КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Настройки);
            
            ЭлементОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
            ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
            ЭлементОтбора.ПравоеЗначение = ОбъектДокумента.Ссылка;
            
            Результат = Новый ТаблицаЗначений;
            КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
            Попытка
                МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
                КомпоновщикНастроекКомпоновкиДанных.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
            Исключение
                СообщениеПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Ложь);
                Продолжить;
            КонецПопытки;
            
            ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
            ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
            
            ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
            ПроцессорВывода.УстановитьОбъект(Результат);
            ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
            
            Если Результат.Количество() = 0 Тогда
                Продолжить;    
            КонецЕсли;
            
        КонецЕсли;
        
        ЗаполняемыеПоля = ВостановитьИзХранилищаНастроек("МодульОбменаПрива24-1С", СтрокаПравил.АдресЗаполняемыхПолей);
        
        Для Каждого СтрокаПоля Из ЗаполняемыеПоля Цикл
            
            Если Найти(СтрокаПоля.ИмяРеквизита, ".") > 0 Тогда
                Для Каждого СтрокаТЧ Из ОбъектДокумента[Лев(СтрокаПоля.ИмяРеквизита, Найти(СтрокаПоля.ИмяРеквизита, ".")-1)] Цикл
                    СтрокаТЧ[Прав(СтрокаПоля.ИмяРеквизита, СтрДлина(СтрокаПоля.ИмяРеквизита) - Найти(СтрокаПоля.ИмяРеквизита, "."))] = СтрокаПоля.Значение;
                КонецЦикла;    
            Иначе
                ОбъектДокумента[СтрокаПоля.ИмяРеквизита] = СтрокаПоля.Значение;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
    ЗаписатьДокумент(ОбъектДокумента, Ложь);
    
КонецПроцедуры

Процедура УстановитьНастройкуСтруктурыВыводаРезультата(Настройки)
    
    Настройки.Структура.Очистить();
    Настройки.Выбор.Элементы.Очистить();
    
    ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ГруппировкаКомпоновкиДанных.Использование = Истина;
    
    ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
    ПолеГруппировки.Использование = Истина;
    
    ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
    ПолеВыбора.Использование = Истина;
        
КонецПроцедуры

Функция ДоступныеИменаМетаРеквизитовОтбора(Знач МетаКоллекция)

    Результат = "";
    ТипХранилища = Тип("ХранилищеЗначения");
    
    Для Каждого МетаРеквизит Из МетаКоллекция Цикл
        ЭтоХранилище = МетаРеквизит.Тип.СодержитТип(ТипХранилища);
        Если Не ЭтоХранилище Тогда
            Результат = Результат + "," + МетаРеквизит.Имя;
        КонецЕсли
    КонецЦикла;
    
    Возврат Результат;

КонецФункции

Функция ВостановитьИзХранилищаНастроек(ИмяОбъекта, ИмяНастройки)
    
    Возврат ХранилищеНастроекДанныхФорм.Загрузить(ИмяОбъекта, ИмяНастройки);
    
КонецФункции

Процедура ПрочитатьПодготовленныеПлатежи(НачПериода, КонПериода) Экспорт
    
    ДействиеАналитики = "ПрочитатьПодготовленныеПлатежи";
    
    ПодготовленныеПлатежи.Очистить();
    
    РесурсНаСервере = "/c2b_nbu_prepared_sign";
    
    СтрокаЗапроса = "&XMLONLY=true&nomenu=true&nolist=true&PUREXML=true";

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка подготовленных платежей';uk='Помилка відправки запиту на отримання списку підготовлених платежів'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    ТекстПодготовленныхПлатежей = спцПрочитатьУзел("rs1", стРезультат.ТелоОтвета);
    
    ПерваяСтрока = Найти(ТекстПодготовленныхПлатежей,"<row id=");
    
    Если ПерваяСтрока = 0 Тогда
        Возврат ;
    КонецЕсли;    
    
    Текст = Сред(ТекстПодготовленныхПлатежей,ПерваяСтрока);
    
    Счетчик = СтрДлина(Текст); //запасное условие на выход из цикла
    
    Пока Найти(Текст, "HASH") > 0 И Счетчик > 0 Цикл
        
        Счетчик = Счетчик - 1;
        
        Узел_row = спцПрочитатьУзел("row", Текст,,"");
        
        Если Узел_row = "" ИЛИ Найти(Узел_row,"HASH") = 0 ТОгда
            Прервать;
        КонецЕсли;
        
        ТекстПоиска = Узел_row;
        
        ДатаСоздания = Дата(спцПрочитатьАтрибут("DAT_INP r", ТекстПоиска) + " 00:00:00");
        КодОрганизацииВПлатеже = СокрЛП(спцПрочитатьУзел("A_CRF", ТекстПоиска));
        
        Если ДатаСоздания < НачПериода ИЛИ ДатаСоздания > КонПериода ИЛИ (КодОрганизацииВПлатеже <> КодПоЕДРПОУ И КодОрганизацииВПлатеже <> ИНН) Тогда
            Текст = СтрЗаменить(Текст, "<row " + Узел_row + Символы.ПС + "</row>","");
            Продолжить;    
        КонецЕсли;
        
        НоваяСтрока = ПодготовленныеПлатежи.Добавить();
        
        Попытка
            НоваяСтрока.ДатаСоздания = ДатаСоздания;
            НоваяСтрока.ДатаИсполнения = Дата(спцПрочитатьАтрибут("DAT_VALUE r", ТекстПоиска) + " 00:00:00");
        Исключение
            Если РежимОтладки Тогда
                СообщениеПользователю("При получении даты подготовленных платежей " + ОписаниеОшибки(), Ложь);
            КонецЕсли;
        КонецПопытки;
        
        НоваяСтрока.Номер = спцПрочитатьузел("MUR", ТекстПоиска); 
        НоваяСтрока.Сумма = СтрЗаменить(спцПрочитатьАтрибут("DOC_AMT forhuman", ТекстПоиска), " ","");
        НоваяСтрока.НазначениеПлатежа = спцПрочитатьузел("DETAILS", ТекстПоиска);
        НоваяСтрока.Отправитель = спцПрочитатьузел("A_NAM", ТекстПоиска);
        НоваяСтрока.Получатель = спцПрочитатьузел("B_NAM", ТекстПоиска);
        НоваяСтрока.STAT = спцПрочитатьузел("STAT", ТекстПоиска);
        НоваяСтрока.SIGN_NEED = Число(спцПрочитатьАтрибут("SIGN_NEED forhuman", ТекстПоиска));
        НоваяСтрока.Состояние = НСтр("ru = 'Подписано ';uk='Підписано '") + НоваяСтрока.STAT + НСтр("ru = ' виз(а) из ';uk=' віз(а) з '") + НоваяСтрока.SIGN_NEED;
        НоваяСтрока.HASH = спцПрочитатьузел("HASH", ТекстПоиска);
        НоваяСтрока.РеференсПлатежа = спцПрочитатьУзел("REF", ТекстПоиска, ,  " forhuman=""" + спцПрочитатьАтрибут("REF forhuman", ТекстПоиска) + """>"); 
        
        Текст = СтрЗаменить(Текст, "<row " + Узел_row + Символы.ПС + "</row>",""); 
        
    КонецЦикла;
    
    Если ПодготовленныеПлатежи.Количество() = 0 Тогда
        СообщениеПользователю(НСтр("ru = 'За выбранный период нет подготовленных платежей';uk='За вибраний період немає підготовлених платежів'"), Ложь);
    КонецЕсли;

    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
КонецПроцедуры

Процедура ОтправитьПлатежныеДокументы(НачПериода, КонПериода) Экспорт
    
    ДействиеАналитики = "ОтправитьПодписанныеПлатежи";
    
    Текст = "";
    
    РесурсНаСервере = "/c2b_nbu_send";

    ИдДокумента = "";
    ЕстьОтмеченные = Ложь;
    Для Каждого СтрокаТЧ Из ПодготовленныеПлатежи Цикл
        
        Если Не СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;
        
        ЕстьОтмеченные = Истина;
        
        Если Не ЗначениеЗаполнено(СтрокаТЧ.STAT) Или Не ЗначениеЗаполнено(СтрокаТЧ.SIGN_NEED) Тогда
            ТекстСообщения = НСтр("ru='Платеж № ';uk='Платіж № '") + СтрокаТЧ.НомерСтроки
                + НСтр("ru=' от ';uk=' від '") + Формат(СтрокаТЧ.ДатаИсполнения, "ДФ=dd.MM.yyyy")
                + НСтр("ru=', создан ';uk=', створений '") + Формат(СтрокаТЧ.ДатаСоздания, "ДФ=dd.MM.yyyy")
                + НСтр("ru=', сумма ';uk=', сума '") + СтрокаТЧ.Сумма
                + НСтр("ru=' не подписан. Платеж не проводится.';uk=' не підписаний. Платіж не проводиться'");
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
        КонецЕсли;
        
        Если СтрокаТЧ.STAT < СтрокаТЧ.SIGN_NEED Тогда
            ТекстСообщения = НСтр("ru='Недостаточно виз (подписей) для платежа ';uk='Недостатньо віз (підписів) для платежу '")
                + СтрокаТЧ.Номер + НСтр("ru=' от ';uk=' від '") + Формат(СтрокаТЧ.ДатаИсполнения, "ДФ=dd.MM.yyyy")
                + НСтр("ru=', создан ';uk=', створений '") + Формат(СтрокаТЧ.ДатаСоздания, "ДФ=dd.MM.yyyy")
                + НСтр("ru=', сумма ';uk=', сума '") + СтрокаТЧ.Сумма
                + НСтр("ru='. Платеж не проводится.';uk='. Платіж не проводиться.'");
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить;
        КонецЕсли;
        
        ИдДокумента = "&" + СтрокаТЧ.РеференсПлатежа + "=on"
        
    КонецЦикла;
    
    Если Не ЕстьОтмеченные Тогда
        ТекстСообщения = НСтр("ru='Не отмечены платежи для отправки.';uk='Не відмічені платежі для відправки.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ИдДокумента) Тогда
        ТекстСообщения = НСтр("ru='Платежи не отправлены.';uk='Платежі не відправлені.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;

    ТелоЗапроса = "&XMLONLY=true&nomenu=true&nolist=true&PUREXML=true" + ИдДокумента;
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на отправку платежей';uk='Помилка відправки запиту на відправку платежів'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;

    ТекстСообщения = НСтр("ru='Платежи отправлены на проведение';uk='Платежі відправлені на проведення'");
    СообщениеПользователю(ТекстСообщения, Ложь);
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
    ПрочитатьПодготовленныеПлатежи(НачПериода, КонПериода);
    
КонецПроцедуры

Процедура ПрочитатьОтправленныеПлатежи(НачПериода, КонПериода) Экспорт
    
    ДатаНачалаПериода = Формат(НачПериода, "ДФ=dd.MM.yyyy");
    ДатаКонцаПериода = Формат(КонПериода, "ДФ=dd.MM.yyyy");
        
    ДействиеАналитики = "ПрочитатьОтправленныеПлатежи";
    
    ОтправленныеПлатежи.Очистить();
    
    РесурсНаСервере = "/c2b_sent";

    СтрокаЗапроса = "&XMLONLY=true&nomenu=true&nolist=true&PUREXML=true&DAT_VAL=" + ДатаНачалаПериода + "&DAT_VAL_END=" + ДатаКонцаПериода;

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение списка отправленных платежей';uk='Помилка відправки запиту на отримання списку надісланих платежів'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    ТекстОтправленныхПлатежей = спцПрочитатьУзел("rs1", стРезультат.ТелоОтвета);
    
    ПерваяСтрока = Найти(ТекстОтправленныхПлатежей,"<row id=");
    
    Если ПерваяСтрока = 0 Тогда
        Возврат ;
    КонецЕсли;    
    
    Текст = Сред(ТекстОтправленныхПлатежей, ПерваяСтрока);
    
    Счетчик = СтрДлина(Текст); //запасное условие на выход из цикла
    
    Пока Найти(Текст, "MUR") > 0 И Счетчик > 0 Цикл
        
        Счетчик = Счетчик - 1;
        
        Узел_row = спцПрочитатьУзел("row", Текст,,"");
        
        Если Узел_row = "" ИЛИ Найти(Узел_row, "MUR") = 0 ТОгда
            Прервать;
        КонецЕсли;
        
        ТекстПоиска = Узел_row;
        
        ДатаСоздания = Дата(спцПрочитатьАтрибут("DAT_INP r", ТекстПоиска) + " 00:00:00");
        КодОрганизацииВПлатеже = СокрЛП(спцПрочитатьУзел("A_CRF", ТекстПоиска));
        
        Если ДатаСоздания < НачПериода ИЛИ ДатаСоздания > КонПериода ИЛИ (КодОрганизацииВПлатеже <> КодПоЕДРПОУ И КодОрганизацииВПлатеже <> ИНН) Тогда
            Текст = СтрЗаменить(Текст, "<row " + Узел_row + Символы.ПС + "</row>","");
            Продолжить;    
        КонецЕсли;
        
        НоваяСтрока = ОтправленныеПлатежи.Добавить();
        
        Попытка
            НоваяСтрока.ДатаСоздания = ДатаСоздания;
            НоваяСтрока.ДатаЗачисления = Дата(спцПрочитатьАтрибут("DAT_VALUE r", ТекстПоиска) + " 00:00:00");
        Исключение
            Если РежимОтладки Тогда
                СообщениеПользователю("При получении даты отправленных платежей " + ОписаниеОшибки(), Ложь);
            КонецЕсли;
        КонецПопытки;
        
        НоваяСтрока.Номер = спцПрочитатьузел("MUR", ТекстПоиска); 
        НоваяСтрока.Сумма = СтрЗаменить(спцПрочитатьАтрибут("DOC_AMT forhuman", ТекстПоиска), " ","");
        НоваяСтрока.НазначениеПлатежа = спцПрочитатьузел("DETAILS", ТекстПоиска);
        НоваяСтрока.Отправитель = спцПрочитатьузел("A_NAM", ТекстПоиска);
        НоваяСтрока.Получатель = спцПрочитатьузел("B_NAM", ТекстПоиска);
        
        Состояние = "";
        STAT = спцПрочитатьузел("STAT", ТекстПоиска);
        
        Если STAT = "+" Тогда
            Состояние = Состояние + НСтр("ru = 'Принят ОДБ';uk='Прийнято ОДБ'");
        ИначеЕсли STAT = "-" Тогда
            Состояние = Состояние + НСтр("ru = 'Не принят ОДБ';uk='Не прийнято ОДБ'");
        КонецЕсли;
        
        ODB_STAT = спцПрочитатьузел("ODB_STAT", ТекстПоиска);
        
        Если ODB_STAT = "A" Тогда
            Состояние = Состояние + ?(ЗначениеЗаполнено(Состояние), ". ", "");
            Состояние = Состояние + НСтр("ru = 'На визировании';uk='На візуванні'");//Принят банком
        ИначеЕсли ODB_STAT = "P" Тогда
            Состояние = Состояние + ?(ЗначениеЗаполнено(Состояние), ". ", "");
            Состояние = Состояние + НСтр("ru = 'Проведен';uk='Проведений'");//Успешно обработан
        ИначеЕсли Найти("U,T,C", ODB_STAT) > 0 Тогда
            Состояние = Состояние + ?(ЗначениеЗаполнено(Состояние), ". ", "");
            Состояние = Состояние + НСтр("ru = 'Отклонен';uk='Відхилений'");
        КонецЕсли;
        
        Если Найти(ТекстПоиска, "ODB_TXT_ER") = 0 Тогда
            ODB_TXT_ER = "";
        Иначе    
            ODB_TXT_ER = спцПрочитатьузел("ODB_TXT_ER", ТекстПоиска);
        КонецЕсли;    
        
        Состояние = Состояние + ?(ЗначениеЗаполнено(ODB_TXT_ER), ". " + ODB_TXT_ER, "");
        
        НоваяСтрока.Состояние = Состояние;
        
        Текст = СтрЗаменить(Текст, "<row " + Узел_row + Символы.ПС + "</row>",""); 
        
    КонецЦикла;
    
    Если ОтправленныеПлатежи.Количество() = 0 Тогда
        СообщениеПользователю(НСтр("ru = 'За выбранный период нет отправленных платежей';uk='За вибраний період немає відправлених платежів'"), Ложь);
    КонецЕсли;
    
КонецПроцедуры

Функция ПодготовитьДокументыДляПодписи(ИмяРаздела, ЭтоPDF = Ложь) Экспорт
    
    ЕстьОтмеченные = Ложь;

    Если НЕ РаботаВМоделиСервисаПБ Тогда //два варианта подписи: для локальных (внешних) - через криптоплагин
        
        ДокументыДляПодписи.Очистить();            
        
        Для Каждого СтрокаТЧ Из ПодготовленныеПлатежи Цикл 
            
            Если НЕ СтрокаТЧ.Флажок Тогда
                Продолжить;    
            КонецЕсли;
            
            ЕстьОтмеченные = Истина;
            
            СтрокаПодписи = ДокументыДляПодписи.Добавить();
            СтрокаПодписи.ref = СтрокаТЧ.РеференсПлатежа; //ссылка на документ
            СтрокаПодписи.data = СтрокаТЧ.HASH;
            
        КонецЦикла;
        
    Иначе //для сервиса БО Онлайн - через сервис подписи
        
        МассивДанных = Новый Массив;
        
        Для Каждого СтрокаТЧ Из ПодготовленныеПлатежи Цикл 
            
            Если НЕ СтрокаТЧ.Флажок Тогда
                Продолжить;    
            КонецЕсли;
            
            ЕстьОтмеченные = Истина;
            
            СтруктураДанных = СтруктураДанныхДляПодписи();
            СтруктураДанных.ref = СтрокаТЧ.РеференсПлатежа; //ссылка на документ в сервисе
            
            Если ИмяРаздела = "ТекстПодписьПлатежей" Тогда
                СтруктураДанных.docType = "payment";
            ИначеЕсли ИмяРаздела = "ТекстСписокНалоговыхДокументов" Тогда    
                СтруктураДанных.docType = "tax";
            Иначе    
                Если ЭтоPDF Тогда
                    СтруктураДанных.docType = "pdf";    
                Иначе
                    СтруктураДанных.docType = "edi";
                КонецЕсли    
            КонецЕсли;    

            СтруктураДанных.data = СтрокаТЧ.HASH;
            //СтруктураДанных.name = СтрокаМассива.name;
            
            МассивДанных.Добавить(СтруктураДанных);    
            
        КонецЦикла;
        
        XML = СформироватьJSONДляПодписи(МассивДанных);
        
    КонецЕсли;
    
    Если ЕстьОтмеченные = Ложь Тогда
        ТекстСообщения = НСтр("ru = 'Нет отмеченных документов для подписи. ';uk='Немає відмічених документів для підпису'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;        
    Иначе
        ЕстьОтмеченные = Ложь;
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

Процедура ОтправитьПодписиПлатежейНаСервер(ОбъектСПодписями) Экспорт
    
    ДействиеАналитики = "ОтправкаПодписейПлатежейНаСервер";
    
    РесурсНаСервере = "/c2b_nbu_prepared_sign";

    ТелоЗапроса = "&XMLONLY=true&nomenu=true&nolist=true&PUREXML=true&oper=onlyCheckSign&skipMenu=true";
    
    Если НЕ РаботаВМоделиСервисаПБ Тогда//ИЛИ ИСТИНА Тогда
        ТаблицаSign = ДокументыДляПодписи;
    Иначе    
        ТаблицаSign = jsonПрочитатьИнициализация(ОбъектСПодписями);
    КонецЕсли;    
    
    Для Каждого СтрокаПодписей Из ТаблицаSign Цикл
        ТелоЗапроса = ТелоЗапроса + "&" + СтрокаПодписей.ref + "=" + EncodeURL(СтрокаПодписей.sign);
    КонецЦикла;
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        Статус = стРезультат.Статус;
        Сессия = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление подписи платежей';uk='Помилка відправки запиту на додавання підпису платежів'");
        СообщениеПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    Если Найти(ТелоОтвета, "errorMes") > 0 Тогда
        ТекстОшибкиКлюча = спцПрочитатьУзел("errorMes", ТелоОтвета);
        Если ЗначениеЗаполнено(ТекстОшибкиКлюча) Тогда
            СообщениеПользователю(ТекстОшибкиКлюча);        
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    ТекстСообщения = НСтр("ru = 'Подпись документов завершена успешно';uk='Підпис документів завершено успішно'");
    СообщениеПользователю(ТекстСообщения);
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
КонецПроцедуры

Процедура ОтправитьПодписанныеФинДокиНаСервер(ОбъектСПодписями, ЭтоПодписьPDF = Ложь) Экспорт
    
    ПодготовленныеПлатежи.Очистить();
    
    ДействиеАналитики = "ОтправкаПодписейФинДокНаСервер";
    
    РесурсНаСервере = "/loader/uploadSignedDocument";
    
    Если НЕ РаботаВМоделиСервисаПБ Тогда//ИЛИ ИСТИНА Тогда
        ТаблицаSign = ДокументыДляПодписи;
    Иначе    
        ТаблицаSign = jsonПрочитатьИнициализация(ОбъектСПодписями);
    КонецЕсли;    
    
    Для Каждого СтрокаПодписей Из ТаблицаSign Цикл
        
        ТелоЗапроса = "&XMLONLY=true&PUREXML=true&cryptoplugin=true&okpo=" + КодПоЕДРПОУ;
        ТелоЗапроса = ТелоЗапроса + "&file=" + EncodeURL(СтрокаПодписей.sign) + "&id=" + СтрокаПодписей.ref;
        UserAgentHeaders = ОпределитьUserAgentHeaders();
        
        Если ЭтоПодписьPDF Тогда
            ТелоЗапроса = ТелоЗапроса + "&doctype=pdf";    
        КонецЕсли;
        
        //Если Не ЗначениеЗаполнено(СессияДок) Тогда
        //    СессияДок = АвторизацияДок();
        //КонецЕсли;
        
        стРезультат = УстановитьСоединение(АдресДокументооборота, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияДок);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Сессия = Неопределено;
            Возврат;
        Иначе
            Статус = стРезультат.Статус;
            СессияДок = стРезультат.Cookie;
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление подписи финансовых документов';uk='Помилка відправки запиту на додавання підпису фінансових документів'");
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецЕсли;
        
    КонецЦикла;
    
    ТекстСообщения = НСтр("ru = 'Подпись документов завершена успешно';uk='Підпис документів завершено успішно'");
    СообщениеПользователю(ТекстСообщения);
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
КонецПроцедуры

//**Обмен Приват24
////////////////////////////////////////////////////////////////

Процедура ОбновитьСтатистикуРаботы(Категория, Действие, СразуОтправлять = Ложь, ТекстОшибки = "", Параметр = "", ЗначениеПараметра = "") Экспорт
    
    Если Не СразуОтправлять    Тогда
        НоваяСтрока = СтатистикаРаботы.Добавить();
        
        НоваяСтрока.Категория = Категория;
        НоваяСтрока.Действие = Действие;
        НоваяСтрока.ТекстОшибки = ТекстОшибки;
        НоваяСтрока.Параметр = Параметр;
        НоваяСтрока.ЗначениеПараметра = ЗначениеПараметра;
        
        Действие = "";
        
        Если СтатистикаРаботы.Количество() < 20 Тогда
            Возврат;    
        КонецЕсли;
    КонецЕсли;
    
    Если СтатистикаРаботы.Количество() = 0 Тогда
        Возврат;    
    КонецЕсли;
    
    РесурсНаСервере = "/batch";
    
    //СерверGoogle = "ssl.google-analytics.com";
    СерверGoogle = "google-analytics.com";

    analyticsCode = "UA-64486685-1";
    
    СисИнфо = Новый СистемнаяИнформация;
    СтрокаЗапроса = "";
    
    Для Каждого СтрокаСтатистики Из СтатистикаРаботы Цикл                                                                               
        СтрокаЗапроса = СтрокаЗапроса + "&v=1&tid=" + analyticsCode + "&cid=" + ?(ЗначениеЗаполнено(КодПоЕДРПОУ), КодПоЕДРПОУ, "НетЕДРПОУ") + "&ul=" + КодЯзыкаТекущегоПользователя() + "&t=event&ec=" + EncodeURL(СтрокаСтатистики.Категория)
         + "&ea=" + EncodeURL(СтрокаСтатистики.Действие) + "&cd3=" + СисИнфо.ВерсияПриложения + "&cd4=" + ИдКонф + "&cd5=" + МетаданныеВерсия() + "&el=" + EncodeURL(СтрокаСтатистики.ТекстОшибки) 
         + ?(ЗначениеЗаполнено(СтрокаСтатистики.Параметр), ИмяПараметраГуглАналитики(СтрокаСтатистики.Параметр) + "=" + СтрокаСтатистики.ЗначениеПараметра, "") + Символы.ВК + Символы.ПС;
    КонецЦикла;    

    Клиент = "3.2/" + ТекВерсия;
    
    лРежимОтладки = РежимОтладки;
    РежимОтладки = Ложь;
    стРезультат = УстановитьСоединение(СерверGoogle, Прокси, РесурсНаСервере, Клиент, СтрокаЗапроса,,"",,, Ложь);    
    РежимОтладки = лРежимОтладки;
    
    СтатистикаРаботы.Очистить();
    
КонецПроцедуры

Функция ИмяПараметраГуглАналитики(Параметр)
    
    ИмяПараметра = "";
    
    Если Параметр = "КоличествоПлатежей" Тогда 
        ИмяПараметра = "&cm1";
    ИначеЕсли Параметр = "КоличествоСотрудников" Тогда 
        ИмяПараметра = "&cm2";
    КонецЕсли;    
    
    Возврат ИмяПараметра;
    
КонецФункции

//Функция возвращает категорию действий для отчета гугл аналитики
//
Функция КатегорияПоСобытию() 
    
    СтруктураКатегорий = Новый Структура;
    
    СтруктураКатегорий.Вставить("Авторизация", "Авторизация");
    СтруктураКатегорий.Вставить("Авторизация23Редирект", "Авторизация");
    СтруктураКатегорий.Вставить("ПолучениеСпискаПредприятий", "Авторизация");
    СтруктураКатегорий.Вставить("ВыборПредприятия", "Авторизация");
    СтруктураКатегорий.Вставить("ПолучениеToken", "Авторизация");
    СтруктураКатегорий.Вставить("АвторизацияАвтоклиент", "Авторизация");
    СтруктураКатегорий.Вставить("СозданиеАвтоклиента", "Авторизация");
    СтруктураКатегорий.Вставить("ПолучениеСпискаАвтоклиентов", "Авторизация");
    СтруктураКатегорий.Вставить("ПолучениеTokenПоIdАвтоклиента", "Авторизация");
    
    СтруктураКатегорий.Вставить("ЗагрузкаПлатежей", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ЗагрузкаПлатежейV3", "ОбменПлатежами");

    СтруктураКатегорий.Вставить("ПолучениеСпискаПлатежей", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ПолучениеСпискаПлатежейAKv4", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ВыгрузкаПлатежей", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ВыгрузкаПлатежейV3", "ОбменПлатежами");
    
    СтруктураКатегорий.Вставить("Выписка", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ПолучениеОстатков", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ПрочитатьПодготовленныеПлатежи", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ПрочитатьОтправленныеПлатежи", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ОтправитьПодписанныеПлатежи", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ОтправкаПодписейПлатежейНаСервер", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ВыпискаV3", "ОбменПлатежами");
    СтруктураКатегорий.Вставить("ПолучениеОстатковV4", "ОбменПлатежами");
    
    СтруктураКатегорий.Вставить("ЗПВедомостьОтправка", "ЗарплатныйПроект");
    
    СтруктураКатегорий.Вставить("РасчетныйЛистПодготовкаDBF", "ЗарплатныйПроект");
    СтруктураКатегорий.Вставить("РасчетныйЛистАвторизация", "ЗарплатныйПроект");
    СтруктураКатегорий.Вставить("РасчетныйЛистОтправка", "ЗарплатныйПроект");
    
    СтруктураКатегорий.Вставить("СписокКарт", "ЗарплатныйПроект");
    СтруктураКатегорий.Вставить("ПолучениеСпискаЗП", "ЗарплатныйПроект");
    СтруктураКатегорий.Вставить("ПолучениеСпискаВедомостей", "ЗарплатныйПроект");
    
    СтруктураКатегорий.Вставить("ННВыгрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ННЗагрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ННП2Выгрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ННП2Загрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ННЧтениеСписка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ННПроверкаСтатусов", "ДокументыОтчеты");
    
    СтруктураКатегорий.Вставить("ФинДокВыгрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ФинДокЗагрузка", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ФинДокПроверкаСтатусов", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("ОтправкаПодписейФинДокНаСервер", "ДокументыОтчеты");
    
    СтруктураКатегорий.Вставить("Папка24Авторизация", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("Папка24Обмен", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("Папка24Подпись", "ДокументыОтчеты");
    
    СтруктураКатегорий.Вставить("ВыгрузкаPDFДок", "ДокументыОтчеты");
    
    СтруктураКатегорий.Вставить("РасшифровкаКредит", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("РасшифровкаФормированиеОтчета", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("РасшифровкаСохранениеОтчета", "ДокументыОтчеты");
    СтруктураКатегорий.Вставить("РасшифровкаОтправкаОтчета", "ДокументыОтчеты");
    
    СтруктураКатегорий.Вставить("КурсыВалютЗапись", "КурсыВалют");
    СтруктураКатегорий.Вставить("КурсыВалютЧтение", "КурсыВалют");

    СтруктураКатегорий.Вставить("ОтправкаКодаПлатежа", "ДопВозможности");
    СтруктураКатегорий.Вставить("ПолучениеПлатежаПоКоду", "ДопВозможности");
    СтруктураКатегорий.Вставить("ЭкспортКонтрагентов", "ДопВозможности");
    СтруктураКатегорий.Вставить("ЭкспортНазначений", "ДопВозможности");

    Попытка
        Возврат СтруктураКатегорий[ДействиеАналитики]; //ДействиеАналитики - реквизит обработки
    Исключение
        Возврат "Прочее";    
    КонецПопытки;    
    
КонецФункции

Процедура УдалитьBOMВФайле(ИмяФайла)

    Данные = Новый ДвоичныеДанные(ИмяФайла);
    Строка64 = Base64Строка(Данные);
    Строка64 = Прав(Строка64, СтрДлина(Строка64) - 4);
    ДанныеНаЗапись = Base64Значение(Строка64);
    ДанныеНаЗапись.Записать(ИмяФайла);

КонецПроцедуры

//------------------------- SHA512 ----------------------------

Функция SHA512(Стр)

    //Попытка
    //    // средствами BAF
    //    ТекстовыйДок = Новый ТекстовыйДокумент;
    //    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
    //    ТекстовыйДок.УстановитьТекст(Стр);
    //    ТекстовыйДок.Записать(ИмяВременногоФайла);
    //    УдалитьBOMВФайле(ИмяВременногоФайла);
    //    ТекстДанных = Новый ДвоичныеДанные(ИмяВременногоФайла);
    //    Хэш = SHA512_1С(ТекстДанных);
    //    Если РежимОтладки Тогда
    //        СообщениеПользователю("Хэш средствами платформы: " + Хэш)
    //    КонецЕсли
    //Исключение
        Попытка
            // средствами ОС
            Хэш = SHA512ОС(Стр);
            Если РежимОтладки Тогда
                СообщениеПользователю("Хэш средствами ОС: " + Хэш)
            КонецЕсли
        Исключение
            Попытка
                // средствами JScript
                Хэш = SHA512Script(Стр);
                Если РежимОтладки Тогда
                    СообщениеПользователю("Хэш средствами JScript: " + Хэш)
                КонецЕсли
            Исключение
                ТекстСообщения = НСтр("ru = 'Работа с PaperLess на вашем ПО невозможна.';uk='Робота з PaperLess на вашіх ПЗ неможлива.'")
                    + Символы.ПС
                    + НСтр("ru = 'Используйте платформу BAF версии не ниже 8.3.11 с выключенным режимом совместимости и обновите конфигурацию;';uk='Використовуйте платформу BAF версії не нижче 8.3.11 з вимкненим режимом сумісності та оновіть конфігурацію;'")
                    // или с включенным режимом совместимости с версией не ниже 8.3.11// або з увімкненим режимом сумісності з версією не нижче 8.3.11
                    + Символы.ПС
                    + НСтр("ru = 'либо установите компоненту MSScriptControl.ScriptControl при использовании ОС Windows.';uk='або встановіть компоненту MSScriptControl.ScriptControl при використовуванні ОС Windows.'");
                СообщениеПользователю(ТекстСообщения);
                Хэш = ""
            КонецПопытки;
        //КонецПопытки
    КонецПопытки;

    Возврат Хэш

КонецФункции

//Функция MD5ХешСтрока(тСтрока)

//    Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
//    Хеш.Добавить(тСтрока);
//    Возврат Хеш.ХешСумма

//КонецФункции

//Функция SHA512CC(СтрокаДляХеширования)

//    //0 — SHA1;
//    //1 — MD2;
//    //2 — MD4;
//    //3 — MD5;
//    //4 — SHA-256;
//    //5 — SHA-384;
//    //6 — SHA-512.

//    Crypt = Новый COMОбъект("CAPICOM.HashedData");
//    Crypt.Algorithm = 6; 
//    Crypt.Hash(СтрокаДляХеширования);

//    Возврат Crypt.Value

//КонецФункции

Функция SHA512ОС(Знач Строка) Экспорт

    Попытка
        // Вычисление хэш-суммы.
        UTF8Encoding = Новый COMОбъект("System.Text.UTF8Encoding");
        SHA512Managed = Новый COMОбъект("System.Security.Cryptography.SHA512Managed");
        МассивБайтов = SHA512Managed.ComputeHash_2(UTF8Encoding.GetBytes_4(Строка));

        // Преобразование хэш-суммы в строку.
        StringBuilder = Новый COMОбъект("System.Text.StringBuilder");
        Для Каждого Элемент Из МассивБайтов Цикл
            StringBuilder.AppendFormat("{0:x2}", Элемент);
        КонецЦикла;
        Возврат StringBuilder.ToString();
    Исключение
        ВызватьИсключение "Ошибка вычисления хэш-суммы по алгоритму SHA-512!
            |Попробуйте установить/обновить "".NET Framework"".";
    КонецПопытки;
    Возврат ""

КонецФункции

Функция SHA512Script(Стр)

    ScrptCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
    ScrptCtrl.Language = "JScript";
    ScrptCtrl.AddCode(
        "function SHA512(str) {
        |  function int64(msint_32, lsint_32) {
        |    this.highOrder = msint_32;
        |    this.lowOrder = lsint_32;
        |  }
        |  var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),
        |      new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),
        |      new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),
        |      new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];
        |  var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),
        |      new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),
        |      new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),
        |      new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),
        |      new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),
        |      new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),
        |      new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),
        |      new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),
        |      new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),
        |      new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),
        |      new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
        |      new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),
        |      new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),
        |      new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),
        |      new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),
        |      new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),
        |      new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
        |      new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),
        |      new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),
        |      new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),
        |      new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),
        |      new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),
        |      new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),
        |      new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
        |      new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),
        |      new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),
        |      new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),
        |      new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),
        |      new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
        |      new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),
        |      new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),
        |      new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),
        |      new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),
        |      new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),
        |      new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),
        |      new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),
        |      new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
        |      new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),
        |      new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),
        |      new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];
        |  var W = new Array(64);
        |  var a, b, c, d, e, f, g, h, i, j;
        |  var T1, T2;
        |  var charsize = 8;
        |  function utf8_encode(str) {
        |    return unescape(encodeURIComponent(str));
        |  }
        |  function str2binb(str) {
        |    var bin = [];
        |    var mask = (1 << charsize) - 1;
        |    var len = str.length * charsize;
        |    for (var i = 0; i < len; i += charsize) {
        |      bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));
        |    }
        |    return bin;
        |  }
        |  function binb2hex(binarray) {
        |    var hex_tab = ""0123456789abcdef"";
        |    var str = """";
        |    var length = binarray.length * 4;
        |    var srcByte;
        |    for (var i = 0; i < length; i += 1) {
        |      srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);
        |      str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);
        |    }
        |    return str;
        |  }
        |  function safe_add_2(x, y) {
        |    var lsw, msw, lowOrder, highOrder;
        |    lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);
        |    msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
        |    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);
        |    msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
        |    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    return new int64(highOrder, lowOrder);
        |  }
        |  function safe_add_4(a, b, c, d) {
        |    var lsw, msw, lowOrder, highOrder;
        |    lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);
        |    msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);
        |    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);
        |    msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);
        |    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    return new int64(highOrder, lowOrder);
        |  }
        |  function safe_add_5(a, b, c, d, e) {
        |    var lsw, msw, lowOrder, highOrder;
        |    lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);
        |    msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);
        |    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);
        |    msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);
        |    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
        |    return new int64(highOrder, lowOrder);
        |  }
        |  function maj(x, y, z) {
        |    return new int64(
        |      (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),
        |      (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)
        |    );
        |  }
        |  function ch(x, y, z) {
        |    return new int64(
        |      (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),
        |      (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)
        |    );
        |  }
        |  function rotr(x, n) {
        |    if (n <= 32) {
        |      return new int64(
        |       (x.highOrder >>> n) | (x.lowOrder << (32 - n)),
        |       (x.lowOrder >>> n) | (x.highOrder << (32 - n))
        |      );
        |    } else {
        |      return new int64(
        |       (x.lowOrder >>> n) | (x.highOrder << (32 - n)),
        |       (x.highOrder >>> n) | (x.lowOrder << (32 - n))
        |      );
        |    }
        |  }
        |  function sigma0(x) {
        |    var rotr28 = rotr(x, 28);
        |    var rotr34 = rotr(x, 34);
        |    var rotr39 = rotr(x, 39);
        |    return new int64(
        |      rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
        |      rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
        |    );
        |  }
        |  function sigma1(x) {
        |    var rotr14 = rotr(x, 14);
        |    var rotr18 = rotr(x, 18);
        |    var rotr41 = rotr(x, 41);
        |    return new int64(
        |      rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
        |      rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
        |    );
        |  }
        |  function gamma0(x) {
        |    var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);
        |    return new int64(
        |      rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
        |      rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
        |    );
        |  }
        |  function gamma1(x) {
        |    var rotr19 = rotr(x, 19);
        |    var rotr61 = rotr(x, 61);
        |    var shr6 = shr(x, 6);
        |    return new int64(
        |      rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
        |      rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
        |    );
        |  }
        |  function shr(x, n) {
        |    if (n <= 32) {
        |      return new int64(
        |       x.highOrder >>> n,
        |       x.lowOrder >>> n | (x.highOrder << (32 - n))
        |      );
        |    } else {
        |      return new int64(
        |       0,
        |       x.highOrder << (32 - n)
        |      );
        |    }
        |  }
        |  str = utf8_encode(str);
        |  strlen = str.length*charsize;
        |  str = str2binb(str);
        |  str[strlen >> 5] |= 0x80 << (24 - strlen % 32);
        |  str[(((strlen + 128) >> 10) << 5) + 31] = strlen;
        |  for (var i = 0; i < str.length; i += 32) {
        |    a = H[0];
        |    b = H[1];
        |    c = H[2];
        |    d = H[3];
        |    e = H[4];
        |    f = H[5];
        |    g = H[6];
        |    h = H[7];
        |    for (var j = 0; j < 80; j++) {
        |      if (j < 16) {
        |       W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);
        |      } else {
        |       W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);
        |      }
        |      T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);
        |      T2 = safe_add_2(sigma0(a), maj(a, b, c));
        |      h = g;
        |      g = f;
        |      f = e;
        |      e = safe_add_2(d, T1);
        |      d = c;
        |      c = b;
        |      b = a;
        |      a = safe_add_2(T1, T2);
        |    }
        |    H[0] = safe_add_2(a, H[0]);
        |    H[1] = safe_add_2(b, H[1]);
        |    H[2] = safe_add_2(c, H[2]);
        |    H[3] = safe_add_2(d, H[3]);
        |    H[4] = safe_add_2(e, H[4]);
        |    H[5] = safe_add_2(f, H[5]);
        |    H[6] = safe_add_2(g, H[6]);
        |    H[7] = safe_add_2(h, H[7]);
        |  }
        |  var binarray = [];
        |  for (var i = 0; i < H.length; i++) {
        |    binarray.push(H[i].highOrder);
        |    binarray.push(H[i].lowOrder);
        |  }
        |  return binb2hex(binarray);
        |}"
    );
    
    Хэш = ScrptCtrl.Run("SHA512", Стр);
    
    ScrptCtrl = "";
    
    Возврат Хэш;
    
КонецФункции

// Функция расчета Хеша по алгоритму SHA-512
// Входной параметр - двоичные данные
// Возвращаяет HEX строку с хешем
//
Функция SHA512_1С(пДвоичныеДанные) Экспорт

    Перем лБуферДвДанных, лБуферДвДанных2, лБуфер64, msg, h_0, h_1, h_2, h_3, h_4, h_5, h_6, h_7,
        лЦел15, лЦел2, t1, h0, h1, h2, h3, h4, h5, h6, h7, digest, лМассив, лМассив2, Буфер3;

    //Пояснения:
    // Все переменные беззнаковые, имеют размер 64 бита и при вычислениях суммируются по модулю 2^64
    // message — исходное двоичное сообщение
    // m — преобразованное сообщение
    
    // Инициализация переменных
    // (первые 64 бита дробных частей квадратных корней первых восьми простых чисел [от 2 до 19]):
    Выполнить("h0 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""6a09e667f3bcc908"")");
    Выполнить("h1 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""bb67ae8584caa73b"")");
    Выполнить("h2 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""3c6ef372fe94f82b"")");
    Выполнить("h3 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""a54ff53a5f1d36f1"")");
    Выполнить("h4 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""510e527fade682d1"")");
    Выполнить("h5 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""9b05688c2b3e6c1f"")");
    Выполнить("h6 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""1f83d9abfb41bd6b"")");
    Выполнить("h7 = ПолучитьБуферДвоичныхДанныхИзHexСтроки(""5be0cd19137e2179"")");
    
    //Таблица констант
    //(первые 64 бита дробных частей кубических корней первых 80 простых чисел [от 2 до 409]):
    
    лСтрока = "
    |428a2f98d728ae22,7137449123ef65cd,b5c0fbcfec4d3b2f,e9b5dba58189dbbc,
    |3956c25bf348b538,59f111f1b605d019,923f82a4af194f9b,ab1c5ed5da6d8118,
    |d807aa98a3030242,12835b0145706fbe,243185be4ee4b28c,550c7dc3d5ffb4e2,
    |72be5d74f27b896f,80deb1fe3b1696b1,9bdc06a725c71235,c19bf174cf692694,
    |e49b69c19ef14ad2,efbe4786384f25e3,0fc19dc68b8cd5b5,240ca1cc77ac9c65,
    |2de92c6f592b0275,4a7484aa6ea6e483,5cb0a9dcbd41fbd4,76f988da831153b5,
    |983e5152ee66dfab,a831c66d2db43210,b00327c898fb213f,bf597fc7beef0ee4,
    |c6e00bf33da88fc2,d5a79147930aa725,06ca6351e003826f,142929670a0e6e70,
    |27b70a8546d22ffc,2e1b21385c26c926,4d2c6dfc5ac42aed,53380d139d95b3df,
    |650a73548baf63de,766a0abb3c77b2a8,81c2c92e47edaee6,92722c851482353b,
    |a2bfe8a14cf10364,a81a664bbc423001,c24b8b70d0f89791,c76c51a30654be30,
    |d192e819d6ef5218,d69906245565a910,f40e35855771202a,106aa07032bbd1b8,
    |19a4c116b8d2d0c8,1e376c085141ab53,2748774cdf8eeb99,34b0bcb5e19b48a8,
    |391c0cb3c5c95a63,4ed8aa4ae3418acb,5b9cca4f7763e373,682e6ff3d6b2b8a3,
    |748f82ee5defb2fc,78a5636f43172f60,84c87814a1f0ab72,8cc702081a6439ec,
    |90befffa23631e28,a4506cebde82bde9,bef9a3f7b2c67915,c67178f2e372532b,
    |ca273eceea26619c,d186b8c721c0c207,eada7dd6cde0eb1e,f57d4f7fee6ed178,
    |06f067aa72176fba,0a637dc5a2c898a6,113f9804bef90dae,1b710b35131c471b,
    |28db77f523047d84,32caab7b40c72493,3c9ebe0a15c9bebc,431d67c49c100d4c,
    |4cc5d4becb3e42b6,597f299cfc657e2a,5fcb6fab3ad6faec,6c44198c4a475817";
    Конст = ПолучитьМассивБДДИзHexСтроки(лСтрока);
    
    //Предварительная обработка:
    //m := m ǁ [k нулевых бит], где k — наименьшее неотрицательное число, такое что 
    //                 (L + 1 + K) mod 1024 = 960, где L — число бит в сообщении (сравнима по модулю 1024 c 960)
    //m := m ǁ Длина(message) — длина исходного сообщения в битах в виде 64-битного числа
    //            с порядком байтов от старшего к младшему
    
    Выполнить("msg = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(пДвоичныеДанные)");
    L = msg.Размер*8; // получаем размер в битах
    K1 = 1024 - ((L + 64 + 1) % 1024); // сколько бит нужно добавить
    K = K1 - 7; // Потому что засчитали один бит, а добавлять будем целый байт с лидирующим битом
    КолвоHEX = K/8; // считаем количество добавляемых байтов
    Выполнить("лБуферДвДанных = Новый БуферДвоичныхДанных(КолвоHEX,ПорядокБайтов.BigEndian)");
    лМассивБухДвДанных = Новый Массив();
    лМассивБухДвДанных.Добавить(msg);
    Выполнить("лМассивБухДвДанных.Добавить(ПолучитьБуферДвоичныхДанныхИзHexСтроки(""80""))");
    лМассивБухДвДанных.Добавить(лБуферДвДанных);
    
    Выполнить("лБуферДвДанных2 = Новый БуферДвоичныхДанных(8,ПорядокБайтов.BigEndian)");
    
    Выполнить("лБуферДвДанных2.ЗаписатьЦелое64(0,L,ПорядокБайтов.BigEndian)");
    лМассивБухДвДанных.Добавить(лБуферДвДанных2);
    
    Выполнить("msg = СоединитьБуферыДвоичныхДанных(лМассивБухДвДанных,,ПорядокБайтов.BigEndian)");
    
    //разбить сообщение на куски по 512 бит
    Выполнить("лМассив = РазделитьДвоичныеДанные(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(msg),128)");
    
    Выполнить("h_0 = h0.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_1 = h1.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_2 = h2.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_3 = h3.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_4 = h4.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_5 = h5.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_6 = h6.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    Выполнить("h_7 = h7.ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
    
    //Далее сообщение обрабатывается последовательными порциями по 1024 бит:
    Для Каждого лКусок1 Из лМассив Цикл
        //    разбить кусок на 16 слов длиной 64 бита (с порядком байтов от старшего к младшему внутри слова): w[0..15]
        Выполнить("лМассив2 = РазделитьДвоичныеДанные(лКусок1,8)");
        
        Для i=16 По 79 Цикл
            Выполнить("лЦел15 = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(лМассив2[i-15]).ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
            Выполнить("лЦел2 = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(лМассив2[i-2]).ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian)");
            //    Сгенерировать дополнительные 48 слов:
            //    для i от 16 до 63
            //        s0 := (w[i-15] rotr 7) xor (w[i-15] rotr 18) xor (w[i-15] shr 3)
            //        s1 := (w[i-2] rotr 17) xor (w[i-2] rotr 19) xor (w[i-2] shr 10)
            //        w[i] := w[i-16] + s0 + w[i-7] + s1
            s0 = ПобитовоеИсключительноеИли64(ПобитовоеИсключительноеИли64(ЦиклическийСдвигВправо64(лЦел15,1),ЦиклическийСдвигВправо64(лЦел15,8)),ПобитовыйСдвигВправо64(лЦел15,7));
            s1 = ПобитовоеИсключительноеИли64(ПобитовоеИсключительноеИли64(ЦиклическийСдвигВправо64(лЦел2,19),ЦиклическийСдвигВправо64(лЦел2,61)),ПобитовыйСдвигВправо64(лЦел2,6));
            Выполнить("лБуфер64 = Новый БуферДвоичныхДанных(8,ПорядокБайтов.BigEndian)");
            Выполнить("лЦел64 = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(лМассив2[i-16]).ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian) + s0 + ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(лМассив2[i-7]).ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian) + s1");
            лЦел64 = ПривестиК64Битам(лЦел64);
            Выполнить("лБуфер64.ЗаписатьЦелое64(0,лЦел64,ПорядокБайтов.BigEndian)");
            Выполнить("лМассив2.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(лБуфер64))");
        КонецЦикла;
        
        //    Инициализация вспомогательных переменных:
        a = h_0;
        b = h_1;
        c = h_2;
        d = h_3;
        e = h_4;
        f = h_5;
        g = h_6;
        h = h_7;
        //    Основной цикл:
        
        Для i = 0 По 79 Цикл
            S0 = ПривестиК64Битам(ПобитовоеИсключительноеИли64(ПобитовоеИсключительноеИли64(ЦиклическийСдвигВправо64(a, 28), ЦиклическийСдвигВправо64(a, 34)), ЦиклическийСдвигВправо64(a, 39)));
            Ma = ПривестиК64Битам(ПобитовоеИсключительноеИли64(ПобитовоеИсключительноеИли64(ПобитовоеИ64(a, b), ПобитовоеИ64(a, c)), ПобитовоеИ64(b, c)));
            t2 = ПривестиК64Битам(S0 + Ma);
            S1 = ПривестиК64Битам(ПобитовоеИсключительноеИли64(ПобитовоеИсключительноеИли64(ЦиклическийСдвигВправо64(e, 14), ЦиклическийСдвигВправо64(e, 18)), ЦиклическийСдвигВправо64(e, 41)));
            Ch = ПривестиК64Битам(ПобитовоеИсключительноеИли64(ПобитовоеИ64(e, f), ПобитовоеИ64(ПобитовоеНе64(e), g)));
            Выполнить("t1 = ПривестиК64Битам(h + S1 + Ch + Конст[i].ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian) + ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(лМассив2[i]).ПрочитатьЦелое64(0,ПорядокБайтов.BigEndian))");
            h = g;
            g = f;
            f = e;
            e = ПривестиК64Битам(d + t1);
            d = c;
            c = b;
            b = a;
            a = ПривестиК64Битам(t1 + t2);
            
        КонецЦикла;
        
        //    Добавить полученные значения к ранее вычисленному результату:
        h_0 = ПривестиК64Битам(h_0 + a);
        h_1 = ПривестиК64Битам(h_1 + b);
        h_2 = ПривестиК64Битам(h_2 + c);
        h_3 = ПривестиК64Битам(h_3 + d);
        h_4 = ПривестиК64Битам(h_4 + e);
        h_5 = ПривестиК64Битам(h_5 + f);
        h_6 = ПривестиК64Битам(h_6 + g);
        h_7 = ПривестиК64Битам(h_7 + h);
    КонецЦикла;
    
    Выполнить("h0.ЗаписатьЦелое64(0,h_0,ПорядокБайтов.BigEndian)");
    Выполнить("h1.ЗаписатьЦелое64(0,h_1,ПорядокБайтов.BigEndian)");
    Выполнить("h2.ЗаписатьЦелое64(0,h_2,ПорядокБайтов.BigEndian)");
    Выполнить("h3.ЗаписатьЦелое64(0,h_3,ПорядокБайтов.BigEndian)");
    Выполнить("h4.ЗаписатьЦелое64(0,h_4,ПорядокБайтов.BigEndian)");
    Выполнить("h5.ЗаписатьЦелое64(0,h_5,ПорядокБайтов.BigEndian)");
    Выполнить("h6.ЗаписатьЦелое64(0,h_6,ПорядокБайтов.BigEndian)");
    Выполнить("h7.ЗаписатьЦелое64(0,h_7,ПорядокБайтов.BigEndian)");
    
    //Получить итоговое значение хеша:
    //digest = hash = h0 ǁ h1 ǁ h2 ǁ h3 ǁ h4 ǁ h5 ǁ h6 ǁ h7
    лМассив3 = Новый Массив();
    лМассив3.Добавить(h0);
    лМассив3.Добавить(h1);
    лМассив3.Добавить(h2);
    лМассив3.Добавить(h3);
    лМассив3.Добавить(h4);
    лМассив3.Добавить(h5);
    лМассив3.Добавить(h6);
    лМассив3.Добавить(h7);
    Выполнить("Буфер3 = СоединитьБуферыДвоичныхДанных(лМассив3)");
    
    
    Выполнить("digest = Нрег(ПолучитьHexСтрокуИзБуфераДвоичныхДанных(Буфер3))");
    
    Возврат digest
    
КонецФункции // SHA512(пДвоичныеДанные)

// Функция получает массив буферов двоичных данных из HEX строки с разделителями запятыми
// пример: "428A2F98,71374491,B5C0FBCF"
//
Функция ПолучитьМассивБДДИзHexСтроки(Знач пСтрока)

    лПоз = Найти(пСтрока,",");
    лМассив = Новый Массив();
    Пока лПоз>1 Цикл
        лПодстрока = Сред(пСтрока,1,лПоз-1);
        пСтрока = Сред(пСтрока,лПоз+1);
        лПоз = Найти(пСтрока,",");
        Выполнить("лМассив.Добавить(ПолучитьБуферДвоичныхДанныхИзHexСтроки(лПодстрока))");
    КонецЦикла;
    Выполнить("лМассив.Добавить(ПолучитьБуферДвоичныхДанныхИзHexСтроки(пСтрока))");
    Возврат лМассив

КонецФункции // ПолучитьМассивБДДИзHexСтроки(Знач пСтрока)

Функция ПобитовоеИсключительноеИли64(пЧисло1, пЧисло2)

    Перем Результат;

    лЧисло10 = Цел(пЧисло1/4294967296);
    лЧисло11 = пЧисло1%4294967296;
    лЧисло20 = Цел(пЧисло2/4294967296);
    лЧисло21 = пЧисло2%4294967296;
    Выполнить("Результат = (ПобитовоеИсключительноеИли(лЧисло10,лЧисло20) * 4294967296 + ПобитовоеИсключительноеИли(лЧисло11,лЧисло21))");

    Возврат Результат

КонецФункции // ПобитовоеИсключительноеИли64(пЧисло1, пЧисло2)

Функция ПривестиК64Битам(пЧисло)

    Возврат пЧисло%18446744073709551616;

КонецФункции // ПривестиК64Битам(пЧисло)

// функция осуществляет циклический сдвиг вправо
//
Функция ЦиклическийСдвигВправо64(пЧисло, пСмещение)

    Перем Результат;

    Выполнить("Результат = (ПобитовыйСдвигВправо64(пЧисло, пСмещение) + ПобитовыйСдвигВлево64(пЧисло,64-пСмещение))");

    Возврат Результат

КонецФункции // ЦиклическийСдвигВправо64(пЧисло, пСмещение)

Функция ПобитовыйСдвигВправо64(пЧисло, пСмещение)

    Перем Результат;

    лЧисло0 = Цел(пЧисло/4294967296);
    лЧисло1 = пЧисло%4294967296;
    Если пСмещение<32 Тогда
        Выполнить("Результат = (ПобитовыйСдвигВправо(лЧисло0, пСмещение)) * 4294967296 + ПобитовыйСдвигВправо(лЧисло1, пСмещение) + ПобитовыйСдвигВлево(лЧисло0, 32 - пСмещение)");
        Возврат Результат
    Иначе
        Выполнить("Результат = ПобитовыйСдвигВправо(лЧисло0, пСмещение - 32)");
        Возврат Результат
    КонецЕсли

КонецФункции // ПобитовыйСдвигВправо64(пЧисло, пСмещение)

Функция ПобитовоеИ64(пЧисло1, пЧисло2)

    Перем Результат;

    лЧисло10 = Цел(пЧисло1/4294967296);
    лЧисло11 = пЧисло1%4294967296;
    лЧисло20 = Цел(пЧисло2/4294967296);
    лЧисло21 = пЧисло2%4294967296;
    Выполнить("Результат = (ПобитовоеИ(лЧисло10,лЧисло20) * 4294967296 + ПобитовоеИ(лЧисло11,лЧисло21))");

    Возврат Результат

КонецФункции // ПобитовоеИ64(пЧисло1, пЧисло2)

Функция ПобитовоеНе64(пЧисло1)

    Перем Результат;

    лЧисло10 = Цел(пЧисло1/4294967296);
    лЧисло11 = пЧисло1%4294967296;
    //Выполнить("Результат = ПобитовоеНе(лЧисло10) * 4294967296 + ПобитовоеНе(лЧисло11))");
    //Выполнить("Результат = ПобитовоеНе(лЧисло10) * (4294967296 + ПобитовоеНе(лЧисло11))");
    Выполнить("Результат = ПобитовоеНе(лЧисло10) * 4294967296 + ПобитовоеНе(лЧисло11)");

    Возврат Результат

КонецФункции // ПобитовоеНе64(пЧисло1)

Функция ПобитовыйСдвигВлево64(пЧисло, пСмещение)

    Перем Результат;

    лЧисло0 = Цел(пЧисло/4294967296);
    лЧисло1 = пЧисло%4294967296;

    //лЧисло0 = Макс(лЧисло0, -лЧисло0);
    //лЧисло1 = Цел(Макс(лЧисло1, -лЧисло1));

    Если пСмещение < 32 Тогда
        //Выполнить("Результат = ПобитовыйСдвигВлево(лЧисло0, пСмещение) + ПобитовыйСдвигВправо(лЧисло1, 32 - пСмещение)) * 4294967296 + ПобитовыйСдвигВлево(лЧисло1, пСмещение)");
            Выполнить("Результат = (ПобитовыйСдвигВлево(лЧисло0, пСмещение) + ПобитовыйСдвигВправо(лЧисло1, 32 - пСмещение)) * 4294967296 + ПобитовыйСдвигВлево(лЧисло1, пСмещение)");
        Возврат Результат
    Иначе
        Выполнить("Результат = ПобитовыйСдвигВлево(лЧисло1, пСмещение - 32)*4294967296");
        Возврат Результат
    КонецЕсли

КонецФункции // ПобитовыйСдвигВлево64(пЧисло, пСмещение)


////////////////////////////////////////////////////////////////
//работа с JSON

Функция ИсключениеПустойПакетДанных()
    
    Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");

КонецФункции 

Функция СформироватьСтрокуПоШаблону(Строка, Параметры)
    
    Результат = Строка;
        
    Для Каждого Параметр Из Параметры Цикл
        Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
    КонецЦикла;

    Возврат Результат;
    
КонецФункции 

Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
    
    // Пропуск форматирования.
    Пока (Индекс <= Длина) И Найти(СимволыФорматирования, Сред(Значение, Индекс, 1)) Цикл Индекс = Индекс + 1; КонецЦикла;
    // Пробел его не видно, \r, \n, \t .
    
КонецПроцедуры

Функция ИсключениеНекорректныйПараметр(Параметр)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
        Новый Структура("Параметр", Символ(034) + Параметр + Символ(034)));

КонецФункции

Функция ИсключениеНеожиданноеОкончаниеПакетаДанных()
    
    Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");

КонецФункции

Функция ИсключениеНекорректныйФорматСтроки(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
        Новый Структура("Индекс", Индекс));

КонецФункции

Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
    
    // Последоавтельность перемаскировки.
    ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
    
    // Демаскирование служебных символов.
    Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
                        "\\",            ПоследоавтельностьПеремаскировки),        // Перемаскирование последовательности.
                        "\/",            "/"),           // x2f
                        "\b",            Символ(008)),    // x08
                        "\t",            Символы.Таб),   // x09
                        "\n",            Символы.ПС),    // x0a
                        "\f",            Символы.ПФ),    // x0c
                        "\r",            Символы.ВК),    // x0d
                        "\""",            """");          // x22
                        
    // Демаскирование Юникод символов.
    Позиция = Найти(Результат, "\u"); Пока Позиция Цикл
        СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
        Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
    КонецЦикла;
        
    // Одинарная кавычка.
    Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
    
    // Демаскирование перемаскированой последовательности.
    Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");                
                        
КонецФункции

Функция jsonПрочитатьИнициализация(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт
    
    // Проверка параметров.
    Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); КонецЕсли; 
    Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); КонецЕсли; 
    
    // Использование более общего случая параметров.
    Альтернативный = (Стандарт = Неопределено) Или (Не Стандарт); Стандарт = (Стандарт = Неопределено) Или Стандарт; ПредставленияСсылок = (ПредставленияСсылок = Неопределено) Или ПредставленияСсылок;
    
    // Схема подстановок шестнадцатиричной системы.
    СхемаПодстановок = Новый Соответствие; ШестнадцатиричнаяСистема = "0123456789abcdef"; ДесятичноеЧисло = 0;
    Для ВторойРазряд = 1 По 16 Цикл Для ПервыйРазряд = 1 По 16 Цикл СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); ДесятичноеЧисло = ДесятичноеЧисло + 1; КонецЦикла; КонецЦикла;
    
    // Вспомогательные данные.
    ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
        Тип("Строка"),
        СхемаПодстановок,
        Истина);
        
    // Стартовые значения.
    Индекс = 1; Длина = СтрДлина(Значение);
    
    // Форматирование (первый шаг парсера).
    Если Стандарт Тогда СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли;

    Попытка
        Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеПустойПакетДанных(); КонецЕсли;
    Исключение
        ТекстСообщения = НСтр("ru='Ошибка парсера!';uk='Помилка парсера!'");
        СообщениеПользователю(ТекстСообщения, Ложь)
    КонецПопытки;
    
    // Парсер.
    Возврат jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина);
    
КонецФункции 

Функция jsonПрочитатьОпределитьДату(Значение)

    // Проверка.
    Если (СтрДлина(Значение) = 20) Тогда
        Если (Сред(Значение, 05, 1) = "-") И                // -
             (Сред(Значение, 08, 1) = "-") И                // -
             (Сред(Значение, 11, 1) = "T") И                // T
             (Сред(Значение, 14, 1) = ":") И                // :
             (Сред(Значение, 17, 1) = ":") И                // :
             (Сред(Значение, 20, 1) = "Z") Тогда            // Z
            // Год. 
            Если Найти("0123456789", Сред(Значение, 01, 1)) И
                 Найти("0123456789", Сред(Значение, 02, 1)) И
                 Найти("0123456789", Сред(Значение, 03, 1)) И
                 Найти("0123456789", Сред(Значение, 04, 1)) И
            // Месяц.
                 Найти("0123456789", Сред(Значение, 06, 1)) И
                 Найти("0123456789", Сред(Значение, 07, 1)) И
            // День.
                 Найти("0123456789", Сред(Значение, 09, 1)) И
                 Найти("0123456789", Сред(Значение, 10, 1)) И
            // Час.
                 Найти("0123456789", Сред(Значение, 12, 1)) И
                 Найти("0123456789", Сред(Значение, 13, 1)) И
            // Минута.
                 Найти("0123456789", Сред(Значение, 15, 1)) И
                 Найти("0123456789", Сред(Значение, 16, 1)) И
            // Секунда.
                 Найти("0123456789", Сред(Значение, 18, 1)) И
                 Найти("0123456789", Сред(Значение, 19, 1)) Тогда
                Возврат Истина; 
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции 

Функция jsonПрочитатьОпределитьИдентификатор(Значение)

    // Проверка.
    Если (СтрДлина(Значение) = 36) Тогда
        Если (Сред(Значение, 09, 1) = "-") И                    // -
             (Сред(Значение, 14, 1) = "-") И                    // -
             (Сред(Значение, 19, 1) = "-") И                    // -
             (Сред(Значение, 24, 1) = "-") Тогда                // -
            // Первая часть. 
            Для Индекс = 01 По 08 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
            // Вторая часть. 
            Для Индекс = 10 По 13 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
            // Третья часть. 
            Для Индекс = 15 По 18 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
            // Четвертая часть. 
            Для Индекс = 20 По 23 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
            // Пятая часть. 
            Для Индекс = 25 По 36 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
            Возврат Истина;
        КонецЕсли;
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции 

Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
    
    // Поиск.
    Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
    
КонецФункции 

Функция jsonПрочитатьДату(Значение, Индекс)
    
    // Поиск.
    Попытка
        Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
                     Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
    Исключение
        ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
    КонецПопытки;
    
КонецФункции 

Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
        Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции 

Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение)
    
    Если ПустаяСтрока(Значение) Тогда
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
            Новый Структура("Индекс", Индекс));

    Иначе
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
            Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
                       
    КонецЕсли;
                       
КонецФункции 

Функция ИсключениеНедопустимыйСимвол(Индекс, Символ)
    
    Если (Символ = Неопределено) Тогда
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
            Новый Структура("Индекс", Индекс));

    Иначе
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
            Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));

    КонецЕсли;
                   
КонецФункции 

Функция ИсключениеНеопознанныйТип(Индекс, Тип)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
        Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));

КонецФункции 

Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
        Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции 

Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
        Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции 

Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
        Новый Структура("Индекс", Индекс));

КонецФункции 

Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс)

    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
       Новый Структура("Индекс", Индекс));

КонецФункции 

Функция ИсключениеНекорректныйТипNull(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
       Новый Структура("Индекс", Индекс));

КонецФункции 

Функция ИсключениеНекорректныйТипБулево(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
       Новый Структура("Индекс", Индекс));

КонецФункции 

Функция ИсключениеНекорректныйТипНеопределено(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
        Новый Структура("Индекс", Индекс));

КонецФункции 

Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение)
    
    Если (Индекс = Неопределено) Тогда
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
            Новый Структура("Тип", ТипЗнч(Значение)));

    Иначе
        
        Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
            Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));

    КонецЕсли;

КонецФункции 

Функция ИсключениеНевозможноВыполнитьЗапрос(Описание)
    
    Позиция = Найти(Описание, "}: "); Если Позиция Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
    Длина = Найти(Описание, Символы.ПС); Если Длина Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
    Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";

КонецФункции 

Функция ИсключениеНекорректныйПакетДанных(Индекс)
    
    Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
        Новый Структура("Индекс", Индекс));

КонецФункции

Функция jsonПрочитатьСсылку(Значение, Соответствие)
    
    Перем Ссылка;
    
    // Ссылка.
    Если (Значение.Количество() = 2) Тогда 
        Если Соответствие Тогда
            Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
        Иначе
            Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
        КонецЕсли;
    КонецЕсли;    
    
    Возврат Значение;
    
КонецФункции 

Функция jsonПрочитатьИдентификатор(Значение, Индекс)
    
    // Поиск.
    Возврат Новый УникальныйИдентификатор(Значение);
    
КонецФункции 

Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)

#Если ВебКлиент Или ТонкийКлиент Тогда
    ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
#Иначе
    
    // Поиск.
    Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
    
    Если (Тип = "ref") Тогда
        Попытка
            Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
        Исключение
            ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
        КонецПопытки;
    КонецЕсли;
        
    ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
    
#КонецЕсли

КонецФункции 

Функция jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень)
    
    Символ = Сред(Значение, Индекс, 1);
    Если (Символ = """") Или (Символ = "'") Тогда                                                                            // " , '
        
        // Строка.
        Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; 
        
        Пока Истина Цикл
            Позиция = Найти(Подстрока, Символ);
            
            Если (Позиция > 0) Тогда
                Индекс = Индекс + Позиция; Откат = Позиция - 1; Маскировка = Ложь; Пока (Сред(Подстрока, Откат, 1) = "\") И Откат Цикл Маскировка = Не Маскировка; Откат = Откат - 1; КонецЦикла;
                Если Маскировка Тогда Подстрока = Сред(Подстрока, Позиция + 1); Иначе Прервать; КонецЕсли;
            Иначе
                ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
            КонецЕсли;
            
        КонецЦикла;
        
        // Строка.
        Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
        
        Если jsonПрочитатьОпределитьДату(Результат) Тогда
            // Дата.
            Результат = jsonПрочитатьДату(Результат, Начало);
        ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
            // Идентификатор.
            Результат = jsonПрочитатьИдентификатор(Результат, Начало);
        Иначе
            Если Альтернативный И jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
                // Внутренний тип.
                Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
            КонецЕсли;
        КонецЕсли;
        
        // Корректировка индекса.
        Индекс = Индекс + 1;
        
    ИначеЕсли (Символ = "[") Тогда                                                                                            // [
        
        // Массив.
        Результат = Новый Массив;
        
        Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
        Символ = Сред(Значение, Индекс, 1); Если (Символ = "]") Тогда                                                        // ] 
            
            // Пустой массив.
            Индекс = Индекс + 1;
        
        Иначе
        
            Пока (Индекс <= Длина) Цикл
                
                // Значение.
                Результат.Добавить(jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
                
                Символ = Сред(Значение, Индекс, 1);
                Если (Символ = "]") Тогда                                                                                    // ]
                    // Окончание массива.
                    Индекс = Индекс + 1; Прервать;
                Иначе
                    // Продолжение массива.
                    Если (Символ = ",") Тогда                                                                                // ,
                        Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
                    Иначе
                        ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
                    КонецЕсли;
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
        
    ИначеЕсли (Символ = "{") Тогда                                                                                            // {
    
        // Объект.
        Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
        Символ = Сред(Значение, Индекс, 1); Если (Символ = "}") Тогда                                                        // } 
            
            // Пустой объект.
            Индекс = Индекс + 1;
            
            // Структура или соответствие.
            Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда Результат = Новый Структура; Иначе Результат = Новый Соответствие; КонецЕсли; 
        
        Иначе
            
            Результат = Новый Соответствие;
            
            ТипСтроки = ВспомогательныеДанные.ТипСтроки; Пока (Индекс <= Длина) Цикл
                
                // Ключ.
                Начало = Индекс; КлючЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); КонецЕсли;
                
                Символ = Сред(Значение, Индекс, 1);
                Если (Символ = ":") Тогда                                                                                    // :
                    Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
                Иначе
                    ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
                КонецЕсли;
                
                // Значение.
                ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
                
                // Коллекция.
                Результат.Вставить(КлючЭлемента, ЗначениеЭлемента);
                
                Символ = Сред(Значение, Индекс, 1);
                Если (Символ = "}") Тогда                                                                                    // }
                    // Окончание объекта.
                    Индекс = Индекс + 1; Прервать;
                Иначе
                    // Продолжение объекта.
                    Если (Символ = ",") Тогда                                                                                // ,
                        Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
                    Иначе
                        ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
                    КонецЕсли;
                КонецЕсли;
                
            КонецЦикла;
            
            // Структура или соответствие.
            Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда
                
                РезультатСтруктура = Новый Структура; 
                Для Каждого Элемент Из Результат Цикл Попытка РезультатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение); Исключение РезультатСтруктура = Результат; АвтоматическоеПриведениеНеВыполнено = Истина; Прервать; КонецПопытки; КонецЦикла;
                Результат = РезультатСтруктура;
                
                // Ссылка.
                Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, (АвтоматическоеПриведениеНеВыполнено = Истина)); КонецЕсли;
                
            Иначе
                
                // Ссылка.
                Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, Истина); КонецЕсли;
                
            КонецЕсли; 
        
        КонецЕсли;
        
    Иначе
    
        // Остальные примитивные типы.
        Если (Символ = "n") Тогда
            
            // Null.
            Если (Сред(Значение, Индекс, 4) = "null") Тогда Индекс = Индекс + 4; Результат = Null; Иначе ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); КонецЕсли;
            
        ИначеЕсли (Символ = "t") Тогда
            
            // Истина.
            Если (Сред(Значение, Индекс, 4) = "true") Тогда Индекс = Индекс + 4; Результат = Истина; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
            
        ИначеЕсли (Символ = "f") Тогда
            
            // Ложь.
            Если (Сред(Значение, Индекс, 5) = "false") Тогда Индекс = Индекс + 5; Результат = Ложь; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
            
        ИначеЕсли (Символ = "u") Тогда
            
            // Неопределено.
            Если (Сред(Значение, Индекс, 9) = "undefined") Тогда Индекс = Индекс + 9; Результат = Неопределено; Иначе ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); КонецЕсли;
            
        Иначе
            
            // Число.
            Начало = Индекс; Пока Найти("-+0123456789.", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
            
            // Преобразование числа.
            Попытка
                //Результат = Число(Сред(Значение, Начало, Индекс - Начало));
                Результат = (Сред(Значение, Начало, Индекс - Начало));
            Исключение
                ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
            КонецПопытки;
            
            // Экспоненциальная часть.
            Если (Символ = "E") Или (Символ = "e") Тогда
                
                // Степень.
                Индекс = Индекс + 1; Позиция = Индекс; Символ = Сред(Значение, Индекс, 1); Пока Найти("-+0123456789", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
                
                // Преобразование степени.
                Попытка
                    Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
                Исключение
                    ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
                КонецПопытки;
                
                // Возвидение числа в степень.
                Результат = Результат * Pow(10, Степень);
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    // Форматирование.
    Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если ПервыйУровень Тогда Если (Индекс <= Длина) Тогда ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); КонецЕсли; Иначе Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); КонецЕсли; КонецЕсли;
    
    Возврат Результат;
    
КонецФункции // jsonПрочитать()

//работа с JSON
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//Печать документов

Функция КомпонентаФормированияQRКода(Отказ)
    
    ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода' ; uk = 'Не вдалося підключити зовнішню компоненту для генерації QR-коду'");
    
    Макет = ПолучитьМакет("КомпонентаПечатиQRКода");     
    Адрес = ПоместитьВоВременноеХранилище( макет );
    
    Попытка
        Если ПодключитьВнешнююКомпоненту(Адрес, "QR") Тогда
            QRCodeGenerator = Новый("AddIn.QR.QRCodeExtension");
        Иначе
            СообщениеПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
        КонецЕсли
    Исключение
        ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        СообщениеПользователю(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки);
    КонецПопытки;
    
    Возврат QRCodeGenerator;
    
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100% распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
//  ТекстОшибки      - Строка - в этот параметр помещается описание возникшей ошибки (если возникла).
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер)
    
    Отказ = Ложь;
    
    ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
    Если Отказ Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Попытка
        ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
    Исключение
        СообщениеПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
    Возврат ДвоичныеДанныеКартинки;
    
КонецФункции

Функция ПолучитьQRКод(QRСтрока, РазмерКода = Неопределено) Экспорт

    Если РазмерКода = Неопределено Тогда
        РазмерКода = 60
    КонецЕсли;

    //ДанныеQRКода = ДанныеQRКода(QRСтрока, 0, 60);
    ДанныеQRКода = ДанныеQRКода(QRСтрока, 0, РазмерКода);
    КартинкаQRКода = Новый Картинка(ДанныеQRКода);
    Возврат КартинкаQRКода;

//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода

КонецФункции

Процедура ПечатьДокументов(ИмяПечатнойФормы) Экспорт
    
    Перем КоллекцияПечатныхФорм, ПараметрыВывода;
    
    МассивПечатныхФорм = Новый Массив;
    
    Для Каждого СтрокаТЧ Из СписокЭкспортаPDF Цикл
        
        Если СтрокаТЧ.Флажок Тогда
            
            МассивСсылок = Новый Массив;
            
            МассивСсылок.Добавить(СтрокаТЧ.СсылкаНаДокумент);
            
            Параметры = Новый Структура;
            
            
            Если ТипЗнч(ИмяПечатнойФормы) <> Тип("Строка") Тогда
                
                ПараметрыИсточника = Новый Структура;
                
                Параметры.Вставить("ИсточникДанных", ИмяПечатнойФормы);
                
                Попытка
                    ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИмяПечатнойФормы.Команды[0].Идентификатор);
                Исключение
                    Возврат;    
                КонецПопытки;    
                
                ПараметрыИсточника.Вставить("БезопасныйРежим", Ложь);
                
                ПараметрыИсточника.Вставить("ОбъектыНазначения", МассивСсылок);
                
                Параметры.Вставить("ПараметрыИсточника", ПараметрыИсточника);
            Иначе
                
            КонецЕсли;    
            
            
            ОбъектыПечати = Новый СписокЗначений;
            
            Если Параметры.Свойство("ИсточникДанных") Тогда
                
                Если НЕ УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(
                    Параметры.ИсточникДанных,
                    Параметры.ПараметрыИсточника,
                    КоллекцияПечатныхФорм,
                    ОбъектыПечати,
                    ПараметрыВывода) Тогда
                    
                    Возврат;
                КонецЕсли;
                
                КлючНастроек = Неопределено;
                
            Иначе
                
                ИмяМенеджераПечати    = "Документ." + СтрокаТЧ.СсылкаНаДокумент.Метаданные().Имя;
                ИменаМакетов          = ИмяПечатнойФормы;
                ПараметрКоманды       = МассивСсылок;
                ПараметрыПечати       = Неопределено;
                КоличествоЭкземпляров = 1;
                
                УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати,
                КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, КоличествоЭкземпляров);
                
            КонецЕсли;
            
            ТабДок = КоллекцияПечатныхФорм[0].ТабличныйДокумент;
            
            Картинка = ПолучитьQRКод("^" + СокрЛП(СтрокаТЧ.СсылкаНаДокумент.Организация.БанковскийСчетПоУмолчанию.НомерСчета) + 
                "^" + Формат(СтрокаТЧ.СсылкаНаДокумент.СуммаДокумента, "ЧДЦ=2; ЧГ=0") + 
                "^" + СтрокаТЧ.СсылкаНаДокумент.Контрагент.Наименование + ", оплата накладной №" + СокрЛП(СтрокаТЧ.СсылкаНаДокумент.Номер) + "^");
            
            Рисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
            Рисунок.Высота = 28;
            Рисунок.Ширина = 28;
            
            Рисунок.Верх = QRВерх;
            Рисунок.Лево = QRЛево;
            
            Рисунок.ГраницаСверху = Ложь;
            Рисунок.ГраницаСлева = Ложь;
            Рисунок.ГраницаСправа = Ложь;
            Рисунок.ГраницаСнизу = Ложь;
            Рисунок.Картинка = Картинка;
            Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
            
            МассивПечатныхФорм.Добавить(ТабДок);
            
        КонецЕсли;    
        
    КонецЦикла;
    
    Если МассивПечатныхФорм.Количество() = 0 Тогда 
        Возврат;
    КонецЕсли;
    
    ИтоговыйТабДок = Новый ТабличныйДокумент;
    Для Каждого ТабДокМас Из МассивПечатныхФорм Цикл
        ИтоговыйТабДок.Вывести(ТабДокМас);
        ИтоговыйТабДок.ВывестиГоризонтальныйРазделительСтраниц();
    КонецЦикла;
    
    ИтоговыйТабДок.Показать();
    
КонецПроцедуры

Функция ПечатьТестовогоQR() Экспорт
    
    ТабДок = Новый ТабличныйДокумент;
    
    Макет = ПолучитьМакет("ПримерПФ");
    ТабДок.Вывести(Макет);
    
    Картинка = ПолучитьQRКод("https://pb.ua/");
    
    Рисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
    Рисунок.Высота = 28;
    Рисунок.Ширина = 28;
    
    Рисунок.Верх = QRВерх;
    Рисунок.Лево = QRЛево;
    
    Рисунок.ГраницаСверху = Ложь;
    Рисунок.ГраницаСлева = Ложь;
    Рисунок.ГраницаСправа = Ложь;
    Рисунок.ГраницаСнизу = Ложь;
    Рисунок.Картинка = Картинка;
    Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
    
    Возврат ТабДок;
    
КонецФункции

//Печать документов
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//Папка24

Процедура АвторизацияПапка24(ФлагЗакрытьСессию = Ложь) Экспорт

    //Если Не (ФлагЗакрытьСессию И ЗначениеЗаполнено(СессияПапка24)) Тогда
    Если ФлагЗакрытьСессию И Не ЗначениеЗаполнено(СессияДок) Тогда
        Возврат
    КонецЕсли;

    ДействиеАналитики = "Папка24Авторизация";
    
    client_id = EmailПапка24;

    тзЗаголовки = Новый ТаблицаЗначений;
    //тзЗаголовки.Колонки.Добавить("");
    тзЗаголовки.Колонки.Добавить("Заголовок");
    тзЗаголовки.Колонки.Добавить("ЗначениеЗаголовка");

    Если ФлагЗакрытьСессию Тогда
        РесурсНаСервере = "/api2/checked/login";
        //Запрос = Новый HTTPСервисЗапрос("delete", АдресПапка24, , РесурсНаСервере);
        МетодDelete = Истина;
        НоваяСтрокатзЗаголовки = тзЗаголовки.Добавить();
        НоваяСтрокатзЗаголовки.Заголовок = "Cookie";
        НоваяСтрокатзЗаголовки.ЗначениеЗаголовка = ЭкранироватьДвойныеКавычки(СессияДок);
    Иначе
        СессияПапка24 = "";
        //РесурсНаСервере = "/api/login";
        РесурсНаСервере = "/PplsService/oauth/authorize";
        СтрокаЗапроса = "response_type=code&agentCheck=true&client_id=" + client_id;
        Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
            //СтрокаЗапроса = """{\""login\"":\""" + EmailПапка24 + "\"",\""password\"":\""" + ПарольПапка24 + "\""}""";
            СтрокаЗапроса = ЭкранироватьJSON(СтрокаЗапроса);
        //Иначе
        //    СтрокаЗапроса = "{""login"":""" + EmailПапка24 + """,""password"":""" + ПарольПапка24 + """}";
        КонецЕсли;
        ТелоЗапросаКурл = СтрокаЗапроса;
        МетодDelete = Ложь;
        НоваяСтрокатзЗаголовки = тзЗаголовки.Добавить();
        НоваяСтрокатзЗаголовки.Заголовок = "Content-Type";
        НоваяСтрокатзЗаголовки.ЗначениеЗаголовка = "application/x-www-form-urlencoded";
        НоваяСтрокатзЗаголовки = тзЗаголовки.Добавить();
        НоваяСтрокатзЗаголовки.Заголовок = "Accept";
        НоваяСтрокатзЗаголовки.ЗначениеЗаголовка = "application/json";
    КонецЕсли;

    //УдалитьBOM = Истина;
    POST = Истина;
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "",
        СессияПапка24, тзЗаголовки,,, POST,, МетодDelete,, ТелоЗапросаКурл);

    Если ФлагЗакрытьСессию Тогда
        Возврат
    КонецЕсли;

    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        Возврат;
    Иначе
        
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
        Попытка
            //Сессия = стРезультат.Cookie;
            //СессияДок = jsonПрочитатьИнициализация(ТелоОтвета).sessionId;
            code = jsonПрочитатьИнициализация(ТелоОтвета).code
        Исключение
            code = Неопределено
        КонецПопытки;    
            
    КонецЕсли;

    Если Не ЗначениеЗаполнено(code) Тогда
        ТекстСообщения = НСтр("ru = 'Не получен code авторизации на сервисе Paperless.';uk='Не отриманий code авторизації на сервісі Paperless.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;

    // если не успешно сообщим ошибку
    Если Статус = 401 Тогда
        ТекстСообщения = НСтр("ru='Неправильные имя пользователя и/или пароль!';uk='Невірні ім`я користувача та/або пароль'");
        СообщениеПользователю(ТекстСообщения,,"Объект.ПарольПапка24");
        Авторизовано = Ложь;
        Возврат;
    ИначеЕсли Найти("403,423", Статус) > 0 Тогда
        ТекстСообщения = НСтр("ru = 'Сессия истекла или не найдена или доступ к данным запрещен, необходимо пройти авторизацию на сервисе Paperless.';uk='Сесія закінчилася або не знайдена або доступ до даних заборонений, необхідно пройти авторизацію на сервісі Paperless.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат
    ИначеЕсли Статус = 429 Тогда
        ТекстСообщения = НСтр("ru = 'Слишком много повторяющихся запросов на сервисе Paperless. Попробуйте позже.';uk='Занадто багато повторюваних запитів на сервісі Paperless. Спробуйте пізніше.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;
    
    //Если Статус <> 200 ИЛИ НЕ ЗначениеЗаполнено(СессияДок) Тогда
    Если Статус <> 200 Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса авторизации в сервисе Папка24.';uk='Помилка відправки запиту авторизації у сервісі Папка24'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат;
    КонецЕсли;

    ДействиеАналитики = "Папка24АвторизацияШаг2";

    client_secret = ПарольПапка24;
    client_secret = SHA512(client_id + client_secret + code);
    Если Не ЗначениеЗаполнено(client_secret) Тогда
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;

    РесурсНаСервере = "/PplsService/oauth/token";
    СтрокаЗапроса = "grant_type=authorization_code&client_id=" + client_id + "&client_secret=" + client_secret + "&code=" + code;
    СтрокаЗапроса = ЭкранироватьJSON(СтрокаЗапроса);
    ТелоЗапросаКурл = СтрокаЗапроса;
    //заголовки те же
    POST = Истина;
    //УдалитьBOM = Истина;

    стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", СессияПапка24,
        тзЗаголовки,,, POST,,,, ТелоЗапросаКурл);

    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;

    Статус = стРезультат.Статус;
    ТелоОтвета = стРезультат.ТелоОтвета;

    Если Статус = 429 Тогда
        ТекстСообщения = НСтр("ru = 'Слишком много повторяющихся запросов шаг 2 на сервисе Paperless. Попробуйте позже.';uk='Занадто багато повторюваних запитів крок 2 на сервісі Paperless. Спробуйте пізніше.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат
    ИначеЕсли Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса авторизации шаг 2 на сервисе Paperless.';uk='Помилка відправки запиту авторизації крок 2 на сервісі Paperless'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;

    Попытка
        СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
        access_token = СтруктураОтвета.access_token;
        token_type = СтруктураОтвета.token_type;
        СессияПапка24 = "sessionId=""" + token_type + " " + access_token + ", Id " + client_id + """"
    Исключение
        СессияПапка24 = Неопределено
    КонецПопытки;
    СессияДок = СессияПапка24;
    Если Не ЗначениеЗаполнено(СессияПапка24) Тогда
        Авторизовано = Ложь;
        Возврат
    КонецЕсли;

    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);
    
    Авторизовано = Истина;

    ТекстСообщения = НСтр("ru = 'Авторизация на сервисе Paperless успешна.';uk='Авторизація на сервісі Paperless успішна.'");
    СообщениеПользователю(ТекстСообщения)

КонецПроцедуры

Функция ВыгрузитьPDF(ВидДокумента, ИмяПечатнойФормы, ОтправкаНаСервис) Экспорт

    Перем КоллекцияПечатныхФорм;

    ДействиеАналитики = "Папка24Обмен";
    
    ВыгрузкаИПодпись = ПодписыватьPDF;
    
    //Проверим существование каталога для выгрузки.
    Если ОтправкаНаСервис И СохрнКаталогВыгрузки = "" Тогда
        СохрнКаталогВыгрузки = КаталогВыгрузки;
        КаталогВыгрузки = КаталогВременныхФайлов();
        Если ВыгрузкаИПодпись Тогда
            XML = "[";
        КонецЕсли;    
    КонецЕсли;
    
    Если ПустаяСтрока(КаталогВыгрузки) Тогда 
        ТекстСообщения = НСтр("ru='Не задан каталог для выгрузки PDF';uk='Не заданий каталог для вивантаження PDF'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;

    Макеты = Новый ТаблицаЗначений;
    Макеты.Колонки.Добавить("ИмяМакета");
    Макеты.Колонки.Добавить("ИмяВРЕГ");
    Макеты.Колонки.Добавить("СинонимМакета");
    Макеты.Колонки.Добавить("ТабличныйДокумент");
    Макеты.Колонки.Добавить("Экземпляров");
    Макеты.Колонки.Добавить("Картинка");
    Макеты.Колонки.Добавить("ПолныйПутьКМакету");
    Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
    Макеты.Колонки.Добавить("ЭтоМногоязычнаяПечатнаяФорма");
    
    Для Каждого СтрокаТЧ Из СписокЭкспортаPDF Цикл //цикл каждый раз прерывается
        
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        ЕстьОтмеченные = Истина;
        
        СтрокаТЧ.Флажок = Ложь;
        
        СтрокаТЧ.ИмяPDFФайлаДокумента = "Док_" + Лев(ВидДокумента,1) + "_" + СтрЗаменить(СтрЗаменить(СокрЛП(СтрокаТЧ.Номер), "\", "_"), "/", "_") + "_от_" + Формат(СтрокаТЧ.Дата, "ДФ=ddMMyy") + "_" + СокрЛП(СтрокаТЧ.Контрагент.КодПоЕДРПОУ) + ".PDF";
        
        МассивСсылок = Новый Массив;
        
        МассивСсылок.Добавить(СтрокаТЧ.СсылкаНаДокумент);
        
        Макеты.Очистить();
        
        Макет = Макеты.Добавить();
        Макет.ИмяМакета = ИмяПечатнойФормы;
        Макет.ИмяВРЕГ = ВРег(ИмяПечатнойФормы);
        Макет.Экземпляров = 1;
        
        Список = Новый СписокЗначений;
        
        ПараметрыВывода = Новый Структура;
        ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь);
        
        СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
        ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
        Выполнить("ПараметрыВывода.Вставить(""КодЯзыкаДляМногоязычныхПечатныхФорм"", Локализация.ПолучитьЯзыкФормированияПечатныхФорм())");    
        
        ПечатьЧерезДокумент = Истина;
        
        ПараметрыПечати = Новый Структура;
            
        Попытка
            
            Выполнить("Макеты = УправлениеПечатью.СформироватьПечатныеФормы(""Обработка.ПечатьОбщихФорм"", ИмяПечатнойФормы, МассивСсылок, ПараметрыПечати, ПараметрыВывода,);");
            Макеты = Макеты.КоллекцияПечатныхФорм;
            ПечатьЧерезДокумент = Ложь;
                        
        Исключение
            
            Попытка
                
                ВнешниеПечатныеФормы = Неопределено;
                ИсточникВнешнихПечатныхФорм = "Документ." + ВидДокумента;
                
                Выполнить("ВнешниеПечатныеФормы = УправлениеПечатью.СписокПечатныхФормИзВнешнихИсточников(ИсточникВнешнихПечатныхФорм)");
                
                СсылкаНаФорму = ВнешниеПечатныеФормы.НайтиПоЗначению(ИмяПечатнойФормы);
                
                ПараметрыИсточника = Новый Структура;
                ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИмяПечатнойФормы);
                ПараметрыИсточника.Вставить("БезопасныйРежим", Ложь);
                ПараметрыИсточника.Вставить("ОбъектыНазначения", МассивСсылок);
        
                
                ВнешняяПечатнаяФормаСсылка = Неопределено;
                МодульДополнительныеОтчетыИОбработки = Неопределено;

                Выполнить("МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработки"")");
                Выполнить("МодульДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(СсылкаНаФорму.Значение, ИсточникВнешнихПечатныхФорм, ВнешняяПечатнаяФормаСсылка)");

                Выполнить("УправлениеПечатью.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФормаСсылка, ПараметрыИсточника, Макеты, Список, ПараметрыВывода)");
                
                ПечатьЧерезДокумент = Ложь;
                
            Исключение
                СообщениеПользователю(ОписаниеОшибки())
            КонецПопытки;
            
            
        КонецПопытки;
            
        Попытка
            Если ПечатьЧерезДокумент Тогда
                Попытка
                    Документы[ВидДокумента].Печать(МассивСсылок,1, Макеты, Список, ПараметрыВывода);
                Исключение
                    // BasSB/UNF
                    ПараметрыПечати = Новый Структура;
                    ПараметрыПечати.Вставить("ШаблонПечатиОфисныхДокументов", Ложь);
                    Документы[ВидДокумента].Печать(МассивСсылок, ПараметрыПечати, Макеты, Список, ПараметрыВывода)
                КонецПопытки
            КонецЕсли;
        Исключение                                
            ТекстСообщения = НСтр("ru = 'Ошибка вызова процедуры печати документа ';uk='Помилка виклику процедури друку документа '") + ВидДокумента
                + Символы.ПС + НСтр("ru = 'Попробуйте выбрать другой документ.';uk='Спробуйте обрати інший документ.'");
            СообщениеПользователю(ТекстСообщения);
            СообщениеПользователю(ОписаниеОшибки())
        КонецПопытки;
        
        
        Попытка
            ТабДок = Макеты[0].ТабличныйДокумент;    
            
            Если ТипЗнч(ТабДок) <> Тип("ТабличныйДокумент") Тогда
                ВызватьИсключение "Ошибка получения табличного документа";     
            КонецЕсли;
            
            ТабДок.Записать(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + СтрокаТЧ.ИмяPDFФайлаДокумента, ТипФайлаТабличногоДокумента.PDF);
        Исключение
            ТекстСообщения = НСтр("ru = 'Ошибка при сохранении документа в файл PDF ';uk='Помилка при збереженні в PDF-файл '")
                + КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЧ.ИмяPDFФайлаДокумента
                + Символы.ПС + НСтр("ru = 'Попробуйте выбрать другую печатную форму документа.';uk='Спробуйте обрати іншу друковану форму документа.'");
            СообщениеПользователю(ТекстСообщения);
            
            Если РежимОтладки Тогда
                СообщениеПользователю(ОписаниеОшибки(), Ложь);
            КонецЕсли;

            Продолжить//uvp

        КонецПопытки;    
        
        Если ОтправкаНаСервис Тогда
            ОтправитьPDFФайлВПапка24(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЧ.ИмяPDFФайлаДокумента, СтрокаТЧ.ИмяPDFФайлаДокумента, ВыгрузкаИПодпись);
        КонецЕсли;    
        
        Возврат Истина; //признак что будет продолжать выполняться в цикле
        
    КонецЦикла;
    
    Если ЗначениеЗаполнено(СохрнКаталогВыгрузки) Тогда
        КаталогВыгрузки = СохрнКаталогВыгрузки;
        СохрнКаталогВыгрузки = "";
    КонецЕсли;
    
    Если ЕстьОтмеченные  Тогда
        Если Не ВыгрузкаИПодпись Тогда
            ТекстСообщения = НСтр("ru = 'Выгрузка документов завершена. ';uk='Вивантаження документів завершено. '");
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЕсли;    
    Иначе
        ТекстСообщения = НСтр("ru = 'Нет отмеченных документов для выгрузки. ';uk='Немає відмічених документів для вивантаження'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;    
    
    ЕстьОтмеченные = Ложь;
    
    Если ВыгрузкаИПодпись Тогда
        
        Попытка
            
            XML = Лев(XML, СтрДлина(XML)-1) + "]";
            МассивJSON = jsonПрочитатьИнициализация(XML);
            
            Если НЕ РаботаВМоделиСервисаПБ Тогда //два варианта подписи: для локальных (внешних) - через криптоплагин
                
                ДокументыДляПодписи.Очистить();            
                    
                //Для Каждого СтрокаМассива Из МассивJSON Цикл
                Для Каждого СтрМассива Из МассивJSON Цикл
                    Для Каждого СтрокаМассива Из СтрМассива.resourceDTO Цикл

                        СтрокаПодписи = ДокументыДляПодписи.Добавить();
                        СтрокаПодписи.ref = СтрокаМассива.id; //ссылка на документ на сервисе
                        СтрокаПодписи.data = СтрокаМассива.hash;
                        СтрокаПодписи.fileName = СтрокаМассива.name;
                    КонецЦикла
                КонецЦикла;
                
            Иначе //для сервиса БО Онлайн - через сервис подписи
                
                МассивДанных = Новый Массив;
                
                //Для Каждого СтрокаМассива Из МассивJSON Цикл
                Для Каждого СтрМассива Из МассивJSON Цикл
                    Для Каждого СтрокаМассива Из СтрМассива.resourceDTO Цикл

                        СтруктураДанных = СтруктураДанныхДляПодписи();
                        СтруктураДанных.ref = СтрокаМассива.id; //ссылка на документ на сервисе
                        СтруктураДанных.docType = "papka24";
                        СтруктураДанных.data = СтрокаМассива.hash;
                        СтруктураДанных.name = СтрокаМассива.name;

                        МассивДанных.Добавить(СтруктураДанных);    
                    КонецЦикла
                КонецЦикла;
                
                XML = СформироватьJSONДляПодписи(МассивДанных);
                
            КонецЕсли;    
            
        Исключение
            
            ТекстСообщения = НСтр("ru = 'Ошибка при подготовке данных для подписи. ';uk='Помилка при підготовці даних для підпису'");
            СообщениеПользователю(ТекстСообщения, Ложь);
            СообщениеПользователю(ОписаниеОшибки());
            XML    = "";
            
        КонецПопытки;    
        
    КонецЕсли;
    
    Возврат Ложь; //признак что обработка закончена
    
КонецФункции    

Функция ВыгрузитьPDFДок(ВидДокумента, ИмяПечатнойФормы, ОтправкаНаСервис) Экспорт
    
    ДействиеАналитики = "ВыгрузкаPDFДок";
    
    Если НЕ ЕстьОтмеченные Тогда
        Если ПодписыватьФинансовыеДокументыПриОтравке Тогда
            ПодготовленныеПлатежи.Очистить();    
        КонецЕсли;    
    КонецЕсли;
        
    //Проверим существование каталога для выгрузки.
    Если ОтправкаНаСервис И СохрнКаталогВыгрузки = "" Тогда
        СохрнКаталогВыгрузки = КаталогВыгрузки;
        КаталогВыгрузки = КаталогВременныхФайлов();
    КонецЕсли;
    
    Если ПустаяСтрока(КаталогВыгрузки) Тогда 
        ТекстСообщения = НСтр("ru='Не задан каталог для выгрузки PDF';uk='Не заданий каталог для вивантаження PDF'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;

    Макеты = Новый ТаблицаЗначений;
    Макеты.Колонки.Добавить("ИмяМакета");
    Макеты.Колонки.Добавить("ИмяВРЕГ");
    Макеты.Колонки.Добавить("СинонимМакета");
    Макеты.Колонки.Добавить("ТабличныйДокумент");
    Макеты.Колонки.Добавить("Экземпляров");
    Макеты.Колонки.Добавить("Картинка");
    Макеты.Колонки.Добавить("ПолныйПутьКМакету");
    Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
    Макеты.Колонки.Добавить("ЭтоМногоязычнаяПечатнаяФорма");

    Для Каждого СтрокаТЧ Из СписокЭкспортаPDF Цикл //цикл каждый раз прерывается

        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        
        ЕстьОтмеченные = Истина;

        СтрокаТЧ.ФлажокКопия = СтрокаТЧ.Флажок;
        СтрокаТЧ.Флажок = Ложь;
        
        СтрокаТЧ.ИмяPDFФайлаДокумента = "Док_" + Лев(ВидДокумента,1) + "_" + СтрЗаменить(СтрЗаменить(СокрЛП(СтрокаТЧ.Номер), "\", "_"), "/", "_") + "_от_" + Формат(СтрокаТЧ.Дата, "ДФ=ddMMyy") + "_" + СокрЛП(СтрокаТЧ.Контрагент.КодПоЕДРПОУ) + ".PDF";
        
        МассивСсылок = Новый Массив;
        
        МассивСсылок.Добавить(СтрокаТЧ.СсылкаНаДокумент);
        
        Макеты.Очистить();
        
        Макет = Макеты.Добавить();
        Макет.ИмяМакета = ИмяПечатнойФормы;
        Макет.ИмяВРЕГ = ВРег(ИмяПечатнойФормы);
        Макет.Экземпляров = 1;
        
        Список = Новый СписокЗначений;
        
        ПараметрыВывода = Новый Структура;
        ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь);
        
        СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
        ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
        Выполнить("ПараметрыВывода.Вставить(""КодЯзыкаДляМногоязычныхПечатныхФорм"", Локализация.ПолучитьЯзыкФормированияПечатныхФорм())");
        
        ПечатьЧерезДокумент = Истина;
        
        ПараметрыПечати = Новый Структура;
            
        Попытка
            
            Выполнить("Макеты = УправлениеПечатью.СформироватьПечатныеФормы(""Обработка.ПечатьОбщихФорм"", ИмяПечатнойФормы, МассивСсылок, ПараметрыПечати, ПараметрыВывода,);");
            Макеты = Макеты.КоллекцияПечатныхФорм;
            ПечатьЧерезДокумент = Ложь;
                        
        Исключение
            
            Попытка
                
                ВнешниеПечатныеФормы = Неопределено;
                ИсточникВнешнихПечатныхФорм = "Документ." + ВидДокумента;
                
                Выполнить("ВнешниеПечатныеФормы = УправлениеПечатью.СписокПечатныхФормИзВнешнихИсточников(ИсточникВнешнихПечатныхФорм)");
                
                СсылкаНаФорму = ВнешниеПечатныеФормы.НайтиПоЗначению(ИмяПечатнойФормы);
                
                ПараметрыИсточника = Новый Структура;
                ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИмяПечатнойФормы);
                ПараметрыИсточника.Вставить("БезопасныйРежим", Ложь);
                ПараметрыИсточника.Вставить("ОбъектыНазначения", МассивСсылок);
        
                
                ВнешняяПечатнаяФормаСсылка = Неопределено;
                МодульДополнительныеОтчетыИОбработки = Неопределено;
                
                Выполнить("МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработки"")");
                Выполнить("МодульДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(СсылкаНаФорму.Значение, ИсточникВнешнихПечатныхФорм, ВнешняяПечатнаяФормаСсылка)");
        
                Выполнить("УправлениеПечатью.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФормаСсылка, ПараметрыИсточника, Макеты, Список, ПараметрыВывода)");
                
                ПечатьЧерезДокумент = Ложь;
                
            Исключение
                СообщениеПользователю(ОписаниеОшибки())
            КонецПопытки;
            
            
        КонецПопытки;
            
        Попытка
            Если ПечатьЧерезДокумент Тогда
                Документы[ВидДокумента].Печать(МассивСсылок,1, Макеты, Список, ПараметрыВывода);
            КонецЕсли;
        Исключение                                
            ТекстСообщения = НСтр("ru = 'Ошибка вызова процедуры печати документа ';uk='Помилка виклику процедури друку документа '") + ВидДокумента;
            СообщениеПользователю(ТекстСообщения);
            СообщениеПользователю(ОписаниеОшибки())
        КонецПопытки;    
        
        Попытка
            ТабДок = Макеты[0].ТабличныйДокумент;    
            
            Если ТипЗнч(ТабДок) <> Тип("ТабличныйДокумент") Тогда
                ВызватьИсключение "Ошибка получения табличного документа";     
            КонецЕсли;
            
            ТабДок.Записать(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЧ.ИмяPDFФайлаДокумента, ТипФайлаТабличногоДокумента.PDF);
        Исключение
            ТекстСообщения = НСтр("ru = 'Ошибка при сохранении документа в файл PDF. ';uk='Помилка при збереженні в PDF-файл. '")
                + КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + СтрокаТЧ.ИмяPDFФайлаДокумента
                + Символы.ПС + НСтр("ru = 'Выберите другую печатную форму документа.';uk='Оберіть іншу друковану форму документа.'");
            СообщениеПользователю(ТекстСообщения);
            
            Если РежимОтладки Тогда
                СообщениеПользователю(ОписаниеОшибки(), Ложь);
            КонецЕсли;
            Продолжить;
        КонецПопытки;    
        
        Если ОтправкаНаСервис Тогда
            
            ТабPDFДок = Новый ТаблицаЗначений;
            
            ТабPDFДок.Колонки.Добавить("ИмяДокумента");
            ТабPDFДок.Колонки.Добавить("НомерСтрокиТЧ");
            ТабPDFДок.Колонки.Добавить("ОКПО"); //Контрагента
            ТабPDFДок.Колонки.Добавить("Дата");
            ТабPDFДок.Колонки.Добавить("Номер");
            ТабPDFДок.Колонки.Добавить("СуммаДокумента");
            ТабPDFДок.Колонки.Добавить("НаименованиеКонтрагента");
            
            НоваяСтрока = ТабPDFДок.Добавить();
            НоваяСтрока.НомерСтрокиТЧ = СтрокаТЧ.НомерСтроки;
            НоваяСтрока.ИмяДокумента = (СтрокаТЧ.ИмяPDFФайлаДокумента);
            НоваяСтрока.Дата = СтрокаТЧ.Дата;
            НоваяСтрока.Номер = EncodeURL(СтрокаТЧ.СсылкаНаДокумент.Номер);
            НоваяСтрока.СуммаДокумента = СтрокаТЧ.СуммаДокумента;
            
            Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕДРПОУ) Тогда
                
                ТекстСообщения = НСтр("ru='Внимание! По строке №%НомерСтроки% не заполнен код по ЕДРПОУ контрагента. Документ не может быть отправлен.'; uk='Увага! По рядку №%НомерСтроки% не заповнений код за ЄДРПОУ контрагента. Документ не може бути відправлений.'");
                ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                СтрокаТЧ.КартинкаОшибки = 2;
                СтрокаТЧ.ТекстОшибки = ТекстСообщения;
                СообщениеПользователю(ТекстСообщения, Ложь);
                Продолжить;
            КонецЕсли;
            
            НоваяСтрока.ОКПО = СтрокаТЧ.ЕДРПОУ;
            
            Попытка
                НоваяСтрока.НаименованиеКонтрагента = EncodeURL(СтрокаТЧ.Контрагент.НаименованиеПолное);    
            Исключение
                НоваяСтрока.НаименованиеКонтрагента = EncodeURL(СтрокаТЧ.Контрагент.Наименование);
            КонецПопытки;
        
            ОтправитьДокументыНаРегистрацию(ТабPDFДок, СписокЭкспортаPDF, ЕстьОшибки, КодировкаТекста.ANSI, Истина);
            
            Если ПодписыватьФинансовыеДокументыПриОтравке Тогда
                ПодписатьPDFДок(СтрокаТЧ);
            КонецЕсли;

        КонецЕсли;    
        
        Возврат Истина; //признак что будет продолжать выполняться в цикле
        
    КонецЦикла;
    
    Если ЗначениеЗаполнено(СохрнКаталогВыгрузки) Тогда
        КаталогВыгрузки = СохрнКаталогВыгрузки;
        СохрнКаталогВыгрузки = "";
    КонецЕсли;
    
    Если ЕстьОтмеченные  Тогда
        Если Не ПодписыватьФинансовыеДокументыПриОтравке Тогда
            ТекстСообщения = НСтр("ru = 'Выгрузка документов завершена. ';uk='Вивантаження документів завершено. '");
            СообщениеПользователю(ТекстСообщения, Ложь);
        КонецЕсли;    
    Иначе
        ТекстСообщения = НСтр("ru = 'Нет отмеченных документов для выгрузки. ';uk='Немає відмічених документів для вивантаження'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
    КонецЕсли;    
    
    ЕстьОтмеченные = Ложь;
    ЕстьОшибки = Ложь;
    XML = "";
    СессияДок = "";
    
    Возврат Ложь; //признак что обработка закончена
    
КонецФункции

Функция СтруктураДанныхДляПодписи()
    
    //на момент написания функции (27.10.2016) - нужны только первые три поля 
    //+ нужно name
    СтруктураДанных = Новый Структура;
    СтруктураДанных.Вставить("ref");
    СтруктураДанных.Вставить("docType");
    СтруктураДанных.Вставить("data");
    СтруктураДанных.Вставить("time");
    СтруктураДанных.Вставить("type");
    СтруктураДанных.Вставить("src");
    СтруктураДанных.Вставить("name");
    СтруктураДанных.Вставить("author");
    СтруктураДанных.Вставить("status");
    
    Возврат СтруктураДанных;
    
КонецФункции

Функция СформироватьJSONДляПодписи(МассивСтруктурДанных)
    
    Если НЕ ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
        
        ТекстСообщения = НСтр("ru = 'Не заполнено поле код ЕДРПОУ. Проверьте настройки. ';uk='Не заповнене поле код ЄДРПОУ. Перевірте настройки.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат "";
        
    КонецЕсли;
    
    JSONДляПодписи = "{
    |""language"":""uk"",
    |""okpo"":" + КодПоЕДРПОУ + ",
    |""docs"":[";
    
    Для Каждого СтрокаМассиваСтруктур Из МассивСтруктурДанных Цикл
        
        JSONДляПодписи = JSONДляПодписи + "{"; 
        
        Для Каждого ЭлементСтруктуры Из СтрокаМассиваСтруктур Цикл
            
            Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
                JSONДляПодписи = JSONДляПодписи + """" + ЭлементСтруктуры.Ключ + """" + ":" + """" + ЭлементСтруктуры.Значение + """,";     
            КонецЕсли;
            
        КонецЦикла;
        
        JSONДляПодписи = Лев(JSONДляПодписи, СтрДлина(JSONДляПодписи)-1);
        JSONДляПодписи = JSONДляПодписи + "},";
        
    КонецЦикла;
    
    JSONДляПодписи = Лев(JSONДляПодписи, СтрДлина(JSONДляПодписи)-1);
    JSONДляПодписи = JSONДляПодписи + "]}";
    
    Возврат JSONДляПодписи;
    
КонецФункции    

Функция ЭкранироватьДвойныеКавычки(ВходящийТекст) Экспорт

    ИсходящийТекст = СтрЗаменить(ВходящийТекст, """", "\""");

    Возврат ИсходящийТекст

КонецФункции

Функция ОтправитьPDFФайлВПапка24(АдресФайла, ИмяФайла, ВыгрузкаИПодпись)

    //Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
    //    Возврат Ложь
    //КонецЕсли;

    //СессияПапка24 = "";
    
    //РесурсНаСервере = "/upload";
    РесурсНаСервере = "/api2/checked/upload";
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
    
    НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "filename";
    //НоваяСтрока.ЗначениеЗаголовка = EncodeURL(ИмяФайла);
    НоваяСтрока.Заголовок = "accept";
    НоваяСтрока.ЗначениеЗаголовка = "application/json";
    
    НоваяСтрока = Заголовки.Добавить();
    //НоваяСтрока.Заголовок = "sessionid";
    НоваяСтрока.Заголовок = "Cookie";
    НоваяСтрока.ЗначениеЗаголовка = СессияДок;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";

    Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
    НоваяСтрока.ЗначениеЗаголовка = "multipart/form-data; boundary=" + boundary + "; charset=UTF-8";

    ТекстДляОтправки = ("--" + Boundary) + Символы.ВК + Символы.ПС;

    ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""file""; ""filename=" + EncodeURL(ИмяФайла) + """") + Символы.ВК + Символы.ПС;
    //ТекстДляОтправки = ТекстДляОтправки + ("Content-Disposition: form-data; name=""file""; ""filename=" + EncodeURL(АдресФайла) + """") + Символы.ВК + Символы.ПС;
    ТекстДляОтправки = ТекстДляОтправки + ("") + Символы.ВК + Символы.ПС;

    ТекстДляОтправки = ТекстДляОтправки + СтрЗаменить(СтрЗаменить(Base64Строка(Новый ДвоичныеДанные(АдресФайла)), Символы.ВК, ""), Символы.ПС, "") + Символы.ВК + Символы.ПС;// + """")

    ТекстДляОтправки = ТекстДляОтправки + ("--" + Boundary + "--") + Символы.ВК + Символы.ПС;

    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Lenght";
    НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(ТекстДляОтправки));

    ТелоЗапроса = ТекстДляОтправки;

    Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
        //с курл
        ////ТелоЗапроса = "--upload-file """ + СтрЗаменить(АдресФайла, "\", "/") + """";
        ////ТелоЗапроса = "--upload-file """ + СтрЗаменить(АдресФайла, "\", "/") + """";//рабочий вариант для курл с конфиг-файл//не используется
        //ТелоЗапросаКурл = "&&" + ЭкранироватьДвойныеКавычки(ТелоЗапроса);
        ТелоЗапросаКурл = "--data """ + СтрЗаменить(СтрЗаменить(ТелоЗапроса, Символы.ВК + Символы.ПС, "\r\n"), """", "\""") + """"
    //Иначе
    //    ТелоЗапроса = Новый ДвоичныеДанные(АдресФайла);
    КонецЕсли;    

    POST = Истина;
    //УдалитьBOM = Ложь;
    Кодировка = КодировкаТекста.ANSI;//с UTF8 курл валится

    //стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия, Заголовки , , , , Истина);
    стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "",
        Заголовки, Кодировка,, POST,,,, ТелоЗапросаКурл);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        //Сессия = Неопределено;
        СессияДок = Неопределено;
        Возврат Ложь;
    Иначе
        
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;

        СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
        Попытка
            вСессияДок = СтруктураОтвета.sessionId;
            Если ЗначениеЗаполнено(вСессияДок) Тогда
                СессияДок = вСессияДок
            КонецЕсли
        Исключение
        КонецПопытки;
        Попытка
            КолСохрДок = СтруктураОтвета.resourceDTO.Количество()
        Исключение
            КолСохрДок = 0
        КонецПопытки

    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус = 401 Тогда
        ТекстСообщения = НСтр("ru = 'Неверный пароль или нет прав на действие у текущего пользователя на сервисе Paperless.';uk='Невірний пароль або немає прав на дію у поточного користувача на сервісі Paperless.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат Ложь
    ИначеЕсли Найти("403,423", Статус) > 0 Тогда
        ТекстСообщения = НСтр("ru = 'Сессия истекла или не найдена или доступ к данным запрещен, необходимо пройти авторизацию на сервисе Paperless.';uk='Сесія закінчилася або не знайдена або доступ до даних заборонений, необхідно пройти авторизацію на сервісі Paperless.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат Ложь
    ИначеЕсли Статус = 429 Тогда
        ТекстСообщения = НСтр("ru = 'Слишком много повторяющихся запросов на сервисе Paperless. Попробуйте позже.';uk='Занадто багато повторюваних запитів на сервісі Paperless. Спробуйте пізніше.'");
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат Ложь
    ИначеЕсли Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление документа в Папка24. ';uk='Помилка відправки запиту на додавання документа в Папка24. '") + ИмяФайла;
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    Иначе
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики, , , "КоличествоПлатежей", Формат(1, "ЧГ=0"));
    КонецЕсли;

    Если Найти(ТелоОтвета, "err") > 0 Или КолСохрДок = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка при отправке запроса на добавление документа в Paperless: ';uk='Помилка при відправці запиту на додавання документа в Paperless. '")
            + ТелоОтвета;
        СообщениеПользователю(ТекстСообщения);
        Авторизовано = Ложь;
        Возврат Ложь
    КонецЕсли;

    Если ВыгрузкаИПодпись Тогда
        XML = XML + ТелоОтвета + ",";        
    КонецЕсли;
    
    Возврат Истина;
    
КонецФункции    

Процедура ОтправитьПодписанныеPDF(ОбъектСПодписями) Экспорт
    
    ДействиеАналитики = "Папка24Подпись";
    
    Если НЕ РаботаВМоделиСервисаПБ Тогда//ИЛИ ИСТИНА Тогда
        ТаблицаSign = ДокументыДляПодписи;
    Иначе    
        ТаблицаSign = jsonПрочитатьИнициализация(ОбъектСПодписями);
    КонецЕсли;    
    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    Отправлено = 0;
    Для Каждого СтрокаПодписей Из ТаблицаSign Цикл

        //РесурсНаСервере = "/api/sign/" + Формат(СтрокаПодписей.ref, "ЧГ=0");
        РесурсНаСервере = "/api2/checked/sign/0?keyType=UNDEFINED";//keyType=UNDEFINED/PERSONAL_KEY/TOKEN/SMARTID

        //ТелоЗапроса = СтрокаПодписей.sign; //подпись документа
        ТелоЗапроса = "{""" + СтрокаПодписей.ref + """:["""    + СтрокаПодписей.sign + """]}";
        ТелоЗапросаКурл = "";
        Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
            //с курл
            //ТелоЗапроса = "&&" + ЭкранироватьДвойныеКавычки(ТелоЗапроса);
            ТелоЗапросаКурл = "--data """ + ЭкранироватьДвойныеКавычки(ТелоЗапроса) + """"
        КонецЕсли;

        Заголовки = Новый ТаблицаЗначений;
        Заголовки.Колонки.Добавить("Заголовок");
        Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
        
        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Cookie";//"sessionid";
        НоваяСтрока.ЗначениеЗаголовка = СессияДок;

        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Accept";
        НоваяСтрока.ЗначениеЗаголовка = "application/json; charset=UTF-8";

        НоваяСтрока = Заголовки.Добавить();
        НоваяСтрока.Заголовок = "Content-Type";
        НоваяСтрока.ЗначениеЗаголовка = "text/plain";

        POST = Истина;

        //стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия, Заголовки);
        стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "",
            Заголовки,,, POST,,,, ТелоЗапросаКурл);
        
        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Сессия = Неопределено;
            Возврат;
        Иначе
            
            Статус = стРезультат.Статус;
            ТелоОтвета = стРезультат.ТелоОтвета;
            
        КонецЕсли;
        
        // если не успешно сообщим ошибку
        Если Статус = 401 Тогда
            ТекстСообщения = НСтр("ru = 'Неверный пароль или нет прав на действие у текущего пользователя на сервисе Paperless.';uk='Невірний пароль або немає прав на дію у поточного користувача на сервісі Paperless.'");
            СообщениеПользователю(ТекстСообщения);
            Авторизовано = Ложь;
            Возврат
        ИначеЕсли Найти("403,423", Статус) > 0 Тогда
            ТекстСообщения = НСтр("ru = 'Сессия истекла или не найдена или доступ к данным запрещен, необходимо пройти авторизацию на сервисе Paperless.';uk='Сесія закінчилася або не знайдена або доступ до даних заборонений, необхідно пройти авторизацію на сервісі Paperless.'");
            СообщениеПользователю(ТекстСообщения);
            Авторизовано = Ложь;
            Возврат
        ИначеЕсли Статус = 429 Тогда
            ТекстСообщения = НСтр("ru = 'Слишком много повторяющихся запросов на сервисе Paperless. Попробуйте позже.';uk='Занадто багато повторюваних запитів на сервісі Paperless. Спробуйте пізніше.'");
            СообщениеПользователю(ТекстСообщения);
            //Авторизовано = Ложь;
            Возврат
        ИначеЕсли Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на добавление подписанного документа в Папка24. ';uk='Помилка відправки запиту на додавання підписаного документа в Папка24. '");
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецЕсли;

        СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
        ЕстьПодпись = Ложь;
        Для каждого Соотв Из СтруктураОтвета Цикл
            Если ЗначениеЗаполнено(Соотв.Значение[0]) Тогда
                ЕстьПодпись = Истина;
                Прервать
            КонецЕсли;
        КонецЦикла;

        Если Не ЕстьПодпись Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка подписи документа в Paperless.';uk='Помилка підпису документа в Paperless.'");
            СообщениеПользователю(ТекстСообщения);
            //Авторизовано = Ложь;
            Возврат
        КонецЕсли;

        Если ОтправлятьPDF Тогда
            
            СтрокаТЧ = СписокЭкспортаPDF.Найти(СтрокаПодписей.fileName);
            Если СтрокаТЧ = Неопределено Тогда
                Попытка
                    ОтправляемыйФайл = Новый Файл(СтрокаПодписей.fileName);
                    СтрокаТЧ = СписокЭкспортаPDF.Найти(ОтправляемыйФайл.Имя)
                Исключение
                КонецПопытки
            КонецЕсли;
            
            Если СтрокаТЧ = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ЭмайлКонтрагента) Тогда
                
                ТекстСообщения = НСтр("ru='Внимание! В строке №%НомерСтроки% не заполнен Email адрес контрагента. Документ не может быть отправлен контрагенту.'; uk='Увага! У рядку №%НомерСтроки% не заповнена Email адреса контрагента. Документ не може бути відправлений контрагенту'");
                Попытка
                    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
                    СписокЭкспортаPDF[СтрокаТЧ.НомерСтроки-1].КартинкаОшибки = 2;
                    СписокЭкспортаPDF[СтрокаТЧ.НомерСтроки-1].ТекстОшибки = ТекстСообщения;
                Исключение
                КонецПопытки;
                СообщениеПользователю(ТекстСообщения, Ложь);

                Продолжить;    
            КонецЕсли;
            
            //РесурсНаСервере = "/api/share/" + Формат(СтрокаПодписей.ref, "ЧГ=0");
            РесурсНаСервере = "/api2/checked/share/" + Формат(СтрокаПодписей.ref, "ЧГ=0");

            СтрокаТЧЭмайлКонтрагента = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаТЧ.ЭмайлКонтрагента, Символы.ВК, ""), Символы.ПС, ""), "¶", "");

            //ТелоЗапроса = "{""requestList"":[{""email"": """ + EncodeURL(СтрокаТЧ.ЭмайлКонтрагента) + """,""comment"": """",""mode"": 0}]}";
            ТелоЗапроса = "";
            ТелоЗапросаКурл = "";
            Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
                //    с курл
                //ТелоЗапроса = """{\""requestList\"":[{\""email\"":\""" + СтрокаТЧ.ЭмайлКонтрагента + "\"",\""comment\"":\""\"",\""mode\"": 0}]}""";
                ТелоЗапросаКурл = "--data ""{\""requestList\"":[{\""email\"":\""" + СтрокаТЧЭмайлКонтрагента + "\"",\""comment\"":\""\"",\""mode\"": 0}]}""";
            Иначе
                //ТелоЗапроса = "{""requestList"":[{""email"": """ + СтрокаТЧ.ЭмайлКонтрагента + """,""comment"": """",""mode"": 0}]}";    
                ТелоЗапроса = "{""requestList"":[{""email"":""" + СтрокаТЧЭмайлКонтрагента + """,""comment"":"""",""mode"": 0}]}";
            КонецЕсли;
            //СтрокаЗапроса = "{\""login\"":\""" + EmailПапка24 + "\"",\""password\"":\""" + ПарольПапка24 + "\""}";
            //ТелоЗапроса = "{requestList:[{email: """ + СтрокаТЧ.ЭмайлКонтрагента + """,comment: """",mode: 0}]}";
            
            Заголовки = Новый ТаблицаЗначений;
            Заголовки.Колонки.Добавить("Заголовок");
            Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
            
            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Cookie";//"sessionid";
            НоваяСтрока.ЗначениеЗаголовка = СессияДок;

            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Accept";
            НоваяСтрока.ЗначениеЗаголовка = "application/json; charset=UTF-8";

            НоваяСтрока = Заголовки.Добавить();
            НоваяСтрока.Заголовок = "Content-Type";
            НоваяСтрока.ЗначениеЗаголовка = "application/json";

            POST = Истина;

            //стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", Сессия, Заголовки);
            стРезультат = УстановитьСоединение(АдресПапка24, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", "",
                Заголовки,,, POST,,,, ТелоЗапросаКурл);
            
            Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
                Сессия = Неопределено;
                Возврат;
            Иначе
                
                Статус = стРезультат.Статус;
                ТелоОтвета = стРезультат.ТелоОтвета;
                
            КонецЕсли;
            
            // если не успешно сообщим ошибку
            Если Статус = 400 Тогда
                ТекстСообщения = НСтр("ru = 'Неверный E-mail ';uk='Невірний E-mail '") + СтрокаТЧ.ЭмайлКонтрагента
                    + НСтр("ru = ' в строке ';uk=' у рядку '") + СтрокаТЧ.НомерСтроки;
                СообщениеПользователю(ТекстСообщения);
                Авторизовано = Ложь;
                Возврат
            ИначеЕсли Статус = 401 Тогда
                ТекстСообщения = НСтр("ru = 'Неверный пароль или нет прав на действие у текущего пользователя на сервисе Paperless.';uk='Невірний пароль або немає прав на дію у поточного користувача на сервісі Paperless.'");
                СообщениеПользователю(ТекстСообщения);
                Авторизовано = Ложь;
                Возврат
            ИначеЕсли Найти("403,423", Статус) > 0 Тогда
                ТекстСообщения = НСтр("ru = 'Сессия истекла или не найдена или доступ к данным запрещен, необходимо пройти авторизацию на сервисе Paperless.';uk='Сесія закінчилася або не знайдена або доступ до даних заборонений, необхідно пройти авторизацію на сервісі Paperless.'");
                СообщениеПользователю(ТекстСообщения);
                Авторизовано = Ложь;
                Возврат
            ИначеЕсли Статус = 429 Тогда
                ТекстСообщения = НСтр("ru = 'Слишком много повторяющихся запросов на сервисе Paperless. Попробуйте позже.';uk='Занадто багато повторюваних запитів на сервісі Paperless. Спробуйте пізніше.'");
                СообщениеПользователю(ТекстСообщения);
                //Авторизовано = Ложь;
                Возврат
            ИначеЕсли Статус <> 200 Тогда            
                ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на отправку подписанного документа контрагенту. ';uk='Помилка відправки запиту на відправку підписаного документа контрагенту. '");
                СообщениеПользователю(ТекстСообщения);
                Возврат;
            КонецЕсли;

            СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
            ЕстьДоступ = Ложь;
            Для каждого Соотв Из СтруктураОтвета Цикл
                Если ЗначениеЗаполнено(Соотв.Значение[0].user) И Соотв.Значение[0].user = СтрокаТЧ.ЭмайлКонтрагента Тогда//И Соотв.Значение[0].status = "1" Тогда
                    ЕстьДоступ = Истина;
                    Прервать
                КонецЕсли;
            КонецЦикла;
            
            Если Не ЕстьДоступ Тогда            
                ТекстСообщения = НСтр("ru = 'Ошибка получения доступа контрагента к документу в Paperless.';uk='Помилка отримання доступу контрагента до документа в Paperless.'");
                СообщениеПользователю(ТекстСообщения);
                //Авторизовано = Ложь;
                Возврат
            КонецЕсли;

        КонецЕсли;
        
        Отправлено = Отправлено + 1;
        
    КонецЦикла;
    
    ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики, , ,"КоличествоПлатежей", Формат(Отправлено, "ЧГ=0"));
    
    ТекстСообщения = НСтр("ru = 'Все отмеченные документы успешно выгружены. ';uk='Усі зазначені документи успішно вивантажені. '");
    СообщениеПользователю(ТекстСообщения, Ложь);
    
КонецПроцедуры

Процедура ЗаполнитьСписокPDF(ВидДокумента, НачДата, КонДата, СсылкаНаДок, НомерСтроки) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    Док.Ссылка КАК СсылкаНаДокумент,
    |    Док.Номер,
    |    Док.Дата
    |ИЗ
    |    Документ." + ВидДокумента + " КАК Док ГДЕ НЕ Док.ПометкаУдаления И Док.Организация = &Организация И Док.Дата МЕЖДУ &НачДата И &КонДата";
    
    Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
        Запрос.Текст = Запрос.Текст + " И Док.Ссылка = &Ссылка";
        Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("НачДата", НачДата);
    Запрос.УстановитьПараметр("КонДата", КонДата);
    
    Запрос.УстановитьПараметр("Организация", Организация);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетЗаписи = РезультатЗапроса.Выбрать();
    
    Если НЕ ЗначениеЗаполнено(СсылкаНаДок) ИЛИ ВыборкаДетЗаписи.Количество() = 0 Тогда
        СписокЭкспортаPDF.Очистить();    
    КонецЕсли;
    
    Пока ВыборкаДетЗаписи.Следующий() Цикл
        
        текКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
        
        Попытка   //фильтрация здесь а не в запросе. Из-за того что могут быть документы без реквизита "Контрагент"
            
            текКонтрагент = ВыборкаДетЗаписи.СсылкаНаДокумент.Контрагент;
            
            Если ЗначениеЗаполнено(Контрагент) И Контрагент <> текКонтрагент Тогда
                Продолжить;
            КонецЕсли;
            
        Исключение
        КонецПопытки;    
        
        Если НомерСтроки <> Неопределено Тогда
            НоваяСтрока = СписокЭкспортаPDF[НомерСтроки];
        Иначе    
            НоваяСтрока = СписокЭкспортаPDF.Добавить();
        КонецЕсли;    
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетЗаписи);
        
        Попытка
            НоваяСтрока.Контрагент = текКонтрагент;
        Исключение
        КонецПопытки;
        
        Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
            
            ЭмайлКонтрагента = "";
            
            Попытка
                Если ИдКонф <> "BP" Тогда
                    Попытка
                        // BASБухгалтерияКОРП
                        ЭмайлКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НоваяСтрока.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ВыборкаДетЗаписи.Дата)
                    Исключение
                        Попытка
                            ЭмайлКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НоваяСтрока.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
                        Исключение
                            ЭмайлКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НоваяСтрока.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты)
                        КонецПопытки
                    КонецПопытки
                Иначе
                    // BSB, ...
                    ЭмайлКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НоваяСтрока.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);    
                КонецЕсли;
            Исключение
                Если РежимОтладки Тогда
                    СообщениеПользователю(ОписаниеОшибки(), Ложь);    
                КонецЕсли;
            КонецПопытки;
            
            НоваяСтрока.ЭмайлКонтрагента = ЭмайлКонтрагента;
            
            Если ИдКонф = "KUBU" Тогда
                НоваяСтрока.ЕДРПОУ = KUBU_ПолучитьКодКонтрагентаОрганизации(НоваяСтрока.Контрагент, НоваяСтрока.Дата, "КодПоЕГРПОУ");        
            Иначе    
                НоваяСтрока.ЕДРПОУ = НоваяСтрока.Контрагент.КодПоЕДРПОУ;
            КонецЕсли;
            
        КонецЕсли;
    
        НоваяСтрока.ИмяДокумента = ВидДокумента;
        Попытка
            НоваяСтрока.СуммаДокумента = ВыборкаДетЗаписи.СсылкаНаДокумент.СуммаДокумента;
            НоваяСтрока.ВалютаДокумента = ВыборкаДетЗаписи.СсылкаНаДокумент.ВалютаДокумента; 
        Исключение
        КонецПопытки;
        
    КонецЦикла;
    
КонецПроцедуры

//Папка24
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//Обновление

Функция ТребуетсяОбновлениеОбработки(РекомендуемаяВерсия)
    
    ТекущаяВерсия = РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ТекВерсия, "l", ""), ".");
    РекомендуемаяВерсия = РазложитьСтрокуВМассивПодстрок(РекомендуемаяВерсия, ".");
    
    Для Счетчик = РекомендуемаяВерсия.Количество() + 1 По ТекущаяВерсия.Количество() Цикл
        РекомендуемаяВерсия.Добавить("0");
    КонецЦикла;
    
    ТребуетсяОбновление = Ложь;
    
    Для Счетчик = 0 По ТекущаяВерсия.ВГраница() Цикл
        Попытка
            Текущая = Число(ТекущаяВерсия[Счетчик]);
            Рекомендуемая = ?(ПустаяСтрока(РекомендуемаяВерсия[Счетчик]), 0, Число(РекомендуемаяВерсия[Счетчик]));
        Исключение
            Прервать;    
        КонецПопытки;
        
        Если Текущая > Рекомендуемая Тогда
            Прервать;
        ИначеЕсли Текущая < Рекомендуемая Тогда
            ТребуетсяОбновление = Истина;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Возврат ТребуетсяОбновление;
    
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
    
    Результат = Новый Массив;
    
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
    
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Если СокращатьНепечатаемыеСимволы Тогда
                Результат.Добавить(СокрЛП(Подстрока));
            Иначе
                Результат.Добавить(Подстрока);
            КонецЕсли;
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
    
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Если СокращатьНепечатаемыеСимволы Тогда
            Результат.Добавить(СокрЛП(Строка));
        Иначе
            Результат.Добавить(Строка);
        КонецЕсли;
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция ПроверкаОбновления(МинимальноДопустимаяВерсия = Истина) Экспорт
    
    Попытка
        Если Не ЭтоВебКлиент И ЭтоWindows И (НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда) Тогда
            ПроверкаСертификатаCURL();
        КонецЕсли;    
    Исключение
        Если РежимОтладки Тогда
            СообщениеПользователю(ОписаниеОшибки(), Ложь);
        КонецЕсли;
    КонецПопытки;
    
    ДействиеАналитики = "ПроверкаОбновления";
    
    РесурсНаСервере = "/client_bank_jur/Privat24to1CManagedversions.txt";
    СтрокаЗапроса = "";
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    стРезультат = УстановитьСоединение("client-bank.privatbank.ua", Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,,,Ложь);
    
    ТекстСообщенияОшибки = НСтр("ru = 'Ошибка отправки запроса на получение версии обработки.';uk='Помилка відправки запиту на отримання версії обробки.'");
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        
        СообщениеПользователю(ТекстСообщенияОшибки);
        Возврат Ложь;
        
    Иначе
        
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
        
    КонецЕсли;

    Если Статус <> 200 Тогда
        
        СообщениеПользователю(ТекстСообщенияОшибки);
        Возврат Ложь;
        
    КонецЕсли;
    
    МассивВерсий = РазложитьСтрокуВМассивПодстрок(ТелоОтвета, " ");
    
    Если МассивВерсий.Количество() <> 2 Тогда
        
        ТекстСообщенияОшибки = НСтр("ru = 'Ошибка при чтении версии обработки.';uk='Помилка при читанні версії обробки.'");
        СообщениеПользователю(ТекстСообщенияОшибки);
        Возврат Ложь;
        
    КонецЕсли;
    
    НомерВерсииДляПроверки = ТекВерсия;
    
    ТребуетсяОбновление = Ложь;
    
    Если МинимальноДопустимаяВерсия Тогда
        
        НомерВерсииДляПроверки = МассивВерсий[1];
        ТребуетсяОбновление = ТребуетсяОбновлениеОбработки(НомерВерсииДляПроверки);
        
        Если НЕ ТребуетсяОбновление И ТребуетсяОбновлениеОбработки(МассивВерсий[0]) Тогда
            ТекстСообщенияОшибки = НСтр("ru = 'Доступна новая версия модуля обмена. Для автоматического обновления нажмите кнопку ""Проверить обновления"" в меню ""Настройки""';uk='Доступна нова версія модуля обміну. Для автоматичного оновлення натисніть кнопку ""Перевірити оновлення"" в меню ""Налаштування""'");
            СообщениеПользователю(ТекстСообщенияОшибки);        
        КонецЕсли;
        
    Иначе
        НомерВерсииДляПроверки = МассивВерсий[0];
        ТребуетсяОбновление = ТребуетсяОбновлениеОбработки(НомерВерсииДляПроверки);
    КонецЕсли;
    
    
    Возврат ТребуетсяОбновление; 
    
КонецФункции

Функция ОбновитьОбработку() Экспорт
    
    ДействиеАналитики = "Обновление";    
    
    РесурсНаСервере = "/client_bank_jur/Privat24to1CManagedupdate.exe";
    
    СтрокаЗапроса = "";
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Если ПоддерживаетсяTLS12 И Не ФлажокИспользоватьКурлВсегда Тогда
        TMP = КаталогВременныхФайлов();
        ИмяФайлаОбновления = TMP + "Privat24to1CManagedupdate.exe";
    Иначе    
        TMP = ПеременнаяОкружения("%TEMP%");
        ИмяФайлаОбновления = TMP + "\Privat24to1CManagedupdate.exe";
    КонецЕсли;    
    
    стРезультат = УстановитьСоединение("client-bank.privatbank.ua", Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, ИмяФайлаОбновления, "",,,,Ложь);
    
    ТекстСообщенияОшибки = НСтр("ru = 'Ошибка отправки запроса на получение файла обновления обработки.';uk='Помилка відправки запиту на отримання файлу поновлення обробки.'");
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        
        СообщениеПользователю(ТекстСообщенияОшибки);
        Возврат Ложь;
        
    Иначе
        
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
        
    КонецЕсли;

    Если Статус <> 200 Тогда
        СообщениеПользователю(ТекстСообщенияОшибки);
        Возврат Ложь;
    КонецЕсли;
    
    Файл = Новый Файл(ИмяФайлаОбновления);
    Если Не Файл.Существует() Тогда
        ТекстСообщения = НСтр("ru='Файл скачанного архива не найден. Проверьте путь к файлу обновления, права на каталог обновления и запустите еще раз обновление.';uk='Файл завантаженого архіву не знайдений. Перевірте шлях до файлу оновлення, права на каталог поновлення і запустіть ще раз оновлення.'");//+ ОписаниеОшибки();
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецЕсли;
    
    ПодписьВалидна = ПроверитьПодписьФайла(ИмяФайлаОбновления);
    
    Если НЕ ПодписьВалидна Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Попытка
        ЗапуститьПриложение(ИмяФайлаОбновления + " -s -r -d" + TMP, , Истина);
    Исключение
        
        ТекстСообщения = НСтр("ru='Разархивирование файла обновления не выполнено. Пожалуйста, скачайте последнюю версию обработки самостоятельно. Сайт Приват24->Услуги->Бухгалтерам->приложение';
         |uk='Розархівація файлу оновлення не виконана. Будь ласка, скачайте останню версію обробки самостійно. Сайт Приват24->Услуги->Бухгалтерам->додаток'");
            
        СообщениеПользователю(ОписаниеОшибки());
        СообщениеПользователю(ТекстСообщения, Ложь);
        
        Возврат Ложь;
        
    КонецПопытки;

    //    проверка наличия файла обработки
    //ПутьКСкачаннойОбработке = TMP + ?(Прав(TMP, 1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + "privat24_1c" + ПолучитьРазделительПути() + "1C8" + ПолучитьРазделительПути() + "Privat24to1CManaged.epf";
    ПутьКСкачаннойОбработке = TMP + ?(Прав(TMP, 1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути()) + "privat24" + ПолучитьРазделительПути() + "8" + ПолучитьРазделительПути() + "Privat24to8Managed.epf";
    Файл = Новый Файл(ПутьКСкачаннойОбработке);
    Если Не Файл.Существует() Тогда
        ТекстСообщения = НСтр("ru='Файл обновления обработки не найден. Пожалуйста, скачайте последнюю версию обработки самостоятельно. Сайт Приват24->Услуги->Бухгалтерам->приложение.';
         |uk='Файл оновлення обробки не знайдено. Будь ласка, скачайте останню версію обробки самостійно. Сайт Приват24->Услуги->Бухгалтерам->додаток.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецЕсли;
    
    Попытка
        
        Если Найти(ПутьКСкачаннойОбработке, "e1cib/tempstorage/") > 0 Тогда
            ТекстСообщения = НСтр("ru='Обновление невозможно. Пожалуйста, скачайте последнюю версию обработки самостоятельно. Сайт Приват24->Услуги->Бухгалтерам->приложение.';
             |uk='Оновлення неможливо. Будь ласка, скачайте останню версію обробки самостійно. Сайт Приват24->Услуги->Бухгалтерам->додаток.'");
            СообщениеПользователю(ТекстСообщения);
            Возврат Ложь;
    
        Иначе    
            КопироватьФайл(ПутьКСкачаннойОбработке, ЭтотОбъект.ИспользуемоеИмяФайла);
        КонецЕсли;
        
    Исключение
        СообщениеПользователю(ОписаниеОшибки());
        
        ТекстСообщения = НСтр("ru='Не удалось скопировать файл обновления обработки. Пожалуйста, скачайте последнюю версию обработки самостоятельно. Сайт Приват24->Услуги->Бухгалтерам->приложение.';
         |uk='Не вдалося скопіювати файл оновлення обробки. Будь ласка, скачайте останню версію обробки самостійно. Сайт Приват24->Услуги->Бухгалтерам->додаток.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат Ложь;
        
    КонецПопытки;
    
    Возврат Истина; //успешно обновились
    
КонецФункции

Функция ПроверитьПодписьФайла(АдресФайла)

    Попытка
        Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
        Скрипт.Language="vbscript";
        Стр = "
        |Function CheckSignature(file)
        |Set objFSO = CreateObject(""Scripting.FileSystemObject"")
        |Set Signer = CreateObject(""Scripting.Signer"")
        |fileOK = Signer.VerifyFile(file, true)
        |If(fileOK) Then
        |Set objFile = objFSO.OpenTextFile(file)
        |strSearchString = objFile.ReadAll
        |If InStr(strSearchString, ""JSC CB PRIVATBANK"") > 0 Then
        |result=""Signature valid""
        |Else 
        |result=""Signature not valid!""
        |End If
        |Else result=""Digital signature not found""    
        |End If    
        |'MsgBox result
        |CheckSignature=result
        |End Function
        |";
        Скрипт.AddCode(Стр);
        
        Ответ = Скрипт.run("CheckSignature", АдресФайла);
        
        Если Ответ <> "Signature valid" Тогда
            ТекстСообщения = НСтр("ru='Подпись файла обновления отсутствует или не актуальна'; uk='Підпис файлу оновлення відсутній або не актуальний'");
            СообщениеПользователю(ТекстСообщения);
            Возврат Ложь;    
        КонецЕсли;    
        
    Исключение
        СообщениеПользователю(ОписаниеОшибки());
    КонецПопытки;    
    
    Возврат Истина;
    
КонецФункции

//Обновление
////////////////////////////////////////////////////////////////    

////////////////////////////////////////////////////////////////
//Работа с CURL

Процедура ЗаписатьФайлыВнешнихКомпонент() Экспорт

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;
    //AppData = ПеременнаяОкружения("%APPDATA%");
    Если Не ЗначениеЗаполнено(AppData) Тогда
        Возврат;
    КонецЕсли;

    ПутьКурл = AppData + "\1c_curl";
    Файл = Новый Файл(ПутьКурл);
    Если Не Файл.Существует() Тогда
        Попытка
            СоздатьКаталог(ПутьКурл);
        Исключение
            ТекстСообщения = НСтр("ru='Не удается создать каталог ';uk='Не вдається створити каталог '")
                + ПутьКурл + НСтр("ru=' по причине ';uk=' по причині '") + ОписаниеОшибки();
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецПопытки
    КонецЕсли;
    
    Попытка
        
        Макетcurlexe = ПолучитьМакет("curlexe");
        Макетlibcurldll = ПолучитьМакет("libcurldll");
        Макетcurlcabundlecrt = ПолучитьМакет("curlcabundlecrt");
        
        Макетcurlexe.Записать(AppData + "\1c_curl\curl.exe");
        Макетlibcurldll.Записать(AppData + "\1c_curl\libcurl.dll");
        
        Файл = Новый Файл(AppData + "\1c_curl\curl-ca-bundle.crt");
        Если Не Файл.Существует() ИЛИ Файл.Размер() < 100000 Тогда
            Макетcurlcabundlecrt.Записать(AppData + "\1c_curl\curl-ca-bundle.crt");
        КонецЕсли;
        
    Исключение
        ТекстСообщения = НСтр("ru='Не удается записать файлы компоненты curl.';uk='Не вдається зберегти файли компоненти curl.'");
        СообщениеПользователю(ТекстСообщения + " " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура ЗаписатьФайлыКриптоплагина() Экспорт

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;

    ПутьКП = appdata + "\cryptoplugin1c";
    Файл = Новый Файл(ПутьКП);
    Если Не Файл.Существует() Тогда
        Попытка
            СоздатьКаталог(ПутьКП);
        Исключение
            ТекстСообщения = НСтр("ru='Не удается создать каталог ';uk='Не вдається створити каталог '")
                + ПутьКП + НСтр("ru=' по причине ';uk=' по причині '") + ОписаниеОшибки();
            СообщениеПользователю(ТекстСообщения);
            Возврат;
        КонецПопытки
    КонецЕсли;
        
    LocAppData = ПеременнаяОкружения("%LOCALAPPDATA%");

    Попытка
        
        Макетsignconsoleexe = ПолучитьМакет("signconsoleexe");
        Макетsignconsoleexe.Записать(appdata + "\cryptoplugin1c\signconsole.exe");
        
        Файл = Новый Файл(LocAppData + "\cryptoplugin\npcryptoplugin.dll");
        
        Если Файл.Существует() Тогда
            КопироватьФайл(LocAppData + "\cryptoplugin\npcryptoplugin.dll", appdata + "\cryptoplugin1c\npcryptoplugin.dll");
        Иначе
            Макетnpcryptoplugindll = ПолучитьМакет("npcryptoplugindll");
            Макетnpcryptoplugindll.Записать(appdata + "\cryptoplugin1c\npcryptoplugin.dll");    
        КонецЕсли;
        
    Исключение
        ТекстСообщения = НСтр("ru='Не удается записать файлы криптоплагина.';uk='Не вдається зберегти файли криптоплагина.'");
        СообщениеПользователю(ТекстСообщения + " " + ОписаниеОшибки())
    КонецПопытки

КонецПроцедуры

//используется для подписи криптоплагином, вызова cUrl и вызова системных переменных ОС
Функция ПолучитьWshShell()

    Попытка
        WshShell = Новый COMОбъект("WScript.Shell");
        Возврат WshShell;
    Исключение
        СисИнфо = Новый СистемнаяИнформация;
        //ТекстСообщения = НСтр("ru='Не удается определить объект WshShell ';uk='Неможливо визначити об'єкт WshShell '") + СисИнфо.ВерсияОС;
        //ТекстСообщения = НСтр("ru='Подпись документов PaperLess, а также работа в MacOS недоступны.';uk='Підпис документів PaperLess, а також робота в MacOS недоступні.'");
        ТекстСообщения = НСтр("ru='Подпись документов PaperLess недоступна.';uk='Підпис документів PaperLess недоступний.'");
        СообщениеПользователю(ТекстСообщения);
        СообщениеПользователю(ОписаниеОшибки());
        Возврат "";
    КонецПопытки;

КонецФункции

//Возвращает абсолютный WIN путь по переменной окружения
Функция ПеременнаяОкружения(ПеремОкр) Экспорт

    Попытка
        Если ЭтоВебКлиент Или Не ЭтоWindows Тогда
            врем = 0/0
        КонецЕсли;
        WshShell = ПолучитьWshShell();
        Возврат WshShell.ExpandEnvironmentStrings(ПеремОкр);
    Исключение
        Попытка
            //Linux
            Если ПеремОкр = "APPDATA" Тогда
                ИмяКаталога = "usr/share/applications";
                КаталогНаДиске = Новый Файл(ИмяКаталога);
                Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                    Возврат ИмяКаталога
                КонецЕсли
            ИначеЕсли ПеремОкр = "LOCALAPPDATA" Тогда
                ИмяКаталога = ".local/share/applications";
                КаталогНаДиске = Новый Файл(ИмяКаталога);
                Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                    Возврат ИмяКаталога
                КонецЕсли
            ИначеЕсли ПеремОкр = "TEMP" Тогда
                ИмяКаталога = "/tmp";//"/var/tmp"
                КаталогНаДиске = Новый Файл(ИмяКаталога);
                Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                    Возврат ИмяКаталога
                КонецЕсли
            КонецЕсли
        Исключение
            Попытка
                //MacOS
                Если ПеремОкр = "APPDATA" Тогда
                    ИмяКаталога = "~/Library/Application Support";
                    КаталогНаДиске = Новый Файл(ИмяКаталога);
                    Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                        Возврат ИмяКаталога
                    КонецЕсли
                ИначеЕсли ПеремОкр = "LOCALAPPDATA" Тогда
                    ИмяКаталога = "~/Library/Preferences/";
                    КаталогНаДиске = Новый Файл(ИмяКаталога);
                    Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                        Возврат ИмяКаталога
                    КонецЕсли
                ИначеЕсли ПеремОкр = "TEMP" Тогда
                    ИмяКаталога = "/tmp";//"$TMPDIR"
                    КаталогНаДиске = Новый Файл(ИмяКаталога);
                    Если КаталогНаДиске.Существует() И КаталогНаДиске.ЭтоКаталог() Тогда
                        Возврат ИмяКаталога
                    КонецЕсли
                КонецЕсли
            Исключение
                //Возврат ПутьКурл//ПутьКСлужебнымФайлам
                ТекстСообщения = НСтр("ru='Не удается определить переменную окружения';uk='Неможливо визначити перемінну середовища'") + ПеремОкр;
                СообщениеПользователю(ТекстСообщения);
                СообщениеПользователю(ОписаниеОшибки());
                Возврат "";
            КонецПопытки
        КонецПопытки
    КонецПопытки;

КонецФункции

//Работа с CURL
////////////////////////////////////////////////////////////////    

////////////////////////////////////////////////////////////////
//Подпись ЭЦП

Функция ПолучитьАлиасы() Экспорт
    
    ТаблицаПодписей.Очистить();
    
    Успешно = Ложь;
    
    Для Каждого СтрокаТЧКлючей Из ТаблицаКлючей Цикл
        Если СтрокаТЧКлючей.Пометка Тогда
            Успешно = ПолучитьСписокАлиасовКлючей(СтрокаТЧКлючей.АдресКлюча, СтрокаТЧКлючей.Пароль); 
        КонецЕсли;    
    КонецЦикла;    
    
    Возврат Успешно;
    
КонецФункции

Функция ПолучитьСписокАлиасовКлючей(ПутьККлючам, ПарольККонтейнеру)
    
    ПутьККлючамФорматированный = СтрЗаменить(ПутьККлючам, "\", "\\");
    
    ТаблицаСтрок =  Новый ТаблицаЗначений;
    ТаблицаСтрок.Колонки.Добавить("Текст");
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getVersion"",""sessionId"":""""}  "; 
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""openSession"",""params"":{""sessionTimeDuration"":900}}  ";
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""selectFileStorage"", ""params"":{""filePath"":""" + ПутьККлючамФорматированный + """,""password"":""" + ПарольККонтейнеру + """}, ""sessionId"":""""}  ";
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getKeysList"",""sessionId"":""""}  ";
    
    //Если ИспользоватьПрокси Тогда
    //    НоваяСтрока = ТаблицаСтрок.Добавить();
    //    НоваяСтрока.Текст = "{""function"":""setProxy"",""params"":{""server"":""" + АдресПроксиСервера + """,""port"":" + СокрЛП(ПортПроксиСервера) + ",""username"":""" + ПользовательПрокси + """,""password"":""" + ПарольПрокси + """}}  ";
    //КонецЕсли;
    
    ТаблицаОвтета = ОтправитьВПлагин(ТаблицаСтрок);    
    
    Попытка
        
        Если ТаблицаОвтета.Количество() = 0 Тогда
            Возврат Ложь;    
        КонецЕсли;
        
        Для Каждого СтрокаМассива Из ТаблицаОвтета[3].СтруктураОтвета.answer Цикл
            
            НоваяСтрокаПодписи = ТаблицаПодписей.Добавить();
            НоваяСтрокаПодписи.ИмяКлюча = СтрокаМассива.alias;
            НоваяСтрокаПодписи.Пароль = ПарольККонтейнеру;
            НоваяСтрокаПодписи.АдресКлюча = ПутьККлючам;
            
            Сертификат = ПолучитьСертификат(НоваяСтрокаПодписи.ИмяКлюча, НоваяСтрокаПодписи.АдресКлюча, НоваяСтрокаПодписи.Пароль, "");
            
            НоваяСтрокаПодписи.Информация = ПолучитьИнформациюОСертификате(Сертификат);
            
        КонецЦикла;
        
    Исключение
        СообщениеПользователю(ОписаниеОшибки(), Ложь);
        Возврат Ложь;    
    КонецПопытки;
    
    Возврат Истина;
    
КонецФункции

Функция ОтправитьВПлагин(ТаблицаСтрок)
    
    Если ИспользоватьПрокси Тогда
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""setProxy"",""params"":{""server"":""" + АдресПроксиСервера + """,""port"":" + СокрЛП(ПортПроксиСервера) + ",""username"":""" + ПользовательПрокси + """,""password"":""" + ПарольПрокси + """}}  ";
    КонецЕсли;
    
    ТаблицаОвтета = Новый ТаблицаЗначений;
    ТаблицаОвтета.Колонки.Добавить("СтруктураОтвета");

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;
    //AppData = ПеременнаяОкружения("%APPDATA%");
    
    Если Не ЗначениеЗаполнено(AppData) Тогда
        Возврат ТаблицаОвтета;
    КонецЕсли;
    
    РабочийКаталог = AppData + "\cryptoplugin1c";
    
    ИмяВходногоФайла = "input.dat";
    ИмяВыходногоФайла = "outuput.dat";   
    
    ФайлСоздан = СоздатьТекстовыйФайлUTF8ПоТаблице(ТаблицаСтрок, РабочийКаталог + "\" + ИмяВходногоФайла);
    
    Если НЕ ФайлСоздан Тогда
        Возврат ТаблицаОвтета;        
    КонецЕсли;
    
    WshShell = ПолучитьWshShell();
    WshShell.Run(""+РабочийКаталог+"\signconsole.exe "+РабочийКаталог+"\"+ИмяВходногоФайла+" "+РабочийКаталог+"\"+ИмяВыходногоФайла+"", 0, 1);
    
    ФайлОтвета = Новый ЧтениеТекста;
    ФайлОтвета.Открыть(РабочийКаталог + "\" + ИмяВыходногоФайла, "UTF-8");
    
    СтрокаОтвета = ФайлОтвета.ПрочитатьСтроку();
    
    ЕстьОшибки = Ложь;
    
    Пока СтрокаОтвета <> Неопределено Цикл
        
        НоваяСтрока = ТаблицаОвтета.Добавить();
        Попытка
            НоваяСтрока.СтруктураОтвета = jsonПрочитатьИнициализация(СтрокаОтвета);
        Исключение
            ЕстьОшибки = Истина;
        КонецПопытки;    
        
        Если НоваяСтрока.СтруктураОтвета.type = "error" Тогда
            СообщениеПользователю(НСтр("ru='Ошибка при работе с криптоплагином';uk='Помилка при роботі з кріптоплагіном'"), Ложь);
            СообщениеПользователю(НСтр("ru='Описание ошибки: ';uk='Опис помилки: '") + НоваяСтрока.СтруктураОтвета.answer.errorText, Ложь);
            СообщениеПользователю(НСтр("ru='Код ошибки: ';uk='Код помилки: '") + НоваяСтрока.СтруктураОтвета.answer.errorCode, Ложь);
            ЕстьОшибки = Истина;
        КонецЕсли;
        
        СтрокаОтвета = ФайлОтвета.ПрочитатьСтроку();
        
    КонецЦикла;
    
    ФайлОтвета.Закрыть();
    
    Если ЕстьОшибки Тогда
        ТаблицаОвтета.Очистить();    
    КонецЕсли;
    
    Возврат ТаблицаОвтета;
    
КонецФункции

Функция СоздатьТекстовыйФайлUTF8ПоТаблице(ТаблицаСтрок, ПолныйАдресКФайлу)
    
    Попытка
        УдалитьФайлы(ПолныйАдресКФайлу);
    Исключение
    КонецПопытки;    
    
    Попытка
        
        ТекстовыйФайл = Новый ЗаписьТекста(ПолныйАдресКФайлу, КодировкаТекста.ANSI);
        ТекстовыйФайл.Закрыть();
        ТекстовыйФайл = Новый ЗаписьТекста(ПолныйАдресКФайлу,,, Истина, Символы.ПС);
        
        Для Каждого СтрокаТЗ Из ТаблицаСтрок Цикл
            ТекстовыйФайл.ЗаписатьСтроку(СтрокаТЗ.Текст);
            Если РежимОтладки Тогда
                СообщениеПользователю(СкрытьПароль(СтрокаТЗ.Текст), Ложь)
            КонецЕсли
        КонецЦикла;
        
        ТекстовыйФайл.Закрыть();
        
        Возврат Истина;
        
    Исключение
        
        СообщениеПользователю(ОписаниеОшибки());
        Возврат Ложь;
        
    КонецПопытки;    
    
КонецФункции

Процедура ПодписатьДокументы(ИмяРаздела) Экспорт
    
    Если ИмяРаздела = "ТекстПодписьПлатежей" ИЛИ ИмяРаздела = "ТекстАкты" ИЛИ ИмяРаздела = "ТекстЗаказы" ИЛИ ИмяРаздела = "ТекстСчетаНаОплату" ИЛИ ИмяРаздела = "ТекстРасходные" ИЛИ ИмяРаздела = "ТекстСписокНалоговыхДокументов" ИЛИ ИмяРаздела = "ТекстPDFДокументы" Тогда
        ТипПодписи = "CMSSign"
    Иначе
        ТипПодписи = "CMSSignHash";
    КонецЕсли;    
    
    TSPServer = "http://acsk.privatbank.ua/services/tsp/";//Ок cp, Error p24
    //TSPServer = "";
    ПодписьНесколькимиКлючами = Ложь;
    
    ЕстьОтмеченные = Ложь;
    
    Для Каждого СтрокаТЧПодписей Из ТаблицаПодписей Цикл    
        
        Если НЕ СтрокаТЧПодписей.Пометка Тогда
            Продолжить;
        КонецЕсли;
        
        ЕстьОтмеченные = Истина;
        
        ТаблицаСтрок =  Новый ТаблицаЗначений;
        ТаблицаСтрок.Колонки.Добавить("Текст");
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""getVersion"",""sessionId"":""""}  "; 
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""openSession"",""params"":{""sessionTimeDuration"":900}}  ";
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""selectFileStorage"", ""params"":{""filePath"":""" +  СтрЗаменить(СтрокаТЧПодписей.АдресКлюча, "\", "\\") + """,""password"":""" + СтрокаТЧПодписей.Пароль + """}, ""sessionId"":""""}  ";
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""getKeysList"",""sessionId"":""""}  ";
        
        //Если ИспользоватьПрокси Тогда
        //    НоваяСтрока = ТаблицаСтрок.Добавить();
        //    НоваяСтрока.Текст = "{""function"":""setProxy"",""params"":{""server"":""" + АдресПроксиСервера + """,""port"":" + СокрЛП(ПортПроксиСервера) + ",""username"":""" + ПользовательПрокси + """,""password"":""" + ПарольПрокси + """}}  ";
        //КонецЕсли;
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""selectKey"", ""params"":{""alias"":""" + СтрокаТЧПодписей.ИмяКлюча + """,""password"":""" + "" + """}, ""sessionId"":""""}  "; 
        
        Для Каждого СтрокаХеша Из ДокументыДляПодписи Цикл
            
            Если ТипПодписи = "signData" Тогда 
                
                НоваяСтрока = ТаблицаСтрок.Добавить();
                НоваяСтрока.Текст = "{""function"":""signData"",""params"":{""hashParams"":"""",""data"":""" + СтрокаХеша.data + """}, ""sessionId"":""""}  ";  
                
            ИначеЕсли ТипПодписи = "CMSSign" Тогда 
                
                НоваяСтрока = ТаблицаСтрок.Добавить();
                //НоваяСтрока.Текст = "{""function"":""CMSSign"",""params"":{""data"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":"""+TSPServer+""",""includeData"":"+IncludeData+",""includeCertificate"":"+IncludeCertificate+",""TSPhashParams"":"""",""TSPcertReq"":false,""TSPreqPolicy"":""""},""sessionId"":""""}";  
                
                Если ИмяРаздела = "ТекстАкты" ИЛИ ИмяРаздела = "ТекстЗаказы" ИЛИ ИмяРаздела = "ТекстСчетаНаОплату" ИЛИ ИмяРаздела = "ТекстРасходные" ИЛИ ИмяРаздела = "ТекстСписокНалоговыхДокументов" ИЛИ ИмяРаздела = "ТекстPDFДокументы" Тогда
                //Если IncludeCertificate Тогда
                        Если ИмяРаздела = "ТекстPDFДокументы" Тогда 
                            НоваяСтрока.Текст = "{""function"":""CMSSign"", ""params"":{""data"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":""" + TSPServer + """,""includeData"":false,""includeCertificate"":true,""TSPhashParams"":"""",""TSPcertReq"":true,""TSPreqPolicy"":"""",""signingTime"":false},""sessionId"":""""}   ";
                        Иначе
                            НоваяСтрока.Текст = "{""function"":""CMSSign"", ""params"":{""data"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":""" + TSPServer + """,""includeData"":true,""includeCertificate"":true,""TSPhashParams"":"""",""TSPcertReq"":true,""TSPreqPolicy"":"""",""signingTime"":false},""sessionId"":""""}   ";
                        КонецЕсли;
                    //НоваяСтрока.Текст = "{""function"":""CMSSign"", ""params"":{""data"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":"""",""includeData"":true,""includeCertificate"":true,""TSPhashParams"":"""",""TSPcertReq"":false,""TSPreqPolicy"":"""",""signingTime"":true},""sessionId"":""""}   ";
                Иначе
                    НоваяСтрока.Текст = "{""function"":""CMSSign"", ""params"":{""data"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":""" + TSPServer + """,""TSPhashParams"":"""",""TSPreqPolicy"":"""",""signingTime"":false},""sessionId"":""""}   ";
                КонецЕсли;
                
            ИначеЕсли ТипПодписи = "CMSSignHash" Тогда 
                
                НоваяСтрока = ТаблицаСтрок.Добавить();
                НоваяСтрока.Текст = "{""function"":""CMSSignHash"",""params"":{""hashData"":""" + СтрокаХеша.data + """,""hashParams"":"""",""certificate"":"""",""timeStamp"":""http://acsk.privatbank.ua/services/tsp/"",""includeCertificate"":true,""TSPhashParams"":"""",""TSPcertReq"":true,""TSPreqPolicy"":"""",""signingTime"":false},""sessionId"":""""}  ";
                
            КонецЕсли;    
            
        КонецЦикла; 
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""closeSession"", ""sessionId"":""""}  ";  
        
        ТаблицаОвтета = ОтправитьВПлагин(ТаблицаСтрок);
        
        Если ТаблицаОвтета.Количество() = 0 Тогда
            Возврат;    
        КонецЕсли;
        
        НомерСтрокиТЧПодписи = 0;
        
        Для Каждого СтрокаПодписей Из ТаблицаОвтета Цикл
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.Свойство("answer") ИЛИ ТипЗнч(СтрокаПодписей.СтруктураОтвета.answer) <> Тип("Структура") Тогда 
                Продолжить;
            КонецЕсли;    
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.answer.Свойство("sign") Тогда
                Продолжить;
            КонецЕсли;    
            
            Если ЗначениеЗаполнено(ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign) Тогда
                
                Если Найти(ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign, """") = 0 Тогда
                    ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign = """" + ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign    + """";
                    ПодписьНесколькимиКлючами = Истина;
                КонецЕсли;    
                
                ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign = ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign + ",""" + СтрокаПодписей.СтруктураОтвета.answer.sign + """";
                
            Иначе    
                ДокументыДляПодписи[НомерСтрокиТЧПодписи].sign = СтрокаПодписей.СтруктураОтвета.answer.sign;
            КонецЕсли;    
            
            НомерСтрокиТЧПодписи = НомерСтрокиТЧПодписи + 1;
            
        КонецЦикла;
        
    КонецЦикла;
    
    Если НЕ ЕстьОтмеченные Тогда
        
        ТекстСообщения = НСтр("ru='Не выбраны ключи';uk='Не вибрані ключі'");
        СообщениеПользователю(ТекстСообщения, Ложь);

        Возврат;    
    КонецЕсли;
    
    Если ПодписьНесколькимиКлючами Тогда
        
        ОбъединитьПодписи();
        
    КонецЕсли;
    
    Если ИмяРаздела = "ТекстВыгрузкаPDF" Тогда
        ОтправитьПодписанныеPDF(Неопределено);
    ИначеЕсли ИмяРаздела = "ТекстПодписьПлатежей" Тогда
        ОтправитьПодписиПлатежейНаСервер(Неопределено);        
    ИначеЕсли ИмяРаздела = "ТекстАкты" ИЛИ ИмяРаздела = "ТекстЗаказы" ИЛИ ИмяРаздела = "ТекстСчетаНаОплату" ИЛИ ИмяРаздела = "ТекстРасходные" ИЛИ ИмяРаздела = "ТекстСписокНалоговыхДокументов" ИЛИ ИмяРаздела = "ТекстPDFДокументы" Тогда
        ОтправитьПодписанныеФинДокиНаСервер(Неопределено, ИмяРаздела = "ТекстPDFДокументы");
    КонецЕсли;    
    
КонецПроцедуры

Процедура ОбъединитьПодписи()
    
    Для Каждого СтрокаТЧ Из ДокументыДляПодписи Цикл
        
        ТаблицаСтрок =  Новый ТаблицаЗначений;
        ТаблицаСтрок.Колонки.Добавить("Текст");
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""getVersion"",""sessionId"":""""}  "; 
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""openSession"",""params"":{""sessionTimeDuration"":900}}  ";
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""CMSJoin"",""params"":{""CMSArray"":[" + СтрокаТЧ.sign + "]},""sessionId"":""""}  ";
        
        НоваяСтрока = ТаблицаСтрок.Добавить();
        НоваяСтрока.Текст = "{""function"":""closeSession"", ""sessionId"":""""}  ";
        
        ТаблицаОвтета = ОтправитьВПлагин(ТаблицаСтрок);
        
        Если ТаблицаОвтета.Количество() = 0 Тогда
            Возврат;
        КонецЕсли;
        
        Попытка
            СтрокаТЧ.sign = ТаблицаОвтета[2].СтруктураОтвета.answer.CMS;
        Исключение
            Если РежимОтладки Тогда
                СообщениеПользователю(ОписаниеОшибки(), Ложь);    
            КонецЕсли;    
        КонецПопытки;    
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьСертификат(АлиасКлюча, ПутьККлючам, ПарольККонтейнеру, ПарольККлючу)
    
    ПутьККлючамФорматированный = СтрЗаменить(ПутьККлючам, "\", "\\");
    
    ТаблицаСтрок =  Новый ТаблицаЗначений;
    ТаблицаСтрок.Колонки.Добавить("Текст");
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getVersion"",""sessionId"":""""}  "; 
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""openSession"",""params"":{""sessionTimeDuration"":900}}  "; 
    
    //Если ИспользоватьПрокси Тогда
        //НоваяСтрока = ТаблицаСтрок.Добавить();
        //НоваяСтрока.Текст = "{""function"":""setProxy"",""params"":{""server"":""" + АдресПроксиСервера + """,""port"":" + СокрЛП(ПортПроксиСервера) + ",""username"":""" + ПользовательПрокси + """,""password"":""" + ПарольПрокси + """}}  ";
    //КонецЕсли;
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""selectFileStorage"", ""params"":{""filePath"":"""+ПутьККлючамФорматированный+""",""password"":"""+ПарольККонтейнеру+"""}, ""sessionId"":""""}  ";
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""selectKey"", ""params"":{""alias"":"""+АлиасКлюча+""",""password"":"""+ПарольККлючу+"""}, ""sessionId"":""""}  ";
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getCertificate"",""params"":{""keyUsage"":[]},""sessionId"":""""}  ";
    
    ТаблицаОвтета = ОтправитьВПлагин(ТаблицаСтрок);    
    
    Попытка
        
        Если ТаблицаОвтета.Количество() = 0 Тогда
            Возврат "";    
        КонецЕсли;
        
        Для Каждого СтрокаПодписей Из ТаблицаОвтета Цикл
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.Свойство("answer") ИЛИ ТипЗнч(СтрокаПодписей.СтруктураОтвета.answer) <> Тип("Структура") Тогда 
                Продолжить;
            КонецЕсли;    
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.answer.Свойство("certificate") Тогда
                Продолжить;
            КонецЕсли;    
            
            Сертификат = СтрокаПодписей.СтруктураОтвета.answer.certificate;
            
        КонецЦикла;

    Исключение
        СообщениеПользователю(ОписаниеОшибки(), Ложь)
    КонецПопытки;    
    
    Возврат Сертификат;
    
КонецФункции

Функция ПолучитьИнформациюОСертификате(Сертификат)
    
    ТаблицаСтрок =  Новый ТаблицаЗначений;
    ТаблицаСтрок.Колонки.Добавить("Текст");
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getVersion"",""sessionId"":""""}  ";
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""openSession"",""params"":{""sessionTimeDuration"":900}}  "; 
    
    НоваяСтрока = ТаблицаСтрок.Добавить();
    НоваяСтрока.Текст = "{""function"":""getCertificateInfo"", ""params"":{""certificate"":""" + Сертификат + """}, ""sessionId"":""""}  ";
    
    ТаблицаОвтета = ОтправитьВПлагин(ТаблицаСтрок);    
    
    Попытка
        
        Если ТаблицаОвтета.Количество() = 0 Тогда
            Возврат "";    
        КонецЕсли;
        
        Для Каждого СтрокаПодписей Из ТаблицаОвтета Цикл
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.Свойство("answer") ИЛИ ТипЗнч(СтрокаПодписей.СтруктураОтвета.answer) <> Тип("Структура") Тогда 
                Продолжить;
            КонецЕсли;    
            
            Если НЕ СтрокаПодписей.СтруктураОтвета.answer.Свойство("subject") Тогда
                Продолжить;
            КонецЕсли;    
            
            ФИО = СтрокаПодписей.СтруктураОтвета.answer.subject.CN;
            
        КонецЦикла;

    Исключение
        СообщениеПользователю(ОписаниеОшибки(), Ложь)
    КонецПопытки;
    
    Возврат ФИО;        
    
КонецФункции

Функция ПолучитьХэшДляПодписиДО(idДок)
    
    РесурсНаСервере = "/journal/print_base64/" + idДок + "?PUREXML=true&okpo=" + КодПоЕДРПОУ;
    ТелоЗапроса = "";    
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    //Если Не ЗначениеЗаполнено(СессияДок) Тогда
    //    СессияДок = АвторизацияДок();
    //КонецЕсли;
    
    стРезультат = УстановитьСоединение(АдресДокументооборота, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, "", СессияДок);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Сессия = Неопределено;
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на параметров подписи документа';uk='Помилка відправки запиту на параметрів підпису документа'");
        СообщениеПользователю(ТекстСообщения);
        Возврат "";
    Иначе
        Статус = стРезультат.Статус;
        СессияДок = стРезультат.Cookie;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
        
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на параметров подписи документа';uk='Помилка відправки запиту на параметрів підпису документа'");
        СообщениеПользователю(ТекстСообщения);
        Возврат "";
    КонецЕсли;
    
    ХэшДокумента = спцПрочитатьУзел("DOCUMENT", ТелоОтвета); 
        
    Возврат ХэшДокумента;
    
КонецФункции

Функция ПодписатьФинДокументы(ТипДок) Экспорт
    
    Если НЕ ЕстьОтмеченные Тогда
        ПодготовленныеПлатежи.Очистить();    
    КонецЕсли;
    
    Для Каждого СтрокаТЧ Из ФинансовыеДокументы Цикл
        
        Если НЕ СтрокаТЧ.Флажок    Тогда
            Продолжить;    
        КонецЕсли;
        
        СтрокаТЧ.Флажок = Ложь;
        
        ЕстьОтмеченные = Истина;
        
        ПодписатьФинДок(СтрокаТЧ, ТипДок);
        
        Возврат Истина;
        
    КонецЦикла;
    
    ЕстьОтмеченные = Ложь;

    Возврат Ложь;
    
КонецФункции

Функция ПодписатьНалоговыеДокументы(ТипДок) Экспорт
    
    Если НЕ ЕстьОтмеченные Тогда
        ПодготовленныеПлатежи.Очистить();    
    КонецЕсли;
    
    Для Каждого СтрокаТЧ Из СписокДокументов Цикл
        
        Если НЕ СтрокаТЧ.Флажок    Тогда
            Продолжить;    
        КонецЕсли;
        
        СтрокаТЧ.Флажок = Ложь;
        
        ЕстьОтмеченные = Истина;
        
        ПодписатьФинДок(СтрокаТЧ, ТипДок);
        
        Возврат Истина;
        
    КонецЦикла;
    
    ЕстьОтмеченные = Ложь;

    Возврат Ложь;
    
КонецФункции

Процедура ПодписатьФинДок(СтрокаТЧ, ТипДок)
    
    Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусДокумента) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ИдДокумента) Тогда

        Если ТипДок = "НН" Тогда
            ПроверитьСостояниеРегистрацииНалоговыхПоСтроке(СтрокаТЧ, ТипДок);
        Иначе    
            ПроверитьСтатусДокументаПоСтроке(СтрокаТЧ, ТипДок);
        КонецЕсли;    
        
    КонецЕсли;
    
    Если СтрокаТЧ.СтатусДокумента <> НСтр("ru = 'В работе';uk = 'В роботі'") Тогда
        ТекстСообщения = НСтр("ru = 'Документ в строке №%НомерСтроки% имеет статус %СтатусДокумента%. Документ с таким статусом не подписывается. Документ пропущен.'; uk = 'Документ в рядку №%НомерСтроки% має статус %СтатусДокумента%. Документ з таким статусом не підписується. Документ пропущений.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусДокумента%", СтрокаТЧ.СтатусДокумента);
        СообщениеПользователю(ТекстСообщения);
        Возврат;    
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ИдДокумента) Тогда
        ТекстСообщения = НСтр("ru = 'По документу отмеченному в строке №%НомерСтроки% не удалось получить внутренний код. Документ пропущен.'; uk = 'По документу отмеченному в строке №%НомерСтроки% не удалось получить внутренний код. Документ пропущено.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
        СообщениеПользователю(ТекстСообщения);
        Возврат;    
    КонецЕсли;
    
    ХэшДокумента = ПолучитьХэшДляПодписиДО(СтрокаТЧ.ИдДокумента);
    
    Если ЗначениеЗаполнено(ХэшДокумента) Тогда
        НоваяСтрока = ПодготовленныеПлатежи.Добавить();    //используем таблицу подготовленных платежей для отправки подписией фин. док.
        НоваяСтрока.Флажок = Истина;
        НоваяСтрока.РеференсПлатежа = СтрокаТЧ.ИдДокумента;
        НоваяСтрока.HASH = ХэшДокумента;
    КонецЕсли;
    
КонецПроцедуры

Процедура ПодписатьPDFДок(СтрокаТЧ)
    
    ХэшДокумента = ПолучитьХэшДляПодписиДО(СтрокаТЧ.ИдДокумента);
    
    Если ЗначениеЗаполнено(ХэшДокумента) Тогда
        НоваяСтрока = ПодготовленныеПлатежи.Добавить();    //используем таблицу подготовленных платежей для отправки подписией фин. док.
        НоваяСтрока.Флажок = Истина;
        НоваяСтрока.РеференсПлатежа = СтрокаТЧ.ИдДокумента;
        НоваяСтрока.HASH = ХэшДокумента;
    КонецЕсли;
    
КонецПроцедуры
//Подпись ЭЦП
////////////////////////////////////////////////////////////////    

//не используется
Функция ПрочитатьНовостиBO() Экспорт
    
    ТабДок = Новый ТабличныйДокумент;
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/json; charset=utf-8";

    Попытка
        
        стРезультат = УстановитьСоединение("bo.pb.ua", Прокси, "/newslist/news/data_utf8.json", ОпределитьUserAgentHeaders(), "","","",Заголовки,,,Ложь);        
        МассивДанных = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
        
        Макет = ПолучитьМакет("НовостиБО");
    
        Для Каждого СтрокаМассива Из МассивДанных Цикл 
            
            ТабДокумент = Новый ТабличныйДокумент;
            
            ОбластьШапка = Макет.ПолучитьОбласть("ЗаголовокКонфигурации");
            
            ОбластьШапка.Параметры.ЗаголовокКонфигурации1 = СтрокаМассива.title_ukr;
            ОбластьШапка.Параметры.URL = СтрокаМассива.url;
            
            
            ТабДокумент.Вывести(ОбластьШапка);
    
            Для Каждого СтрокаНовостей Из СтрокаМассива.element Цикл
                
                ОбластьНовость = Макет.ПолучитьОбласть("Новость");

                ОбластьНовость.Параметры.ЗаголовокНовости1 = СтрокаНовостей.title_ukr; 
                ОбластьНовость.Параметры.Новость1 = СтрокаНовостей.shortbody_ukr;
                ОбластьНовость.Параметры.URL = СтрокаНовостей.comments;
                ТабДокумент.Вывести(ОбластьНовость);
                
            КонецЦикла;
            
            ТабДок.Присоединить(ТабДокумент);
            
        КонецЦикла;
        
    Исключение
        СообщениеПользователю(ОписаниеОшибки())
    КонецПопытки;
    
    Возврат ТабДок;
    
КонецФункции

Функция ПолучитьКодСХПоИмениОтчета(ИмяФайлаОтчета)
    
    Если Найти(ИмяФайлаОтчета, "Розшифровка звіту про фін.результати") > 0 Тогда
        Возврат "1895"; 
    ИначеЕсли Найти(ИмяФайлаОтчета, "Розшифровка рядків балансу") > 0 Тогда
        Возврат "1589";
    Иначе
        Возврат "2988";
    КонецЕсли;
    
КонецФункции

Процедура ОтправитьPDFОтчет(ИмяФайлаОтчета, ТекстОтчета) Экспорт

    Если Не УспешноПройденыАвторизационныеЭтапыВ3() Тогда//ТокеныКомпаний//ИспользоватьТокены
        Возврат
    КонецЕсли;

    ДействиеАналитики = "РасшифровкаОтправкаОтчета";

    //Файл = Новый Файл(КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + ИмяФайлаОтчета);
    //Если НЕ Файл.Существует() Тогда
    //    ТекстСообщения = НСтр("ru='Внимание! Файл не найден';uk='Увага! Файл не знайдено'") + ". "
    //        + КаталогВыгрузки + ?(Прав(КаталогВыгрузки, 1) = "\", "", "\") + ИмяФайлаОтчета + НСтр("ru=' не выгружен';uk=' не вивантажений'");
    //    СообщениеПользователю(ТекстСообщения);                    
    //    Возврат;
    //КонецЕсли;

    //получим адрес для отправки
    ИнтернетАдрес = АдресДокументооборота;
    
    РесурсНаСервере = "/api/proxy/edoc/loader/upload-pdf-b64";

    СтрокаЗапроса = "&okpo=" + КодПоЕДРПОУ + "&documentDate=" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "&recipientOkpo=" + КодПоЕДРПОУ + "&uploadedFileB64=" + EncodeURL(СтрЗаменить(СтрЗаменить(Base64Строка(ТекстОтчета), Символы.ВК, ""),Символы.ПС , "")) + "&uploadedFileName=" + ИмяФайлаОтчета + "&cxpTypeToAutocopy=" + ПолучитьКодСХПоИмениОтчета(ИмяФайлаОтчета);

    ТелоЗапросаКурл = СтрокаЗапроса;

    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    Заголовки = Новый ТаблицаЗначений;
    Заголовки.Колонки.Добавить("Заголовок");
    Заголовки.Колонки.Добавить("ЗначениеЗаголовка");
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Type";
    НоваяСтрока.ЗначениеЗаголовка = "application/x-www-form-urlencoded";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "Content-Lenght";
    НоваяСтрока.ЗначениеЗаголовка = XMLСтрока(СтрДлина(XMLСтрока(СтрокаЗапроса)));
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "X-Requested-With";
    НоваяСтрока.ЗначениеЗаголовка = "XMLHttpRequest";
    
    НоваяСтрока = Заголовки.Добавить();
    НоваяСтрока.Заголовок = "X-File-Name";
    НоваяСтрока.ЗначениеЗаголовка = ИмяФайлаОтчета;

    Post = Истина;

    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса,
        "", СессияДок, Заголовки,,, Post,,,, ТелоЗапросаКурл);
    
    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        ЕстьОшибки = Истина;
        Возврат;
        
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета;
    КонецЕсли;
    
    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда
        
        ТекстСообщения = НСтр("ru = 'Ошибка при отправке отчета. '; uk='Помилка при відправці звіту. '");
        СообщениеПользователю(ТекстСообщения);
        ЕстьОшибки = Истина;
        
        Возврат;

    ИначеЕсли Найти(ТелоОтвета, "SUCCESS") > 0 Тогда //все прошло успешно
        ТекстСообщения = НСтр("ru = 'Отчет отправлен.'; uk='Звіт відправлений.'");
        СообщениеПользователю(ТекстСообщения);

    КонецЕсли;    

    Если НЕ ЕстьОшибки Тогда
        ОбновитьСтатистикуРаботы(КатегорияПоСобытию(), ДействиеАналитики);        
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаполнитьПоляПоиска() Экспорт
    
    Если ПоискПлатежныхДокументовПоУказаннымПолям И ПоляДляПоискаПлатежей.Количество() = 0 Тогда    
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Дата платежа';uk='Дата платежу'"), "ДатаПлатежа", Истина, "Дата");
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Сумма платежа';uk='Сума платежу'"), "СуммаПлатежа", Истина, "СуммаДокумента");
        Если ЗначениеЗаполнено(Организация) Тогда
            ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Организация';uk='Організація'"), "Организация", Ложь, "Организация");
        КонецЕсли;
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Номер счета организации';uk='Номер рахунку організації'"), "НомерСчетаОрганизации",Истина);
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Контрагент';uk='Контрагент'"), "Контрагент", Ложь, "Контрагент");
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Номер счета контрагента';uk='Номер рахунку контрагента'"), "НомерСчетаКонтрагента", Истина);
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Назначение платежа';uk='Призначення платежу'"), "НазначениеПлатежа", Ложь, "НазначениеПлатежа");
        ДобавитьСтрВТабПолейДляПоискаПлатежей(НСтр("ru='Входящий номер';uk='Вхідний номер'"), "ВходящийНомер", Ложь, "ВходящийНомер");     
    Иначе
        ПоляДляПоискаПлатежей.Очистить();
    КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСтрВТабПолейДляПоискаПлатежей(ИмяПоля, ИмяПараметраВЗапросе, Использовать, ИмяПоляВКонфигурации = "") 
    
    НоваяСтрока = ПоляДляПоискаПлатежей.Добавить();
    НоваяСтрока.Использовать = Использовать;
    НоваяСтрока.ИмяПоля = ИмяПоля;
    НоваяСтрока.ИмяПараметраВЗапросе = ИмяПараметраВЗапросе;
    НоваяСтрока.ИмяПоляВКонфигурации = ИмяПоляВКонфигурации;
    
КонецПроцедуры

Функция ПолучитьКодКомпании(Компания)
    
    Попытка
        код = Компания.civil_passport.serial_n + Компания.civil_passport.serial_t;
        Если ЗначениеЗаполнено(код) Тогда
            Возврат код;
        КонецЕсли;
    Исключение
    КонецПопытки;
    
    Попытка
        код = Компания.crf;
        Если ЗначениеЗаполнено(код) Тогда
            Возврат код;
        КонецЕсли;
    Исключение
    КонецПопытки;
    
    Возврат ""; // это группа ЧП 
        
КонецФункции

Функция Техническая_ЗаполнитьТокенАККомпании(ТокенАк, ИдАк, КодКомпании) 
    
    НоваяСтрока = ТокеныКомпаний.Добавить();
    НоваяСтрока.ИдАвтоклиента = ИдАк;
    НоваяСтрока.ТокенАвтоклиента = ТокенАк;
    НоваяСтрока.КодКомпании = КодКомпании;
    
КонецФункции

Процедура ВыгрузитьВедомостьВФайл() Экспорт
    
    Если ПустаяСтрока(КаталогВыгрузки) Тогда 
        ТекстСообщения = НСтр("ru='Не задан каталог для выгрузки';uk='Не заданий каталог для вивантаження'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат;
    КонецЕсли;
    
    ОтправитьВедомости(Истина); //Истина - признак выгрузки в файл
    
    ТекстСообщения = НСтр("ru = 'Сохранение ведомостей в файл завершено. Загрузите его в новый Приват24 для бизнеса-Каталог услуг-Зарплатные и другие выплаты';uk='Збереження відомостей в файл завершено. Завантажте його у новий Приват24 для бизнесу-Каталог послуг-Зарплатні та інші виплати'");
    СообщениеПользователю(ТекстСообщения, Ложь);
        
КонецПроцедуры

Функция ДобавитьСотрудникаВГруппуСписком(тпПолучателиЗП, ТекущийЗПРеференс) Экспорт

    стРезультат = Новый Структура;

    Если НЕ УспешноПройденыАвторизационныеЭтапыВ3() Тогда 
        Возврат стРезультат
    КонецЕсли;

    УспешноЛокально = Ложь;
    ТекстСообщения = "";
    ТекстСообщенияГруппы = "";

    Для каждого СтрокаТП Из тпПолучателиЗП Цикл
        ФлагПропустить = Ложь;
        НомерКартыСотрЗП = СокрЛП(СтрокаТП.КолонкаНомерКарты);
        tabn = СокрЛП(СтрокаТП.КолонкаТабельныйНомер);
        ИннПолучателя = СокрЛП(СтрокаТП.КолонкаИНН);
        Наименование = СокрЛП(СтрокаТП.КолонкаСотрудник);
        СтруктураФИО = РазложитьФИО(Наименование);
        Фамилия = СтруктураФИО.Фамилия;
        Имя = СтруктураФИО.Имя;
        Отчество = СтруктураФИО.Отчество;
        Если Не ЗначениеЗаполнено(НомерКартыСотрЗП) Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Не заполнен номер карты.';uk='Не заповнений номер картки.'");
            ФлагПропустить = Истина
        КонецЕсли;
        Если СтрДлина(НомерКартыСотрЗП) <> 16 И ЗначениеЗаполнено(НомерКартыСотрЗП) Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Введен неправильный номер карты.';uk='Введений невірний номер картки.'");
            ФлагПропустить = Истина
        КонецЕсли;
        Если Не ЗначениеЗаполнено(tabn) Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Не заполнен табельный номер.';uk='Не заповнений табельний номер.'");
            ФлагПропустить = Истина
        КонецЕсли;
        Если Не ЗначениеЗаполнено(ИннПолучателя) Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Не заполнен ИНН.';uk='Не заповнений ІПН.'");
            ФлагПропустить = Истина
        КонецЕсли;
        Если Не ЗначениеЗаполнено(Наименование) Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Не заполнено ФИО.';uk='Не заповнено ПІБ.'");
            ФлагПропустить = Истина
        КонецЕсли;
        Если ФлагПропустить Тогда
            ТекстСообщенияГруппы = ?(ЗначениеЗаполнено(ТекстСообщенияГруппы), ТекстСообщенияГруппы + Символы.ПС, "")
                + НСтр("ru='Сотрудник ';uk='Співробітник '") + Наименование + НСтр("ru=' пропущен.';uk=' пропущений.'");
            Продолжить
        КонецЕсли;
        СтруктураОтвета = ДобавитьСотрудникаВГруппуПоОдному(НомерКартыСотрЗП, ТекущийЗПРеференс, tabn, ИннПолучателя, Фамилия, Имя, Отчество);
        Успешно = СтруктураОтвета.Успешно;
        //РезультатСоединения = СтруктураОтвета.РезультатСоединения;
        Если Успешно Тогда
            РезультатСоединения = СтруктураОтвета.РезультатСоединения;
            Если РезультатСоединения.Статус = 200 Тогда
                УспешноЛокально = Истина
            КонецЕсли
        КонецЕсли;
        Попытка
            ТекстСообщенияПО1Сотруднику = СтруктураОтвета.ТекстСообщения
        Исключение
            ТекстСообщенияПО1Сотруднику = ""
        КонецПопытки;
        ТекстСообщения = ?(ЗначениеЗаполнено(ТекстСообщения), ТекстСообщения + Символы.ПС, "") + ТекстСообщенияПО1Сотруднику
    КонецЦикла;

    ТекстСообщения = ?(ЗначениеЗаполнено(ТекстСообщения), ТекстСообщения + Символы.ПС, "") + ТекстСообщенияГруппы;
    стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
    стРезультат.Вставить("Успешно", УспешноЛокально);
    Возврат стРезультат

КонецФункции

Функция РазложитьФИО(Наименование) Экспорт

    ПозицияРазделителя = Найти(Наименование, " ");
    Если ПозицияРазделителя > 0 Тогда
        Фамилия = СокрЛП(Лев(Наименование, ПозицияРазделителя - 1));
        ИО = СокрЛП(Сред(Наименование, ПозицияРазделителя + 1));
        ПозицияРазделителя = Найти(ИО, " ");
        Если ПозицияРазделителя > 0 Тогда
            Имя = СокрЛП(Лев(ИО, ПозицияРазделителя - 1));
            Отчество = СокрЛП(Сред(ИО, ПозицияРазделителя + 1))
        Иначе
            Имя = СокрЛП(ИО);
            Отчество = ""
        КонецЕсли
    Иначе
        Фамилия = СокрЛП(Наименование);
        Имя = "";
        Отчество = ""
    КонецЕсли;

    СтруктураФИО = Новый Структура;
    СтруктураФИО.Вставить("Фамилия", Фамилия);
    СтруктураФИО.Вставить("Имя", Имя);
    СтруктураФИО.Вставить("Отчество", Отчество);
    Возврат СтруктураФИО

КонецФункции

Функция ДобавитьСотрудникаВГруппуПоОдному(НомерКартыСотрЗП, ТекущийЗПРеференс, tabn, ИннПолучателя, Фамилия, Имя, Отчество) Экспорт

    вДействиеАналитики = ДействиеАналитики;
    ДействиеАналитики = "ДобавитьСотрудникаВГруппу";

    стРезультат = Новый Структура;

    Если Найти(НомерКартыСотрЗП, "*") > 0 Тогда
        ТекстСообщения = НСтр("ru='Номер карты содержит маску. Добавление сотрудников в зарплатный проект не выполнено.';uk='Номер картки містить маску. Додавання співробітників до зарплатного проекту не виконано.'");
        стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
        стРезультат.Вставить("Успешно", Ложь);
        ДействиеАналитики = вДействиеАналитики;
        Возврат стРезультат
    КонецЕсли;

    тФамилия = ЗаменитьСССоСкобкамиПробеломТочкой(Фамилия);
    тИмя = ЗаменитьСССоСкобкамиПробеломТочкой(Имя);
    тОтчество = ЗаменитьСССоСкобкамиПробеломТочкой(Отчество);
    tabnom = ЗаменитьСССоСкобкамиПробеломТочкойАрифметика(tabn);
    Если tabnom <> tabn Тогда
        ТекстСообщения = НСтр("ru='В табельном номере есть спецсимволы. Они удалены для отправки.';uk='В табельному номері є спецсимволи. Вони видалені для відправки.'");
        СообщениеПользователю(ТекстСообщения, Ложь)
    КонецЕсли;

    СтрокаЗапроса = "{""pan"": """ + НомерКартыСотрЗП + """, ""group"": """ + ТекущийЗПРеференс + """, ""tabn"": """ + tabnom//номер карты/счета
        + """, ""inn"": """ + ИннПолучателя + """, ""fio"":[""" + тФамилия + """, """ + тИмя + """,""" + тОтчество + """]}";//необязательные

    ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(СтрокаЗапроса);
    ТелоЗапросаКурл = """" + ТелоЗапросаКурл + """";
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ПС, "");
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ВК, "");

    
    РесурсНаСервере = "/api/pay/mp/update-receiver";
    POST = Истина;
    УдалитьBOM = Истина;
    UserAgentHeaders = ОпределитьUserAgentHeaders();

    РезультатСоединения = УстановитьСоединение(АдресДляЗП, Прокси, РесурсНаСервере, UserAgentHeaders, СтрокаЗапроса, "", "",,
        КодировкаТекста.UTF8,, POST,,, УдалитьBOM, ТелоЗапросаКурл);

    ДействиеАналитики = вДействиеАналитики;

    Если ТипЗнч(РезультатСоединения) <> Тип("Структура") Тогда
        ТекстСообщения = НСтр("ru='Добавление сотрудников в зарплатный проект не выполнено.';uk='Додавання співробітників до зарплатного проекту не виконано.'");
        стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
        стРезультат.Вставить("Успешно", Ложь);
        Возврат стРезультат
    КонецЕсли;

    Наименование = Фамилия + " " + Имя + " " + Отчество;
    стРезультат = ПарсингДобавитьСотрудникаВГруппу(Наименование, РезультатСоединения);

    стРезультат.Вставить("РезультатСоединения", РезультатСоединения);

    Возврат стРезультат

КонецФункции

Функция ПарсингДобавитьСотрудникаВГруппу(Наименование, РезультатСоединения) Экспорт

    СтруктураОтвета = jsonПрочитатьИнициализация(РезультатСоединения.ТелоОтвета);
    стРезультат = ВыводОшибкиЗапросаЗП(СтруктураОтвета);
    РезультатВозврата = стРезультат.РезультатВозврата;
    Если РезультатВозврата Или Не ЗначениеЗаполнено(СтруктураОтвета) Тогда
        ТекстСообщения = стРезультат.ТекстСообщения;
        стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
        стРезультат.Вставить("Успешно", Ложь);
        Возврат стРезультат
    КонецЕсли;

    Попытка
        status = СтруктураОтвета.data.status;
        ТекстСтатус = НСтр("ru=' Статус ';uk=' Статус '") + status
    Исключение
        status = СтруктураОтвета.status;
        ТекстСтатус = НСтр("ru=' Статус ';uk=' Статус '") + status
    КонецПопытки;
    Если РезультатСоединения.Статус = 200
            И Найти("ok,SUCCESS", СтруктураОтвета.status) > 0 И Найти("ok,SUCCESS", status) > 0 Тогда
        ТекстСообщения = НСтр("ru='Сотрудник ';uk='Співробітник '") + Наименование
            + НСтр("ru=' добавлен в группу. Статус ';uk=' доданий до групи.'") + ТекстСтатус
    Иначе//СтруктураОтвета.status = "ok"
        ТекстСообщения = НСтр("ru='Ошибка добавления сотрудника ';uk='Помилка додавання співробітника '")
            + Наименование + НСтр("ru=' группу. Статус ';uk=' до групи.'") + ТекстСтатус
    КонецЕсли;

    Если ЗначениеЗаполнено(status) Тогда
        //Если Найти("ok,SUCCESS", СтруктураОтвета.status) = 0  Тогда
        Если СтруктураОтвета.status <> "ok" Тогда
            ТекстСтатуса = АнализИВыводОшибокДобавленияСотрудникаВГруппуЗПАК(status)
        КонецЕсли
    КонецЕсли;

    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ТекстСтатуса;

    стРезультат.Вставить("ТекстСообщения", ТекстСообщения);
    стРезультат.Вставить("СтруктураОтвета", СтруктураОтвета);
    стРезультат.Вставить("Успешно", Истина);
    Возврат стРезультат

КонецФункции

Функция АнализИВыводОшибокДобавленияСотрудникаВГруппуЗПАК(КодОшибки) Экспорт

    сзСтатусЗаписиВедомостиЗПИсх = Новый СписокЗначений;
    ТекстСтатуса = НСтр("ru = 'Внутренняя ошибка.';uk='Внутрішня помилка.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("CANT_OPEN_TECH_ACC", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Карта не Приватбанка уже добавлена в один из проектов. Карта друого банка может быть только в одном проекте.';uk='Картку не Приватбанку вже додано в один з проектів. Картка іншого банку може бути тільки в одному проекті.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("TOO_MANY_PAYERS_FOREIGN_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'У юридического лица нет открытого зарплатного проекта.';uk='У юридичної особи немає відкритого зарплатного проекту.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("SALARY_PROJECT_NOT_FOUND", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Зачисление невозможно. ІНН указан неправильно.';uk='Зарахування неможливе. ІПН зазначено невірно.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("MISMATCH_INN", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Зачисление невозможно. Этот ІНН уже существует в зарплатном проекте с другим номером карты.';uk='Зарахування неможливе. Цей ІПН вже існує в зарплатному проекті з іншим номером картки.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("PAYER_ON_ANOTHER_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'По указанным данным клиент не найден.';uk='За вказаними даними клієнта не знайдено.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("CLIENT_NOT_FOUND", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Зачисление невозможно. Табельный номер указан неправильно.';uk='Зарахування неможливе. Табельний номер зазначено невірно.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("WRONG_TAB_NUMBER", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Зачисление невозможно. Карта не является картой Приватбанка.';uk='Зарахування неможливе. Картка не є карткою Приватбанку.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("FOREIGN_BANK_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Возникла внутренняя ошибка.';uk='Виникла внутрішня помилка.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("L_INTERNAL_ERROR", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Возникла внутренняя ошибка.';uk='Виникла внутрішня помилка.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("E_MANAGEPAYER_ERROR", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Указан некорректный ІНН клиента.';uk='Вказано некоректний ІПН клієнта.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("WRONG_INN", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'По указанному номеру счета карта не найдена.';uk='За вказаним номером рахунка картки не знайдено.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("WRONG_IBAN", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Неправильный номер карты.';uk='Невірний номер картки.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("WRONG_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Введенный ІНН не совпадает с ІНН по карте.';uk='Введений ІПН не збігається з ІПН на картці.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("MISMATCH_INN", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Карта не является картой для выплат.';uk='Картка не є карткою для виплат.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("NOT_KDV_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Плательщик не найден.';uk='Платника не знайдено.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("PROJECT_NOT_FOUND", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Получатель уже добавлен раньше.';uk='Одержувача вже додано раніше.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("RECEIVER_ALREADY_EXIST", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Получатель не найден.';uk='Одержувача не знайдено.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("RECEIVER_NOT_FOUND", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Для дальнейшей работы необходимо активировать карту.';uk='Для подальшої роботи необхідно активувати картку.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("TO_MANY_PAYERS_CLEAR_CARD", ТекстСтатуса);
    ТекстСтатуса = НСтр("ru = 'Карта не привязана к клиенту.';uk='Картку не прив`язано до клієнта.'");
    сзСтатусЗаписиВедомостиЗПИсх.Добавить("CLEAR_CARD", ТекстСтатуса);

    НайденныйСтатус = сзСтатусЗаписиВедомостиЗПИсх.НайтиПоЗначению(КодОшибки);
    Если НайденныйСтатус <> Неопределено Тогда
        Возврат НайденныйСтатус.Представление
    КонецЕсли;
    ТекстСтатуса = НСтр("ru='Неизвестный статус ';uk='Невідомий статус '") + КодОшибки;
    СообщениеПользователю(ТекстСтатуса);
    Возврат ТекстСтатуса

КонецФункции

//------------- Подпись SmartID ----------------------

Функция ОтправкаПодписьSmartID(тСписокДокументов, ТипДок) Экспорт//, СтрокаТЧ) Экспорт

    //Отправка запроса на подпись
    ДействиеАналитики = "ПодписьSmartID";

    СтруктураВозврата = Новый Структура;
    СтруктураВозврата.Вставить("status","");
    СтруктураВозврата.Вставить("clientId","");
    СтруктураВозврата.Вставить("operationId","");

    //Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
    //    ХэшДокумента = EncodeURL(Base64Строка(Новый ДвоичныеДанные(ИмяФайлаВыгрузки)))
    //Иначе
    //    Возврат СтруктураВозврата
    //КонецЕсли;

    РесурсНаСервере = "/api/smartid/sign";
    СтрокаЗапроса = "{
        //|""clientId"":""P24B_550E8400-E29b-41D4-A716-446657450000"",    
        //|""time"":" + Формат(ТекущаяДата(), "ДФ=гг-ММ-дд ЧЧ:мм:сс") + ",
        |""originatorDescription"":""P24B"",
        |""operationDescription"":""Подпись финансовых документов"",
        |""operationDescriptions"":[";

    ФлагНаличияОтметокДокументов = Ложь;
    ФлагНаличияoperationDescriptions = Ложь;
    СтрокаЗапросаДок = "";
    Для каждого СтрокаТЧ Из ЭтотОбъект[тСписокДокументов] Цикл
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;
        ФлагНаличияОтметокДокументов = Истина;
        //    наименования
        //ИндексОбъекта = СписокДокументов.Индекс(СтрокаТЧ);
        ИндексОбъекта = ЭтотОбъект[тСписокДокументов].Индекс(СтрокаТЧ);
        //СтрокаЗапроса = СтрокаЗапроса + ?(ИндексОбъекта > 0, ", ", "") + """" + СтрокаТЧ.ИмяДокумента + """";//НаименованиеОтчета
        СтрокаЗапросаДок = СтрокаЗапросаДок + ?(ЗначениеЗаполнено(СтрокаЗапросаДок), ", ", "") + """" + СтрокаТЧ.ИмяДокумента + """";//НаименованиеОтчета
        ФлагНаличияoperationDescriptions = Истина
    КонецЦикла;
    СтрокаЗапроса = СтрокаЗапроса + СтрокаЗапросаДок;

    Если Не ФлагНаличияОтметокДокументов Тогда
        ТекстСообщения = НСтр("ru = 'Отсутствуют документы для подписи SmartID.';uk='Відсутні документи для підпису SmartID.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь
    КонецЕсли;

    Если Не ФлагНаличияoperationDescriptions Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка наличия operationDescriptions при отправке запроса на подпись SmartID.';uk='Помилка наявності operationDescriptions при відправці запиту на підпис SmartID.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь
    КонецЕсли;

    //    подпись построчно из ТЧ СписокДокументов
    //СтрокаЗапроса = СтрокаЗапроса + СтрокаТЧ.ИмяДокумента;
    СтрокаЗапроса = СтрокаЗапроса + "],
        |""documents"":[";//"documents (или hashes)"

    ФлагНаличияdocuments = Ложь;
    СтрокаЗапросаХэш = "";
    ЕстьДублиДляИнтВыбора = Ложь;
    КолСтрокСДублями = 0;
    КолДокДляОбработки = 0;
    Для каждого СтрокаТЧ Из ЭтотОбъект[тСписокДокументов] Цикл
        Если НЕ СтрокаТЧ.Флажок Тогда
            Продолжить;
        КонецЕсли;    
        //    документ или хэш
        //хеш документа берется локально - неправильно
        //ИндексОбъекта = СписокДокументов.Индекс(СтрокаТЧ);
        //СтрокаЗапроса = СтрокаЗапроса + ?(ИндексОбъекта > 0, ", ", "") + """" + СтрокаТЧ.XML + """"
        //ХэшДокумента = EncodeURL(Base64Строка(Новый ДвоичныеДанные(ИмяФайлаВыгрузки)));//ИмяФайлаОтчета//ИмяPDFФайлаДокумента
        //ХэшДокумента = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаВыгрузки));//ИмяФайлаОтчета//ИмяPDFФайлаДокумента

        //Если сзДокДубли.Количество() = 1 Тогда
        //    ИдДокумента = сзДокДубли[0].Значение;
        //    СтрокаТЧ.ИдДокумента = ИдДокумента;
        //    сзДокДубли.Очистить()
        //ИначеЕсли сзДокДубли.Количество() > 1 Тогда
        //    Возврат Истина//выбрать интерактивно документ-дубль
        //Иначе
            ИдДокумента = СтрокаТЧ.ИдДокумента;
            Если Не ЗначениеЗаполнено(ИдДокумента) Тогда
                ПроверитьСтатусДокументаПоСтроке(СтрокаТЧ, ТипДок)
            КонецЕсли;
            ИдДокумента = СтрокаТЧ.ИдДокумента;
            Если Не ЗначениеЗаполнено(ИдДокумента) Тогда
                Если СтрокаТЧ.КартинкаСтатуса = 3 И ЗначениеЗаполнено(СтрокаТЧ.ТекстОшибки) Тогда
                    //Есть дубли//для выбора документа из списка дублей для подписи SmartId
                    //СтруктураОтвета = jsonПрочитатьИнициализация(СтрокаТЧ.ТекстОшибки);
                    ////сзДокДубли.Очистить();
                    //Для каждого ДокДубль Из СтруктураОтвета.documents Цикл
                    //    ПредставлениеДокДубль = ДокДубль.ORIGINAL_DOC_NAME + " " + ДокДубль.CREATE_DATE + " " + ДокДубль.OKPO_SENDER + " " + ДокДубль.AMOUNT;
                    //    сзДокДубли.Добавить(ДокДубль.ID, ПредставлениеДокДубль);
                    //КонецЦикла;
                    //Возврат Истина//выбрать интерактивно документ-дубль
                    ТекстСообщения = НСтр("ru = 'В строке ';uk='В рядку '") + СтрокаТЧ.НомерСтроки + НСтр("ru = ' есть дубли.';uk=' є дублі.'");
                    СообщениеПользователю(ТекстСообщения);
                    ЕстьДублиДляИнтВыбора = Истина;
                    КолСтрокСДублями = КолСтрокСДублями + 1
                Иначе
                    ТекстСообщения = НСтр("ru = 'id документа не заполнено. Документ в строке ';uk='id документа не заповнений. Документ в рядку '")
                        + СтрокаТЧ.НомерСтроки
                        + НСтр("ru = ' пропущен. Прочитайте статус документа или отправьте документ.';uk=' пропущений. Прочитайте статус документа або відправте документ.'");
                    СообщениеПользователю(ТекстСообщения, Ложь);
                    Продолжить
                КонецЕсли
            КонецЕсли;
        //КонецЕсли;

        //Основной документ должен быть в работе со статусом “Сохранен” или во входящих со статусом “Подписан контрагентом”
        СписокДопустимыхДляПодписиСтатусов = НСтр("ru='Проверен и сохранен (в работе)';uk='Перевірений та збережений (в роботі)'")
            + "," + НСтр("ru = 'Подписан получателем';uk = 'Підписаний отримувачем'")
            + "," + НСтр("ru = 'Подписан контрагентом';uk = 'Підписаний контрагентом'")
            + "," + НСтр("ru = 'В работе';uk = 'В роботі'")
            + "," + НСтр("ru = 'Есть дубли';uk = 'Є дублі'");
        Если Найти(СписокДопустимыхДляПодписиСтатусов, СтрокаТЧ.СтатусДокумента) = 0 Тогда
            ТекстСообщения = НСтр("ru = 'Для подписи статус документа в строке ';uk='Для підпису статус документа в рядку '")
                + СтрокаТЧ.НомерСтроки + НСтр("ru = ' должен быть `Сохранен` или `Подписан контрагентом`.';uk=' повинен бути `Збережений` або `Підписаний контрагентом`.'")
                + Символы.ПС + НСтр("ru = ' Документ пропущен.';uk=' Документ пропущений.'");
            СообщениеПользователю(ТекстСообщения);
            //СтрокаТЧ.Флажок = Ложь;
            Продолжить
        КонецЕсли;

        КолДокДляОбработки = КолДокДляОбработки + 1;

        //XMLДокумента = ПолучитьТекстXMLПоФинДок(ИдДокумента, "", ТекущаяДата());
        ХэшДокумента = ПолучитьТекстB64XMLПоФинДок(ИдДокумента, ТекущаяДата());
        Если Не ЗначениеЗаполнено(ХэшДокумента) Тогда//XMLДокумента
            ТекстСообщения = НСтр("ru = 'Документ в строке %НомерСтроки% пропущен.';uk='Документ в рядку %НомерСтроки% пропущений.'");
            ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить
        КонецЕсли;
        //ПолноеИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
        //ТекстДок = Новый ТекстовыйДокумент;
        //ТекстДок.УстановитьТекст(XMLДокумента);
        //ТекстДок.Записать(ПолноеИмяВременногоФайла);
        ////ХэшДокумента = Base64Строка(Новый ДвоичныеДанные(ПолноеИмяВременногоФайла));//ИмяФайлаОтчета//ИмяPDFФайлаДокумента
        //ХэшДокумента = СтрЗаменить(СтрЗаменить(Base64Строка(Новый ДвоичныеДанные(ПолноеИмяВременногоФайла)), Символы.ВК, ""), Символы.ПС, "");

        СтрокаЗапросаХэш = СтрокаЗапросаХэш + ?(ЗначениеЗаполнено(СтрокаЗапросаХэш), ", ", "") + """" + ХэшДокумента + """";
        ФлагНаличияdocuments = Истина
    КонецЦикла;

    Если КолДокДляОбработки = 0 Тогда
        ТекстСообщения = НСтр("ru = 'Нет документов для подписи.';uk='Немає документів для підпису.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь
    КонецЕсли;

    Если ЕстьДублиДляИнтВыбора Тогда
        ТекстСообщения = НСтр("ru = 'Существует ';uk='Існує '") + КолСтрокСДублями
            + НСтр("ru = ' строк с дублями. Выберите в каждой строке в колонке `Список дублей`, где есть дубли, из списка отмеченных документов для подписи.';uk=' рядків з дублями. Оберіть в кожному рядку в колонці `Список дублів`, деє дублі, з списку позначених документ для підпису.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь
    КонецЕсли;

    ТекстСообщения = НСтр("ru = 'Подписываем ';uk='Підписуємо '") + КолДокДляОбработки + НСтр("ru = ' документов.';uk=' документів.'");
    СообщениеПользователю(ТекстСообщения);

    СтрокаЗапроса = СтрокаЗапроса + СтрокаЗапросаХэш;
    СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, Символы.ПС, "");
    СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, Символы.ВК, "");

    Если Не ФлагНаличияdocuments Тогда
        ТекстСообщения = НСтр("ru = 'Ошибка наличия documents при отправке запроса на подпись SmartID.';uk='Помилка наявності documents при відправці запиту на підпис SmartID.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат Ложь
    КонецЕсли;

    СтрокаЗапроса = СтрокаЗапроса + "],
        |""signatureAlgorithmName"":""DSTU4145"",
        |""signatureFormat"":""PKCS7""
        |}";
    ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(СтрокаЗапроса);
    ТелоЗапросаКурл = """" + ТелоЗапросаКурл + """";
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ПС, "");
    ТелоЗапросаКурл = СтрЗаменить(ТелоЗапросаКурл, Символы.ВК, "");

    UserAgentHeaders = ОпределитьUserAgentHeaders();

    ДопЗаголовки = Новый ТаблицаЗначений;

    Post = Истина;
    Кодировка = КодировкаТекста.UTF8;
    УдалитьBOM = Истина;
    ////Если НЕ ПоддерживаетсяTLS12 Или ФлажокИспользоватьКурлВсегда Тогда
    ////    //с курл
    ////    //Кодировка = КодировкаТекста.ANSI;
    ////    //УдалитьBOM = Ложь
    ////    Кодировка = КодировкаТекста.UTF8;
    ////    УдалитьBOM = Истина
    ////Иначе
    ////    //без курл
    ////    Кодировка = КодировкаТекста.UTF8;
    ////    УдалитьBOM = Истина
    ////КонецЕсли;

    стРезультат = УстановитьСоединение(АдресПодписиSmartID, Прокси, РесурсНаСервере, UserAgentHeaders,
        СтрокаЗапроса, "", "", ДопЗаголовки, Кодировка, , Post, , , УдалитьBOM, ТелоЗапросаКурл);

    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат СтруктураВозврата
    Иначе
        Статус = стРезультат.Статус;
        Location = стРезультат.Location;
        ТелоОтвета = стРезультат.ТелоОтвета
    КонецЕсли;

    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на подпись SmartID.';uk='Помилка відправки запиту на підпис SmartID.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат СтруктураВозврата;
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

    СтруктураВозврата.status = СтруктураОтвета.status;
    СтруктураВозврата.clientId = СтруктураОтвета.clientId;
    СтруктураВозврата.operationId = СтруктураОтвета.operationId;

    Возврат СтруктураВозврата

КонецФункции

Функция ПолучитьТекстB64XMLПоФинДок(ИдДокумента, КонПериода)

    ТекстXML = "";

    ИнтернетАдрес = АдресДокументооборота;
    РесурсНаСервере = "/api/proxy/edoc/journal/get-base64/" + ИдДокумента + "?okpo=" + ПолучитьКодОрганизации();//из реквизита обработки//ПолучитьКодОрганизации(КонПериода, Организация);
    СтрокаЗапроса = "";
    ДействиеЛогированияЛок = "ПолучитьТекстXMLвB64ЭДОАК";
    ДопЗаголовки = Новый ТаблицаЗначений;

    POST = Ложь;
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    
    стРезультат = УстановитьСоединение(ИнтернетАдрес, Прокси, РесурсНаСервере, UserAgentHeaders,
        СтрокаЗапроса, "", "", ДопЗаголовки, , , POST);

    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        ЕстьОшибки = Истина;
        Возврат "";
    Иначе
        Статус = стРезультат.Статус;
        ТелоОтвета = стРезультат.ТелоОтвета
    КонецЕсли;

    ТекстОшибки = АнализИВыводОшибокЭДОАК(Статус, ТелоОтвета);
    Если ЗначениеЗаполнено(ТекстОшибки) Тогда
        СообщениеПользователю(ТекстОшибки, Ложь)
    КонецЕсли;

    // если не успешно сообщим ошибку
    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на получение XML текста документа в Base64. ID = !';uk='Помилка відправки запиту на отримання XML тексту документа в Base64. ID = !'") + ИдДокумента;
        СообщениеПользователю(ТекстСообщения);
        ЕстьОшибки = Истина;
        Возврат "";
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(ТелоОтвета);
    Попытка
        ЗначениеТегаERROR = СтруктураОтвета.ERROR;
        ТекстСообщения = НСтр("ru = 'Ошибка при получении XML в Base64 по ОКПО ';uk='Помилка при отриманні XML в Base64 по ЄДРПОУ '")
            + ПолучитьКодОрганизации()//ПолучитьКодОрганизации(КонПериода, Организация)
            + Символы.ПС + "ERROR " + ЗначениеТегаERROR;
        СообщениеПользователю(ТекстСообщения);
    Исключение
    КонецПопытки;

    Попытка
        ТекстXML = СтруктураОтвета.originalDoc
    Исключение
        ТекстXML = ""
    КонецПопытки;

    Возврат ТекстXML;

КонецФункции

Функция ПроверкаСтатусаПодписиSmartID() Экспорт

//***
    ДействиеАналитики = "ПроверкаСтатусаПодписиSmartID";

    //    Проверка статуса подписи, получение подписанных данных
    СтруктураОтветаСтатусаПодписиSmartID = Новый Структура;
    
    РесурсНаСервере = "/api/smartid/sign-status";//"/api/external/sign-status";
    СтрокаЗапроса = "{""clientId"": """ + ПараметрыПроверкиСтатусаПодписи.clientId + """, ""operationId"": """
        + ПараметрыПроверкиСтатусаПодписи.operationId + """}";
    ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(СтрокаЗапроса);
    UserAgentHeaders = ОпределитьUserAgentHeaders();
    ДопЗаголовки = Новый ТаблицаЗначений;
    Post = Истина;
    
    стРезультат = УстановитьСоединение(АдресПодписиSmartID, Прокси, РесурсНаСервере, UserAgentHeaders,
        СтрокаЗапроса, "", "", ДопЗаголовки, , , Post);

    Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
        Возврат СтруктураОтветаСтатусаПодписиSmartID
    Иначе
        Статус = стРезультат.Статус;
        Location = стРезультат.Location;
        ТелоОтвета = стРезультат.ТелоОтвета
    КонецЕсли;

    Если Статус <> 200 Тогда            
        ТекстСообщения = НСтр("ru = 'Ошибка отправки запроса на проверку статуса подписи SmartID.';uk='Помилка відправки запиту на перевірку стутса підпису SmartID.'");
        СообщениеПользователю(ТекстСообщения);
        Возврат СтруктураОтветаСтатусаПодписиSmartID
    КонецЕсли;

    СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);
    //СтруктураОтветаСтатусаПодписиSmartID.status = СтруктураОтвета.status;
    //Если стРезультат.status = "2" Тогда
    //    м_signatures = СтруктураОтвета.signatures;
    //    Для каждого ЭлементМассива Из м_signatures Цикл
    //        СтруктураОтветаСтатусаПодписиSmartID.signatures = Новый Структура;//signatures;
    //        СтруктураОтветаСтатусаПодписиSmartID.Вставить("hash","");
    //        СтруктураОтветаСтатусаПодписиSmartID.Вставить("signature","");
    //        СтруктураОтветаСтатусаПодписиSmartID.Вставить("signedDocument","");
    //        //СтруктураОтветаСтатусаПодписиSmartID.hash = СтруктураОтвета.hash;
    //        //СтруктураОтветаСтатусаПодписиSmartID.signature = СтруктураОтвета.signature;
    //        //СтруктураОтветаСтатусаПодписиSmartID.signedDocument = СтруктураОтвета.signedDocument;
    //    КонецЕсли
    //КонецЕсли;

    Возврат СтруктураОтвета

КонецФункции

Функция ОтправитьПодписанныйДокументSmartID(СтруктураОтветаСтатусаПодписиSmartID, вСписокДокументов) Экспорт

    //Отправка подписанного документа
//***
    //Основной документ должен быть в работе со статусом “Сохранен” или во входящих со статусом “Подписан контрагентом”
    ДействиеАналитики = "ОтправкаПодписанногоДокументаSmartID";

    СтруктураВозврата = Новый Структура;
    //СтруктураВозврата.Вставить("status","");
    //СтруктураВозврата.Вставить("clientId","");
    //СтруктураВозврата.Вставить("operationId","");

    //Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
    //    ХэшДокумента = EncodeURL(Base64Строка(Новый ДвоичныеДанные(ИмяФайлаВыгрузки)))
    //Иначе
    //    Возврат СтруктураВозврата
    //КонецЕсли;

    //    обязательные параметры:
    //file=Подписанный документ (в base64)
    //okpo=ОКПО текущего контрагента
    //id=ID подписываемого документа
    i = 0;
    мПодписи = СтруктураОтветаСтатусаПодписиSmartID.signatures;//[hash,signature,signedDocument]
    Для каждого ПодписьДок Из мПодписи Цикл

        //Попытка
        //    Пока Не ЭтотОбъект[вСписокДокументов][i].Флажок Цикл
        //        i = i + 1
        //    КонецЦикла;
        //Исключение
        //    ТекстСообщения = НСтр("ru = 'Ошибка инкремента подписи SmartID.';uk='Помилка інкременту підпису SmartID.'");
        //    СообщениеПользователю(ТекстСообщения);
        //    Возврат СтруктураВозврата
        //КонецПопытки;

        //СтрокаТЧ = ЭтотОбъект[вСписокДокументов][i];
        НомерСтрокиТЧ = сзСопоставленнаяСтрокаПодписи[i].Значение;
        СтрокаТЧ = ЭтотОбъект[вСписокДокументов][НомерСтрокиТЧ - 1];
        КодЕДРПОУОрганизации = ПолучитьКодОрганизации();//НайтиКодОрганизации(ТекущаяДата(), Организация);
        //Попытка
        //    //    ..., ЗиКБУ, ОСМД
        //    КодЕДРПОУКонтрагента = СтрокаТЧ.Контрагент.КодПоЕДРПОУ
        //    КодЕДРПОУОрганизации
        //Исключение
        //    Попытка
        //        //    ББУ, КУБУ
        //        КодЕДРПОУКонтрагента = СтрокаТЧ.Контрагент.КодЕДРПОУ
        //    Исключение
        //        Попытка
        //            //    АА
        //            КодЕДРПОУКонтрагента = СтрокаТЧ.Контрагент.ЕДРПОУ
        //        Исключение
        //            КодЕДРПОУКонтрагента = ""
        //        КонецПопытки
        //    КонецПопытки
        //КонецПопытки;
        ИдДокумента = СтрокаТЧ.ИдДокумента;

        //Если Не ЗначениеЗаполнено(КодЕДРПОУКонтрагента) Тогда
        //    ТекстСообщения = НСтр("ru = 'ЕДРПОУ контрагента не заполнено. Документ не подписан. Документ в строке ';uk='ЕГРПОУ контрагента не заповнений. Документ не підписаний. Документ в рядку '")
        Если Не ЗначениеЗаполнено(КодЕДРПОУОрганизации) Тогда
            ТекстСообщения = НСтр("ru = 'ЕДРПОУ организации не заполнено. Документ не подписан. Документ в строке ';uk='ЕГРПОУ організації не заповнений. Документ не підписаний. Документ в рядку '")
                + СтрокаТЧ.НомерСтроки + НСтр("ru = ' пропущен.';uk=' пропущений.'");
            СообщениеПользователю(ТекстСообщения);
            Продолжить
        КонецЕсли;
        Если Не ЗначениеЗаполнено(ИдДокумента) Тогда
            ТекстСообщения = НСтр("ru = 'id документа не заполнено. Документ в строке ';uk='id документа не заповнений. Документ в рядку '")
                + СтрокаТЧ.НомерСтроки + НСтр("ru = ' пропущен. Прочитайте статус документа или отправьте документ.';uk=' пропущений. Прочитайте статус документа або відправте документ.'");
            СообщениеПользователю(ТекстСообщения);
            Продолжить
        КонецЕсли;

        // отправка ранее подписанного
        //РесурсНаСервере = "/api/proxy/edoc/loader/sendSignedDocToRecipient?id=" + ИдДокумента
        //        + "&okpo=" + КодЕДРПОУОрганизации;
        //СтрокаЗапроса = "";
        //ТелоЗапросаКурл = ""

        РесурсНаСервере = "/api/proxy/edoc/loader/upload-signed-b64";
        СтрокаЗапроса = "&file=" + EncodeURL(ПодписьДок.signedDocument)
            //+ (СтрЗаменить(СтрЗаменить(ПодписьДок.signedDocument, Символы.ВК, ""),Символы.ПС , ""))//Base64Строка(
            + "&okpo=" + КодЕДРПОУОрганизации + "&id=" + ИдДокумента;//КодЕДРПОУКонтрагента
        //ТелоЗапросаКурл = ЭкранироватьДвойныеКавычки(СтрокаЗапроса);
        //ТелоЗапросаКурл = "&file=" + ПодписьДок.signedDocument
        //    //EncodeURL(СтрЗаменить(СтрЗаменить(ПодписьДок.signedDocument, Символы.ВК, ""),Символы.ПС , ""))//Base64Строка(
        //    + "&okpo=" + КодЕДРПОУОрганизации + "&id=" + ИдДокумента;//КодЕДРПОУКонтрагента
        ТелоЗапросаКурл = """&file=" + ПодписьДок.signedDocument + "&okpo=" + КодЕДРПОУОрганизации + "&id=" + ИдДокумента + """";

        Если ФлагПодписатьБезОтправки Тогда
            СуффиксЗапроса = "?notSendToRecipient=true";
            РесурсНаСервере = РесурсНаСервере + СуффиксЗапроса
        КонецЕсли;

//ДанныеЗапроса = "&uploadedFileB64=" + EncodeURL(СтрЗаменить(СтрЗаменить(Base64Строка(Новый ДвоичныеДанные(ПутьКПДФ)), Символы.ВК, ""),Символы.ПС , ""))
//    + "&uploadedFileName=" + EncodeURL(СтрокаТЗ.ИмяДокумента)
//    + "&okpo=" + КодПоЕДРПОУ
//    + "&recipientOkpo=" + СтрокаТЗ.ОКПО
//    + "&recipientName=" + СтрокаТЗ.НаименованиеКонтрагента
//    + "&documentDate=" + Формат(СтрокаТЗ.Дата, "ДФ=yyyy-MM-dd")
//    + "&amount=" + Формат(СтрокаТЗ.СуммаДокумента, "ЧГ=0;ЧДЦ=2;ЧРД=.")
//    + "&documentNum=" + (СтрокаТЗ.Номер);

    //Для каждого СтрокаТЧ Из СписокДокументов Цикл
    //    Если НЕ СтрокаТЧ.Флажок Тогда
    //        Продолжить;
    //    КонецЕсли;    
    //    //    наименования
    //    ИндексОбъекта = СписокДокументов.Индекс(СтрокаТЧ);
    //    СтрокаЗапроса = СтрокаЗапроса + ?(ИндексОбъекта > 0, ", ", "") + """" + СтрокаТЧ.ИмяДокумента + """"//НаименованиеОтчета
    //КонецЦикла;

    ////    подпись построчно из ТЧ СписокДокументов
    ////СтрокаЗапроса = СтрокаЗапроса + СтрокаТЧ.ИмяДокумента;
    //СтрокаЗапроса = СтрокаЗапроса + "],
    //    |""documents"":[";//"documents (или hashes)"

    //Для каждого СтрокаТЧ Из СписокДокументов Цикл
    //    Если НЕ СтрокаТЧ.Флажок Тогда
    //        Продолжить;
    //    КонецЕсли;    
    //    //    документ или хэш
    //    ИндексОбъекта = СписокДокументов.Индекс(СтрокаТЧ);
    //    ХэшДокумента = EncodeURL(Base64Строка(Новый ДвоичныеДанные(ИмяФайлаВыгрузки)));//ИмяФайлаОтчета//ИмяPDFФайлаДокумента
    //    //СтрокаЗапроса = СтрокаЗапроса + ?(ИндексОбъекта > 0, ", ", "") + """" + СтрокаТЧ.XML + """"
    //    СтрокаЗапроса = СтрокаЗапроса + ?(ИндексОбъекта > 0, ", ", "") + """" + ХэшДокумента + """"
    //КонецЦикла;

    //СтрокаЗапроса = СтрокаЗапроса + ХэшДокумента;//СтрокаТЧ.XML + """";

    //СтрокаЗапроса = СтрокаЗапроса + "],
    //    |""signatureAlgorithmName"":""DSTU4145"",
    //    |""signatureFormat"":""PKCS7""
    //    |}";
        UserAgentHeaders = ОпределитьUserAgentHeaders();
        ДопЗаголовки = Новый ТаблицаЗначений;
    //ДопЗаголовки.Колонки.Добавить("Заголовок");
    //ДопЗаголовки.Колонки.Добавить("ЗначениеЗаголовка");
    //НоваяСтрокаДопЗаголовки = ДопЗаголовки.Добавить();
    //НоваяСтрокаДопЗаголовки.Заголовок = "content-type";
    //НоваяСтрокаДопЗаголовки.ЗначениеЗаголовка = "application/json";
        Post = Истина;
        Кодировка = КодировкаТекста.UTF8;
        УдалитьBOM = Истина;
        CUrlEnCode = Истина;

        стРезультат = УстановитьСоединение(АдресПодписиSmartID, Прокси, РесурсНаСервере, UserAgentHeaders,
            СтрокаЗапроса, "", "", ДопЗаголовки, Кодировка, , Post,,, УдалитьBOM, ТелоЗапросаКурл, CUrlEnCode);

        Если ТипЗнч(стРезультат) <> Тип("Структура") Тогда
            Возврат СтруктураВозврата
        Иначе
            Статус = стРезультат.Статус;
            Location = стРезультат.Location;
            ТелоОтвета = стРезультат.ТелоОтвета
        КонецЕсли;

        Если Статус <> 200 Тогда            
            ТекстСообщения = НСтр("ru = 'Ошибка отправки документа на подпись SmartID.';uk='Помилка відправки документу на підпис SmartID.'");
            СообщениеПользователю(ТекстСообщения);
            Продолжить
        КонецЕсли;

        СтруктураОтвета = jsonПрочитатьИнициализация(стРезультат.ТелоОтвета);

        i = i + 1
    КонецЦикла;

    //СтруктураВозврата.status = СтруктураОтвета.status;
    //СтруктураВозврата.clientId = СтруктураОтвета.clientId;
    //СтруктураВозврата.operationId = СтруктураОтвета.operationId;

    Возврат СтруктураОтвета

КонецФункции

//------------- end Подпись SmartID ----------------------

Функция АнализИВыводОшибокЭДОАК(Статус, ТекстОтвета) Экспорт

    АнализИВыводОшибокАК(Статус, ТекстОтвета)

КонецФункции

Функция АнализИВыводОшибокАК(Статус, ТекстОтвета) Экспорт

    ТекстОшибки = "";

    Если Найти(ТекстОтвета, "{") > 0 Тогда
        //    Json
        Попытка
            СтруктураОтвета = jsonПрочитатьИнициализация(ТекстОтвета);
        Исключение
        КонецПопытки;
        Попытка
            type = СтруктураОтвета.code
        Исключение
        КонецПопытки;
        Попытка
            code = СтруктураОтвета.ТекстОтветаmessage;
        Исключение
        КонецПопытки;
        Попытка
            codeSSO = СтруктураОтвета.requestId;
        Исключение
        КонецПопытки;
        Попытка
            codeTrace = СтруктураОтвета.serviceCode
        Исключение
        КонецПопытки;
    Иначе
        //    xml
        //    ошибки транзакций и остатков (выписки)
        type = спцПрочитатьУзел("type", ТекстОтвета);
        code = спцПрочитатьУзел("code", ТекстОтвета);
        codeSSO = спцПрочитатьУзел("codeSSO", ТекстОтвета);
        codeTrace = спцПрочитатьУзел("codeTrace", ТекстОтвета);
        //    ошибки создания платежа
        error_code = спцПрочитатьУзел("error_code", ТекстОтвета);//"код ошибки"
        descr = спцПрочитатьУзел("descr", ТекстОтвета);//"текстовое описание"
        parameter = спцПрочитатьУзел("parameter", ТекстОтвета);//{список неправильных параметров со значениями}
    КонецЕсли;

    Если ЗначениеЗаполнено(type) Или ЗначениеЗаполнено(code) Или ЗначениеЗаполнено(codeSSO) Или ЗначениеЗаполнено(codeTrace) Тогда

        сзОшибкиЗП = Новый СписокЗначений;

        //    ошибки транзакций и остатков (выписки)
        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0001. Неправильная сессия приходит в заголовке “Reason”.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0001. Невірна сесія надходить в заголовку “Reason”.'");
        сзОшибкиЗП.Добавить("E0001", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0002. Техническая ошибка при разборе json запроса.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0002. Технічна помилка при розборі json запиту.'");
        сзОшибкиЗП.Добавить("E0002", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0003. В запросе нет json`а.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0003. У запиті немає json`а.'");
        сзОшибкиЗП.Добавить("E0003", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0004. Не передали ЕКБ ИД клиента.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0004. Не передали ЄКБ ІД клієнта.'");
        сзОшибкиЗП.Добавить("E0004", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0005. Не передали ЕКБ ИД пользователя.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0005. Не передали ЄКБ ІД користувача.'");
        сзОшибкиЗП.Добавить("E0005", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0006. Нет прав для получения транзакций за период.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0006. Немає прав для отримання транзакцій за період.'");
        сзОшибкиЗП.Добавить("E0006", ТекстОшибки);

        ТекстОшибки = НСтр("ru = Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0016. 'Нет прав для получения транзакций за текущий опер. день.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0016. Немає прав для отримання транзакцій за поточний опер. день.'");
        сзОшибкиЗП.Добавить("E0016", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0017. Нет прав для получения транзакций за прошлый опер. день.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0017. Немає прав для отримання транзакцій за минулий опер. день.'");
        сзОшибкиЗП.Добавить("E0017", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0020. Нет прав на получение счетов на выписку.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0020. Немає прав для отримання рахунків на виписку.'");
        сзОшибкиЗП.Добавить("E0020", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0007. Ошибка при получении сессии проминя.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0007. Помилка при отриманні сесії проміня.'");
        сзОшибкиЗП.Добавить("E0007", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0008. Техническая ошибка сервиса CL_INF.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0008. Технічна помилка сервісу CL_INF.'");
        сзОшибкиЗП.Добавить("E0008", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E0009. ЕКБ не вернул данных по связям.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0009. ЄКБ не повернув даних по зв'язкам.'");
        сзОшибкиЗП.Добавить("E0009", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки %КодОшибки%. ЕКБ не вернул данных по клиенту.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки %КодОшибки%. ЄКБ не повернув даних по клієнту.'");
        сзОшибкиЗП.Добавить("E0010", ТекстОшибки);
        сзОшибкиЗП.Добавить("E0013", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E00012. ЕКБ не вернул связей по клиенту.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0012. ЄКБ не повернув зв'язків по клієнту'");
        сзОшибкиЗП.Добавить("E0012", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки E00015. Данного пользователя нет в связях с юридическим лицом.';uk='Зверніться у службу підтримки по тел.3700 и повідомте: Код ошибки E0015. Даного користувача немає в зв'язках з юридичною особою.'");
        сзОшибкиЗП.Добавить("E0015", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Некорректно задана дата начала поиска транзакций.';uk='Некоректно задана дата початку пошуку транзакцій.'");
        сзОшибкиЗП.Добавить("E0018", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Некорректно задана дата окончания поиска транзакций.';uk='Некоректно задана дата закінчення пошуку транзакцій.'");
        сзОшибкиЗП.Добавить("E0019", ТекстОшибки);

        //    ошибки создания платежа
        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0386. Код приложения %parameter% не поддерживается (относится к параметру consumer).';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0386. Код додатка %parameter% не підтримується (відноситься до параметру consumer).'");
        сзОшибкиЗП.Добавить("PL0386", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0553. Не указан характер платежа.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0553. Не вказаний характер платежу.'");
        сзОшибкиЗП.Добавить("PL0553", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки SW0263. Вы не указали референс платежа.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки SW0263. Ви не вказали референс платежу.'");
        сзОшибкиЗП.Добавить("SW0263", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Валюта %parameter% отсутствует в справочнике валют.';uk='Валюта %parameter% відсутня в довіднику валют.'");
        сзОшибкиЗП.Добавить("PL0007", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Сумма платежа должна быть больше 0.00.';uk='Сума платежу повинна бути більше 0.00.'");
        сзОшибкиЗП.Добавить("PL0005", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Не указан номер документа.';uk='Не вказаний номер документа.'");
        сзОшибкиЗП.Добавить("PL0004", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Назначение платежа указано неправильно.';uk='Призначення платежу вказано невірно.'");
        сзОшибкиЗП.Добавить("PL0026", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0014. Cчет плательщика не указан или отсутствует в справочнике счетов.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0014. Рахунок платника не зазначено або відсутній в довіднику рахунків.'");
        сзОшибкиЗП.Добавить("PL0014", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0020. Cчет получателя не указан или отсутствует в справочнике счетов.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0020. Рахунок одержувача не зазначено або відсутній в довіднику рахунків.'");
        сзОшибкиЗП.Добавить("PL0020", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Указаны одновременно и карта и счет получателя.';uk='Вказані одночасно і карта і рахунок одержувача.'");
        сзОшибкиЗП.Добавить("PL0429", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0049. Не установлен курс валюты %parameter%.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0049. Не встановлений курс валюти %parameter%.'");
        сзОшибкиЗП.Добавить("PL0049", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Клиентская дата не более %parameter% дней!';uk='Клієнтська дата не більше %parameter% днів!'");
        сзОшибкиЗП.Добавить("PL0344", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Валюта счета отправителя отличается от валюты документа.';uk='Валюта рахунку відправника відрізняється від валюти документа.'");
        сзОшибкиЗП.Добавить("PL0029", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Операция возможна только для клиентских счетов.';uk='Операція можлива тільки для клієнтських рахунків.'");
        сзОшибкиЗП.Добавить("PL0903", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0234. Запрещен дебет %parameter%.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0234. Заборонено дебет% parameter%.'");
        сзОшибкиЗП.Добавить("PL0234", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Валюта платежа не должна быть %parameter%.';uk='Валюта платежу не повинна бути %parameter%.'");
        сзОшибкиЗП.Добавить("PL0290", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'ОКПО/ИНН плательщика указан некорректно.';uk='ОКПО / ІПН платника вказано некоректно.'");
        сзОшибкиЗП.Добавить("PL0308", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'ОКПО/ИНН получателя указан некорректно.';uk='ОКПО / ІПН отримувача вказано некоректно.'");
        сзОшибкиЗП.Добавить("PL0309", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Счет %parameter% не найден.';uk='Рахунок% parameter% не найден.'");
        сзОшибкиЗП.Добавить("PL0207", ТекстОшибки);

        ТекстОшибки = НСтр("ru = '%parameter% закрыт\заблокирован.';uk='%Parameter% закритий \ заблокований.'");
        сзОшибкиЗП.Добавить("PL0106", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Запрещен кредит %parameter%.';uk='Заборонено кредит %parameter%.'");
        сзОшибкиЗП.Добавить("PL0235", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0256. Гасите на %parameter%.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0256. Гасіть на %parameter%.'");
        сзОшибкиЗП.Добавить("PL0256", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Запрещен кредит %parameter%.';uk='Заборонено кредит %parameter%.'");
        сзОшибкиЗП.Добавить("PL0235", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Укажите в получателе номер карты!';uk='Вкажіть у отримувачі номер карти!'");
        сзОшибкиЗП.Добавить("PL0311", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0224. Филиал %parameter% не найден.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0224. Філія %parameter% не найден.'");
        сзОшибкиЗП.Добавить("PL0224", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки KL0014. Не найдена запись для клиента %parameter%.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки KL0014. Чи не знайдено запис для клієнта %parameter%.'");
        сзОшибкиЗП.Добавить("KL0014", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0046. Валютный платеж на чужой банк должен быть внутренним.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0046. Валютний платіж на чужій банк повинен бути внутрішнім.'");
        сзОшибкиЗП.Добавить("PL0046", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Обратитесь в службу поддержки по тел.3700 и сообщите: Код ошибки PL0011. МФО получателя %parameter% отсутствует в справочнике МФО.';uk='Зверніться в службу підтримки по тел.3700 і повідомте: Код помилки PL0011. МФО отримувача %parameter% відсутній в довіднику МФО.'");
        сзОшибкиЗП.Добавить("PL0011", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Наименование счета получателя указано неправильно.';uk='Найменування рахунку отримувача вказано неправильно.'");
        сзОшибкиЗП.Добавить("PL0022", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Ключ счета получателя указан неверно. Правильный ключ - %parameter%.';uk='Ключ рахунку отримувача вказано невірно. Правильний ключ - %parameter%.'");
        сзОшибкиЗП.Добавить("PL0023", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Неправильный код ОКПО %parameter%.';uk='Неправильний код ОКПО %parameter%.'");
        сзОшибкиЗП.Добавить("KL0015", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Некорректная длина счета %parameter%.';uk='Некоректна довжина рахунку %parameter%.'");
        сзОшибкиЗП.Добавить("PL0906", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Не указан номер паспорта.';uk='Не вказаний номер паспорта.'");
        сзОшибкиЗП.Добавить("PL0041", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Запрещенная корреспонденция СЭП НБУ!';uk='Заборонена кореспонденція СЕП НБУ!'");
        сзОшибкиЗП.Добавить("PL0244", ТекстОшибки);

        ТекстОшибки = НСтр("ru = 'Запрещено использование средств для нецелевых платежей!';uk='Заборонено використання коштів для нецільових платежів!'");
        сзОшибкиЗП.Добавить("PL0424", ТекстОшибки);

        //    ошибки транзакций и остатков (выписки)
        НайденнаяОшибка = сзОшибкиЗП.НайтиПоЗначению(code);
        Если НайденнаяОшибка <> Неопределено Тогда
            ТекстОшибки = НайденнаяОшибка.Значение + ", " + НайденнаяОшибка.Представление;
            Если Найти("E0010,E0013", code) > 0 Тогда
                ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КодОшибки%", code)
            КонецЕсли
        Иначе
            ТекстОшибки = НСтр("ru = 'Неизвестная ошибка';uk='Невідома помилка'")
                + ": type=" + type + ", code=" + code + ", codeSSO=" + codeSSO + ", codeTrace=" + codeTrace
        КонецЕсли;

        //    ошибки создания платежа
        НайденнаяОшибка = сзОшибкиЗП.НайтиПоЗначению(error_code);
        Если НайденнаяОшибка <> Неопределено Тогда
            ТекстОшибки = НайденнаяОшибка.Значение + ", " + НайденнаяОшибка.Представление;
            //ТекстОшибки = СтрЗаменить(ТекстОшибки, "%parameter%", parameter)
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%parameter%", "")
        Иначе
            ТекстОшибки = НСтр("ru = 'Неизвестная ошибка';uk='Невідома помилка'")
                + ": error_code=" + error_code + ", descr=" + descr + ", parameter=" + parameter
        КонецЕсли

    КонецЕсли;

    Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
        Попытка
            чСтатус = Число(Лев(Статус, 3))
        Исключение
            чСтатус = 0
        КонецПопытки;
        Если Найти("500,502", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Внутренняя ошибка сервера. Попробуйте позже.';uk='Внутрішня помилка сервера. Спробуйте пізніше.'")
        КонецЕсли;
        Если Найти("503,504", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Сервис временно недоступен. Попробуйте позже.';uk='Сервіс тимчасово недоступний. Спробуйте пізніше.'")
        КонецЕсли;
        Если Найти("451", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Отсутствует выписочная роль данного физлица у выбранного юрлица. Установите доступ пользователя к выписке в Приват24.';uk='Відсутня виписочна роль даної фізособи у обраної юрособи. Встановіть доступ користувача до виписки в Приват24.'")
        КонецЕсли;
        Если Найти("400", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Неверный формат запроса либо отсутствует один или несколько обязательных заголовков.';uk='Невірний формат запиту або відсутній один або декілька обов'язкових заголовків.'")
        КонецЕсли;
        Если Найти("401", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Неверные учетные данные для доступа (id и/или token).';uk='Невірні облікові дані для доступу (id та/або token).'")
        КонецЕсли;
        Если Найти("403", Статус) > 0 Тогда
            ТекстОшибки = ТекстОшибки + НСтр("ru='Учетная запись отключена через интерфейс управления Автоклиентами Приват24 для бизнеса';uk='Обліковий запис відключений через інтерфейс управління Автоклієнтами Приват24 для бізнесу'")
        КонецЕсли
    КонецЕсли;

    Возврат ТекстОшибки

КонецФункции    //    АнализИВыводОшибокАК(Статус, ТелоОтвета)

Функция ПолучитьКодПоЕДРПОУКонтрагента(Контрагент) Экспорт

    Возврат Контрагент.КодПоЕДРПОУ

КонецФункции

Процедура ПрочитатьЗаполнитьПредприятияАК() Экспорт

    ОчиститьОрганизации = Истина;    
    //ТокеныКомпаний.Очистить();

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;

    НайденныеФайлы = НайтиФайлы(appdata + "\mop24", "*.dat");

    Для каждого ФайлНастроекПриват24 Из НайденныеФайлы Цикл
        //чтение mop-файла
        ТекстДок = Новый ТекстовыйДокумент;
        ТекстДок.Прочитать(ФайлНастроекПриват24.ПолноеИмя, КодировкаТекста.UTF8);
        тПараметрыПредприятия = ТекстДок.ПолучитьТекст();
        Если Не ЗначениеЗаполнено(тПараметрыПредприятия) Тогда
            ТекстСообщения = "Файл " + ФайлНастроекПриват24.ПолноеИмя + НСтр("ru=' пуст.';uk=' порожній.'");
            СообщениеПользователю(ТекстСообщения, Ложь);
            Продолжить
        КонецЕсли;
        стПараметрыПредприятия = jsonПрочитатьИнициализация(тПараметрыПредприятия);
        edrpou = стПараметрыПредприятия.edrpou;
        name = стПараметрыПредприятия.name;
        data = стПараметрыПредприятия.data;

        //    заполнение ТокеныКомпаний
        СтрокаТЗТокены = ТокеныКомпаний.Найти(edrpou, "КодКомпании");
        Если СтрокаТЗТокены = Неопределено Тогда
            НоваяСтрокаТЗТокены = ТокеныКомпаний.Добавить();
            НоваяСтрокаТЗТокены.КодКомпании = edrpou;
            НоваяСтрокаТЗТокены.ТокенАвтоклиента = data
        Иначе
            //СтрокаТЗТокены.КодКомпании = edrpou;
            СтрокаТЗТокены.ТокенАвтоклиента = data
        КонецЕсли

    КонецЦикла

КонецПроцедуры    //    ПрочитатьЗаполнитьПредприятияАК()

Процедура УдалитьФайлыMop(ОКПО) Экспорт

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;

    УдалитьФайлы(appdata + "\mop24", СокрЛП(ОКПО) + ".dat")

КонецПроцедуры

Процедура ЗаписатьIdTokenВMOP(ОКПО, Id, IdToken) Экспорт

    ТекстДок = Новый ТекстовыйДокумент;
    ДобавляемаяОрганизация = НайтиОрганизацию(ОКПО, Ложь);
    Если ДобавляемаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
        ТекстСообщения = НСтр("ru='Не найдена организация с кодом ЕГРПОУ ';uk='Не знайдена організація з кодом ЕДРПОУ '")
            + ОКПО + НСтр("ru='. Добавьте организацию в справочник Организации.';uk='. Додайте організацію в довідник Організації.'");
        СообщениеПользователю(ТекстСообщения, Ложь);
        //Возврат
    КонецЕсли;
    ДобавляемаяОрганизацияСкорректированная = ЗаменитьНедопустимыеСимволыJson(ДобавляемаяОрганизация);
    ПараметрыПредприятия = "{""name"":""" + ДобавляемаяОрганизацияСкорректированная
        + """, ""edrpou"":""" + ЗаменитьНедопустимыеСимволыJson(ОКПО) + """, ""data"":""" + Id + IdToken + """}";
    ТекстДок.ДобавитьСтроку(ПараметрыПредприятия);

    Если Не ЗначениеЗаполнено(appdata) Тогда
        appdata = ПеременнаяОкружения("%APPDATA%")
    КонецЕсли;
    ИмяКаталог_mop24 = appdata + "\mop24\";
    Каталог_mop24 = Новый Файл(ИмяКаталог_mop24);
    Если Не Каталог_mop24.Существует() Тогда
        Попытка
            СоздатьКаталог(ИмяКаталог_mop24);
            //ТекстСообщения = НСтр("ru='Создан каталог ';uk='Створений каталог '") + ИмяКаталог_mop24;
            //СообщениеПользователю(ТекстСообщения, Ложь)
        Исключение
            ТекстСообщения = НСтр("ru='Не удается создать каталог ';uk='Не вдається створити каталог '")
                + ИмяКаталог_mop24 + " " + Символы.ПС + ОписаниеОшибки() + Символы.ПС
                + НСтр("ru='Установите необходимые права или зайдите под правами администратора.';uk='Встановіть необхідні права або зайдіть під правами адміністратора.'");
            СообщениеПользователю(ТекстСообщения, Ложь);
            Возврат
        КонецПопытки
    КонецЕсли;
    
    ПолноеИмяФайла = ИмяКаталог_mop24 + ОКПО + ".dat";
    Попытка
        ТекстДок.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
        ТекстСообщения = НСтр("ru='Добавлены организация ';uk='Додані организація '")
            + ?(ЗначениеЗаполнено(ДобавляемаяОрганизацияСкорректированная), ДобавляемаяОрганизацияСкорректированная + " ,", "")
            + НСтр("ru=' код ЕГРПОУ ';uk=' код ЕДРПОУ '") + ОКПО
            + НСтр("ru=' с авторизационными данными.';uk=' з авторизаційними даними.'");
        СообщениеПользователю(ТекстСообщения, Ложь)
    Исключение
        ОписаниеОшибки = ОписаниеОшибки();
        ТекстСообщения = "Файл " + ПолноеИмяФайла + НСтр("ru=' не создан .';uk=' не створений. '") + ОписаниеОшибки;
        СообщениеПользователю(ТекстСообщения, Ложь);
        Возврат
    КонецПопытки;

    //СписокОрганизаций = ЭлементыФормы.ОрганизацияТокенАК.СписокВыбора;
    //Для каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
    //    Если ОрганизацияИзСписка.Представление = ОрганизацияV3
    //            И Найти(ОрганизацияV3, ЭлементыФормы.ТабличноеПолеБыстраяАвторизация.ТекущаяСтрока.КолонкаОКПО) > 0 Тогда
    //        IdАвтоклиента = Id;
    //        TokenАвтоклиента = IdToken;
    //        ТекстСообщения = НСтр("ru='Изменен';uk='Змінен'")
    //            + ?(ЗначениеЗаполнено(Id), НСтр("ru='ы Id и Token';uk='і Id та Token'"), НСтр("ru=' IdToken';uk='ий IdToken'"))
    //            + НСтр("ru=' текущей организации.';uk=' поточної організації.'");
    //        СообщениеПользователю(ТекстСообщения, Ложь);
    //        Прервать
    //    КонецЕсли
    //КонецЦикла;

    ДобавляемаяОрганизация = "";
    IdToken = "";

    //Если ЗаписьИзКнопкиДобЕдТокен Тогда
    //    ДобавитьОрганизациюАК("")
    //КонецЕсли;

    //ПрочитатьЗаполнитьПредприятияАК(Ложь)

    ПеренестиИдАКВТокен()

КонецПроцедуры

Функция ЗаменитьНедопустимыеСимволыJson(ВхТекст) Экспорт

    Текст = СокрЛП(ВхТекст);
    Текст = СтрЗаменить(Текст, Символ(8), "\b");//\b  Backspace (ascii code 08)
    Текст = СтрЗаменить(Текст, Символы.ПФ, "\f");//\f  Form feed (ascii code 0C)
    Текст = СтрЗаменить(Текст, Символы.ПС, "\n");//\n  New line
    Текст = СтрЗаменить(Текст, Символы.ВК, "\r");//\r  Carriage return
    Текст = СтрЗаменить(Текст, Символы.Таб, "\t");//\t  Tab
    Текст = СтрЗаменить(Текст, Символы.ВТаб, "\v");//
    Текст = СтрЗаменить(Текст, "\""", "\\");//\"  Double quote
    Текст = СтрЗаменить(Текст, "/", "\/");//\\  Backslash character
    Текст = СтрЗаменить(Текст, """", "\""");

    Возврат Текст

КонецФункции

Процедура ПроверкаТабличноеПолеБыстраяАвторизация(ВыводитьСообщения = Ложь) Экспорт

    Если ВыводитьСообщения Тогда
        Для каждого СтрокаТЗ Из ТокеныКомпаний Цикл
            ТекстСообщения = "";
            СчетчикПолей = 0;
            //Если Не ЗначениеЗаполнено(СтрокаТЗ.КолонкаОрганизация) Тогда
            //    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), ", ", "") + НСтр("ru='Организация';uk='Організація'");
            //    СчетчикПолей = СчетчикПолей + 1
            //КонецЕсли;
            Если Не ЗначениеЗаполнено(СтрокаТЗ.КодКомпании) Тогда
                ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), ", ", "") + НСтр("ru='ЕГРПОУ';uk='ЕДРПОУ'");
                СчетчикПолей = СчетчикПолей + 1
            КонецЕсли;
            //Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдАвтоклиента) Тогда
            //    ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), ", ", "") + НСтр("ru='Id';uk='Id'");
            //    СчетчикПолей = СчетчикПолей + 1
            //КонецЕсли;
            Если Не ЗначениеЗаполнено(СтрокаТЗ.ТокенАвтоклиента) Тогда
                ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), ", ", "") + НСтр("ru='Token';uk='Token'");
                СчетчикПолей = СчетчикПолей + 1
            КонецЕсли;
            Если ЗначениеЗаполнено(ТекстСообщения) Тогда
                ТекстСообщения = НСтр("ru='Заполните пол';uk='Заповніть пол'")
                    + ?(СчетчикПолей = 1, НСтр("ru='е ';uk='е '"), НСтр("ru='я ';uk='я '")) + ТекстСообщения
                    + НСтр("ru=' в строке ';uk=' в рядку '") + СтрокаТЗ.НомерСтроки
                    + ?(СчетчикПолей = 1, НСтр("ru=' пустое.';uk=' порожнє.'"), НСтр("ru=' пусты.';uk=' порожні.'"));
                СообщениеПользователю(ТекстСообщения, Ложь)
            КонецЕсли
        КонецЦикла
    КонецЕсли;

    //    удаление возможных пустых строк
    Для каждого СтрокаТЗ Из ТокеныКомпаний Цикл
        Если Не ЗначениеЗаполнено(СтрокаТЗ.КодКомпании) И Не ЗначениеЗаполнено(СтрокаТЗ.ИдАвтоклиента)// И Не Не ЗначениеЗаполнено(СтрокаТЗ.КолонкаОрганизация)
                И Не ЗначениеЗаполнено(СтрокаТЗ.ТокенАвтоклиента) Тогда
            ТокеныКомпаний.Удалить(СтрокаТЗ)
        КонецЕсли
    КонецЦикла;

    //вызвана однократно
    //ПеренестиИдАКВТокен()

КонецПроцедуры

//Временная процедура
Процедура ПеренестиИдАКВТокен()

    Для каждого СтрокаТЗ Из ТокеныКомпаний Цикл
        Если ЗначениеЗаполнено(СтрокаТЗ.ИдАвтоклиента) Тогда
            СтрокаТЗ.ТокенАвтоклиента = СтрокаТЗ.ТокенАвтоклиента + СтрокаТЗ.ИдАвтоклиента;
            СтрокаТЗ.ИдАвтоклиента = ""
        КонецЕсли
    КонецЦикла

КонецПроцедуры

 */